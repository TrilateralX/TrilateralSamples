// Generated by Haxe 4.3.0-rc.1+88ebbd0
#ifndef INCLUDED_hxGeomAlgo_Tess2
#define INCLUDED_hxGeomAlgo_Tess2

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(hxGeomAlgo,HxPointData)
HX_DECLARE_CLASS1(hxGeomAlgo,ResultType)
HX_DECLARE_CLASS1(hxGeomAlgo,Tess2)
HX_DECLARE_CLASS1(hxGeomAlgo,WindingRule)

namespace hxGeomAlgo{


class HXCPP_CLASS_ATTRIBUTES Tess2_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Tess2_obj OBJ_;
		Tess2_obj();

	public:
		enum { _hx_ClassId = 0x7feea37a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxGeomAlgo.Tess2")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hxGeomAlgo.Tess2"); }

		inline static ::hx::ObjectPtr< Tess2_obj > __new() {
			::hx::ObjectPtr< Tess2_obj > __this = new Tess2_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Tess2_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Tess2_obj *__this = (Tess2_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Tess2_obj), false, "hxGeomAlgo.Tess2"));
			*(void **)__this = Tess2_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Tess2_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Tess2",a1,ee,c2,a0); }

		static  ::Dynamic tesselate(::Array< ::Dynamic> contours, ::hxGeomAlgo::WindingRule windingRule, ::hxGeomAlgo::ResultType resultType,::hx::Null< int >  polySize,::hx::Null< int >  vertexDim,::Array< Float > normal);
		static ::Dynamic tesselate_dyn();

		static  ::Dynamic _hx_union(::Array< ::Dynamic> contoursA,::Array< ::Dynamic> contoursB, ::hxGeomAlgo::ResultType resultType,::hx::Null< int >  polySize,::hx::Null< int >  vertexDim);
		static ::Dynamic _hx_union_dyn();

		static  ::Dynamic intersection(::Array< ::Dynamic> contoursA,::Array< ::Dynamic> contoursB, ::hxGeomAlgo::ResultType resultType,::hx::Null< int >  polySize,::hx::Null< int >  vertexDim);
		static ::Dynamic intersection_dyn();

		static  ::Dynamic difference(::Array< ::Dynamic> contoursA,::Array< ::Dynamic> contoursB, ::hxGeomAlgo::ResultType resultType,::hx::Null< int >  polySize,::hx::Null< int >  vertexDim);
		static ::Dynamic difference_dyn();

		static ::Array< ::Dynamic> convertResult(::Array< Float > vertices,::Array< int > elements, ::hxGeomAlgo::ResultType resultType,int polySize,::Array< ::Dynamic> out);
		static ::Dynamic convertResult_dyn();

};

} // end namespace hxGeomAlgo

#endif /* INCLUDED_hxGeomAlgo_Tess2 */ 
