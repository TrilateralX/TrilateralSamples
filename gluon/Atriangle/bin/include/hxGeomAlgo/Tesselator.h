// Generated by Haxe 4.3.0-rc.1+88ebbd0
#ifndef INCLUDED_hxGeomAlgo_Tesselator
#define INCLUDED_hxGeomAlgo_Tesselator

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(hxGeomAlgo,ResultType)
HX_DECLARE_CLASS1(hxGeomAlgo,Tesselator)
HX_DECLARE_CLASS1(hxGeomAlgo,WindingRule)
HX_DECLARE_CLASS2(hxGeomAlgo,_Tess2,Dict)
HX_DECLARE_CLASS2(hxGeomAlgo,_Tess2,PriorityQ)
HX_DECLARE_CLASS2(hxGeomAlgo,_Tess2,TessFace)
HX_DECLARE_CLASS2(hxGeomAlgo,_Tess2,TessHalfEdge)
HX_DECLARE_CLASS2(hxGeomAlgo,_Tess2,TessMesh)
HX_DECLARE_CLASS2(hxGeomAlgo,_Tess2,TessVertex)

namespace hxGeomAlgo{


class HXCPP_CLASS_ATTRIBUTES Tesselator_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Tesselator_obj OBJ_;
		Tesselator_obj();

	public:
		enum { _hx_ClassId = 0x5a18b431 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxGeomAlgo.Tesselator")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hxGeomAlgo.Tesselator"); }
		static ::hx::ObjectPtr< Tesselator_obj > __new();
		static ::hx::ObjectPtr< Tesselator_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Tesselator_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Tesselator",ee,8f,43,83); }

		 ::hxGeomAlgo::_Tess2::TessMesh mesh;
		::Array< Float > normal;
		::Array< Float > sUnit;
		::Array< Float > tUnit;
		::Array< Float > bmin;
		::Array< Float > bmax;
		 ::hxGeomAlgo::WindingRule windingRule;
		 ::hxGeomAlgo::_Tess2::Dict dict;
		 ::hxGeomAlgo::_Tess2::PriorityQ pq;
		 ::hxGeomAlgo::_Tess2::TessVertex event;
		int vertexIndexCounter;
		::Array< Float > vertices;
		::Array< int > vertexIndices;
		int vertexCount;
		::Array< int > elements;
		int elementCount;
		Float dot_(::Array< Float > u,::Array< Float > v);
		::Dynamic dot__dyn();

		void normalize_(::Array< Float > v);
		::Dynamic normalize__dyn();

		int longAxis_(::Array< Float > v);
		::Dynamic longAxis__dyn();

		void computeNormal_(::Array< Float > norm);
		::Dynamic computeNormal__dyn();

		void checkOrientation_();
		::Dynamic checkOrientation__dyn();

		void projectPolygon_();
		::Dynamic projectPolygon__dyn();

		void addWinding_( ::hxGeomAlgo::_Tess2::TessHalfEdge eDst, ::hxGeomAlgo::_Tess2::TessHalfEdge eSrc);
		::Dynamic addWinding__dyn();

		bool tessellateMonoRegion_( ::hxGeomAlgo::_Tess2::TessMesh mesh, ::hxGeomAlgo::_Tess2::TessFace face);
		::Dynamic tessellateMonoRegion__dyn();

		bool tessellateInterior_( ::hxGeomAlgo::_Tess2::TessMesh mesh);
		::Dynamic tessellateInterior__dyn();

		void refineDelaunay_( ::hxGeomAlgo::_Tess2::TessMesh mesh);
		::Dynamic refineDelaunay__dyn();

		void discardExterior_( ::hxGeomAlgo::_Tess2::TessMesh mesh);
		::Dynamic discardExterior__dyn();

		void setWindingNumber_( ::hxGeomAlgo::_Tess2::TessMesh mesh,int value,bool keepOnlyBoundary);
		::Dynamic setWindingNumber__dyn();

		int getNeighbourFace_( ::hxGeomAlgo::_Tess2::TessHalfEdge edge);
		::Dynamic getNeighbourFace__dyn();

		void outputPolymesh_( ::hxGeomAlgo::_Tess2::TessMesh mesh, ::hxGeomAlgo::ResultType resultsType,int polySize,int vertexDim);
		::Dynamic outputPolymesh__dyn();

		void outputContours_( ::hxGeomAlgo::_Tess2::TessMesh mesh,int vertexDim);
		::Dynamic outputContours__dyn();

		void addContour(int vertexDim,::Array< Float > vertices);
		::Dynamic addContour_dyn();

		bool tesselate( ::hxGeomAlgo::WindingRule windingRule, ::hxGeomAlgo::ResultType resultType,int polySize,int vertexDim,::Array< Float > normal);
		::Dynamic tesselate_dyn();

};

} // end namespace hxGeomAlgo

#endif /* INCLUDED_hxGeomAlgo_Tesselator */ 
