// Generated by Haxe 4.3.0-rc.1+88ebbd0
#ifndef INCLUDED_kitGL_gluon_Glwrapper
#define INCLUDED_kitGL_gluon_Glwrapper

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_66c800784bc86d2f
#define INCLUDED_66c800784bc86d2f
#include "linc_glfw.h"
#endif
HX_DECLARE_CLASS3(gluon,webgl,native,GLContext)
HX_DECLARE_CLASS2(kitGL,gluon,Glwrapper)

namespace kitGL{
namespace gluon{


class HXCPP_CLASS_ATTRIBUTES Glwrapper_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Glwrapper_obj OBJ_;
		Glwrapper_obj();

	public:
		enum { _hx_ClassId = 0x434f4a16 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kitGL.gluon.Glwrapper")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kitGL.gluon.Glwrapper"); }
		static ::hx::ObjectPtr< Glwrapper_obj > __new();
		static ::hx::ObjectPtr< Glwrapper_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Glwrapper_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Glwrapper",ae,19,a1,af); }

		bool startupFullscreen;
		::cpp::Pointer<  GLFWwindow > window;
		Float pixelRatio;
		::String initFail;
		::String windowFail;
		 ::Dynamic onFrame;
		Dynamic onFrame_dyn() { return onFrame;}
		 ::Dynamic onStop;
		Dynamic onStop_dyn() { return onStop;}
		 ::gluon::webgl::native::GLContext gl;
		void terminate();
		::Dynamic terminate_dyn();

		void mainLoop();
		::Dynamic mainLoop_dyn();

		void onGLFWError(int code,::String message);
		::Dynamic onGLFWError_dyn();

		void onResize(::cpp::Pointer<  GLFWwindow > window,int width,int height);
		::Dynamic onResize_dyn();

		void onKey(int key,int scanCode,int action,int mods);
		::Dynamic onKey_dyn();

		void onMousePosChange(Float x,Float y);
		::Dynamic onMousePosChange_dyn();

		void onMouseButton(int button,int action,int mods);
		::Dynamic onMouseButton_dyn();

};

} // end namespace kitGL
} // end namespace gluon

#endif /* INCLUDED_kitGL_gluon_Glwrapper */ 
