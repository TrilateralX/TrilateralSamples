// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_matrix_UV
#define INCLUDED_trilateral3_matrix_UV

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_707d577000d0e738_42_new)
HX_DECLARE_CLASS2(trilateral3,matrix,UV)

namespace trilateral3{
namespace matrix{


class HXCPP_CLASS_ATTRIBUTES UV_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef UV_obj OBJ_;
		UV_obj();

	public:
		enum { _hx_ClassId = 0x3c060785 };

		void __construct(Float u,Float v);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="trilateral3.matrix.UV")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"trilateral3.matrix.UV"); }

		inline static ::hx::ObjectPtr< UV_obj > __new(Float u,Float v) {
			::hx::ObjectPtr< UV_obj > __this = new UV_obj();
			__this->__construct(u,v);
			return __this;
		}

		inline static ::hx::ObjectPtr< UV_obj > __alloc(::hx::Ctx *_hx_ctx,Float u,Float v) {
			UV_obj *__this = (UV_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UV_obj), false, "trilateral3.matrix.UV"));
			*(void **)__this = UV_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_707d577000d0e738_42_new)
HXLINE(  44)		( ( ::trilateral3::matrix::UV)(__this) )->v = ((Float)0.);
HXLINE(  43)		( ( ::trilateral3::matrix::UV)(__this) )->u = ((Float)0.);
HXLINE(  46)		( ( ::trilateral3::matrix::UV)(__this) )->u = u;
HXLINE(  47)		( ( ::trilateral3::matrix::UV)(__this) )->v = v;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~UV_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("UV",61,4a,00,00); }

		Float u;
		Float v;
};

} // end namespace trilateral3
} // end namespace matrix

#endif /* INCLUDED_trilateral3_matrix_UV */ 
