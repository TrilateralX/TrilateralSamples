// Generated by Haxe 4.3.0-rc.1+88ebbd0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_
#include <dsHelper/flatInterleave/_FloatColorTriangles/FloatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferView
#include <typedarray/ArrayBufferView.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferViewBase
#include <typedarray/ArrayBufferViewBase.h>
#endif
#ifndef INCLUDED_typedarray_Float32ArrayImpl
#include <typedarray/Float32ArrayImpl.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_15_get_ax,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_ax",0xf7ee9bca,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_ax","dsHelper/flatInterleave/FloatColorTriangles.hx",15,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_17_set_ax,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_ax",0xc436f03e,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_ax","dsHelper/flatInterleave/FloatColorTriangles.hx",17,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_23_get_ay,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_ay",0xf7ee9bcb,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_ay","dsHelper/flatInterleave/FloatColorTriangles.hx",23,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_25_set_ay,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_ay",0xc436f03f,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_ay","dsHelper/flatInterleave/FloatColorTriangles.hx",25,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_31_get_az,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_az",0xf7ee9bcc,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_az","dsHelper/flatInterleave/FloatColorTriangles.hx",31,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_33_set_az,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_az",0xc436f040,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_az","dsHelper/flatInterleave/FloatColorTriangles.hx",33,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_40_get_redA,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_redA",0xd0d32f63,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_redA","dsHelper/flatInterleave/FloatColorTriangles.hx",40,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_42_set_redA,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_redA",0x7f3088d7,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_redA","dsHelper/flatInterleave/FloatColorTriangles.hx",42,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_80_get_bx,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_bx",0xf7ee9ca9,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_bx","dsHelper/flatInterleave/FloatColorTriangles.hx",80,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_82_set_bx,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_bx",0xc436f11d,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_bx","dsHelper/flatInterleave/FloatColorTriangles.hx",82,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_88_get_by,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_by",0xf7ee9caa,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_by","dsHelper/flatInterleave/FloatColorTriangles.hx",88,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_90_set_by,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_by",0xc436f11e,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_by","dsHelper/flatInterleave/FloatColorTriangles.hx",90,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_96_get_bz,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_bz",0xf7ee9cab,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_bz","dsHelper/flatInterleave/FloatColorTriangles.hx",96,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_98_set_bz,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_bz",0xc436f11f,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_bz","dsHelper/flatInterleave/FloatColorTriangles.hx",98,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_105_get_redB,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_redB",0xd0d32f64,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_redB","dsHelper/flatInterleave/FloatColorTriangles.hx",105,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_107_set_redB,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_redB",0x7f3088d8,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_redB","dsHelper/flatInterleave/FloatColorTriangles.hx",107,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_145_get_cx,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_cx",0xf7ee9d88,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_cx","dsHelper/flatInterleave/FloatColorTriangles.hx",145,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_147_set_cx,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_cx",0xc436f1fc,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_cx","dsHelper/flatInterleave/FloatColorTriangles.hx",147,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_153_get_cy,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_cy",0xf7ee9d89,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_cy","dsHelper/flatInterleave/FloatColorTriangles.hx",153,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_155_set_cy,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_cy",0xc436f1fd,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_cy","dsHelper/flatInterleave/FloatColorTriangles.hx",155,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_161_get_cz,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_cz",0xf7ee9d8a,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_cz","dsHelper/flatInterleave/FloatColorTriangles.hx",161,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_163_set_cz,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_cz",0xc436f1fe,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_cz","dsHelper/flatInterleave/FloatColorTriangles.hx",163,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_170_get_redC,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_redC",0xd0d32f65,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_redC","dsHelper/flatInterleave/FloatColorTriangles.hx",170,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_172_set_redC,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_redC",0x7f3088d9,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_redC","dsHelper/flatInterleave/FloatColorTriangles.hx",172,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_210_triangle,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","triangle",0x9336e4d2,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.triangle","dsHelper/flatInterleave/FloatColorTriangles.hx",210,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_233_adjustWinding,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","adjustWinding",0xee1d9a01,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.adjustWinding","dsHelper/flatInterleave/FloatColorTriangles.hx",233,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_289_moveDelta,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","moveDelta",0x527dd9dd,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.moveDelta","dsHelper/flatInterleave/FloatColorTriangles.hx",289,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_319_fullHit,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","fullHit",0xa24a213a,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.fullHit","dsHelper/flatInterleave/FloatColorTriangles.hx",319,0x64596be3)
namespace dsHelper{
namespace flatInterleave{
namespace _FloatColorTriangles{

void FloatColorTriangles_Impl__obj::__construct() { }

Dynamic FloatColorTriangles_Impl__obj::__CreateEmpty() { return new FloatColorTriangles_Impl__obj; }

void *FloatColorTriangles_Impl__obj::_hx_vtable = 0;

Dynamic FloatColorTriangles_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FloatColorTriangles_Impl__obj > _hx_result = new FloatColorTriangles_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FloatColorTriangles_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x76c05f06;
}

Float FloatColorTriangles_Impl__obj::get_ax( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_15_get_ax)
HXDLIN(  15)		if ((0 >= this1->length)) {
HXDLIN(  15)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  15)		int p = this1->byteOffset;
HXDLIN(  15)		int i = ((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 2);
HXDLIN(  15)		bool _hx_tmp;
HXDLIN(  15)		if ((i >= 0)) {
HXDLIN(  15)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  15)			_hx_tmp = true;
            		}
HXDLIN(  15)		if (_hx_tmp) {
HXDLIN(  15)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  15)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  15)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_ax,return )

Float FloatColorTriangles_Impl__obj::set_ax( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_17_set_ax)
HXLINE(  18)		{
HXLINE(  18)			if ((0 >= this1->length)) {
HXLINE(  18)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  18)			int p = this1->byteOffset;
HXDLIN(  18)			{
HXLINE(  18)				int i = ((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 2);
HXDLIN(  18)				{
HXLINE(  18)					bool _hx_tmp;
HXDLIN(  18)					if ((i >= 0)) {
HXLINE(  18)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  18)						_hx_tmp = true;
            					}
HXDLIN(  18)					if (_hx_tmp) {
HXLINE(  18)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  18)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  18)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  19)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_ax,return )

Float FloatColorTriangles_Impl__obj::get_ay( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_23_get_ay)
HXDLIN(  23)		if ((0 >= this1->length)) {
HXDLIN(  23)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  23)		int p = this1->byteOffset;
HXDLIN(  23)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 1) + 2);
HXDLIN(  23)		bool _hx_tmp;
HXDLIN(  23)		if ((i >= 0)) {
HXDLIN(  23)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  23)			_hx_tmp = true;
            		}
HXDLIN(  23)		if (_hx_tmp) {
HXDLIN(  23)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  23)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  23)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_ay,return )

Float FloatColorTriangles_Impl__obj::set_ay( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_25_set_ay)
HXLINE(  26)		{
HXLINE(  26)			if ((0 >= this1->length)) {
HXLINE(  26)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  26)			int p = this1->byteOffset;
HXDLIN(  26)			{
HXLINE(  26)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 1) + 2);
HXDLIN(  26)				{
HXLINE(  26)					bool _hx_tmp;
HXDLIN(  26)					if ((i >= 0)) {
HXLINE(  26)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  26)						_hx_tmp = true;
            					}
HXDLIN(  26)					if (_hx_tmp) {
HXLINE(  26)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  26)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  26)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  27)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_ay,return )

Float FloatColorTriangles_Impl__obj::get_az( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_31_get_az)
HXDLIN(  31)		if ((0 >= this1->length)) {
HXDLIN(  31)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  31)		int p = this1->byteOffset;
HXDLIN(  31)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 2) + 2);
HXDLIN(  31)		bool _hx_tmp;
HXDLIN(  31)		if ((i >= 0)) {
HXDLIN(  31)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  31)			_hx_tmp = true;
            		}
HXDLIN(  31)		if (_hx_tmp) {
HXDLIN(  31)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  31)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  31)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_az,return )

Float FloatColorTriangles_Impl__obj::set_az( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_33_set_az)
HXLINE(  34)		{
HXLINE(  34)			if ((0 >= this1->length)) {
HXLINE(  34)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  34)			int p = this1->byteOffset;
HXDLIN(  34)			{
HXLINE(  34)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 2) + 2);
HXDLIN(  34)				{
HXLINE(  34)					bool _hx_tmp;
HXDLIN(  34)					if ((i >= 0)) {
HXLINE(  34)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  34)						_hx_tmp = true;
            					}
HXDLIN(  34)					if (_hx_tmp) {
HXLINE(  34)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  34)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  34)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  35)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_az,return )

Float FloatColorTriangles_Impl__obj::get_redA( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_40_get_redA)
HXDLIN(  40)		if ((0 >= this1->length)) {
HXDLIN(  40)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  40)		int p = this1->byteOffset;
HXDLIN(  40)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 3) + 2);
HXDLIN(  40)		bool _hx_tmp;
HXDLIN(  40)		if ((i >= 0)) {
HXDLIN(  40)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  40)			_hx_tmp = true;
            		}
HXDLIN(  40)		if (_hx_tmp) {
HXDLIN(  40)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  40)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  40)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_redA,return )

Float FloatColorTriangles_Impl__obj::set_redA( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_42_set_redA)
HXLINE(  43)		{
HXLINE(  43)			if ((0 >= this1->length)) {
HXLINE(  43)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  43)			int p = this1->byteOffset;
HXDLIN(  43)			{
HXLINE(  43)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 3) + 2);
HXDLIN(  43)				{
HXLINE(  43)					bool _hx_tmp;
HXDLIN(  43)					if ((i >= 0)) {
HXLINE(  43)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  43)						_hx_tmp = true;
            					}
HXDLIN(  43)					if (_hx_tmp) {
HXLINE(  43)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  43)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  43)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  44)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_redA,return )

Float FloatColorTriangles_Impl__obj::get_bx( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_80_get_bx)
HXDLIN(  80)		if ((0 >= this1->length)) {
HXDLIN(  80)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  80)		int p = this1->byteOffset;
HXDLIN(  80)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 7) + 2);
HXDLIN(  80)		bool _hx_tmp;
HXDLIN(  80)		if ((i >= 0)) {
HXDLIN(  80)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  80)			_hx_tmp = true;
            		}
HXDLIN(  80)		if (_hx_tmp) {
HXDLIN(  80)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  80)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  80)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_bx,return )

Float FloatColorTriangles_Impl__obj::set_bx( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_82_set_bx)
HXLINE(  83)		{
HXLINE(  83)			if ((0 >= this1->length)) {
HXLINE(  83)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  83)			int p = this1->byteOffset;
HXDLIN(  83)			{
HXLINE(  83)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 7) + 2);
HXDLIN(  83)				{
HXLINE(  83)					bool _hx_tmp;
HXDLIN(  83)					if ((i >= 0)) {
HXLINE(  83)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  83)						_hx_tmp = true;
            					}
HXDLIN(  83)					if (_hx_tmp) {
HXLINE(  83)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  83)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  83)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  84)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_bx,return )

Float FloatColorTriangles_Impl__obj::get_by( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_88_get_by)
HXDLIN(  88)		if ((0 >= this1->length)) {
HXDLIN(  88)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  88)		int p = this1->byteOffset;
HXDLIN(  88)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 8) + 2);
HXDLIN(  88)		bool _hx_tmp;
HXDLIN(  88)		if ((i >= 0)) {
HXDLIN(  88)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  88)			_hx_tmp = true;
            		}
HXDLIN(  88)		if (_hx_tmp) {
HXDLIN(  88)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  88)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  88)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_by,return )

Float FloatColorTriangles_Impl__obj::set_by( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_90_set_by)
HXLINE(  91)		{
HXLINE(  91)			if ((0 >= this1->length)) {
HXLINE(  91)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  91)			int p = this1->byteOffset;
HXDLIN(  91)			{
HXLINE(  91)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 8) + 2);
HXDLIN(  91)				{
HXLINE(  91)					bool _hx_tmp;
HXDLIN(  91)					if ((i >= 0)) {
HXLINE(  91)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  91)						_hx_tmp = true;
            					}
HXDLIN(  91)					if (_hx_tmp) {
HXLINE(  91)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  91)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  91)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  92)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_by,return )

Float FloatColorTriangles_Impl__obj::get_bz( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_96_get_bz)
HXDLIN(  96)		if ((0 >= this1->length)) {
HXDLIN(  96)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  96)		int p = this1->byteOffset;
HXDLIN(  96)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 9) + 2);
HXDLIN(  96)		bool _hx_tmp;
HXDLIN(  96)		if ((i >= 0)) {
HXDLIN(  96)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  96)			_hx_tmp = true;
            		}
HXDLIN(  96)		if (_hx_tmp) {
HXDLIN(  96)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  96)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  96)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_bz,return )

Float FloatColorTriangles_Impl__obj::set_bz( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_98_set_bz)
HXLINE(  99)		{
HXLINE(  99)			if ((0 >= this1->length)) {
HXLINE(  99)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  99)			int p = this1->byteOffset;
HXDLIN(  99)			{
HXLINE(  99)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 9) + 2);
HXDLIN(  99)				{
HXLINE(  99)					bool _hx_tmp;
HXDLIN(  99)					if ((i >= 0)) {
HXLINE(  99)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  99)						_hx_tmp = true;
            					}
HXDLIN(  99)					if (_hx_tmp) {
HXLINE(  99)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  99)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  99)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 100)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_bz,return )

Float FloatColorTriangles_Impl__obj::get_redB( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_105_get_redB)
HXDLIN( 105)		if ((0 >= this1->length)) {
HXDLIN( 105)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 105)		int p = this1->byteOffset;
HXDLIN( 105)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 10) + 2);
HXDLIN( 105)		bool _hx_tmp;
HXDLIN( 105)		if ((i >= 0)) {
HXDLIN( 105)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN( 105)			_hx_tmp = true;
            		}
HXDLIN( 105)		if (_hx_tmp) {
HXDLIN( 105)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 105)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 105)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_redB,return )

Float FloatColorTriangles_Impl__obj::set_redB( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_107_set_redB)
HXLINE( 108)		{
HXLINE( 108)			if ((0 >= this1->length)) {
HXLINE( 108)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN( 108)			int p = this1->byteOffset;
HXDLIN( 108)			{
HXLINE( 108)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 10) + 2);
HXDLIN( 108)				{
HXLINE( 108)					bool _hx_tmp;
HXDLIN( 108)					if ((i >= 0)) {
HXLINE( 108)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE( 108)						_hx_tmp = true;
            					}
HXDLIN( 108)					if (_hx_tmp) {
HXLINE( 108)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 108)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 108)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 109)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_redB,return )

Float FloatColorTriangles_Impl__obj::get_cx( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_145_get_cx)
HXDLIN( 145)		if ((0 >= this1->length)) {
HXDLIN( 145)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 145)		int p = this1->byteOffset;
HXDLIN( 145)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 14) + 2);
HXDLIN( 145)		bool _hx_tmp;
HXDLIN( 145)		if ((i >= 0)) {
HXDLIN( 145)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN( 145)			_hx_tmp = true;
            		}
HXDLIN( 145)		if (_hx_tmp) {
HXDLIN( 145)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 145)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 145)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_cx,return )

Float FloatColorTriangles_Impl__obj::set_cx( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_147_set_cx)
HXLINE( 148)		{
HXLINE( 148)			if ((0 >= this1->length)) {
HXLINE( 148)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN( 148)			int p = this1->byteOffset;
HXDLIN( 148)			{
HXLINE( 148)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 14) + 2);
HXDLIN( 148)				{
HXLINE( 148)					bool _hx_tmp;
HXDLIN( 148)					if ((i >= 0)) {
HXLINE( 148)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE( 148)						_hx_tmp = true;
            					}
HXDLIN( 148)					if (_hx_tmp) {
HXLINE( 148)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 148)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 148)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 149)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_cx,return )

Float FloatColorTriangles_Impl__obj::get_cy( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_153_get_cy)
HXDLIN( 153)		if ((0 >= this1->length)) {
HXDLIN( 153)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 153)		int p = this1->byteOffset;
HXDLIN( 153)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 15) + 2);
HXDLIN( 153)		bool _hx_tmp;
HXDLIN( 153)		if ((i >= 0)) {
HXDLIN( 153)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN( 153)			_hx_tmp = true;
            		}
HXDLIN( 153)		if (_hx_tmp) {
HXDLIN( 153)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 153)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 153)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_cy,return )

Float FloatColorTriangles_Impl__obj::set_cy( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_155_set_cy)
HXLINE( 156)		{
HXLINE( 156)			if ((0 >= this1->length)) {
HXLINE( 156)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN( 156)			int p = this1->byteOffset;
HXDLIN( 156)			{
HXLINE( 156)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 15) + 2);
HXDLIN( 156)				{
HXLINE( 156)					bool _hx_tmp;
HXDLIN( 156)					if ((i >= 0)) {
HXLINE( 156)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE( 156)						_hx_tmp = true;
            					}
HXDLIN( 156)					if (_hx_tmp) {
HXLINE( 156)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 156)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 156)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 157)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_cy,return )

Float FloatColorTriangles_Impl__obj::get_cz( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_161_get_cz)
HXDLIN( 161)		if ((0 >= this1->length)) {
HXDLIN( 161)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 161)		int p = this1->byteOffset;
HXDLIN( 161)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 16) + 2);
HXDLIN( 161)		bool _hx_tmp;
HXDLIN( 161)		if ((i >= 0)) {
HXDLIN( 161)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN( 161)			_hx_tmp = true;
            		}
HXDLIN( 161)		if (_hx_tmp) {
HXDLIN( 161)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 161)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 161)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_cz,return )

Float FloatColorTriangles_Impl__obj::set_cz( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_163_set_cz)
HXLINE( 164)		{
HXLINE( 164)			if ((0 >= this1->length)) {
HXLINE( 164)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN( 164)			int p = this1->byteOffset;
HXDLIN( 164)			{
HXLINE( 164)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 16) + 2);
HXDLIN( 164)				{
HXLINE( 164)					bool _hx_tmp;
HXDLIN( 164)					if ((i >= 0)) {
HXLINE( 164)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE( 164)						_hx_tmp = true;
            					}
HXDLIN( 164)					if (_hx_tmp) {
HXLINE( 164)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 164)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 164)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 165)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_cz,return )

Float FloatColorTriangles_Impl__obj::get_redC( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_170_get_redC)
HXDLIN( 170)		if ((0 >= this1->length)) {
HXDLIN( 170)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 170)		int p = this1->byteOffset;
HXDLIN( 170)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 17) + 2);
HXDLIN( 170)		bool _hx_tmp;
HXDLIN( 170)		if ((i >= 0)) {
HXDLIN( 170)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN( 170)			_hx_tmp = true;
            		}
HXDLIN( 170)		if (_hx_tmp) {
HXDLIN( 170)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 170)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 170)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_redC,return )

Float FloatColorTriangles_Impl__obj::set_redC( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_172_set_redC)
HXLINE( 173)		{
HXLINE( 173)			if ((0 >= this1->length)) {
HXLINE( 173)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN( 173)			int p = this1->byteOffset;
HXDLIN( 173)			{
HXLINE( 173)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 17) + 2);
HXDLIN( 173)				{
HXLINE( 173)					bool _hx_tmp;
HXDLIN( 173)					if ((i >= 0)) {
HXLINE( 173)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE( 173)						_hx_tmp = true;
            					}
HXDLIN( 173)					if (_hx_tmp) {
HXLINE( 173)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 173)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 173)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 174)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_redC,return )

bool FloatColorTriangles_Impl__obj::triangle( ::typedarray::Float32ArrayImpl this1,Float ax_,Float ay_,Float az_,Float bx_,Float by_,Float bz_,Float cx_,Float cy_,Float cz_){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_210_triangle)
HXLINE( 211)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(this1,ax_);
HXLINE( 212)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(this1,ay_);
HXLINE( 213)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_az(this1,az_);
HXLINE( 214)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(this1,bx_);
HXLINE( 215)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(this1,by_);
HXLINE( 216)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bz(this1,bz_);
HXLINE( 217)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(this1,cx_);
HXLINE( 218)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(this1,cy_);
HXLINE( 219)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cz(this1,cz_);
HXLINE( 221)		bool windingAdjusted = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::adjustWinding(this1);
HXLINE( 222)		if (windingAdjusted) {
HXLINE( 223)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(this1,ax_);
HXLINE( 224)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(this1,ay_);
HXLINE( 225)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(this1,cx_);
HXLINE( 226)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(this1,cy_);
HXLINE( 227)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(this1,bx_);
HXLINE( 228)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(this1,by_);
            		}
HXLINE( 230)		return windingAdjusted;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(FloatColorTriangles_Impl__obj,triangle,return )

bool FloatColorTriangles_Impl__obj::adjustWinding( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_233_adjustWinding)
HXDLIN( 233)		Float _hx_tmp = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN( 233)		Float _hx_tmp1 = (_hx_tmp * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1));
HXDLIN( 233)		Float _hx_tmp2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1);
HXDLIN( 233)		Float _hx_tmp3 = (_hx_tmp1 - (_hx_tmp2 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1)));
HXDLIN( 233)		Float _hx_tmp4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1);
HXDLIN( 233)		Float _hx_tmp5 = (_hx_tmp4 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1));
HXDLIN( 233)		Float _hx_tmp6 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1);
HXDLIN( 233)		Float _hx_tmp7 = (_hx_tmp3 + (_hx_tmp5 - (_hx_tmp6 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1))));
HXDLIN( 233)		Float _hx_tmp8 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1);
HXDLIN( 233)		Float _hx_tmp9 = (_hx_tmp8 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1));
HXDLIN( 233)		Float _hx_tmp10 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN( 233)		return ((_hx_tmp7 + (_hx_tmp9 - (_hx_tmp10 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1)))) > 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,adjustWinding,return )

void FloatColorTriangles_Impl__obj::moveDelta( ::typedarray::Float32ArrayImpl this1,Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_289_moveDelta)
HXLINE( 290)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(this1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1) + dx));
HXLINE( 291)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(this1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1) + dy));
HXLINE( 292)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(this1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1) + dx));
HXLINE( 293)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(this1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1) + dy));
HXLINE( 294)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(this1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1) + dx));
HXLINE( 295)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(this1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1) + dy));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatColorTriangles_Impl__obj,moveDelta,(void))

bool FloatColorTriangles_Impl__obj::fullHit( ::typedarray::Float32ArrayImpl this1,Float px,Float py){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_319_fullHit)
HXLINE( 320)		bool _hx_tmp;
HXDLIN( 320)		bool _hx_tmp1;
HXDLIN( 320)		bool _hx_tmp2;
HXDLIN( 320)		Float _hx_tmp3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN( 320)		Float _hx_tmp4 = ::Math_obj::min(_hx_tmp3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1));
HXDLIN( 320)		if ((px > ::Math_obj::min(_hx_tmp4,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1)))) {
HXLINE( 320)			Float _hx_tmp = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN( 320)			Float _hx_tmp1 = ::Math_obj::max(_hx_tmp,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1));
HXDLIN( 320)			_hx_tmp2 = (px < ::Math_obj::max(_hx_tmp1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1)));
            		}
            		else {
HXLINE( 320)			_hx_tmp2 = false;
            		}
HXDLIN( 320)		if (_hx_tmp2) {
HXLINE( 320)			Float _hx_tmp = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1);
HXDLIN( 320)			Float _hx_tmp2 = ::Math_obj::min(_hx_tmp,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1));
HXDLIN( 320)			_hx_tmp1 = (py > ::Math_obj::min(_hx_tmp2,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1)));
            		}
            		else {
HXLINE( 320)			_hx_tmp1 = false;
            		}
HXDLIN( 320)		if (_hx_tmp1) {
HXLINE( 320)			Float _hx_tmp1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1);
HXDLIN( 320)			Float _hx_tmp2 = ::Math_obj::max(_hx_tmp1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1));
HXDLIN( 320)			_hx_tmp = (py < ::Math_obj::max(_hx_tmp2,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1)));
            		}
            		else {
HXLINE( 320)			_hx_tmp = false;
            		}
HXDLIN( 320)		if (_hx_tmp) {
HXLINE( 320)			return true;
            		}
HXLINE( 321)		Float planeAB = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1) - px);
HXDLIN( 321)		Float planeAB1 = (planeAB * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1) - py));
HXDLIN( 321)		Float planeAB2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1) - px);
HXDLIN( 321)		Float planeAB3 = (planeAB1 - (planeAB2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1) - py)));
HXDLIN( 321)		Float planeBC = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1) - px);
HXDLIN( 321)		Float planeBC1 = (planeBC * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1) - py));
HXDLIN( 321)		Float planeBC2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1) - px);
HXDLIN( 321)		Float planeBC3 = (planeBC1 - (planeBC2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1) - py)));
HXDLIN( 321)		Float planeCA = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1) - px);
HXDLIN( 321)		Float planeCA1 = (planeCA * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1) - py));
HXDLIN( 321)		Float planeCA2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1) - px);
HXDLIN( 321)		Float planeCA3 = (planeCA1 - (planeCA2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1) - py)));
HXDLIN( 321)		int _hx_tmp5 = ::Std_obj::_hx_int((::Math_obj::abs(planeAB3) / planeAB3));
HXDLIN( 321)		if ((_hx_tmp5 == ::Std_obj::_hx_int((::Math_obj::abs(planeBC3) / planeBC3)))) {
HXLINE( 321)			int _hx_tmp = ::Std_obj::_hx_int((::Math_obj::abs(planeBC3) / planeBC3));
HXDLIN( 321)			return (_hx_tmp == ::Std_obj::_hx_int((::Math_obj::abs(planeCA3) / planeCA3)));
            		}
            		else {
HXLINE( 321)			return false;
            		}
HXDLIN( 321)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatColorTriangles_Impl__obj,fullHit,return )


FloatColorTriangles_Impl__obj::FloatColorTriangles_Impl__obj()
{
}

bool FloatColorTriangles_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"get_ax") ) { outValue = get_ax_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_ax") ) { outValue = set_ax_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_ay") ) { outValue = get_ay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_ay") ) { outValue = set_ay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_az") ) { outValue = get_az_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_az") ) { outValue = set_az_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_bx") ) { outValue = get_bx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_bx") ) { outValue = set_bx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_by") ) { outValue = get_by_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_by") ) { outValue = set_by_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_bz") ) { outValue = get_bz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_bz") ) { outValue = set_bz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cx") ) { outValue = get_cx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cx") ) { outValue = set_cx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cy") ) { outValue = get_cy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cy") ) { outValue = set_cy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cz") ) { outValue = get_cz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cz") ) { outValue = set_cz_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fullHit") ) { outValue = fullHit_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_redA") ) { outValue = get_redA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redA") ) { outValue = set_redA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_redB") ) { outValue = get_redB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redB") ) { outValue = set_redB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_redC") ) { outValue = get_redC_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redC") ) { outValue = set_redC_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"triangle") ) { outValue = triangle_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"moveDelta") ) { outValue = moveDelta_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"adjustWinding") ) { outValue = adjustWinding_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FloatColorTriangles_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FloatColorTriangles_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FloatColorTriangles_Impl__obj::__mClass;

static ::String FloatColorTriangles_Impl__obj_sStaticFields[] = {
	HX_("get_ax",40,ec,2f,a3),
	HX_("set_ax",b4,40,78,6f),
	HX_("get_ay",41,ec,2f,a3),
	HX_("set_ay",b5,40,78,6f),
	HX_("get_az",42,ec,2f,a3),
	HX_("set_az",b6,40,78,6f),
	HX_("get_redA",59,09,62,cb),
	HX_("set_redA",cd,62,bf,79),
	HX_("get_bx",1f,ed,2f,a3),
	HX_("set_bx",93,41,78,6f),
	HX_("get_by",20,ed,2f,a3),
	HX_("set_by",94,41,78,6f),
	HX_("get_bz",21,ed,2f,a3),
	HX_("set_bz",95,41,78,6f),
	HX_("get_redB",5a,09,62,cb),
	HX_("set_redB",ce,62,bf,79),
	HX_("get_cx",fe,ed,2f,a3),
	HX_("set_cx",72,42,78,6f),
	HX_("get_cy",ff,ed,2f,a3),
	HX_("set_cy",73,42,78,6f),
	HX_("get_cz",00,ee,2f,a3),
	HX_("set_cz",74,42,78,6f),
	HX_("get_redC",5b,09,62,cb),
	HX_("set_redC",cf,62,bf,79),
	HX_("triangle",c8,be,c5,8d),
	HX_("adjustWinding",4b,e4,e6,bd),
	HX_("moveDelta",27,b7,ed,94),
	HX_("fullHit",04,38,2f,d0),
	::String(null())
};

void FloatColorTriangles_Impl__obj::__register()
{
	FloatColorTriangles_Impl__obj _hx_dummy;
	FloatColorTriangles_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_",a4,23,08,1f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FloatColorTriangles_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FloatColorTriangles_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FloatColorTriangles_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FloatColorTriangles_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FloatColorTriangles_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace dsHelper
} // end namespace flatInterleave
} // end namespace _FloatColorTriangles
