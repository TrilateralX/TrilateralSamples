// Generated by Haxe 4.3.0-rc.1+88ebbd0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_hxGeomAlgo_Debug
#include <hxGeomAlgo/Debug.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_HomogCoord
#include <hxGeomAlgo/HomogCoord.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_HxPointData
#include <hxGeomAlgo/HxPointData.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_PolyTools
#include <hxGeomAlgo/PolyTools.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__HxPoint_HxPoint_Impl_
#include <hxGeomAlgo/_HxPoint/HxPoint_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_39_isCCW,"hxGeomAlgo.PolyTools","isCCW",0xe67753df,"hxGeomAlgo.PolyTools.isCCW","hxGeomAlgo/PolyTools.hx",39,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_51_isCW,"hxGeomAlgo.PolyTools","isCW",0x470f758c,"hxGeomAlgo.PolyTools.isCW","hxGeomAlgo/PolyTools.hx",51,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_63_makeCCW,"hxGeomAlgo.PolyTools","makeCCW",0x843628db,"hxGeomAlgo.PolyTools.makeCCW","hxGeomAlgo/PolyTools.hx",63,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_76_makeCW,"hxGeomAlgo.PolyTools","makeCW",0x18b35410,"hxGeomAlgo.PolyTools.makeCW","hxGeomAlgo/PolyTools.hx",76,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_92_isConvex,"hxGeomAlgo.PolyTools","isConvex",0x1334725f,"hxGeomAlgo.PolyTools.isConvex","hxGeomAlgo/PolyTools.hx",92,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_125_isSimple,"hxGeomAlgo.PolyTools","isSimple",0x03d4ff2a,"hxGeomAlgo.PolyTools.isSimple","hxGeomAlgo/PolyTools.hx",125,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_160_segmentIntersect,"hxGeomAlgo.PolyTools","segmentIntersect",0x9757801a,"hxGeomAlgo.PolyTools.segmentIntersect","hxGeomAlgo/PolyTools.hx",160,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_204_findDuplicatePoints,"hxGeomAlgo.PolyTools","findDuplicatePoints",0xb9665d27,"hxGeomAlgo.PolyTools.findDuplicatePoints","hxGeomAlgo/PolyTools.hx",204,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_225_intersection,"hxGeomAlgo.PolyTools","intersection",0xc87d50b7,"hxGeomAlgo.PolyTools.intersection","hxGeomAlgo/PolyTools.hx",225,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_247_isReflex,"hxGeomAlgo.PolyTools","isReflex",0x4b3bc364,"hxGeomAlgo.PolyTools.isReflex","hxGeomAlgo/PolyTools.hx",247,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_252_at,"hxGeomAlgo.PolyTools","at",0x5f2e4de1,"hxGeomAlgo.PolyTools.at","hxGeomAlgo/PolyTools.hx",252,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_259_wrappedIdx,"hxGeomAlgo.PolyTools","wrappedIdx",0x2fb756e6,"hxGeomAlgo.PolyTools.wrappedIdx","hxGeomAlgo/PolyTools.hx",259,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_268_side,"hxGeomAlgo.PolyTools","side",0x4da41e05,"hxGeomAlgo.PolyTools.side","hxGeomAlgo/PolyTools.hx",268,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_274_isLeft,"hxGeomAlgo.PolyTools","isLeft",0xc7fed4ff,"hxGeomAlgo.PolyTools.isLeft","hxGeomAlgo/PolyTools.hx",274,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_280_isLeftOrOn,"hxGeomAlgo.PolyTools","isLeftOrOn",0x99b561c1,"hxGeomAlgo.PolyTools.isLeftOrOn","hxGeomAlgo/PolyTools.hx",280,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_286_isRight,"hxGeomAlgo.PolyTools","isRight",0xae0897e4,"hxGeomAlgo.PolyTools.isRight","hxGeomAlgo/PolyTools.hx",286,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_292_isRightOrOn,"hxGeomAlgo.PolyTools","isRightOrOn",0x4f8afb26,"hxGeomAlgo.PolyTools.isRightOrOn","hxGeomAlgo/PolyTools.hx",292,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_298_isCollinear,"hxGeomAlgo.PolyTools","isCollinear",0x72f8b22d,"hxGeomAlgo.PolyTools.isCollinear","hxGeomAlgo/PolyTools.hx",298,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_302_distance,"hxGeomAlgo.PolyTools","distance",0x5ee5f2a3,"hxGeomAlgo.PolyTools.distance","hxGeomAlgo/PolyTools.hx",302,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_305_distanceToSegment,"hxGeomAlgo.PolyTools","distanceToSegment",0x696c0855,"hxGeomAlgo.PolyTools.distanceToSegment","hxGeomAlgo/PolyTools.hx",305,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_308_distanceSquared,"hxGeomAlgo.PolyTools","distanceSquared",0xdadaa8c4,"hxGeomAlgo.PolyTools.distanceSquared","hxGeomAlgo/PolyTools.hx",308,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_311_distanceToSegmentSquared,"hxGeomAlgo.PolyTools","distanceToSegmentSquared",0xb5848d52,"hxGeomAlgo.PolyTools.distanceToSegmentSquared","hxGeomAlgo/PolyTools.hx",311,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_321_getCentroid,"hxGeomAlgo.PolyTools","getCentroid",0x7a681c48,"hxGeomAlgo.PolyTools.getCentroid","hxGeomAlgo/PolyTools.hx",321,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_342_getArea,"hxGeomAlgo.PolyTools","getArea",0x3b162395,"hxGeomAlgo.PolyTools.getArea","hxGeomAlgo/PolyTools.hx",342,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_355_meet,"hxGeomAlgo.PolyTools","meet",0x49a9ce35,"hxGeomAlgo.PolyTools.meet","hxGeomAlgo/PolyTools.hx",355,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_361_dot,"hxGeomAlgo.PolyTools","dot",0xe95819db,"hxGeomAlgo.PolyTools.dot","hxGeomAlgo/PolyTools.hx",361,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_365_sqr,"hxGeomAlgo.PolyTools","sqr",0xe9637d66,"hxGeomAlgo.PolyTools.sqr","hxGeomAlgo/PolyTools.hx",365,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_370_eq,"hxGeomAlgo.PolyTools","eq",0x5f2e515a,"hxGeomAlgo.PolyTools.eq","hxGeomAlgo/PolyTools.hx",370,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_377_clear,"hxGeomAlgo.PolyTools","clear",0x6d89415f,"hxGeomAlgo.PolyTools.clear","hxGeomAlgo/PolyTools.hx",377,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_385_toFloatArray,"hxGeomAlgo.PolyTools","toFloatArray",0x26232226,"hxGeomAlgo.PolyTools.toFloatArray","hxGeomAlgo/PolyTools.hx",385,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_398_reverseFloatArray,"hxGeomAlgo.PolyTools","reverseFloatArray",0x9e5040f1,"hxGeomAlgo.PolyTools.reverseFloatArray","hxGeomAlgo/PolyTools.hx",398,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_413_flatten,"hxGeomAlgo.PolyTools","flatten",0x0f1a9416,"hxGeomAlgo.PolyTools.flatten","hxGeomAlgo/PolyTools.hx",413,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_425_toPointArray,"hxGeomAlgo.PolyTools","toPointArray",0xe74866f2,"hxGeomAlgo.PolyTools.toPointArray","hxGeomAlgo/PolyTools.hx",425,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_439_inflateLine,"hxGeomAlgo.PolyTools","inflateLine",0xe24ca96d,"hxGeomAlgo.PolyTools.inflateLine","hxGeomAlgo/PolyTools.hx",439,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_457_clip,"hxGeomAlgo.PolyTools","clip",0x4312ff3e,"hxGeomAlgo.PolyTools.clip","hxGeomAlgo/PolyTools.hx",457,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_502_exposeEnum,"hxGeomAlgo.PolyTools","exposeEnum",0xeb333253,"hxGeomAlgo.PolyTools.exposeEnum","hxGeomAlgo/PolyTools.hx",502,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_31_boot,"hxGeomAlgo.PolyTools","boot",0x426c14a0,"hxGeomAlgo.PolyTools.boot","hxGeomAlgo/PolyTools.hx",31,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_33_boot,"hxGeomAlgo.PolyTools","boot",0x426c14a0,"hxGeomAlgo.PolyTools.boot","hxGeomAlgo/PolyTools.hx",33,0xa4eed17f)
HX_LOCAL_STACK_FRAME(_hx_pos_25ff66a0b4d80bb1_35_boot,"hxGeomAlgo.PolyTools","boot",0x426c14a0,"hxGeomAlgo.PolyTools.boot","hxGeomAlgo/PolyTools.hx",35,0xa4eed17f)
namespace hxGeomAlgo{

void PolyTools_obj::__construct() { }

Dynamic PolyTools_obj::__CreateEmpty() { return new PolyTools_obj; }

void *PolyTools_obj::_hx_vtable = 0;

Dynamic PolyTools_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PolyTools_obj > _hx_result = new PolyTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PolyTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1785f148;
}

 ::hxGeomAlgo::HxPointData PolyTools_obj::point;

 ::hxGeomAlgo::HxPointData PolyTools_obj::zero;

Float PolyTools_obj::EPSILON;

bool PolyTools_obj::isCCW(::Array< ::Dynamic> poly){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_39_isCCW)
HXLINE(  40)		if ((poly->length <= 2)) {
HXLINE(  40)			return true;
            		}
HXLINE(  42)		Float signedArea = ((Float)0.);
HXLINE(  43)		{
HXLINE(  43)			int _g = 0;
HXDLIN(  43)			int _g1 = poly->length;
HXDLIN(  43)			while((_g < _g1)){
HXLINE(  43)				_g = (_g + 1);
HXDLIN(  43)				int i = (_g - 1);
HXLINE(  44)				int idx = (i - 1);
HXDLIN(  44)				int idx1 = idx;
HXDLIN(  44)				int len = poly->length;
HXDLIN(  44)				if ((idx1 < 0)) {
HXLINE(  44)					idx1 = (idx1 + len);
            				}
HXDLIN(  44)				idx = ::hx::Mod(idx1,len);
HXDLIN(  44)				int idx2 = (i - 1);
HXDLIN(  44)				int idx3 = idx2;
HXDLIN(  44)				int len1 = poly->length;
HXDLIN(  44)				if ((idx3 < 0)) {
HXLINE(  44)					idx3 = (idx3 + len1);
            				}
HXDLIN(  44)				idx2 = ::hx::Mod(idx3,len1);
HXDLIN(  44)				signedArea = (signedArea + ((poly->__get(idx).StaticCast<  ::hxGeomAlgo::HxPointData >()->x * poly->__get(i).StaticCast<  ::hxGeomAlgo::HxPointData >()->y) - (poly->__get(i).StaticCast<  ::hxGeomAlgo::HxPointData >()->x * poly->__get(idx2).StaticCast<  ::hxGeomAlgo::HxPointData >()->y)));
            			}
            		}
HXLINE(  47)		return (signedArea < 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PolyTools_obj,isCCW,return )

bool PolyTools_obj::isCW(::Array< ::Dynamic> poly){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_51_isCW)
HXLINE(  52)		if ((poly->length <= 2)) {
HXLINE(  52)			return true;
            		}
HXLINE(  54)		Float signedArea = ((Float)0.);
HXLINE(  55)		{
HXLINE(  55)			int _g = 0;
HXDLIN(  55)			int _g1 = poly->length;
HXDLIN(  55)			while((_g < _g1)){
HXLINE(  55)				_g = (_g + 1);
HXDLIN(  55)				int i = (_g - 1);
HXLINE(  56)				int idx = (i - 1);
HXDLIN(  56)				int idx1 = idx;
HXDLIN(  56)				int len = poly->length;
HXDLIN(  56)				if ((idx1 < 0)) {
HXLINE(  56)					idx1 = (idx1 + len);
            				}
HXDLIN(  56)				idx = ::hx::Mod(idx1,len);
HXDLIN(  56)				int idx2 = (i - 1);
HXDLIN(  56)				int idx3 = idx2;
HXDLIN(  56)				int len1 = poly->length;
HXDLIN(  56)				if ((idx3 < 0)) {
HXLINE(  56)					idx3 = (idx3 + len1);
            				}
HXDLIN(  56)				idx2 = ::hx::Mod(idx3,len1);
HXDLIN(  56)				signedArea = (signedArea + ((poly->__get(idx).StaticCast<  ::hxGeomAlgo::HxPointData >()->x * poly->__get(i).StaticCast<  ::hxGeomAlgo::HxPointData >()->y) - (poly->__get(i).StaticCast<  ::hxGeomAlgo::HxPointData >()->x * poly->__get(idx2).StaticCast<  ::hxGeomAlgo::HxPointData >()->y)));
            			}
            		}
HXLINE(  59)		return (signedArea > 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PolyTools_obj,isCW,return )

bool PolyTools_obj::makeCCW(::Array< ::Dynamic> poly){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_63_makeCCW)
HXLINE(  64)		bool reversed = false;
HXLINE(  67)		if (!(::hxGeomAlgo::PolyTools_obj::isCCW(poly))) {
HXLINE(  68)			poly->reverse();
HXLINE(  69)			reversed = true;
            		}
HXLINE(  72)		return reversed;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PolyTools_obj,makeCCW,return )

bool PolyTools_obj::makeCW(::Array< ::Dynamic> poly){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_76_makeCW)
HXLINE(  77)		bool reversed = false;
HXLINE(  80)		if (::hxGeomAlgo::PolyTools_obj::isCCW(poly)) {
HXLINE(  81)			poly->reverse();
HXLINE(  82)			reversed = true;
            		}
HXLINE(  85)		return reversed;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PolyTools_obj,makeCW,return )

bool PolyTools_obj::isConvex(::Array< ::Dynamic> poly){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_92_isConvex)
HXLINE(  93)		 ::Dynamic isPositive = null();
HXLINE(  95)		{
HXLINE(  95)			int _g = 0;
HXDLIN(  95)			int _g1 = poly->length;
HXDLIN(  95)			while((_g < _g1)){
HXLINE(  95)				_g = (_g + 1);
HXDLIN(  95)				int i = (_g - 1);
HXLINE(  96)				int lower;
HXDLIN(  96)				if ((i == 0)) {
HXLINE(  96)					lower = (poly->length - 1);
            				}
            				else {
HXLINE(  96)					lower = (i - 1);
            				}
HXLINE(  97)				int middle = i;
HXLINE(  98)				int upper;
HXDLIN(  98)				if ((i == (poly->length - 1))) {
HXLINE(  98)					upper = 0;
            				}
            				else {
HXLINE(  98)					upper = (i + 1);
            				}
HXLINE(  99)				Float dx0 = (poly->__get(middle).StaticCast<  ::hxGeomAlgo::HxPointData >()->x - poly->__get(lower).StaticCast<  ::hxGeomAlgo::HxPointData >()->x);
HXLINE( 100)				Float dy0 = (poly->__get(middle).StaticCast<  ::hxGeomAlgo::HxPointData >()->y - poly->__get(lower).StaticCast<  ::hxGeomAlgo::HxPointData >()->y);
HXLINE( 101)				Float dx1 = (poly->__get(upper).StaticCast<  ::hxGeomAlgo::HxPointData >()->x - poly->__get(middle).StaticCast<  ::hxGeomAlgo::HxPointData >()->x);
HXLINE( 102)				Float dy1 = (poly->__get(upper).StaticCast<  ::hxGeomAlgo::HxPointData >()->y - poly->__get(middle).StaticCast<  ::hxGeomAlgo::HxPointData >()->y);
HXLINE( 103)				Float cross = ((dx0 * dy1) - (dx1 * dy0));
HXLINE( 107)				bool newIsPositive;
HXDLIN( 107)				if ((cross > 0)) {
HXLINE( 107)					newIsPositive = true;
            				}
            				else {
HXLINE( 107)					newIsPositive = false;
            				}
HXLINE( 109)				if ((cross == 0)) {
HXLINE( 109)					continue;
            				}
HXLINE( 111)				if (::hx::IsNull( isPositive )) {
HXLINE( 112)					isPositive = newIsPositive;
            				}
            				else {
HXLINE( 113)					if (::hx::IsNotEq( isPositive,newIsPositive )) {
HXLINE( 114)						return false;
            					}
            				}
            			}
            		}
HXLINE( 118)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PolyTools_obj,isConvex,return )

bool PolyTools_obj::isSimple(::Array< ::Dynamic> poly){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_125_isSimple)
HXLINE( 126)		int len = poly->length;
HXLINE( 128)		if ((len <= 3)) {
HXLINE( 128)			return true;
            		}
HXLINE( 130)		{
HXLINE( 130)			int _g = 0;
HXDLIN( 130)			int _g1 = len;
HXDLIN( 130)			while((_g < _g1)){
HXLINE( 130)				_g = (_g + 1);
HXDLIN( 130)				int i = (_g - 1);
HXLINE( 132)				int p0 = i;
HXLINE( 133)				int p1;
HXDLIN( 133)				if ((i == (len - 1))) {
HXLINE( 133)					p1 = 0;
            				}
            				else {
HXLINE( 133)					p1 = (i + 1);
            				}
HXLINE( 135)				{
HXLINE( 135)					int _g1 = (i + 1);
HXDLIN( 135)					int _g2 = len;
HXDLIN( 135)					while((_g1 < _g2)){
HXLINE( 135)						_g1 = (_g1 + 1);
HXDLIN( 135)						int j = (_g1 - 1);
HXLINE( 137)						int q0 = j;
HXLINE( 138)						int q1;
HXDLIN( 138)						if ((j == (len - 1))) {
HXLINE( 138)							q1 = 0;
            						}
            						else {
HXLINE( 138)							q1 = (j + 1);
            						}
HXLINE( 143)						 ::hxGeomAlgo::HxPointData intersection = ::hxGeomAlgo::PolyTools_obj::segmentIntersect(poly->__get(p0).StaticCast<  ::hxGeomAlgo::HxPointData >(),poly->__get(p1).StaticCast<  ::hxGeomAlgo::HxPointData >(),poly->__get(q0).StaticCast<  ::hxGeomAlgo::HxPointData >(),poly->__get(q1).StaticCast<  ::hxGeomAlgo::HxPointData >());
HXLINE( 144)						bool _hx_tmp;
HXDLIN( 144)						bool _hx_tmp1;
HXDLIN( 144)						if (::hx::IsNotNull( intersection )) {
HXLINE( 145)							bool _hx_tmp;
HXDLIN( 145)							 ::hxGeomAlgo::HxPointData w = poly->__get(p0).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 145)							Float x = (intersection->x - w->x);
HXDLIN( 145)							Float x1 = (intersection->y - w->y);
HXDLIN( 145)							if (!((::Math_obj::sqrt(((x * x) + (x1 * x1))) < ::hxGeomAlgo::PolyTools_obj::EPSILON))) {
HXLINE( 145)								 ::hxGeomAlgo::HxPointData w = poly->__get(p1).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 145)								Float x = (intersection->x - w->x);
HXDLIN( 145)								Float x1 = (intersection->y - w->y);
HXDLIN( 145)								_hx_tmp = (::Math_obj::sqrt(((x * x) + (x1 * x1))) < ::hxGeomAlgo::PolyTools_obj::EPSILON);
            							}
            							else {
HXLINE( 145)								_hx_tmp = true;
            							}
HXLINE( 144)							_hx_tmp1 = !(_hx_tmp);
            						}
            						else {
HXLINE( 144)							_hx_tmp1 = false;
            						}
HXDLIN( 144)						if (_hx_tmp1) {
HXLINE( 146)							bool _hx_tmp1;
HXDLIN( 146)							 ::hxGeomAlgo::HxPointData w = poly->__get(q0).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 146)							Float x = (intersection->x - w->x);
HXDLIN( 146)							Float x1 = (intersection->y - w->y);
HXDLIN( 146)							if (!((::Math_obj::sqrt(((x * x) + (x1 * x1))) < ::hxGeomAlgo::PolyTools_obj::EPSILON))) {
HXLINE( 146)								 ::hxGeomAlgo::HxPointData w = poly->__get(q1).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 146)								Float x = (intersection->x - w->x);
HXDLIN( 146)								Float x1 = (intersection->y - w->y);
HXDLIN( 146)								_hx_tmp1 = (::Math_obj::sqrt(((x * x) + (x1 * x1))) < ::hxGeomAlgo::PolyTools_obj::EPSILON);
            							}
            							else {
HXLINE( 146)								_hx_tmp1 = true;
            							}
HXLINE( 144)							_hx_tmp = !(_hx_tmp1);
            						}
            						else {
HXLINE( 144)							_hx_tmp = false;
            						}
HXDLIN( 144)						if (_hx_tmp) {
HXLINE( 148)							return false;
            						}
            					}
            				}
            			}
            		}
HXLINE( 153)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PolyTools_obj,isSimple,return )

 ::hxGeomAlgo::HxPointData PolyTools_obj::segmentIntersect( ::hxGeomAlgo::HxPointData p0, ::hxGeomAlgo::HxPointData p1, ::hxGeomAlgo::HxPointData q0, ::hxGeomAlgo::HxPointData q1){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_160_segmentIntersect)
HXLINE( 162)		Float a1 = (p1->y - p0->y);
HXLINE( 163)		Float b1 = (p0->x - p1->x);
HXLINE( 164)		Float c1 = ((p1->x * p0->y) - (p0->x * p1->y));
HXLINE( 162)		Float a2 = (q1->y - q0->y);
HXLINE( 163)		Float b2 = (q0->x - q1->x);
HXLINE( 164)		Float c2 = ((q1->x * q0->y) - (q0->x * q1->y));
HXLINE( 173)		Float denom = ((a1 * b2) - (a2 * b1));
HXLINE( 174)		if ((denom == 0)) {
HXLINE( 175)			return null();
            		}
HXLINE( 161)		 ::hxGeomAlgo::HxPointData intersectionPoint = ::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new(null(),null());
HXLINE( 179)		intersectionPoint->x = (((b1 * c2) - (b2 * c1)) / denom);
HXLINE( 180)		intersectionPoint->y = (((a2 * c1) - (a1 * c2)) / denom);
HXLINE( 185)		Float x = (p0->x - p1->x);
HXDLIN( 185)		Float x1 = (p0->y - p1->y);
HXDLIN( 185)		Float p0p1 = ((x * x) + (x1 * x1));
HXLINE( 186)		Float x2 = (q0->x - q1->x);
HXDLIN( 186)		Float x3 = (q0->y - q1->y);
HXDLIN( 186)		Float q0q1 = ((x2 * x2) + (x3 * x3));
HXLINE( 188)		Float x4 = (intersectionPoint->x - p1->x);
HXDLIN( 188)		Float x5 = (intersectionPoint->y - p1->y);
HXDLIN( 188)		if ((((x4 * x4) + (x5 * x5)) > p0p1)) {
HXLINE( 188)			return null();
            		}
HXLINE( 189)		Float x6 = (intersectionPoint->x - p0->x);
HXDLIN( 189)		Float x7 = (intersectionPoint->y - p0->y);
HXDLIN( 189)		if ((((x6 * x6) + (x7 * x7)) > p0p1)) {
HXLINE( 189)			return null();
            		}
HXLINE( 190)		Float x8 = (intersectionPoint->x - q1->x);
HXDLIN( 190)		Float x9 = (intersectionPoint->y - q1->y);
HXDLIN( 190)		if ((((x8 * x8) + (x9 * x9)) > q0q1)) {
HXLINE( 190)			return null();
            		}
HXLINE( 191)		Float x10 = (intersectionPoint->x - q0->x);
HXDLIN( 191)		Float x11 = (intersectionPoint->y - q0->y);
HXDLIN( 191)		if ((((x10 * x10) + (x11 * x11)) > q0q1)) {
HXLINE( 191)			return null();
            		}
HXLINE( 193)		return intersectionPoint;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(PolyTools_obj,segmentIntersect,return )

::Array< int > PolyTools_obj::findDuplicatePoints(::Array< ::Dynamic> poly,::hx::Null< bool >  __o_consecutiveOnly,::hx::Null< bool >  __o_wrapAround){
            		bool consecutiveOnly = __o_consecutiveOnly.Default(true);
            		bool wrapAround = __o_wrapAround.Default(true);
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_204_findDuplicatePoints)
HXLINE( 205)		int len = poly->length;
HXLINE( 206)		if ((len <= 1)) {
HXLINE( 206)			return ::Array_obj< int >::__new(0);
            		}
HXLINE( 207)		::Array< int > dupIndices = ::Array_obj< int >::__new(0);
HXLINE( 209)		{
HXLINE( 209)			int _g = 0;
HXDLIN( 209)			int _g1 = (len - 1);
HXDLIN( 209)			while((_g < _g1)){
HXLINE( 209)				_g = (_g + 1);
HXDLIN( 209)				int i = (_g - 1);
HXLINE( 210)				int j = (i + 1);
HXLINE( 211)				while((j < len)){
HXLINE( 212)					 ::hxGeomAlgo::HxPointData this1 = poly->__get(i).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 212)					 ::hxGeomAlgo::HxPointData p = poly->__get(j).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 212)					bool foundDup;
HXDLIN( 212)					bool foundDup1;
HXDLIN( 212)					if (::hx::IsNotNull( p )) {
HXLINE( 212)						foundDup1 = (this1->x == p->x);
            					}
            					else {
HXLINE( 212)						foundDup1 = false;
            					}
HXDLIN( 212)					if (foundDup1) {
HXLINE( 212)						foundDup = (this1->y == p->y);
            					}
            					else {
HXLINE( 212)						foundDup = false;
            					}
HXLINE( 213)					if (foundDup) {
HXLINE( 213)						dupIndices->push(i);
            					}
HXLINE( 214)					bool _hx_tmp;
HXDLIN( 214)					if (!(consecutiveOnly)) {
HXLINE( 214)						if (foundDup) {
HXLINE( 214)							_hx_tmp = !(consecutiveOnly);
            						}
            						else {
HXLINE( 214)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE( 214)						_hx_tmp = true;
            					}
HXDLIN( 214)					if (_hx_tmp) {
HXLINE( 214)						goto _hx_goto_13;
            					}
HXLINE( 215)					j = (j + 1);
            				}
            				_hx_goto_13:;
            			}
            		}
HXLINE( 218)		bool _hx_tmp;
HXDLIN( 218)		bool _hx_tmp1;
HXDLIN( 218)		if (wrapAround) {
HXLINE( 218)			_hx_tmp1 = consecutiveOnly;
            		}
            		else {
HXLINE( 218)			_hx_tmp1 = false;
            		}
HXDLIN( 218)		if (_hx_tmp1) {
HXLINE( 218)			 ::hxGeomAlgo::HxPointData this1 = poly->__get(0).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 218)			 ::hxGeomAlgo::HxPointData p = poly->__get((len - 1)).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 218)			bool _hx_tmp1;
HXDLIN( 218)			if (::hx::IsNotNull( p )) {
HXLINE( 218)				_hx_tmp1 = (this1->x == p->x);
            			}
            			else {
HXLINE( 218)				_hx_tmp1 = false;
            			}
HXDLIN( 218)			if (_hx_tmp1) {
HXLINE( 218)				_hx_tmp = (this1->y == p->y);
            			}
            			else {
HXLINE( 218)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 218)			_hx_tmp = false;
            		}
HXDLIN( 218)		if (_hx_tmp) {
HXLINE( 218)			dupIndices->push((len - 1));
            		}
HXLINE( 220)		return dupIndices;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyTools_obj,findDuplicatePoints,return )

 ::hxGeomAlgo::HxPointData PolyTools_obj::intersection( ::hxGeomAlgo::HxPointData p1, ::hxGeomAlgo::HxPointData p2, ::hxGeomAlgo::HxPointData q1, ::hxGeomAlgo::HxPointData q2){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_225_intersection)
HXLINE( 226)		 ::hxGeomAlgo::HxPointData res = null();
HXLINE( 227)		Float a1 = (p2->y - p1->y);
HXLINE( 228)		Float b1 = (p1->x - p2->x);
HXLINE( 229)		Float c1 = ((a1 * p1->x) + (b1 * p1->y));
HXLINE( 230)		Float a2 = (q2->y - q1->y);
HXLINE( 231)		Float b2 = (q1->x - q2->x);
HXLINE( 232)		Float c2 = ((a2 * q1->x) + (b2 * q1->y));
HXLINE( 233)		Float det = ((a1 * b2) - (a2 * b1));
HXLINE( 234)		if (!((::Math_obj::abs(det) <= ::hxGeomAlgo::PolyTools_obj::EPSILON))) {
HXLINE( 235)			res = ::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new(null(),null());
HXLINE( 236)			res->x = (((b2 * c1) - (b1 * c2)) / det);
HXLINE( 237)			res->y = (((a1 * c2) - (a2 * c1)) / det);
            		}
HXLINE( 241)		return res;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(PolyTools_obj,intersection,return )

bool PolyTools_obj::isReflex(::Array< ::Dynamic> poly,int idx){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_247_isReflex)
HXDLIN( 247)		int idx1 = (idx - 1);
HXDLIN( 247)		int idx2 = idx1;
HXDLIN( 247)		int len = poly->length;
HXDLIN( 247)		if ((idx2 < 0)) {
HXDLIN( 247)			idx2 = (idx2 + len);
            		}
HXDLIN( 247)		idx1 = ::hx::Mod(idx2,len);
HXDLIN( 247)		 ::hxGeomAlgo::HxPointData p = poly->__get(idx1).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 247)		int idx3 = idx;
HXDLIN( 247)		int idx4 = idx3;
HXDLIN( 247)		int len1 = poly->length;
HXDLIN( 247)		if ((idx4 < 0)) {
HXDLIN( 247)			idx4 = (idx4 + len1);
            		}
HXDLIN( 247)		idx3 = ::hx::Mod(idx4,len1);
HXDLIN( 247)		 ::hxGeomAlgo::HxPointData a = poly->__get(idx3).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 247)		int idx5 = (idx + 1);
HXDLIN( 247)		int idx6 = idx5;
HXDLIN( 247)		int len2 = poly->length;
HXDLIN( 247)		if ((idx6 < 0)) {
HXDLIN( 247)			idx6 = (idx6 + len2);
            		}
HXDLIN( 247)		idx5 = ::hx::Mod(idx6,len2);
HXDLIN( 247)		 ::hxGeomAlgo::HxPointData b = poly->__get(idx5).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 247)		return ((((a->x - p->x) * (b->y - p->y)) - ((b->x - p->x) * (a->y - p->y))) < 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,isReflex,return )

 ::hxGeomAlgo::HxPointData PolyTools_obj::at(::Array< ::Dynamic> poly,int idx){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_252_at)
HXLINE( 253)		int idx1 = idx;
HXDLIN( 253)		int len = poly->length;
HXDLIN( 253)		if ((idx1 < 0)) {
HXLINE( 253)			idx1 = (idx1 + len);
            		}
HXDLIN( 253)		idx = ::hx::Mod(idx1,len);
HXLINE( 254)		return poly->__get(idx).StaticCast<  ::hxGeomAlgo::HxPointData >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,at,return )

int PolyTools_obj::wrappedIdx(::Array< ::Dynamic> poly,int idx){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_259_wrappedIdx)
HXLINE( 260)		int len = poly->length;
HXLINE( 261)		if ((idx < 0)) {
HXLINE( 261)			idx = (idx + len);
            		}
HXLINE( 262)		return ::hx::Mod(idx,len);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,wrappedIdx,return )

Float PolyTools_obj::side( ::hxGeomAlgo::HxPointData p, ::hxGeomAlgo::HxPointData a, ::hxGeomAlgo::HxPointData b){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_268_side)
HXDLIN( 268)		return (((a->x - p->x) * (b->y - p->y)) - ((b->x - p->x) * (a->y - p->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyTools_obj,side,return )

bool PolyTools_obj::isLeft( ::hxGeomAlgo::HxPointData p, ::hxGeomAlgo::HxPointData a, ::hxGeomAlgo::HxPointData b){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_274_isLeft)
HXDLIN( 274)		return ((((a->x - p->x) * (b->y - p->y)) - ((b->x - p->x) * (a->y - p->y))) > 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyTools_obj,isLeft,return )

bool PolyTools_obj::isLeftOrOn( ::hxGeomAlgo::HxPointData p, ::hxGeomAlgo::HxPointData a, ::hxGeomAlgo::HxPointData b){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_280_isLeftOrOn)
HXDLIN( 280)		return ((((a->x - p->x) * (b->y - p->y)) - ((b->x - p->x) * (a->y - p->y))) >= 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyTools_obj,isLeftOrOn,return )

bool PolyTools_obj::isRight( ::hxGeomAlgo::HxPointData p, ::hxGeomAlgo::HxPointData a, ::hxGeomAlgo::HxPointData b){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_286_isRight)
HXDLIN( 286)		return ((((a->x - p->x) * (b->y - p->y)) - ((b->x - p->x) * (a->y - p->y))) < 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyTools_obj,isRight,return )

bool PolyTools_obj::isRightOrOn( ::hxGeomAlgo::HxPointData p, ::hxGeomAlgo::HxPointData a, ::hxGeomAlgo::HxPointData b){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_292_isRightOrOn)
HXDLIN( 292)		return ((((a->x - p->x) * (b->y - p->y)) - ((b->x - p->x) * (a->y - p->y))) <= 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyTools_obj,isRightOrOn,return )

bool PolyTools_obj::isCollinear( ::hxGeomAlgo::HxPointData p, ::hxGeomAlgo::HxPointData a, ::hxGeomAlgo::HxPointData b){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_298_isCollinear)
HXDLIN( 298)		return ((((a->x - p->x) * (b->y - p->y)) - ((b->x - p->x) * (a->y - p->y))) == 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyTools_obj,isCollinear,return )

Float PolyTools_obj::distance( ::hxGeomAlgo::HxPointData v, ::hxGeomAlgo::HxPointData w){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_302_distance)
HXDLIN( 302)		Float x = (v->x - w->x);
HXDLIN( 302)		Float x1 = (v->y - w->y);
HXDLIN( 302)		return ::Math_obj::sqrt(((x * x) + (x1 * x1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,distance,return )

Float PolyTools_obj::distanceToSegment( ::hxGeomAlgo::HxPointData p, ::hxGeomAlgo::HxPointData v, ::hxGeomAlgo::HxPointData w){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_305_distanceToSegment)
HXDLIN( 305)		return ::Math_obj::sqrt(::hxGeomAlgo::PolyTools_obj::distanceToSegmentSquared(p,v,w));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyTools_obj,distanceToSegment,return )

Float PolyTools_obj::distanceSquared( ::hxGeomAlgo::HxPointData v, ::hxGeomAlgo::HxPointData w){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_308_distanceSquared)
HXDLIN( 308)		Float x = (v->x - w->x);
HXDLIN( 308)		Float x1 = (v->y - w->y);
HXDLIN( 308)		return ((x * x) + (x1 * x1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,distanceSquared,return )

Float PolyTools_obj::distanceToSegmentSquared( ::hxGeomAlgo::HxPointData p, ::hxGeomAlgo::HxPointData v, ::hxGeomAlgo::HxPointData w){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_311_distanceToSegmentSquared)
HXLINE( 312)		Float x = (v->x - w->x);
HXDLIN( 312)		Float x1 = (v->y - w->y);
HXDLIN( 312)		Float l2 = ((x * x) + (x1 * x1));
HXLINE( 313)		if ((l2 == 0)) {
HXLINE( 313)			Float x = (p->x - v->x);
HXDLIN( 313)			Float x1 = (p->y - v->y);
HXDLIN( 313)			return ((x * x) + (x1 * x1));
            		}
HXLINE( 314)		Float t = ((((p->x - v->x) * (w->x - v->x)) + ((p->y - v->y) * (w->y - v->y))) / l2);
HXLINE( 315)		if ((t < 0)) {
HXLINE( 315)			Float x = (p->x - v->x);
HXDLIN( 315)			Float x1 = (p->y - v->y);
HXDLIN( 315)			return ((x * x) + (x1 * x1));
            		}
HXLINE( 316)		if ((t > 1)) {
HXLINE( 316)			Float x = (p->x - w->x);
HXDLIN( 316)			Float x1 = (p->y - w->y);
HXDLIN( 316)			return ((x * x) + (x1 * x1));
            		}
HXLINE( 317)		::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::setTo(::hxGeomAlgo::PolyTools_obj::point,(v->x + (t * (w->x - v->x))),(v->y + (t * (w->y - v->y))));
HXLINE( 318)		 ::hxGeomAlgo::HxPointData w1 = ::hxGeomAlgo::PolyTools_obj::point;
HXDLIN( 318)		Float x2 = (p->x - w1->x);
HXDLIN( 318)		Float x3 = (p->y - w1->y);
HXDLIN( 318)		return ((x2 * x2) + (x3 * x3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyTools_obj,distanceToSegmentSquared,return )

 ::hxGeomAlgo::HxPointData PolyTools_obj::getCentroid(::Array< ::Dynamic> poly){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_321_getCentroid)
HXLINE( 322)		 ::hxGeomAlgo::HxPointData c = ::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new(null(),null());
HXLINE( 323)		Float area = ::hxGeomAlgo::PolyTools_obj::getArea(poly);
HXLINE( 324)		if ((area != 0)) {
HXLINE( 325)			int len = poly->length;
HXLINE( 326)			{
HXLINE( 326)				int _g = 0;
HXDLIN( 326)				int _g1 = len;
HXDLIN( 326)				while((_g < _g1)){
HXLINE( 326)					_g = (_g + 1);
HXDLIN( 326)					int i = (_g - 1);
HXLINE( 327)					 ::hxGeomAlgo::HxPointData p0 = poly->__get(i).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXLINE( 328)					 ::hxGeomAlgo::HxPointData p1 = poly->__get(::hx::Mod((i + 1),len)).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXLINE( 329)					Float m = ((p0->x * p1->y) - (p1->x * p0->y));
HXLINE( 330)					c->x = (c->x + ((p0->x + p1->x) * m));
HXLINE( 331)					c->y = (c->y + ((p0->y + p1->y) * m));
            				}
            			}
HXLINE( 334)			c->x = (c->x / (( (Float)(6) ) * area));
HXLINE( 335)			c->y = (c->y / (( (Float)(6) ) * area));
            		}
            		else {
HXLINE( 337)			c = ::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::EMPTY;
            		}
HXLINE( 339)		return c;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PolyTools_obj,getCentroid,return )

Float PolyTools_obj::getArea(::Array< ::Dynamic> poly){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_342_getArea)
HXLINE( 343)		Float area = ((Float)0.0);
HXLINE( 344)		int len = poly->length;
HXLINE( 345)		{
HXLINE( 345)			int _g = 0;
HXDLIN( 345)			int _g1 = len;
HXDLIN( 345)			while((_g < _g1)){
HXLINE( 345)				_g = (_g + 1);
HXDLIN( 345)				int i = (_g - 1);
HXLINE( 346)				 ::hxGeomAlgo::HxPointData p0 = poly->__get(i).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXLINE( 347)				 ::hxGeomAlgo::HxPointData p1 = poly->__get(::hx::Mod((i + 1),len)).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXLINE( 348)				area = (area + ((p0->x * p1->y) - (p1->x * p0->y)));
            			}
            		}
HXLINE( 350)		area = (((Float).5) * area);
HXDLIN( 350)		return area;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PolyTools_obj,getArea,return )

 ::hxGeomAlgo::HomogCoord PolyTools_obj::meet( ::hxGeomAlgo::HxPointData p, ::hxGeomAlgo::HxPointData q){
            	HX_GC_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_355_meet)
HXDLIN( 355)		return  ::hxGeomAlgo::HomogCoord_obj::__alloc( HX_CTX ,(p->y - q->y),(q->x - p->x),((p->x * q->y) - (p->y * q->x)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,meet,return )

Float PolyTools_obj::dot( ::hxGeomAlgo::HxPointData p, ::hxGeomAlgo::HxPointData q){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_361_dot)
HXDLIN( 361)		return ((p->x * q->x) + (p->y * q->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,dot,return )

Float PolyTools_obj::sqr(Float x){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_365_sqr)
HXDLIN( 365)		return (x * x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PolyTools_obj,sqr,return )

bool PolyTools_obj::eq(Float a,Float b){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_370_eq)
HXDLIN( 370)		return (::Math_obj::abs((a - b)) <= ::hxGeomAlgo::PolyTools_obj::EPSILON);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,eq,return )

void PolyTools_obj::clear(::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_377_clear)
HXDLIN( 377)		array->splice(0,array->get_length());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PolyTools_obj,clear,(void))

::Array< Float > PolyTools_obj::toFloatArray(::Array< ::Dynamic> poly,::Array< Float > out){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_385_toFloatArray)
HXLINE( 386)		if (::hx::IsNull( out )) {
HXLINE( 386)			out = ::Array_obj< Float >::__new();
            		}
HXLINE( 388)		{
HXLINE( 388)			int _g = 0;
HXDLIN( 388)			while((_g < poly->length)){
HXLINE( 388)				 ::hxGeomAlgo::HxPointData p = poly->__get(_g).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXDLIN( 388)				_g = (_g + 1);
HXLINE( 389)				out->push(p->x);
HXLINE( 390)				out->push(p->y);
            			}
            		}
HXLINE( 393)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,toFloatArray,return )

::Array< Float > PolyTools_obj::reverseFloatArray(::Array< Float > poly,::hx::Null< bool >  __o_inPlace){
            		bool inPlace = __o_inPlace.Default(false);
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_398_reverseFloatArray)
HXLINE( 399)		::Array< Float > res;
HXDLIN( 399)		if (inPlace) {
HXLINE( 399)			res = poly;
            		}
            		else {
HXLINE( 399)			res = ::Array_obj< Float >::__new();
            		}
HXLINE( 401)		int nPoints = (poly->length >> 1);
HXLINE( 402)		{
HXLINE( 402)			int _g = 0;
HXDLIN( 402)			int _g1 = nPoints;
HXDLIN( 402)			while((_g < _g1)){
HXLINE( 402)				_g = (_g + 1);
HXDLIN( 402)				int i = (_g - 1);
HXLINE( 403)				int xPos = (((nPoints - i) - 1) * 2);
HXLINE( 404)				res[(i * 2)] = poly->__get(xPos);
HXLINE( 405)				res[((i * 2) + 1)] = poly->__get((xPos + 1));
            			}
            		}
HXLINE( 408)		return res;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,reverseFloatArray,return )

::cpp::VirtualArray PolyTools_obj::flatten(::Array< ::Dynamic> array,::cpp::VirtualArray out){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_413_flatten)
HXLINE( 414)		::cpp::VirtualArray res;
HXDLIN( 414)		if (::hx::IsNotNull( out )) {
HXLINE( 414)			res = out;
            		}
            		else {
HXLINE( 414)			res = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 416)		{
HXLINE( 416)			int _g = 0;
HXDLIN( 416)			while((_g < array->length)){
HXLINE( 416)				::cpp::VirtualArray arr = ::cpp::VirtualArray( array->__get(_g));
HXDLIN( 416)				_g = (_g + 1);
HXLINE( 417)				{
HXLINE( 417)					int _g1 = 0;
HXDLIN( 417)					while((_g1 < arr->get_length())){
HXLINE( 417)						 ::Dynamic item = arr->__get(_g1);
HXDLIN( 417)						_g1 = (_g1 + 1);
HXDLIN( 417)						res->push(item);
            					}
            				}
            			}
            		}
HXLINE( 420)		return res;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,flatten,return )

::Array< ::Dynamic> PolyTools_obj::toPointArray(::Array< Float > poly,::Array< ::Dynamic> out){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_425_toPointArray)
HXLINE( 426)		if (::hx::IsNull( out )) {
HXLINE( 426)			out = ::Array_obj< ::Dynamic>::__new();
            		}
HXLINE( 428)		int size = poly->length;
HXLINE( 429)		if ((::hx::Mod(poly->length,2) == 1)) {
HXLINE( 429)			size = (size - 1);
            		}
HXLINE( 431)		{
HXLINE( 431)			int _g = 0;
HXDLIN( 431)			int _g1 = (size >> 1);
HXDLIN( 431)			while((_g < _g1)){
HXLINE( 431)				_g = (_g + 1);
HXDLIN( 431)				int i = (_g - 1);
HXLINE( 432)				out->push(::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new(poly->__get((i * 2)),poly->__get(((i * 2) + 1))));
            			}
            		}
HXLINE( 435)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,toPointArray,return )

::Array< ::Dynamic> PolyTools_obj::inflateLine( ::hxGeomAlgo::HxPointData start, ::hxGeomAlgo::HxPointData end,Float thickness){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_439_inflateLine)
HXLINE( 440)		Float halfWidth = (thickness / ( (Float)(2) ));
HXLINE( 441)		Float dx = (end->x - start->x);
HXLINE( 442)		Float dy = (end->y - start->y);
HXLINE( 443)		Float len = ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
HXLINE( 444)		Float nx = ((dx / len) * halfWidth);
HXLINE( 445)		Float ny = ((dy / len) * halfWidth);
HXLINE( 446)		 ::hxGeomAlgo::HxPointData _hx_tmp = ::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new((start->x - ny),(start->y + nx));
HXDLIN( 446)		 ::hxGeomAlgo::HxPointData _hx_tmp1 = ::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new((end->x - ny),(end->y + nx));
HXLINE( 447)		 ::hxGeomAlgo::HxPointData _hx_tmp2 = ::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new((end->x + ny),(end->y - nx));
HXLINE( 446)		return ::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new((start->x + ny),(start->y - nx)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyTools_obj,inflateLine,return )

::Array< ::Dynamic> PolyTools_obj::clip(::Array< ::Dynamic> subjPoly,::Array< ::Dynamic> clipPoly){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_457_clip)
HXLINE( 458)		bool _hx_tmp;
HXDLIN( 458)		if ((clipPoly->length >= 3)) {
HXLINE( 458)			_hx_tmp = ::hxGeomAlgo::PolyTools_obj::isConvex(clipPoly);
            		}
            		else {
HXLINE( 458)			_hx_tmp = false;
            		}
HXDLIN( 458)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp,HX_("`clipPoly` must be a valid convex poly",80,be,16,ee),::hx::SourceInfo(HX_("hxGeomAlgo/PolyTools.hx",7f,d1,ee,a4),458,HX_("hxGeomAlgo.PolyTools",c0,a6,e9,90),HX_("clip",d0,6e,c2,41)));
HXLINE( 460)		::Array< ::Dynamic> res = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 461)		::Array< ::Dynamic> output = subjPoly;
HXLINE( 463)		 ::Dynamic isInside;
HXDLIN( 463)		if (::hxGeomAlgo::PolyTools_obj::isCCW(clipPoly)) {
HXLINE( 463)			isInside = ::hxGeomAlgo::PolyTools_obj::isRight_dyn();
            		}
            		else {
HXLINE( 463)			isInside = ::hxGeomAlgo::PolyTools_obj::isLeft_dyn();
            		}
HXLINE( 465)		 ::hxGeomAlgo::HxPointData clipEdgeStart;
HXLINE( 466)		 ::hxGeomAlgo::HxPointData clipEdgeEnd;
HXLINE( 467)		 ::hxGeomAlgo::HxPointData inputEdgeStart;
HXLINE( 468)		 ::hxGeomAlgo::HxPointData inputEdgeEnd;
HXLINE( 470)		int clipLen = clipPoly->length;
HXLINE( 472)		int i = 0;
HXLINE( 473)		{
HXLINE( 473)			int _g = 0;
HXDLIN( 473)			int _g1 = clipLen;
HXDLIN( 473)			while((_g < _g1)){
HXLINE( 473)				_g = (_g + 1);
HXDLIN( 473)				int i = (_g - 1);
HXLINE( 474)				clipEdgeStart = clipPoly->__get(i).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXLINE( 475)				int idx = (i + 1);
HXDLIN( 475)				int len = clipPoly->length;
HXDLIN( 475)				if ((idx < 0)) {
HXLINE( 475)					idx = (idx + len);
            				}
HXDLIN( 475)				clipEdgeEnd = clipPoly->__get(::hx::Mod(idx,len)).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXLINE( 477)				::Array< ::Dynamic> input = output;
HXLINE( 478)				output = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 479)				inputEdgeStart = input->__get((input->length - 1)).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXLINE( 480)				{
HXLINE( 480)					int _g1 = 0;
HXDLIN( 480)					int _g2 = input->length;
HXDLIN( 480)					while((_g1 < _g2)){
HXLINE( 480)						_g1 = (_g1 + 1);
HXDLIN( 480)						int j = (_g1 - 1);
HXLINE( 481)						inputEdgeEnd = input->__get(j).StaticCast<  ::hxGeomAlgo::HxPointData >();
HXLINE( 483)						if (( (bool)(isInside(inputEdgeEnd,clipEdgeStart,clipEdgeEnd)) )) {
HXLINE( 484)							if (!(( (bool)(isInside(inputEdgeStart,clipEdgeStart,clipEdgeEnd)) ))) {
HXLINE( 485)								 ::hxGeomAlgo::HxPointData intersectionPoint = ::hxGeomAlgo::PolyTools_obj::intersection(inputEdgeStart,inputEdgeEnd,clipEdgeStart,clipEdgeEnd);
HXLINE( 486)								if (::hx::IsNotNull( intersectionPoint )) {
HXLINE( 486)									output->push(intersectionPoint);
            								}
            							}
HXLINE( 488)							output->push(inputEdgeEnd);
            						}
            						else {
HXLINE( 489)							if (( (bool)(isInside(inputEdgeStart,clipEdgeStart,clipEdgeEnd)) )) {
HXLINE( 490)								 ::hxGeomAlgo::HxPointData intersectionPoint = ::hxGeomAlgo::PolyTools_obj::intersection(inputEdgeStart,inputEdgeEnd,clipEdgeStart,clipEdgeEnd);
HXLINE( 491)								if (::hx::IsNotNull( intersectionPoint )) {
HXLINE( 491)									output->push(intersectionPoint);
            								}
            							}
            						}
HXLINE( 493)						inputEdgeStart = inputEdgeEnd;
            					}
            				}
HXLINE( 495)				res->push(output);
            			}
            		}
HXLINE( 498)		return res;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,clip,return )

void PolyTools_obj::exposeEnum(::hx::Class enumClass,::String as){
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_502_exposeEnum)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyTools_obj,exposeEnum,(void))


PolyTools_obj::PolyTools_obj()
{
}

bool PolyTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { outValue = at_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"eq") ) { outValue = eq_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dot") ) { outValue = dot_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sqr") ) { outValue = sqr_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zero") ) { outValue = ( zero ); return true; }
		if (HX_FIELD_EQ(inName,"isCW") ) { outValue = isCW_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"side") ) { outValue = side_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"meet") ) { outValue = meet_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clip") ) { outValue = clip_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { outValue = ( point ); return true; }
		if (HX_FIELD_EQ(inName,"isCCW") ) { outValue = isCCW_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"makeCW") ) { outValue = makeCW_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLeft") ) { outValue = isLeft_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"EPSILON") ) { outValue = ( EPSILON ); return true; }
		if (HX_FIELD_EQ(inName,"makeCCW") ) { outValue = makeCCW_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isRight") ) { outValue = isRight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getArea") ) { outValue = getArea_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flatten") ) { outValue = flatten_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isConvex") ) { outValue = isConvex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isSimple") ) { outValue = isSimple_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isReflex") ) { outValue = isReflex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wrappedIdx") ) { outValue = wrappedIdx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLeftOrOn") ) { outValue = isLeftOrOn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"exposeEnum") ) { outValue = exposeEnum_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isRightOrOn") ) { outValue = isRightOrOn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isCollinear") ) { outValue = isCollinear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getCentroid") ) { outValue = getCentroid_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inflateLine") ) { outValue = inflateLine_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"intersection") ) { outValue = intersection_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFloatArray") ) { outValue = toFloatArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toPointArray") ) { outValue = toPointArray_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"distanceSquared") ) { outValue = distanceSquared_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"segmentIntersect") ) { outValue = segmentIntersect_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"distanceToSegment") ) { outValue = distanceToSegment_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reverseFloatArray") ) { outValue = reverseFloatArray_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"findDuplicatePoints") ) { outValue = findDuplicatePoints_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"distanceToSegmentSquared") ) { outValue = distanceToSegmentSquared_dyn(); return true; }
	}
	return false;
}

bool PolyTools_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zero") ) { zero=ioValue.Cast<  ::hxGeomAlgo::HxPointData >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { point=ioValue.Cast<  ::hxGeomAlgo::HxPointData >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"EPSILON") ) { EPSILON=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PolyTools_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo PolyTools_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::hxGeomAlgo::HxPointData */ ,(void *) &PolyTools_obj::point,HX_("point",50,b4,8f,c6)},
	{::hx::fsObject /*  ::hxGeomAlgo::HxPointData */ ,(void *) &PolyTools_obj::zero,HX_("zero",28,0f,f1,50)},
	{::hx::fsFloat,(void *) &PolyTools_obj::EPSILON,HX_("EPSILON",4a,89,92,2c)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void PolyTools_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PolyTools_obj::point,"point");
	HX_MARK_MEMBER_NAME(PolyTools_obj::zero,"zero");
	HX_MARK_MEMBER_NAME(PolyTools_obj::EPSILON,"EPSILON");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PolyTools_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PolyTools_obj::point,"point");
	HX_VISIT_MEMBER_NAME(PolyTools_obj::zero,"zero");
	HX_VISIT_MEMBER_NAME(PolyTools_obj::EPSILON,"EPSILON");
};

#endif

::hx::Class PolyTools_obj::__mClass;

static ::String PolyTools_obj_sStaticFields[] = {
	HX_("point",50,b4,8f,c6),
	HX_("zero",28,0f,f1,50),
	HX_("EPSILON",4a,89,92,2c),
	HX_("isCCW",0d,84,49,c1),
	HX_("isCW",1e,e5,be,45),
	HX_("makeCCW",89,40,17,5c),
	HX_("makeCW",22,4c,cb,b5),
	HX_("isConvex",f1,12,48,20),
	HX_("isSimple",bc,9f,e8,10),
	HX_("segmentIntersect",ac,02,b9,9e),
	HX_("findDuplicatePoints",d5,41,e3,12),
	HX_("intersection",49,a2,61,88),
	HX_("isReflex",f6,63,4f,58),
	HX_("at",f3,54,00,00),
	HX_("wrappedIdx",f8,bf,61,61),
	HX_("side",97,8d,53,4c),
	HX_("isLeft",11,cd,16,65),
	HX_("isLeftOrOn",d3,ca,5f,cb),
	HX_("isRight",92,af,e9,85),
	HX_("isRightOrOn",d4,81,fc,92),
	HX_("isCollinear",db,38,6a,b6),
	HX_("distance",35,93,f9,6b),
	HX_("distanceToSegment",83,c5,5c,d7),
	HX_("distanceSquared",72,1e,40,0c),
	HX_("distanceToSegmentSquared",e4,f1,e5,6a),
	HX_("getCentroid",f6,a2,d9,bd),
	HX_("getArea",43,3b,f7,12),
	HX_("meet",c7,3d,59,48),
	HX_("dot",89,42,4c,00),
	HX_("sqr",14,a6,57,00),
	HX_("eq",6c,58,00,00),
	HX_("clear",8d,71,5b,48),
	HX_("toFloatArray",b8,73,07,e6),
	HX_("reverseFloatArray",1f,fe,40,0c),
	HX_("flatten",c4,ab,fb,e6),
	HX_("toPointArray",84,b8,2c,a7),
	HX_("inflateLine",1b,30,be,25),
	HX_("clip",d0,6e,c2,41),
	HX_("exposeEnum",65,9b,dd,1c),
	::String(null())
};

void PolyTools_obj::__register()
{
	PolyTools_obj _hx_dummy;
	PolyTools_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo.PolyTools",c0,a6,e9,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PolyTools_obj::__GetStatic;
	__mClass->mSetStaticField = &PolyTools_obj::__SetStatic;
	__mClass->mMarkFunc = PolyTools_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PolyTools_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< PolyTools_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PolyTools_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PolyTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PolyTools_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PolyTools_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_31_boot)
HXDLIN(  31)		point = ::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new(null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_33_boot)
HXDLIN(  33)		zero = ::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new(0,0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_25ff66a0b4d80bb1_35_boot)
HXDLIN(  35)		EPSILON = ((Float).00000001);
            	}
}

} // end namespace hxGeomAlgo
