// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_hxGeomAlgo_Debug
#include <hxGeomAlgo/Debug.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_HxPointData
#include <hxGeomAlgo/HxPointData.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_PolyTools
#include <hxGeomAlgo/PolyTools.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_ResultType
#include <hxGeomAlgo/ResultType.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_Tess2
#include <hxGeomAlgo/Tess2.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_Tesselator
#include <hxGeomAlgo/Tesselator.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_WindingRule
#include <hxGeomAlgo/WindingRule.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__HxPoint_HxPoint_Impl_
#include <hxGeomAlgo/_HxPoint/HxPoint_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7500396774669abb_125_tesselate,"hxGeomAlgo.Tess2","tesselate",0xdfc6b17e,"hxGeomAlgo.Tess2.tesselate","hxGeomAlgo/Tess2.hx",125,0xf73e622d)
static const Float _hx_array_data_864418d2_2[] = {
	(Float)0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_7500396774669abb_150_union,"hxGeomAlgo.Tess2","union",0xbc538073,"hxGeomAlgo.Tess2.union","hxGeomAlgo/Tess2.hx",150,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_7500396774669abb_161_intersection,"hxGeomAlgo.Tess2","intersection",0xe2337b65,"hxGeomAlgo.Tess2.intersection","hxGeomAlgo/Tess2.hx",161,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_7500396774669abb_172_difference,"hxGeomAlgo.Tess2","difference",0xa813b619,"hxGeomAlgo.Tess2.difference","hxGeomAlgo/Tess2.hx",172,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_7500396774669abb_190_convertResult,"hxGeomAlgo.Tess2","convertResult",0x81aa7294,"hxGeomAlgo.Tess2.convertResult","hxGeomAlgo/Tess2.hx",190,0xf73e622d)
namespace hxGeomAlgo{

void Tess2_obj::__construct() { }

Dynamic Tess2_obj::__CreateEmpty() { return new Tess2_obj; }

void *Tess2_obj::_hx_vtable = 0;

Dynamic Tess2_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Tess2_obj > _hx_result = new Tess2_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Tess2_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7feea37a;
}

 ::Dynamic Tess2_obj::tesselate(::Array< ::Dynamic> contours, ::hxGeomAlgo::WindingRule windingRule, ::hxGeomAlgo::ResultType resultType,::hx::Null< int >  __o_polySize,::hx::Null< int >  __o_vertexDim,::Array< Float > normal){
            		int polySize = __o_polySize.Default(3);
            		int vertexDim = __o_vertexDim.Default(2);
            	HX_GC_STACKFRAME(&_hx_pos_7500396774669abb_125_tesselate)
HXLINE( 126)		 ::hxGeomAlgo::Tesselator tess =  ::hxGeomAlgo::Tesselator_obj::__alloc( HX_CTX );
HXLINE( 127)		{
HXLINE( 127)			int _g = 0;
HXDLIN( 127)			int _g1 = contours->length;
HXDLIN( 127)			while((_g < _g1)){
HXLINE( 127)				_g = (_g + 1);
HXDLIN( 127)				int i = (_g - 1);
HXLINE( 128)				tess->addContour(vertexDim,contours->__get(i).StaticCast< ::Array< Float > >());
            			}
            		}
HXLINE( 130)		 ::hxGeomAlgo::WindingRule _hx_tmp;
HXDLIN( 130)		if (::hx::IsNull( windingRule )) {
HXLINE( 130)			_hx_tmp = ::hxGeomAlgo::WindingRule_obj::ODD_dyn();
            		}
            		else {
HXLINE( 130)			_hx_tmp = windingRule;
            		}
HXLINE( 131)		 ::hxGeomAlgo::ResultType _hx_tmp1;
HXDLIN( 131)		if (::hx::IsNull( resultType )) {
HXLINE( 131)			_hx_tmp1 = ::hxGeomAlgo::ResultType_obj::POLYGONS_dyn();
            		}
            		else {
HXLINE( 131)			_hx_tmp1 = resultType;
            		}
HXLINE( 134)		::Array< Float > _hx_tmp2;
HXDLIN( 134)		if (::hx::IsNull( normal )) {
HXLINE( 134)			_hx_tmp2 = ::Array_obj< Float >::fromData( _hx_array_data_864418d2_2,3);
            		}
            		else {
HXLINE( 134)			_hx_tmp2 = normal;
            		}
HXLINE( 130)		tess->tesselate(_hx_tmp,_hx_tmp1,polySize,vertexDim,_hx_tmp2);
HXLINE( 135)		return  ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("elements",37,36,c4,83),tess->elements)
            			->setFixed(1,HX_("elementCount",73,1c,9d,aa),tess->elementCount)
            			->setFixed(2,HX_("vertexIndices",23,88,93,55),tess->vertexIndices)
            			->setFixed(3,HX_("vertexCount",cb,0e,9f,5e),tess->vertexCount)
            			->setFixed(4,HX_("vertices",f9,bf,15,6a),tess->vertices));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Tess2_obj,tesselate,return )

 ::Dynamic Tess2_obj::_hx_union(::Array< ::Dynamic> contoursA,::Array< ::Dynamic> contoursB, ::hxGeomAlgo::ResultType resultType,::hx::Null< int >  __o_polySize,::hx::Null< int >  __o_vertexDim){
            		int polySize = __o_polySize.Default(3);
            		int vertexDim = __o_vertexDim.Default(2);
            	HX_STACKFRAME(&_hx_pos_7500396774669abb_150_union)
HXLINE( 151)		::Array< ::Dynamic> contours = contoursA->concat(contoursB);
HXLINE( 152)		return ::hxGeomAlgo::Tess2_obj::tesselate(contours,::hxGeomAlgo::WindingRule_obj::NON_ZERO_dyn(),resultType,polySize,vertexDim,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Tess2_obj,_hx_union,return )

 ::Dynamic Tess2_obj::intersection(::Array< ::Dynamic> contoursA,::Array< ::Dynamic> contoursB, ::hxGeomAlgo::ResultType resultType,::hx::Null< int >  __o_polySize,::hx::Null< int >  __o_vertexDim){
            		int polySize = __o_polySize.Default(3);
            		int vertexDim = __o_vertexDim.Default(2);
            	HX_STACKFRAME(&_hx_pos_7500396774669abb_161_intersection)
HXLINE( 162)		::Array< ::Dynamic> contours = contoursA->concat(contoursB);
HXLINE( 163)		return ::hxGeomAlgo::Tess2_obj::tesselate(contours,::hxGeomAlgo::WindingRule_obj::ABS_GEQ_TWO_dyn(),resultType,polySize,vertexDim,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Tess2_obj,intersection,return )

 ::Dynamic Tess2_obj::difference(::Array< ::Dynamic> contoursA,::Array< ::Dynamic> contoursB, ::hxGeomAlgo::ResultType resultType,::hx::Null< int >  __o_polySize,::hx::Null< int >  __o_vertexDim){
            		int polySize = __o_polySize.Default(3);
            		int vertexDim = __o_vertexDim.Default(2);
            	HX_STACKFRAME(&_hx_pos_7500396774669abb_172_difference)
HXLINE( 173)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 173)		{
HXLINE( 173)			int _g1 = 0;
HXDLIN( 173)			while((_g1 < contoursB->length)){
HXLINE( 173)				::Array< Float > poly = contoursB->__get(_g1).StaticCast< ::Array< Float > >();
HXDLIN( 173)				_g1 = (_g1 + 1);
HXDLIN( 173)				_g->push(::hxGeomAlgo::PolyTools_obj::reverseFloatArray(poly,null()));
            			}
            		}
HXDLIN( 173)		::Array< ::Dynamic> diffB = _g;
HXLINE( 174)		::Array< ::Dynamic> contours = contoursA->concat(diffB);
HXLINE( 175)		return ::hxGeomAlgo::Tess2_obj::tesselate(contours,::hxGeomAlgo::WindingRule_obj::POSITIVE_dyn(),resultType,polySize,vertexDim,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Tess2_obj,difference,return )

::Array< ::Dynamic> Tess2_obj::convertResult(::Array< Float > vertices,::Array< int > elements, ::hxGeomAlgo::ResultType resultType,int polySize,::Array< ::Dynamic> out){
            	HX_STACKFRAME(&_hx_pos_7500396774669abb_190_convertResult)
HXLINE( 191)		if (::hx::IsNull( out )) {
HXLINE( 191)			out = ::Array_obj< ::Dynamic>::__new();
            		}
HXLINE( 193)		bool _hx_tmp;
HXDLIN( 193)		if ((resultType->_hx_getIndex() == 2)) {
HXLINE( 193)			_hx_tmp = true;
            		}
            		else {
HXLINE( 193)			_hx_tmp = false;
            		}
HXDLIN( 193)		if (!(_hx_tmp)) {
HXLINE( 194)			bool _hx_tmp;
HXDLIN( 194)			if ((polySize >= 3)) {
HXLINE( 194)				_hx_tmp = (::hx::Mod(elements->length,polySize) == 0);
            			}
            			else {
HXLINE( 194)				_hx_tmp = false;
            			}
HXDLIN( 194)			::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp,HX_("Invalid size",aa,82,60,93),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),194,HX_("hxGeomAlgo.Tess2",d2,18,44,86),HX_("convertResult",30,53,de,43)));
            		}
HXLINE( 197)		int i = 0;
HXLINE( 198)		switch((int)(resultType->_hx_getIndex())){
            			case (int)1: {
HXLINE( 213)				while((i < elements->length)){
HXLINE( 214)					::Array< ::Dynamic> poly = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 215)					{
HXLINE( 215)						int _g = 0;
HXDLIN( 215)						int _g1 = polySize;
HXDLIN( 215)						while((_g < _g1)){
HXLINE( 215)							_g = (_g + 1);
HXDLIN( 215)							int j = (_g - 1);
HXLINE( 216)							int idx = elements->__get((i + j));
HXLINE( 217)							if ((idx == -1)) {
HXLINE( 217)								continue;
            							}
HXLINE( 218)							poly->push(::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new(vertices->__get((idx * 2)),vertices->__get(((idx * 2) + 1))));
            						}
            					}
HXLINE( 220)					out->push(poly);
HXLINE( 221)					i = (i + (polySize * 2));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 225)				while((i < elements->length)){
HXLINE( 226)					::Array< ::Dynamic> poly = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 227)					int start = elements->__get(i);
HXLINE( 228)					int count = elements->__get((i + 1));
HXLINE( 229)					{
HXLINE( 229)						int _g = 0;
HXDLIN( 229)						int _g1 = count;
HXDLIN( 229)						while((_g < _g1)){
HXLINE( 229)							_g = (_g + 1);
HXDLIN( 229)							int j = (_g - 1);
HXLINE( 230)							int idx = (start + j);
HXLINE( 231)							poly->push(::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new(vertices->__get((idx * 2)),vertices->__get(((idx * 2) + 1))));
            						}
            					}
HXLINE( 233)					out->push(poly);
HXLINE( 234)					i = (i + 2);
            				}
            			}
            			break;
            			case (int)0: case (int)3: {
HXLINE( 201)				while((i < elements->length)){
HXLINE( 202)					::Array< ::Dynamic> poly = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 203)					{
HXLINE( 203)						int _g = 0;
HXDLIN( 203)						int _g1 = polySize;
HXDLIN( 203)						while((_g < _g1)){
HXLINE( 203)							_g = (_g + 1);
HXDLIN( 203)							int j = (_g - 1);
HXLINE( 204)							int idx = elements->__get((i + j));
HXLINE( 205)							if ((idx == -1)) {
HXLINE( 205)								continue;
            							}
HXLINE( 206)							poly->push(::hxGeomAlgo::_HxPoint::HxPoint_Impl__obj::_new(vertices->__get((idx * 2)),vertices->__get(((idx * 2) + 1))));
            						}
            					}
HXLINE( 208)					out->push(poly);
HXLINE( 209)					i = (i + polySize);
            				}
            			}
            			break;
            		}
HXLINE( 238)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Tess2_obj,convertResult,return )


Tess2_obj::Tess2_obj()
{
}

bool Tess2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"union") ) { outValue = _hx_union_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tesselate") ) { outValue = tesselate_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"difference") ) { outValue = difference_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"intersection") ) { outValue = intersection_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convertResult") ) { outValue = convertResult_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Tess2_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Tess2_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Tess2_obj::__mClass;

static ::String Tess2_obj_sStaticFields[] = {
	HX_("tesselate",1a,14,9f,3e),
	HX_("union",0f,65,e7,a6),
	HX_("intersection",49,a2,61,88),
	HX_("difference",fd,9b,91,46),
	HX_("convertResult",30,53,de,43),
	::String(null())
};

void Tess2_obj::__register()
{
	Tess2_obj _hx_dummy;
	Tess2_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo.Tess2",d2,18,44,86);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Tess2_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Tess2_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Tess2_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tess2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tess2_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
