// Generated by Haxe 4.3.0-rc.1+88ebbd0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_hxGeomAlgo_Debug
#include <hxGeomAlgo/Debug.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_ResultType
#include <hxGeomAlgo/ResultType.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_Tesselator
#include <hxGeomAlgo/Tesselator.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_WindingRule
#include <hxGeomAlgo/WindingRule.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_Dict
#include <hxGeomAlgo/_Tess2/Dict.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_Geom
#include <hxGeomAlgo/_Tess2/Geom.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_PriorityQ
#include <hxGeomAlgo/_Tess2/PriorityQ.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_Sweep
#include <hxGeomAlgo/_Tess2/Sweep.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessFace
#include <hxGeomAlgo/_Tess2/TessFace.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessHalfEdge
#include <hxGeomAlgo/_Tess2/TessHalfEdge.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessMesh
#include <hxGeomAlgo/_Tess2/TessMesh.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessVertex
#include <hxGeomAlgo/_Tess2/TessVertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5f0a42323909cb02_2989_new,"hxGeomAlgo.Tesselator","new",0x3e1b478f,"hxGeomAlgo.Tesselator.new","hxGeomAlgo/Tess2.hx",2989,0xf73e622d)
static const Float _hx_array_data_9ec6d41d_1[] = {
	0.0,0.0,
};
static const Float _hx_array_data_9ec6d41d_2[] = {
	0.0,0.0,
};
static const Float _hx_array_data_9ec6d41d_3[] = {
	0.0,0.0,0.0,
};
static const Float _hx_array_data_9ec6d41d_4[] = {
	0.0,0.0,0.0,
};
static const Float _hx_array_data_9ec6d41d_5[] = {
	0.0,0.0,0.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3026_dot_,"hxGeomAlgo.Tesselator","dot_",0x132ec7a7,"hxGeomAlgo.Tesselator.dot_","hxGeomAlgo/Tess2.hx",3026,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3029_normalize_,"hxGeomAlgo.Tesselator","normalize_",0x8dd7c0e3,"hxGeomAlgo.Tesselator.normalize_","hxGeomAlgo/Tess2.hx",3029,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3038_longAxis_,"hxGeomAlgo.Tesselator","longAxis_",0xfe0bddf1,"hxGeomAlgo.Tesselator.longAxis_","hxGeomAlgo/Tess2.hx",3038,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3046_computeNormal_,"hxGeomAlgo.Tesselator","computeNormal_",0x108046d2,"hxGeomAlgo.Tesselator.computeNormal_","hxGeomAlgo/Tess2.hx",3046,0xf73e622d)
static const Float _hx_array_data_9ec6d41d_12[] = {
	.0,.0,.0,
};
static const Float _hx_array_data_9ec6d41d_13[] = {
	.0,.0,.0,
};
static const Float _hx_array_data_9ec6d41d_14[] = {
	.0,.0,.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3119_checkOrientation_,"hxGeomAlgo.Tesselator","checkOrientation_",0x4e3d03e6,"hxGeomAlgo.Tesselator.checkOrientation_","hxGeomAlgo/Tess2.hx",3119,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3182_projectPolygon_,"hxGeomAlgo.Tesselator","projectPolygon_",0xbbe6fa4d,"hxGeomAlgo.Tesselator.projectPolygon_","hxGeomAlgo/Tess2.hx",3182,0xf73e622d)
static const Float _hx_array_data_9ec6d41d_22[] = {
	.0,.0,.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3261_addWinding_,"hxGeomAlgo.Tesselator","addWinding_",0x7a14a375,"hxGeomAlgo.Tesselator.addWinding_","hxGeomAlgo/Tess2.hx",3261,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3294_tessellateMonoRegion_,"hxGeomAlgo.Tesselator","tessellateMonoRegion_",0x644a1c79,"hxGeomAlgo.Tesselator.tessellateMonoRegion_","hxGeomAlgo/Tess2.hx",3294,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3355_tessellateInterior_,"hxGeomAlgo.Tesselator","tessellateInterior_",0x15ad3560,"hxGeomAlgo.Tesselator.tessellateInterior_","hxGeomAlgo/Tess2.hx",3355,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3379_refineDelaunay_,"hxGeomAlgo.Tesselator","refineDelaunay_",0x4e21c23a,"hxGeomAlgo.Tesselator.refineDelaunay_","hxGeomAlgo/Tess2.hx",3379,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3439_discardExterior_,"hxGeomAlgo.Tesselator","discardExterior_",0x504f5cd4,"hxGeomAlgo.Tesselator.discardExterior_","hxGeomAlgo/Tess2.hx",3439,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3463_setWindingNumber_,"hxGeomAlgo.Tesselator","setWindingNumber_",0xc1a4922d,"hxGeomAlgo.Tesselator.setWindingNumber_","hxGeomAlgo/Tess2.hx",3463,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3487_getNeighbourFace_,"hxGeomAlgo.Tesselator","getNeighbourFace_",0xbc5abcaa,"hxGeomAlgo.Tesselator.getNeighbourFace_","hxGeomAlgo/Tess2.hx",3487,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3495_outputPolymesh_,"hxGeomAlgo.Tesselator","outputPolymesh_",0x37f8fe74,"hxGeomAlgo.Tesselator.outputPolymesh_","hxGeomAlgo/Tess2.hx",3495,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3648_outputContours_,"hxGeomAlgo.Tesselator","outputContours_",0x0678a354,"hxGeomAlgo.Tesselator.outputContours_","hxGeomAlgo/Tess2.hx",3648,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3745_addContour,"hxGeomAlgo.Tesselator","addContour",0x8d71b26a,"hxGeomAlgo.Tesselator.addContour","hxGeomAlgo/Tess2.hx",3745,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f0a42323909cb02_3803_tesselate,"hxGeomAlgo.Tesselator","tesselate",0xa84a9889,"hxGeomAlgo.Tesselator.tesselate","hxGeomAlgo/Tess2.hx",3803,0xf73e622d)
namespace hxGeomAlgo{

void Tesselator_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_2989_new)
HXLINE(3017)		this->elementCount = 0;
HXLINE(3016)		this->elements = ::Array_obj< int >::__new(0);
HXLINE(3015)		this->vertexCount = 0;
HXLINE(3014)		this->vertexIndices = ::Array_obj< int >::__new(0);
HXLINE(3013)		this->vertices = ::Array_obj< Float >::__new(0);
HXLINE(3011)		this->vertexIndexCounter = 0;
HXLINE(3009)		this->event = null();
HXLINE(3008)		this->pq = null();
HXLINE(3007)		this->dict = null();
HXLINE(3002)		this->bmax = ::Array_obj< Float >::fromData( _hx_array_data_9ec6d41d_1,2);
HXLINE(3001)		this->bmin = ::Array_obj< Float >::fromData( _hx_array_data_9ec6d41d_2,2);
HXLINE(2999)		this->tUnit = ::Array_obj< Float >::fromData( _hx_array_data_9ec6d41d_3,3);
HXLINE(2998)		this->sUnit = ::Array_obj< Float >::fromData( _hx_array_data_9ec6d41d_4,3);
HXLINE(2997)		this->normal = ::Array_obj< Float >::fromData( _hx_array_data_9ec6d41d_5,3);
HXLINE(2992)		this->mesh = null();
HXLINE(3022)		this->windingRule = ::hxGeomAlgo::WindingRule_obj::ODD_dyn();
            	}

Dynamic Tesselator_obj::__CreateEmpty() { return new Tesselator_obj; }

void *Tesselator_obj::_hx_vtable = 0;

Dynamic Tesselator_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Tesselator_obj > _hx_result = new Tesselator_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Tesselator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5a18b431;
}

Float Tesselator_obj::dot_(::Array< Float > u,::Array< Float > v){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3026_dot_)
HXDLIN(3026)		return (((u->__get(0) * v->__get(0)) + (u->__get(1) * v->__get(1))) + (u->__get(2) * v->__get(2)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tesselator_obj,dot_,return )

void Tesselator_obj::normalize_(::Array< Float > v){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3029_normalize_)
HXLINE(3030)		Float len = (((v->__get(0) * v->__get(0)) + (v->__get(1) * v->__get(1))) + (v->__get(2) * v->__get(2)));
HXLINE(3031)		::hxGeomAlgo::Debug_obj::_hx_assert((len > ((Float)0.0)),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),3031,HX_("hxGeomAlgo.Tesselator",1d,d4,c6,9e),HX_("normalize_",32,64,6f,81)));
HXLINE(3032)		len = ::Math_obj::sqrt(len);
HXLINE(3033)		::Array< Float > v1 = v;
HXDLIN(3033)		int _hx_tmp = 0;
HXDLIN(3033)		v1[_hx_tmp] = (v1->__get(_hx_tmp) / len);
HXLINE(3034)		::Array< Float > v2 = v;
HXDLIN(3034)		int _hx_tmp1 = 1;
HXDLIN(3034)		v2[_hx_tmp1] = (v2->__get(_hx_tmp1) / len);
HXLINE(3035)		::Array< Float > v3 = v;
HXDLIN(3035)		int _hx_tmp2 = 2;
HXDLIN(3035)		v3[_hx_tmp2] = (v3->__get(_hx_tmp2) / len);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tesselator_obj,normalize_,(void))

int Tesselator_obj::longAxis_(::Array< Float > v){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3038_longAxis_)
HXLINE(3039)		int i = 0;
HXLINE(3040)		if ((::Math_obj::abs(v->__get(1)) > ::Math_obj::abs(v->__get(0)))) {
HXLINE(3040)			i = 1;
            		}
HXLINE(3041)		if ((::Math_obj::abs(v->__get(2)) > ::Math_obj::abs(v->__get(i)))) {
HXLINE(3041)			i = 2;
            		}
HXLINE(3042)		return i;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tesselator_obj,longAxis_,return )

void Tesselator_obj::computeNormal_(::Array< Float > norm){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3046_computeNormal_)
HXLINE(3048)		Float c;
HXDLIN(3048)		Float tLen2;
HXLINE(3049)		::Array< Float > maxVal = ::Array_obj< Float >::fromData( _hx_array_data_9ec6d41d_12,3);
HXDLIN(3049)		::Array< Float > minVal = ::Array_obj< Float >::fromData( _hx_array_data_9ec6d41d_13,3);
HXDLIN(3049)		::Array< Float > d1 = ::Array_obj< Float >::fromData( _hx_array_data_9ec6d41d_14,3);
HXDLIN(3049)		Float d2_0 = ((Float).0);
HXDLIN(3049)		Float d2_1 = ((Float).0);
HXDLIN(3049)		Float d2_2 = ((Float).0);
HXDLIN(3049)		Float tNorm_0 = ((Float).0);
HXDLIN(3049)		Float tNorm_1 = ((Float).0);
HXDLIN(3049)		Float tNorm_2 = ((Float).0);
HXLINE(3050)		::Array< ::Dynamic> maxVert = ::Array_obj< ::Dynamic>::__new(3)->init(0,null())->init(1,null())->init(2,null());
HXDLIN(3050)		::Array< ::Dynamic> minVert = ::Array_obj< ::Dynamic>::__new(3)->init(0,null())->init(1,null())->init(2,null());
HXLINE(3051)		 ::hxGeomAlgo::_Tess2::TessVertex vHead = this->mesh->vHead;
HXLINE(3047)		 ::hxGeomAlgo::_Tess2::TessVertex v = vHead->next;
HXLINE(3055)		{
HXLINE(3055)			{
HXLINE(3056)				c = v->coords->__get(0);
HXLINE(3057)				minVal[0] = c;
HXLINE(3058)				minVert[0] = v;
HXLINE(3059)				maxVal[0] = c;
HXLINE(3060)				maxVert[0] = v;
            			}
HXLINE(3055)			{
HXLINE(3056)				c = v->coords->__get(1);
HXLINE(3057)				minVal[1] = c;
HXLINE(3058)				minVert[1] = v;
HXLINE(3059)				maxVal[1] = c;
HXLINE(3060)				maxVert[1] = v;
            			}
HXLINE(3055)			{
HXLINE(3056)				c = v->coords->__get(2);
HXLINE(3057)				minVal[2] = c;
HXLINE(3058)				minVert[2] = v;
HXLINE(3059)				maxVal[2] = c;
HXLINE(3060)				maxVert[2] = v;
            			}
            		}
HXLINE(3063)		v = vHead->next;
HXLINE(3064)		while(::hx::IsInstanceNotEq( v,vHead )){
HXLINE(3065)			{
HXLINE(3065)				{
HXLINE(3066)					c = v->coords->__get(0);
HXLINE(3067)					if ((c < minVal->__get(0))) {
HXLINE(3067)						minVal[0] = c;
HXDLIN(3067)						minVert[0] = v;
            					}
HXLINE(3068)					if ((c > maxVal->__get(0))) {
HXLINE(3068)						maxVal[0] = c;
HXDLIN(3068)						maxVert[0] = v;
            					}
            				}
HXLINE(3065)				{
HXLINE(3066)					c = v->coords->__get(1);
HXLINE(3067)					if ((c < minVal->__get(1))) {
HXLINE(3067)						minVal[1] = c;
HXDLIN(3067)						minVert[1] = v;
            					}
HXLINE(3068)					if ((c > maxVal->__get(1))) {
HXLINE(3068)						maxVal[1] = c;
HXDLIN(3068)						maxVert[1] = v;
            					}
            				}
HXLINE(3065)				{
HXLINE(3066)					c = v->coords->__get(2);
HXLINE(3067)					if ((c < minVal->__get(2))) {
HXLINE(3067)						minVal[2] = c;
HXDLIN(3067)						minVert[2] = v;
            					}
HXLINE(3068)					if ((c > maxVal->__get(2))) {
HXLINE(3068)						maxVal[2] = c;
HXDLIN(3068)						maxVert[2] = v;
            					}
            				}
            			}
HXLINE(3070)			v = v->next;
            		}
HXLINE(3052)		int i = 0;
HXLINE(3077)		if (((maxVal->__get(1) - minVal->__get(1)) > (maxVal->__get(0) - minVal->__get(0)))) {
HXLINE(3077)			i = 1;
            		}
HXLINE(3078)		if (((maxVal->__get(2) - minVal->__get(2)) > (maxVal->__get(i) - minVal->__get(i)))) {
HXLINE(3078)			i = 2;
            		}
HXLINE(3079)		if ((minVal->__get(i) >= maxVal->__get(i))) {
HXLINE(3081)			norm[0] = ( (Float)(0) );
HXDLIN(3081)			norm[1] = ( (Float)(0) );
HXDLIN(3081)			norm[2] = ( (Float)(1) );
HXLINE(3082)			return;
            		}
HXLINE(3048)		Float maxLen2 = ((Float).0);
HXLINE(3047)		 ::hxGeomAlgo::_Tess2::TessVertex v1 = minVert->__get(i).StaticCast<  ::hxGeomAlgo::_Tess2::TessVertex >();
HXDLIN(3047)		 ::hxGeomAlgo::_Tess2::TessVertex v2 = maxVert->__get(i).StaticCast<  ::hxGeomAlgo::_Tess2::TessVertex >();
HXLINE(3091)		d1[0] = (v1->coords->__get(0) - v2->coords->__get(0));
HXLINE(3092)		d1[1] = (v1->coords->__get(1) - v2->coords->__get(1));
HXLINE(3093)		d1[2] = (v1->coords->__get(2) - v2->coords->__get(2));
HXLINE(3094)		v = vHead->next;
HXLINE(3095)		while(::hx::IsInstanceNotEq( v,vHead )){
HXLINE(3096)			d2_0 = (v->coords->__get(0) - v2->coords->__get(0));
HXLINE(3097)			d2_1 = (v->coords->__get(1) - v2->coords->__get(1));
HXLINE(3098)			d2_2 = (v->coords->__get(2) - v2->coords->__get(2));
HXLINE(3099)			tNorm_0 = ((d1->__get(1) * d2_2) - (d1->__get(2) * d2_1));
HXLINE(3100)			tNorm_1 = ((d1->__get(2) * d2_0) - (d1->__get(0) * d2_2));
HXLINE(3101)			tNorm_2 = ((d1->__get(0) * d2_1) - (d1->__get(1) * d2_0));
HXLINE(3102)			tLen2 = (((tNorm_0 * tNorm_0) + (tNorm_1 * tNorm_1)) + (tNorm_2 * tNorm_2));
HXLINE(3103)			if ((tLen2 > maxLen2)) {
HXLINE(3104)				maxLen2 = tLen2;
HXLINE(3105)				norm[0] = tNorm_0;
HXLINE(3106)				norm[1] = tNorm_1;
HXLINE(3107)				norm[2] = tNorm_2;
            			}
HXLINE(3109)			v = v->next;
            		}
HXLINE(3112)		if ((maxLen2 <= 0)) {
HXLINE(3114)			norm[0] = (norm[1] = (norm[2] = ( (Float)(0) )));
HXLINE(3115)			norm[this->longAxis_(d1)] = ( (Float)(1) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tesselator_obj,computeNormal_,(void))

void Tesselator_obj::checkOrientation_(){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3119_checkOrientation_)
HXLINE(3121)		 ::hxGeomAlgo::_Tess2::TessFace fHead = this->mesh->fHead;
HXLINE(3122)		 ::hxGeomAlgo::_Tess2::TessVertex v;
HXDLIN(3122)		 ::hxGeomAlgo::_Tess2::TessVertex vHead = this->mesh->vHead;
HXLINE(3123)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e;
HXLINE(3120)		Float area = ((Float).0);
HXLINE(3121)		 ::hxGeomAlgo::_Tess2::TessFace f = fHead->next;
HXLINE(3130)		while(::hx::IsInstanceNotEq( f,fHead )){
HXLINE(3131)			e = f->anEdge;
HXLINE(3132)			if ((e->winding <= 0)) {
HXLINE(3133)				f = f->next;
HXLINE(3134)				continue;
            			}
HXLINE(3136)			while(true){
HXLINE(3137)				Float e1 = e->Org->s;
HXDLIN(3137)				Float area1 = (e1 - e->get_Dst()->s);
HXDLIN(3137)				Float e2 = e->Org->t;
HXDLIN(3137)				area = (area + (area1 * (e2 + e->get_Dst()->t)));
HXLINE(3138)				e = e->Lnext;
HXLINE(3136)				if (!(::hx::IsInstanceNotEq( e,f->anEdge ))) {
HXLINE(3136)					goto _hx_goto_16;
            				}
            			}
            			_hx_goto_16:;
HXLINE(3140)			f = f->next;
            		}
HXLINE(3142)		if ((area < 0)) {
HXLINE(3144)			v = vHead->next;
HXLINE(3145)			while(::hx::IsInstanceNotEq( v,vHead )){
HXLINE(3146)				v->t = -(v->t);
HXLINE(3147)				v = v->next;
            			}
HXLINE(3149)			this->tUnit[0] = -(this->tUnit->__get(0));
HXLINE(3150)			this->tUnit[1] = -(this->tUnit->__get(1));
HXLINE(3151)			this->tUnit[2] = -(this->tUnit->__get(2));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tesselator_obj,checkOrientation_,(void))

void Tesselator_obj::projectPolygon_(){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3182_projectPolygon_)
HXLINE(3183)		 ::hxGeomAlgo::_Tess2::TessVertex vHead = this->mesh->vHead;
HXLINE(3184)		::Array< Float > norm = ::Array_obj< Float >::fromData( _hx_array_data_9ec6d41d_22,3);
HXLINE(3186)		bool computedNormal = false;
HXLINE(3188)		norm[0] = this->normal->__get(0);
HXLINE(3189)		norm[1] = this->normal->__get(1);
HXLINE(3190)		norm[2] = this->normal->__get(2);
HXLINE(3191)		bool _hx_tmp;
HXDLIN(3191)		bool _hx_tmp1;
HXDLIN(3191)		if ((norm->__get(0) == ((Float)0.0))) {
HXLINE(3191)			_hx_tmp1 = (norm->__get(1) == ((Float)0.0));
            		}
            		else {
HXLINE(3191)			_hx_tmp1 = false;
            		}
HXDLIN(3191)		if (_hx_tmp1) {
HXLINE(3191)			_hx_tmp = (norm->__get(2) == ((Float)0.0));
            		}
            		else {
HXLINE(3191)			_hx_tmp = false;
            		}
HXDLIN(3191)		if (_hx_tmp) {
HXLINE(3192)			this->computeNormal_(norm);
HXLINE(3193)			computedNormal = true;
            		}
HXLINE(3185)		::Array< Float > sUnit = this->sUnit;
HXDLIN(3185)		::Array< Float > tUnit = this->tUnit;
HXLINE(3186)		int i = this->longAxis_(norm);
HXLINE(3223)		sUnit[i] = ( (Float)(0) );
HXLINE(3224)		sUnit[::hx::Mod((i + 1),3)] = ((Float)1.0);
HXLINE(3225)		sUnit[::hx::Mod((i + 2),3)] = ((Float)0.0);
HXLINE(3227)		tUnit[i] = ( (Float)(0) );
HXLINE(3228)		tUnit[::hx::Mod((i + 1),3)] = ((Float)0.0);
HXLINE(3229)		Float _hx_tmp2;
HXDLIN(3229)		if ((norm->__get(i) > 0)) {
HXLINE(3229)			_hx_tmp2 = ((Float)1.0);
            		}
            		else {
HXLINE(3229)			_hx_tmp2 = ((Float)-1.0);
            		}
HXDLIN(3229)		tUnit[::hx::Mod((i + 2),3)] = _hx_tmp2;
HXLINE(3183)		 ::hxGeomAlgo::_Tess2::TessVertex v = vHead->next;
HXLINE(3234)		while(::hx::IsInstanceNotEq( v,vHead )){
HXLINE(3235)			v->s = this->dot_(v->coords,sUnit);
HXLINE(3236)			v->t = this->dot_(v->coords,tUnit);
HXLINE(3237)			v = v->next;
            		}
HXLINE(3239)		if (computedNormal) {
HXLINE(3240)			this->checkOrientation_();
            		}
HXLINE(3186)		bool first = true;
HXLINE(3245)		v = vHead->next;
HXLINE(3246)		while(::hx::IsInstanceNotEq( v,vHead )){
HXLINE(3247)			if (first) {
HXLINE(3248)				Float _hx_tmp = (this->bmax[0] = v->s);
HXDLIN(3248)				this->bmin[0] = _hx_tmp;
HXLINE(3249)				Float _hx_tmp1 = (this->bmax[1] = v->t);
HXDLIN(3249)				this->bmin[1] = _hx_tmp1;
HXLINE(3250)				first = false;
            			}
            			else {
HXLINE(3252)				if ((v->s < this->bmin->__get(0))) {
HXLINE(3252)					this->bmin[0] = v->s;
            				}
HXLINE(3253)				if ((v->s > this->bmax->__get(0))) {
HXLINE(3253)					this->bmax[0] = v->s;
            				}
HXLINE(3254)				if ((v->t < this->bmin->__get(1))) {
HXLINE(3254)					this->bmin[1] = v->t;
            				}
HXLINE(3255)				if ((v->t > this->bmax->__get(1))) {
HXLINE(3255)					this->bmax[1] = v->t;
            				}
            			}
HXLINE(3257)			v = v->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tesselator_obj,projectPolygon_,(void))

void Tesselator_obj::addWinding_( ::hxGeomAlgo::_Tess2::TessHalfEdge eDst, ::hxGeomAlgo::_Tess2::TessHalfEdge eSrc){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3261_addWinding_)
HXLINE(3262)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eDst1 = eDst;
HXDLIN(3262)		eDst1->winding = (eDst1->winding + eSrc->winding);
HXLINE(3263)		 ::hxGeomAlgo::_Tess2::TessHalfEdge fh = eDst->Sym;
HXDLIN(3263)		fh->winding = (fh->winding + eSrc->Sym->winding);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tesselator_obj,addWinding_,(void))

bool Tesselator_obj::tessellateMonoRegion_( ::hxGeomAlgo::_Tess2::TessMesh mesh, ::hxGeomAlgo::_Tess2::TessFace face){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3294_tessellateMonoRegion_)
HXLINE(3295)		 ::hxGeomAlgo::_Tess2::TessHalfEdge up = face->anEdge;
HXLINE(3303)		bool _hx_tmp;
HXDLIN(3303)		if (::hx::IsInstanceNotEq( up->Lnext,up )) {
HXLINE(3303)			_hx_tmp = ::hx::IsInstanceNotEq( up->Lnext->Lnext,up );
            		}
            		else {
HXLINE(3303)			_hx_tmp = false;
            		}
HXDLIN(3303)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),3303,HX_("hxGeomAlgo.Tesselator",1d,d4,c6,9e),HX_("tessellateMonoRegion_",8a,2d,f2,26)));
HXLINE(3305)		while(true){
HXLINE(3305)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = up->get_Dst();
HXDLIN(3305)			if (!(::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(_hx_tmp,up->Org))) {
HXLINE(3305)				goto _hx_goto_24;
            			}
HXDLIN(3305)			up = up->get_Lprev();
            		}
            		_hx_goto_24:;
HXLINE(3306)		while(true){
HXLINE(3306)			 ::hxGeomAlgo::_Tess2::TessVertex up1 = up->Org;
HXDLIN(3306)			if (!(::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(up1,up->get_Dst()))) {
HXLINE(3306)				goto _hx_goto_25;
            			}
HXDLIN(3306)			up = up->Lnext;
            		}
            		_hx_goto_25:;
HXLINE(3295)		 ::hxGeomAlgo::_Tess2::TessHalfEdge lo = up->get_Lprev();
HXLINE(3310)		while(::hx::IsInstanceNotEq( up->Lnext,lo )){
HXLINE(3311)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = up->get_Dst();
HXDLIN(3311)			if (::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(_hx_tmp,lo->Org)) {
HXLINE(3316)				while(true){
HXLINE(3316)					bool _hx_tmp;
HXDLIN(3316)					if (::hx::IsInstanceNotEq( lo->Lnext,up )) {
HXLINE(3316)						if (!(::hxGeomAlgo::_Tess2::Geom_obj::edgeGoesLeft(lo->Lnext))) {
HXLINE(3317)							 ::hxGeomAlgo::_Tess2::TessVertex lo1 = lo->Org;
HXDLIN(3317)							 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp1 = lo->get_Dst();
HXLINE(3316)							_hx_tmp = (::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(lo1,_hx_tmp1,lo->Lnext->get_Dst()) <= ((Float)0.0));
            						}
            						else {
HXLINE(3316)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE(3316)						_hx_tmp = false;
            					}
HXDLIN(3316)					if (!(_hx_tmp)) {
HXLINE(3316)						goto _hx_goto_27;
            					}
HXLINE(3319)					 ::hxGeomAlgo::_Tess2::TessHalfEdge tempHalfEdge = mesh->connect(lo->Lnext,lo);
HXLINE(3321)					lo = tempHalfEdge->Sym;
            				}
            				_hx_goto_27:;
HXLINE(3323)				lo = lo->get_Lprev();
            			}
            			else {
HXLINE(3326)				while(true){
HXLINE(3326)					bool _hx_tmp;
HXDLIN(3326)					if (::hx::IsInstanceNotEq( lo->Lnext,up )) {
HXLINE(3326)						if (!(::hxGeomAlgo::_Tess2::Geom_obj::edgeGoesRight(up->get_Lprev()))) {
HXLINE(3327)							 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp1 = up->get_Dst();
HXDLIN(3327)							 ::hxGeomAlgo::_Tess2::TessVertex up1 = up->Org;
HXLINE(3326)							_hx_tmp = (::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(_hx_tmp1,up1,up->get_Lprev()->Org) >= ((Float)0.0));
            						}
            						else {
HXLINE(3326)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE(3326)						_hx_tmp = false;
            					}
HXDLIN(3326)					if (!(_hx_tmp)) {
HXLINE(3326)						goto _hx_goto_28;
            					}
HXLINE(3329)					 ::hxGeomAlgo::_Tess2::TessHalfEdge tempHalfEdge = mesh->connect(up,up->get_Lprev());
HXLINE(3331)					up = tempHalfEdge->Sym;
            				}
            				_hx_goto_28:;
HXLINE(3333)				up = up->Lnext;
            			}
            		}
HXLINE(3340)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceNotEq( lo->Lnext,up ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),3340,HX_("hxGeomAlgo.Tesselator",1d,d4,c6,9e),HX_("tessellateMonoRegion_",8a,2d,f2,26)));
HXLINE(3341)		while(::hx::IsInstanceNotEq( lo->Lnext->Lnext,up )){
HXLINE(3342)			 ::hxGeomAlgo::_Tess2::TessHalfEdge tempHalfEdge = mesh->connect(lo->Lnext,lo);
HXLINE(3344)			lo = tempHalfEdge->Sym;
            		}
HXLINE(3347)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tesselator_obj,tessellateMonoRegion_,return )

bool Tesselator_obj::tessellateInterior_( ::hxGeomAlgo::_Tess2::TessMesh mesh){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3355_tessellateInterior_)
HXLINE(3356)		 ::hxGeomAlgo::_Tess2::TessFace next;
HXDLIN(3356)		 ::hxGeomAlgo::_Tess2::TessFace f = mesh->fHead->next;
HXLINE(3360)		while(::hx::IsInstanceNotEq( f,mesh->fHead )){
HXLINE(3362)			next = f->next;
HXLINE(3363)			if (f->inside) {
HXLINE(3364)				if (!(this->tessellateMonoRegion_(mesh,f))) {
HXLINE(3364)					return false;
            				}
            			}
HXLINE(3366)			f = next;
            		}
HXLINE(3369)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tesselator_obj,tessellateInterior_,return )

void Tesselator_obj::refineDelaunay_( ::hxGeomAlgo::_Tess2::TessMesh mesh){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3379_refineDelaunay_)
HXLINE(3389)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3390)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e;
HXLINE(3391)		 ::hxGeomAlgo::_Tess2::TessHalfEdge edges_0 = null();
HXDLIN(3391)		 ::hxGeomAlgo::_Tess2::TessHalfEdge edges_1 = null();
HXDLIN(3391)		 ::hxGeomAlgo::_Tess2::TessHalfEdge edges_2 = null();
HXDLIN(3391)		 ::hxGeomAlgo::_Tess2::TessHalfEdge edges_3 = null();
HXLINE(3388)		 ::hxGeomAlgo::_Tess2::TessFace f = mesh->fHead->next;
HXLINE(3394)		while(::hx::IsInstanceNotEq( f,mesh->fHead )){
HXLINE(3395)			if (f->inside) {
HXLINE(3396)				e = f->anEdge;
HXLINE(3397)				while(true){
HXLINE(3398)					e->mark = ::hxGeomAlgo::_Tess2::Geom_obj::edgeIsInternal(e);
HXLINE(3399)					bool _hx_tmp;
HXDLIN(3399)					if (e->mark) {
HXLINE(3399)						_hx_tmp = !(e->Sym->mark);
            					}
            					else {
HXLINE(3399)						_hx_tmp = false;
            					}
HXDLIN(3399)					if (_hx_tmp) {
HXLINE(3399)						stack->push(e);
            					}
HXLINE(3400)					e = e->Lnext;
HXLINE(3397)					if (!(::hx::IsInstanceNotEq( e,f->anEdge ))) {
HXLINE(3397)						goto _hx_goto_34;
            					}
            				}
            				_hx_goto_34:;
            			}
HXLINE(3403)			f = f->next;
            		}
HXLINE(3409)		while((stack->length > 0)){
HXLINE(3410)			e = stack->pop().StaticCast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >();
HXLINE(3411)			e->mark = (e->Sym->mark = false);
HXLINE(3412)			if (!(::hxGeomAlgo::_Tess2::Geom_obj::edgeIsLocallyDelaunay(e))) {
HXLINE(3413)				::hxGeomAlgo::_Tess2::TessMesh_obj::flipEdge(mesh,e);
HXLINE(3415)				edges_0 = e->Lnext;
HXLINE(3416)				edges_1 = e->get_Lprev();
HXLINE(3417)				edges_2 = e->Sym->Lnext;
HXLINE(3418)				edges_3 = e->Sym->get_Lprev();
HXLINE(3420)				{
HXLINE(3421)					bool _hx_tmp;
HXDLIN(3421)					if (!(edges_0->mark)) {
HXLINE(3421)						_hx_tmp = ::hxGeomAlgo::_Tess2::Geom_obj::edgeIsInternal(edges_0);
            					}
            					else {
HXLINE(3421)						_hx_tmp = false;
            					}
HXDLIN(3421)					if (_hx_tmp) {
HXLINE(3422)						edges_0->mark = (edges_0->Sym->mark = true);
HXLINE(3423)						stack->push(edges_0);
            					}
HXLINE(3421)					bool _hx_tmp1;
HXDLIN(3421)					if (!(edges_1->mark)) {
HXLINE(3421)						_hx_tmp1 = ::hxGeomAlgo::_Tess2::Geom_obj::edgeIsInternal(edges_1);
            					}
            					else {
HXLINE(3421)						_hx_tmp1 = false;
            					}
HXDLIN(3421)					if (_hx_tmp1) {
HXLINE(3422)						edges_1->mark = (edges_1->Sym->mark = true);
HXLINE(3423)						stack->push(edges_1);
            					}
HXLINE(3421)					bool _hx_tmp2;
HXDLIN(3421)					if (!(edges_2->mark)) {
HXLINE(3421)						_hx_tmp2 = ::hxGeomAlgo::_Tess2::Geom_obj::edgeIsInternal(edges_2);
            					}
            					else {
HXLINE(3421)						_hx_tmp2 = false;
            					}
HXDLIN(3421)					if (_hx_tmp2) {
HXLINE(3422)						edges_2->mark = (edges_2->Sym->mark = true);
HXLINE(3423)						stack->push(edges_2);
            					}
            				}
            			}
            		}
HXLINE(3429)		{
HXLINE(3429)			int _g = 0;
HXDLIN(3429)			while((_g < stack->length)){
HXLINE(3429)				 ::hxGeomAlgo::_Tess2::TessHalfEdge e = stack->__get(_g).StaticCast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >();
HXDLIN(3429)				_g = (_g + 1);
HXDLIN(3429)				stack->pop().StaticCast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >();
            			}
            		}
HXLINE(3430)		stack = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tesselator_obj,refineDelaunay_,(void))

void Tesselator_obj::discardExterior_( ::hxGeomAlgo::_Tess2::TessMesh mesh){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3439_discardExterior_)
HXLINE(3440)		 ::hxGeomAlgo::_Tess2::TessFace next;
HXDLIN(3440)		 ::hxGeomAlgo::_Tess2::TessFace f = mesh->fHead->next;
HXLINE(3444)		while(::hx::IsInstanceNotEq( f,mesh->fHead )){
HXLINE(3446)			next = f->next;
HXLINE(3447)			if (!(f->inside)) {
HXLINE(3448)				mesh->zapFace(f);
            			}
HXLINE(3450)			f = next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tesselator_obj,discardExterior_,(void))

void Tesselator_obj::setWindingNumber_( ::hxGeomAlgo::_Tess2::TessMesh mesh,int value,bool keepOnlyBoundary){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3463_setWindingNumber_)
HXLINE(3464)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNext;
HXDLIN(3464)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = mesh->eHead->next;
HXLINE(3467)		while(::hx::IsInstanceNotEq( e,mesh->eHead )){
HXLINE(3468)			eNext = e->next;
HXLINE(3469)			if ((e->get_Rface()->inside != e->Lface->inside)) {
HXLINE(3472)				int _hx_tmp;
HXDLIN(3472)				if (e->Lface->inside) {
HXLINE(3472)					_hx_tmp = value;
            				}
            				else {
HXLINE(3472)					_hx_tmp = -(value);
            				}
HXDLIN(3472)				e->winding = _hx_tmp;
            			}
            			else {
HXLINE(3476)				if (!(keepOnlyBoundary)) {
HXLINE(3477)					e->winding = 0;
            				}
            				else {
HXLINE(3479)					mesh->_hx_delete(e);
            				}
            			}
HXLINE(3482)			e = eNext;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Tesselator_obj,setWindingNumber_,(void))

int Tesselator_obj::getNeighbourFace_( ::hxGeomAlgo::_Tess2::TessHalfEdge edge){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3487_getNeighbourFace_)
HXLINE(3488)		if (::hx::IsNull( edge->get_Rface() )) {
HXLINE(3489)			return -1;
            		}
HXLINE(3490)		if (!(edge->get_Rface()->inside)) {
HXLINE(3491)			return -1;
            		}
HXLINE(3492)		return edge->get_Rface()->n;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tesselator_obj,getNeighbourFace_,return )

void Tesselator_obj::outputPolymesh_( ::hxGeomAlgo::_Tess2::TessMesh mesh, ::hxGeomAlgo::ResultType resultsType,int polySize,int vertexDim){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3495_outputPolymesh_)
HXLINE(3498)		 ::hxGeomAlgo::_Tess2::TessHalfEdge edge;
HXLINE(3499)		int maxFaceCount = 0;
HXLINE(3500)		int maxVertexCount = 0;
HXLINE(3501)		int faceVerts;
HXDLIN(3501)		 ::Dynamic i;
HXLINE(3502)		int elements = 0;
HXLINE(3503)		 ::Dynamic vert;
HXLINE(3507)		if ((polySize > 3)) {
HXLINE(3509)			mesh->mergeConvexFaces(polySize);
            		}
HXLINE(3496)		 ::hxGeomAlgo::_Tess2::TessVertex v = mesh->vHead->next;
HXLINE(3514)		while(::hx::IsInstanceNotEq( v,mesh->vHead )){
HXLINE(3515)			v->n = -1;
HXLINE(3516)			v = v->next;
            		}
HXLINE(3497)		 ::hxGeomAlgo::_Tess2::TessFace f = mesh->fHead->next;
HXLINE(3521)		while(::hx::IsInstanceNotEq( f,mesh->fHead )){
HXLINE(3523)			f->n = -1;
HXLINE(3524)			if (!(f->inside)) {
HXLINE(3525)				f = f->next;
HXLINE(3526)				continue;
            			}
HXLINE(3529)			edge = f->anEdge;
HXLINE(3530)			faceVerts = 0;
HXLINE(3531)			while(true){
HXLINE(3533)				v = edge->Org;
HXLINE(3534)				if ((v->n == -1)) {
HXLINE(3536)					v->n = maxVertexCount;
HXLINE(3537)					maxVertexCount = (maxVertexCount + 1);
            				}
HXLINE(3539)				faceVerts = (faceVerts + 1);
HXLINE(3540)				edge = edge->Lnext;
HXLINE(3531)				if (!(::hx::IsInstanceNotEq( edge,f->anEdge ))) {
HXLINE(3531)					goto _hx_goto_45;
            				}
            			}
            			_hx_goto_45:;
HXLINE(3544)			::hxGeomAlgo::Debug_obj::_hx_assert((faceVerts <= polySize),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),3544,HX_("hxGeomAlgo.Tesselator",1d,d4,c6,9e),HX_("outputPolymesh_",c5,fc,03,a3)));
HXLINE(3546)			f->n = maxFaceCount;
HXLINE(3547)			maxFaceCount = (maxFaceCount + 1);
HXLINE(3548)			f = f->next;
            		}
HXLINE(3551)		this->elementCount = maxFaceCount;
HXLINE(3552)		if (::hx::IsPointerEq( resultsType,::hxGeomAlgo::ResultType_obj::CONNECTED_POLYGONS_dyn() )) {
HXLINE(3553)			maxFaceCount = (maxFaceCount * 2);
            		}
HXLINE(3561)		this->elements = ::Array_obj< int >::__new(0);
HXLINE(3564)		this->vertexCount = maxVertexCount;
HXLINE(3572)		this->vertices = ::Array_obj< Float >::__new(0);
HXLINE(3582)		this->vertexIndices = ::Array_obj< int >::__new(0);
HXLINE(3587)		v = mesh->vHead->next;
HXLINE(3588)		while(::hx::IsInstanceNotEq( v,mesh->vHead )){
HXLINE(3590)			if ((v->n != -1)) {
HXLINE(3593)				int idx = (v->n * vertexDim);
HXLINE(3594)				this->vertices[idx] = v->coords->__get(0);
HXLINE(3595)				this->vertices[(idx + 1)] = v->coords->__get(1);
HXLINE(3596)				if ((vertexDim > 2)) {
HXLINE(3597)					this->vertices[(idx + 2)] = v->coords->__get(2);
            				}
HXLINE(3599)				this->vertexIndices[v->n] = v->idx;
            			}
HXLINE(3601)			v = v->next;
            		}
HXLINE(3605)		int nel = 0;
HXLINE(3606)		f = mesh->fHead->next;
HXLINE(3607)		while(::hx::IsInstanceNotEq( f,mesh->fHead )){
HXLINE(3609)			if (!(f->inside)) {
HXLINE(3610)				f = f->next;
HXLINE(3611)				continue;
            			}
HXLINE(3615)			edge = f->anEdge;
HXLINE(3616)			faceVerts = 0;
HXLINE(3617)			while(true){
HXLINE(3619)				v = edge->Org;
HXLINE(3620)				nel = (nel + 1);
HXDLIN(3620)				this->elements[(nel - 1)] = v->n;
HXLINE(3621)				faceVerts = (faceVerts + 1);
HXLINE(3622)				edge = edge->Lnext;
HXLINE(3617)				if (!(::hx::IsInstanceNotEq( edge,f->anEdge ))) {
HXLINE(3617)					goto _hx_goto_48;
            				}
            			}
            			_hx_goto_48:;
HXLINE(3626)			{
HXLINE(3626)				int _g = faceVerts;
HXDLIN(3626)				int _g1 = polySize;
HXDLIN(3626)				while((_g < _g1)){
HXLINE(3626)					_g = (_g + 1);
HXDLIN(3626)					int i = (_g - 1);
HXLINE(3627)					nel = (nel + 1);
HXDLIN(3627)					this->elements[(nel - 1)] = -1;
            				}
            			}
HXLINE(3630)			if (::hx::IsPointerEq( resultsType,::hxGeomAlgo::ResultType_obj::CONNECTED_POLYGONS_dyn() )) {
HXLINE(3632)				edge = f->anEdge;
HXLINE(3633)				while(true){
HXLINE(3635)					nel = (nel + 1);
HXDLIN(3635)					this->elements[(nel - 1)] = this->getNeighbourFace_(edge);
HXLINE(3636)					edge = edge->Lnext;
HXLINE(3633)					if (!(::hx::IsInstanceNotEq( edge,f->anEdge ))) {
HXLINE(3633)						goto _hx_goto_50;
            					}
            				}
            				_hx_goto_50:;
HXLINE(3640)				{
HXLINE(3640)					int _g = faceVerts;
HXDLIN(3640)					int _g1 = polySize;
HXDLIN(3640)					while((_g < _g1)){
HXLINE(3640)						_g = (_g + 1);
HXDLIN(3640)						int i = (_g - 1);
HXLINE(3641)						nel = (nel + 1);
HXDLIN(3641)						this->elements[(nel - 1)] = -1;
            					}
            				}
            			}
HXLINE(3643)			f = f->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Tesselator_obj,outputPolymesh_,(void))

void Tesselator_obj::outputContours_( ::hxGeomAlgo::_Tess2::TessMesh mesh,int vertexDim){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3648_outputContours_)
HXLINE(3650)		 ::hxGeomAlgo::_Tess2::TessHalfEdge edge;
HXLINE(3651)		 ::hxGeomAlgo::_Tess2::TessHalfEdge start;
HXLINE(3652)		 ::Dynamic verts;
HXLINE(3653)		 ::Dynamic elements;
HXLINE(3654)		 ::Dynamic vertInds;
HXLINE(3655)		int startVert = 0;
HXLINE(3656)		int vertCount = 0;
HXLINE(3658)		this->vertexCount = 0;
HXLINE(3659)		this->elementCount = 0;
HXLINE(3649)		 ::hxGeomAlgo::_Tess2::TessFace f = mesh->fHead->next;
HXLINE(3662)		while(::hx::IsInstanceNotEq( f,mesh->fHead )){
HXLINE(3664)			if (!(f->inside)) {
HXLINE(3665)				f = f->next;
HXLINE(3666)				continue;
            			}
HXLINE(3669)			edge = f->anEdge;
HXDLIN(3669)			start = edge;
HXLINE(3670)			while(true){
HXLINE(3672)				this->vertexCount++;
HXLINE(3673)				edge = edge->Lnext;
HXLINE(3670)				if (!(::hx::IsInstanceNotEq( edge,start ))) {
HXLINE(3670)					goto _hx_goto_54;
            				}
            			}
            			_hx_goto_54:;
HXLINE(3676)			this->elementCount++;
HXLINE(3677)			f = f->next;
            		}
HXLINE(3687)		this->elements = ::Array_obj< int >::__new(0);
HXLINE(3697)		this->vertices = ::Array_obj< Float >::__new(0);
HXLINE(3707)		this->vertexIndices = ::Array_obj< int >::__new(0);
HXLINE(3710)		int nv = 0;
HXLINE(3711)		int nvi = 0;
HXLINE(3712)		int nel = 0;
HXLINE(3713)		startVert = 0;
HXLINE(3715)		f = mesh->fHead->next;
HXLINE(3716)		while(::hx::IsInstanceNotEq( f,mesh->fHead )){
HXLINE(3718)			if (!(f->inside)) {
HXLINE(3719)				f = f->next;
HXLINE(3720)				continue;
            			}
HXLINE(3723)			vertCount = 0;
HXLINE(3724)			edge = f->anEdge;
HXDLIN(3724)			start = edge;
HXLINE(3725)			while(true){
HXLINE(3727)				nv = (nv + 1);
HXDLIN(3727)				this->vertices[(nv - 1)] = edge->Org->coords->__get(0);
HXLINE(3728)				nv = (nv + 1);
HXDLIN(3728)				this->vertices[(nv - 1)] = edge->Org->coords->__get(1);
HXLINE(3729)				if ((vertexDim > 2)) {
HXLINE(3730)					nv = (nv + 1);
HXDLIN(3730)					this->vertices[(nv - 1)] = edge->Org->coords->__get(2);
            				}
HXLINE(3731)				nvi = (nvi + 1);
HXDLIN(3731)				this->vertexIndices[(nvi - 1)] = edge->Org->idx;
HXLINE(3732)				vertCount = (vertCount + 1);
HXLINE(3733)				edge = edge->Lnext;
HXLINE(3725)				if (!(::hx::IsInstanceNotEq( edge,start ))) {
HXLINE(3725)					goto _hx_goto_56;
            				}
            			}
            			_hx_goto_56:;
HXLINE(3736)			nel = (nel + 1);
HXDLIN(3736)			this->elements[(nel - 1)] = startVert;
HXLINE(3737)			nel = (nel + 1);
HXDLIN(3737)			this->elements[(nel - 1)] = vertCount;
HXLINE(3739)			startVert = (startVert + vertCount);
HXLINE(3740)			f = f->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tesselator_obj,outputContours_,(void))

void Tesselator_obj::addContour(int vertexDim,::Array< Float > vertices){
            	HX_GC_STACKFRAME(&_hx_pos_5f0a42323909cb02_3745_addContour)
HXLINE(3749)		if (::hx::IsNull( this->mesh )) {
HXLINE(3750)			this->mesh =  ::hxGeomAlgo::_Tess2::TessMesh_obj::__alloc( HX_CTX );
            		}
HXLINE(3756)		if ((vertexDim < 2)) {
HXLINE(3757)			vertexDim = 2;
            		}
HXLINE(3758)		if ((vertexDim > 3)) {
HXLINE(3759)			vertexDim = 3;
            		}
HXLINE(3746)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = null();
HXLINE(3747)		int i = 0;
HXLINE(3763)		while((i < vertices->length)){
HXLINE(3765)			if (::hx::IsNull( e )) {
HXLINE(3767)				e = this->mesh->makeEdge();
HXLINE(3772)				this->mesh->splice(e,e->Sym);
            			}
            			else {
HXLINE(3777)				this->mesh->splitEdge(e);
HXLINE(3778)				e = e->Lnext;
            			}
HXLINE(3782)			e->Org->coords[0] = vertices->__get(i);
HXLINE(3783)			e->Org->coords[1] = vertices->__get((i + 1));
HXLINE(3784)			if ((vertexDim > 2)) {
HXLINE(3785)				e->Org->coords[2] = vertices->__get((i + 2));
            			}
            			else {
HXLINE(3787)				e->Org->coords[2] = ((Float)0.0);
            			}
HXLINE(3789)			e->Org->idx = this->vertexIndexCounter++;
HXLINE(3796)			e->winding = 1;
HXLINE(3797)			e->Sym->winding = -1;
HXLINE(3798)			i = (i + vertexDim);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tesselator_obj,addContour,(void))

bool Tesselator_obj::tesselate( ::hxGeomAlgo::WindingRule windingRule, ::hxGeomAlgo::ResultType resultType,int polySize,int vertexDim,::Array< Float > normal){
            	HX_STACKFRAME(&_hx_pos_5f0a42323909cb02_3803_tesselate)
HXLINE(3804)		this->vertices = ::Array_obj< Float >::__new(0);
HXLINE(3805)		this->elements = ::Array_obj< int >::__new(0);
HXLINE(3806)		this->vertexIndices = ::Array_obj< int >::__new(0);
HXLINE(3808)		this->vertexIndexCounter = 0;
HXLINE(3810)		if (::hx::IsNotNull( normal )) {
HXLINE(3812)			this->normal[0] = normal->__get(0);
HXLINE(3813)			this->normal[1] = normal->__get(1);
HXLINE(3814)			this->normal[2] = normal->__get(2);
            		}
HXLINE(3817)		this->windingRule = windingRule;
HXLINE(3819)		if ((vertexDim < 2)) {
HXLINE(3820)			vertexDim = 2;
            		}
HXLINE(3821)		if ((vertexDim > 3)) {
HXLINE(3822)			vertexDim = 3;
            		}
HXLINE(3829)		if (::hx::IsNull( this->mesh )) {
HXLINE(3831)			return false;
            		}
HXLINE(3837)		this->projectPolygon_();
HXLINE(3845)		::hxGeomAlgo::_Tess2::Sweep_obj::computeInterior(::hx::ObjectPtr<OBJ_>(this));
HXLINE(3847)		 ::hxGeomAlgo::_Tess2::TessMesh mesh = this->mesh;
HXLINE(3853)		if (::hx::IsPointerEq( resultType,::hxGeomAlgo::ResultType_obj::BOUNDARY_CONTOURS_dyn() )) {
HXLINE(3854)			this->setWindingNumber_(mesh,1,true);
            		}
            		else {
HXLINE(3856)			this->tessellateInterior_(mesh);
HXLINE(3857)			if (::hx::IsPointerEq( resultType,::hxGeomAlgo::ResultType_obj::EXPERIMENTAL_DELAUNAY_dyn() )) {
HXLINE(3858)				this->refineDelaunay_(mesh);
HXLINE(3860)				polySize = 3;
            			}
            		}
HXLINE(3865)		mesh->check();
HXLINE(3867)		if (::hx::IsPointerEq( resultType,::hxGeomAlgo::ResultType_obj::BOUNDARY_CONTOURS_dyn() )) {
HXLINE(3868)			this->outputContours_(mesh,vertexDim);
            		}
            		else {
HXLINE(3872)			this->outputPolymesh_(mesh,resultType,polySize,vertexDim);
            		}
HXLINE(3877)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Tesselator_obj,tesselate,return )


::hx::ObjectPtr< Tesselator_obj > Tesselator_obj::__new() {
	::hx::ObjectPtr< Tesselator_obj > __this = new Tesselator_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Tesselator_obj > Tesselator_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Tesselator_obj *__this = (Tesselator_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Tesselator_obj), true, "hxGeomAlgo.Tesselator"));
	*(void **)__this = Tesselator_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Tesselator_obj::Tesselator_obj()
{
}

void Tesselator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tesselator);
	HX_MARK_MEMBER_NAME(mesh,"mesh");
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_MEMBER_NAME(sUnit,"sUnit");
	HX_MARK_MEMBER_NAME(tUnit,"tUnit");
	HX_MARK_MEMBER_NAME(bmin,"bmin");
	HX_MARK_MEMBER_NAME(bmax,"bmax");
	HX_MARK_MEMBER_NAME(windingRule,"windingRule");
	HX_MARK_MEMBER_NAME(dict,"dict");
	HX_MARK_MEMBER_NAME(pq,"pq");
	HX_MARK_MEMBER_NAME(event,"event");
	HX_MARK_MEMBER_NAME(vertexIndexCounter,"vertexIndexCounter");
	HX_MARK_MEMBER_NAME(vertices,"vertices");
	HX_MARK_MEMBER_NAME(vertexIndices,"vertexIndices");
	HX_MARK_MEMBER_NAME(vertexCount,"vertexCount");
	HX_MARK_MEMBER_NAME(elements,"elements");
	HX_MARK_MEMBER_NAME(elementCount,"elementCount");
	HX_MARK_END_CLASS();
}

void Tesselator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mesh,"mesh");
	HX_VISIT_MEMBER_NAME(normal,"normal");
	HX_VISIT_MEMBER_NAME(sUnit,"sUnit");
	HX_VISIT_MEMBER_NAME(tUnit,"tUnit");
	HX_VISIT_MEMBER_NAME(bmin,"bmin");
	HX_VISIT_MEMBER_NAME(bmax,"bmax");
	HX_VISIT_MEMBER_NAME(windingRule,"windingRule");
	HX_VISIT_MEMBER_NAME(dict,"dict");
	HX_VISIT_MEMBER_NAME(pq,"pq");
	HX_VISIT_MEMBER_NAME(event,"event");
	HX_VISIT_MEMBER_NAME(vertexIndexCounter,"vertexIndexCounter");
	HX_VISIT_MEMBER_NAME(vertices,"vertices");
	HX_VISIT_MEMBER_NAME(vertexIndices,"vertexIndices");
	HX_VISIT_MEMBER_NAME(vertexCount,"vertexCount");
	HX_VISIT_MEMBER_NAME(elements,"elements");
	HX_VISIT_MEMBER_NAME(elementCount,"elementCount");
}

::hx::Val Tesselator_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"pq") ) { return ::hx::Val( pq ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mesh") ) { return ::hx::Val( mesh ); }
		if (HX_FIELD_EQ(inName,"bmin") ) { return ::hx::Val( bmin ); }
		if (HX_FIELD_EQ(inName,"bmax") ) { return ::hx::Val( bmax ); }
		if (HX_FIELD_EQ(inName,"dict") ) { return ::hx::Val( dict ); }
		if (HX_FIELD_EQ(inName,"dot_") ) { return ::hx::Val( dot__dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sUnit") ) { return ::hx::Val( sUnit ); }
		if (HX_FIELD_EQ(inName,"tUnit") ) { return ::hx::Val( tUnit ); }
		if (HX_FIELD_EQ(inName,"event") ) { return ::hx::Val( event ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { return ::hx::Val( normal ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { return ::hx::Val( vertices ); }
		if (HX_FIELD_EQ(inName,"elements") ) { return ::hx::Val( elements ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"longAxis_") ) { return ::hx::Val( longAxis__dyn() ); }
		if (HX_FIELD_EQ(inName,"tesselate") ) { return ::hx::Val( tesselate_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"normalize_") ) { return ::hx::Val( normalize__dyn() ); }
		if (HX_FIELD_EQ(inName,"addContour") ) { return ::hx::Val( addContour_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"windingRule") ) { return ::hx::Val( windingRule ); }
		if (HX_FIELD_EQ(inName,"vertexCount") ) { return ::hx::Val( vertexCount ); }
		if (HX_FIELD_EQ(inName,"addWinding_") ) { return ::hx::Val( addWinding__dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"elementCount") ) { return ::hx::Val( elementCount ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"vertexIndices") ) { return ::hx::Val( vertexIndices ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"computeNormal_") ) { return ::hx::Val( computeNormal__dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"projectPolygon_") ) { return ::hx::Val( projectPolygon__dyn() ); }
		if (HX_FIELD_EQ(inName,"refineDelaunay_") ) { return ::hx::Val( refineDelaunay__dyn() ); }
		if (HX_FIELD_EQ(inName,"outputPolymesh_") ) { return ::hx::Val( outputPolymesh__dyn() ); }
		if (HX_FIELD_EQ(inName,"outputContours_") ) { return ::hx::Val( outputContours__dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"discardExterior_") ) { return ::hx::Val( discardExterior__dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"checkOrientation_") ) { return ::hx::Val( checkOrientation__dyn() ); }
		if (HX_FIELD_EQ(inName,"setWindingNumber_") ) { return ::hx::Val( setWindingNumber__dyn() ); }
		if (HX_FIELD_EQ(inName,"getNeighbourFace_") ) { return ::hx::Val( getNeighbourFace__dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"vertexIndexCounter") ) { return ::hx::Val( vertexIndexCounter ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"tessellateInterior_") ) { return ::hx::Val( tessellateInterior__dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"tessellateMonoRegion_") ) { return ::hx::Val( tessellateMonoRegion__dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Tesselator_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"pq") ) { pq=inValue.Cast<  ::hxGeomAlgo::_Tess2::PriorityQ >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mesh") ) { mesh=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessMesh >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bmin") ) { bmin=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bmax") ) { bmax=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dict") ) { dict=inValue.Cast<  ::hxGeomAlgo::_Tess2::Dict >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sUnit") ) { sUnit=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tUnit") ) { tUnit=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"event") ) { event=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessVertex >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"elements") ) { elements=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"windingRule") ) { windingRule=inValue.Cast<  ::hxGeomAlgo::WindingRule >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vertexCount") ) { vertexCount=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"elementCount") ) { elementCount=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"vertexIndices") ) { vertexIndices=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"vertexIndexCounter") ) { vertexIndexCounter=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Tesselator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mesh",ed,49,59,48));
	outFields->push(HX_("normal",27,72,69,30));
	outFields->push(HX_("sUnit",97,ac,97,6f));
	outFields->push(HX_("tUnit",18,41,fe,02));
	outFields->push(HX_("bmin",70,fa,19,41));
	outFields->push(HX_("bmax",82,f3,19,41));
	outFields->push(HX_("windingRule",36,83,c0,4f));
	outFields->push(HX_("dict",76,59,69,42));
	outFields->push(HX_("pq",01,62,00,00));
	outFields->push(HX_("event",1a,c8,c4,75));
	outFields->push(HX_("vertexIndexCounter",8e,4f,23,0a));
	outFields->push(HX_("vertices",f9,bf,15,6a));
	outFields->push(HX_("vertexIndices",23,88,93,55));
	outFields->push(HX_("vertexCount",cb,0e,9f,5e));
	outFields->push(HX_("elements",37,36,c4,83));
	outFields->push(HX_("elementCount",73,1c,9d,aa));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Tesselator_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessMesh */ ,(int)offsetof(Tesselator_obj,mesh),HX_("mesh",ed,49,59,48)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Tesselator_obj,normal),HX_("normal",27,72,69,30)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Tesselator_obj,sUnit),HX_("sUnit",97,ac,97,6f)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Tesselator_obj,tUnit),HX_("tUnit",18,41,fe,02)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Tesselator_obj,bmin),HX_("bmin",70,fa,19,41)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Tesselator_obj,bmax),HX_("bmax",82,f3,19,41)},
	{::hx::fsObject /*  ::hxGeomAlgo::WindingRule */ ,(int)offsetof(Tesselator_obj,windingRule),HX_("windingRule",36,83,c0,4f)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::Dict */ ,(int)offsetof(Tesselator_obj,dict),HX_("dict",76,59,69,42)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::PriorityQ */ ,(int)offsetof(Tesselator_obj,pq),HX_("pq",01,62,00,00)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessVertex */ ,(int)offsetof(Tesselator_obj,event),HX_("event",1a,c8,c4,75)},
	{::hx::fsInt,(int)offsetof(Tesselator_obj,vertexIndexCounter),HX_("vertexIndexCounter",8e,4f,23,0a)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Tesselator_obj,vertices),HX_("vertices",f9,bf,15,6a)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Tesselator_obj,vertexIndices),HX_("vertexIndices",23,88,93,55)},
	{::hx::fsInt,(int)offsetof(Tesselator_obj,vertexCount),HX_("vertexCount",cb,0e,9f,5e)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Tesselator_obj,elements),HX_("elements",37,36,c4,83)},
	{::hx::fsInt,(int)offsetof(Tesselator_obj,elementCount),HX_("elementCount",73,1c,9d,aa)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Tesselator_obj_sStaticStorageInfo = 0;
#endif

static ::String Tesselator_obj_sMemberFields[] = {
	HX_("mesh",ed,49,59,48),
	HX_("normal",27,72,69,30),
	HX_("sUnit",97,ac,97,6f),
	HX_("tUnit",18,41,fe,02),
	HX_("bmin",70,fa,19,41),
	HX_("bmax",82,f3,19,41),
	HX_("windingRule",36,83,c0,4f),
	HX_("dict",76,59,69,42),
	HX_("pq",01,62,00,00),
	HX_("event",1a,c8,c4,75),
	HX_("vertexIndexCounter",8e,4f,23,0a),
	HX_("vertices",f9,bf,15,6a),
	HX_("vertexIndices",23,88,93,55),
	HX_("vertexCount",cb,0e,9f,5e),
	HX_("elements",37,36,c4,83),
	HX_("elementCount",73,1c,9d,aa),
	HX_("dot_",b6,f5,6d,42),
	HX_("normalize_",32,64,6f,81),
	HX_("longAxis_",82,59,60,94),
	HX_("computeNormal_",a1,3d,cd,e8),
	HX_("checkOrientation_",77,f8,c0,d0),
	HX_("projectPolygon_",9e,f8,f1,26),
	HX_("addWinding_",46,e5,2b,ab),
	HX_("tessellateMonoRegion_",8a,2d,f2,26),
	HX_("tessellateInterior_",31,30,84,38),
	HX_("refineDelaunay_",8b,c0,2c,b9),
	HX_("discardExterior_",63,e5,e2,8e),
	HX_("setWindingNumber_",be,86,28,44),
	HX_("getNeighbourFace_",3b,b1,de,3e),
	HX_("outputPolymesh_",c5,fc,03,a3),
	HX_("outputContours_",a5,a1,83,71),
	HX_("addContour",b9,55,09,81),
	HX_("tesselate",1a,14,9f,3e),
	::String(null()) };

::hx::Class Tesselator_obj::__mClass;

void Tesselator_obj::__register()
{
	Tesselator_obj _hx_dummy;
	Tesselator_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo.Tesselator",1d,d4,c6,9e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Tesselator_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Tesselator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tesselator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tesselator_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
