// Generated by Haxe 4.3.0-rc.1+88ebbd0
#include <hxcpp.h>

#ifndef INCLUDED_hxGeomAlgo__Tess2_ActiveRegion
#include <hxGeomAlgo/_Tess2/ActiveRegion.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_DictNode
#include <hxGeomAlgo/_Tess2/DictNode.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessHalfEdge
#include <hxGeomAlgo/_Tess2/TessHalfEdge.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_86025c6fbe36dbc8_1731_new,"hxGeomAlgo._Tess2.ActiveRegion","new",0x514993e9,"hxGeomAlgo._Tess2.ActiveRegion.new","hxGeomAlgo/Tess2.hx",1731,0xf73e622d)
namespace hxGeomAlgo{
namespace _Tess2{

void ActiveRegion_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_86025c6fbe36dbc8_1731_new)
HXLINE(1742)		this->fixUpperEdge = false;
HXLINE(1739)		this->dirty = false;
HXLINE(1738)		this->sentinel = false;
HXLINE(1737)		this->inside = false;
HXLINE(1735)		this->windingNumber = 0;
HXLINE(1734)		this->nodeUp = null();
HXLINE(1733)		this->eUp = null();
            	}

Dynamic ActiveRegion_obj::__CreateEmpty() { return new ActiveRegion_obj; }

void *ActiveRegion_obj::_hx_vtable = 0;

Dynamic ActiveRegion_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ActiveRegion_obj > _hx_result = new ActiveRegion_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ActiveRegion_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x26d7d303;
}


::hx::ObjectPtr< ActiveRegion_obj > ActiveRegion_obj::__new() {
	::hx::ObjectPtr< ActiveRegion_obj > __this = new ActiveRegion_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ActiveRegion_obj > ActiveRegion_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ActiveRegion_obj *__this = (ActiveRegion_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ActiveRegion_obj), true, "hxGeomAlgo._Tess2.ActiveRegion"));
	*(void **)__this = ActiveRegion_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ActiveRegion_obj::ActiveRegion_obj()
{
}

void ActiveRegion_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ActiveRegion);
	HX_MARK_MEMBER_NAME(eUp,"eUp");
	HX_MARK_MEMBER_NAME(nodeUp,"nodeUp");
	HX_MARK_MEMBER_NAME(windingNumber,"windingNumber");
	HX_MARK_MEMBER_NAME(inside,"inside");
	HX_MARK_MEMBER_NAME(sentinel,"sentinel");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(fixUpperEdge,"fixUpperEdge");
	HX_MARK_END_CLASS();
}

void ActiveRegion_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(eUp,"eUp");
	HX_VISIT_MEMBER_NAME(nodeUp,"nodeUp");
	HX_VISIT_MEMBER_NAME(windingNumber,"windingNumber");
	HX_VISIT_MEMBER_NAME(inside,"inside");
	HX_VISIT_MEMBER_NAME(sentinel,"sentinel");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(fixUpperEdge,"fixUpperEdge");
}

::hx::Val ActiveRegion_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"eUp") ) { return ::hx::Val( eUp ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { return ::hx::Val( dirty ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"nodeUp") ) { return ::hx::Val( nodeUp ); }
		if (HX_FIELD_EQ(inName,"inside") ) { return ::hx::Val( inside ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sentinel") ) { return ::hx::Val( sentinel ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fixUpperEdge") ) { return ::hx::Val( fixUpperEdge ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"windingNumber") ) { return ::hx::Val( windingNumber ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ActiveRegion_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"eUp") ) { eUp=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"nodeUp") ) { nodeUp=inValue.Cast<  ::hxGeomAlgo::_Tess2::DictNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inside") ) { inside=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sentinel") ) { sentinel=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fixUpperEdge") ) { fixUpperEdge=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"windingNumber") ) { windingNumber=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ActiveRegion_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("eUp",20,ee,4c,00));
	outFields->push(HX_("nodeUp",fd,58,22,27));
	outFields->push(HX_("windingNumber",83,13,8a,8a));
	outFields->push(HX_("inside",fc,3f,e0,9d));
	outFields->push(HX_("sentinel",e4,50,19,25));
	outFields->push(HX_("dirty",12,50,d0,d9));
	outFields->push(HX_("fixUpperEdge",2a,22,a7,a5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ActiveRegion_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(ActiveRegion_obj,eUp),HX_("eUp",20,ee,4c,00)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::DictNode */ ,(int)offsetof(ActiveRegion_obj,nodeUp),HX_("nodeUp",fd,58,22,27)},
	{::hx::fsInt,(int)offsetof(ActiveRegion_obj,windingNumber),HX_("windingNumber",83,13,8a,8a)},
	{::hx::fsBool,(int)offsetof(ActiveRegion_obj,inside),HX_("inside",fc,3f,e0,9d)},
	{::hx::fsBool,(int)offsetof(ActiveRegion_obj,sentinel),HX_("sentinel",e4,50,19,25)},
	{::hx::fsBool,(int)offsetof(ActiveRegion_obj,dirty),HX_("dirty",12,50,d0,d9)},
	{::hx::fsBool,(int)offsetof(ActiveRegion_obj,fixUpperEdge),HX_("fixUpperEdge",2a,22,a7,a5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ActiveRegion_obj_sStaticStorageInfo = 0;
#endif

static ::String ActiveRegion_obj_sMemberFields[] = {
	HX_("eUp",20,ee,4c,00),
	HX_("nodeUp",fd,58,22,27),
	HX_("windingNumber",83,13,8a,8a),
	HX_("inside",fc,3f,e0,9d),
	HX_("sentinel",e4,50,19,25),
	HX_("dirty",12,50,d0,d9),
	HX_("fixUpperEdge",2a,22,a7,a5),
	::String(null()) };

::hx::Class ActiveRegion_obj::__mClass;

void ActiveRegion_obj::__register()
{
	ActiveRegion_obj _hx_dummy;
	ActiveRegion_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo._Tess2.ActiveRegion",77,6b,4d,a3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ActiveRegion_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ActiveRegion_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ActiveRegion_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ActiveRegion_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
} // end namespace _Tess2
