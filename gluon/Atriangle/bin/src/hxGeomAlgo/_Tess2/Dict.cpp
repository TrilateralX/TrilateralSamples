// Generated by Haxe 4.3.0-rc.1+88ebbd0
#include <hxcpp.h>

#ifndef INCLUDED_hxGeomAlgo_Tesselator
#include <hxGeomAlgo/Tesselator.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_ActiveRegion
#include <hxGeomAlgo/_Tess2/ActiveRegion.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_Dict
#include <hxGeomAlgo/_Tess2/Dict.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_DictNode
#include <hxGeomAlgo/_Tess2/DictNode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7fb9134980825821_1472_new,"hxGeomAlgo._Tess2.Dict","new",0xa931b705,"hxGeomAlgo._Tess2.Dict.new","hxGeomAlgo/Tess2.hx",1472,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb9134980825821_1481_min,"hxGeomAlgo._Tess2.Dict","min",0xa930f837,"hxGeomAlgo._Tess2.Dict.min","hxGeomAlgo/Tess2.hx",1481,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb9134980825821_1489_insert,"hxGeomAlgo._Tess2.Dict","insert",0x914351b4,"hxGeomAlgo._Tess2.Dict.insert","hxGeomAlgo/Tess2.hx",1489,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb9134980825821_1492_search,"hxGeomAlgo._Tess2.Dict","search",0x565dade3,"hxGeomAlgo._Tess2.Dict.search","hxGeomAlgo/Tess2.hx",1492,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb9134980825821_1505_insertBefore,"hxGeomAlgo._Tess2.Dict","insertBefore",0xbbf45953,"hxGeomAlgo._Tess2.Dict.insertBefore","hxGeomAlgo/Tess2.hx",1505,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb9134980825821_1520_delete,"hxGeomAlgo._Tess2.Dict","delete",0x5e3ecea6,"hxGeomAlgo._Tess2.Dict.delete","hxGeomAlgo/Tess2.hx",1520,0xf73e622d)
namespace hxGeomAlgo{
namespace _Tess2{

void Dict_obj::__construct( ::hxGeomAlgo::Tesselator frame, ::Dynamic leq){
            	HX_GC_STACKFRAME(&_hx_pos_7fb9134980825821_1472_new)
HXLINE(1473)		this->head =  ::hxGeomAlgo::_Tess2::DictNode_obj::__alloc( HX_CTX );
HXLINE(1474)		this->head->next = this->head;
HXLINE(1475)		this->head->prev = this->head;
HXLINE(1476)		this->frame = frame;
HXLINE(1477)		this->leq = leq;
            	}

Dynamic Dict_obj::__CreateEmpty() { return new Dict_obj; }

void *Dict_obj::_hx_vtable = 0;

Dynamic Dict_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Dict_obj > _hx_result = new Dict_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Dict_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1f78cc1f;
}

 ::hxGeomAlgo::_Tess2::DictNode Dict_obj::min(){
            	HX_STACKFRAME(&_hx_pos_7fb9134980825821_1481_min)
HXDLIN(1481)		return this->head->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Dict_obj,min,return )

 ::hxGeomAlgo::_Tess2::DictNode Dict_obj::insert( ::hxGeomAlgo::_Tess2::ActiveRegion k){
            	HX_STACKFRAME(&_hx_pos_7fb9134980825821_1489_insert)
HXDLIN(1489)		return this->insertBefore(this->head,k);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dict_obj,insert,return )

 ::hxGeomAlgo::_Tess2::DictNode Dict_obj::search( ::hxGeomAlgo::_Tess2::ActiveRegion key){
            	HX_STACKFRAME(&_hx_pos_7fb9134980825821_1492_search)
HXLINE(1497)		 ::hxGeomAlgo::_Tess2::DictNode node = this->head;
HXLINE(1498)		while(true){
HXLINE(1499)			node = node->next;
HXLINE(1500)			bool _hx_tmp;
HXDLIN(1500)			if (::hx::IsNotNull( node->key )) {
HXLINE(1500)				_hx_tmp = !(( (bool)(this->leq(this->frame,key,node->key)) ));
            			}
            			else {
HXLINE(1500)				_hx_tmp = false;
            			}
HXLINE(1498)			if (!(_hx_tmp)) {
HXLINE(1498)				goto _hx_goto_3;
            			}
            		}
            		_hx_goto_3:;
HXLINE(1502)		return node;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dict_obj,search,return )

 ::hxGeomAlgo::_Tess2::DictNode Dict_obj::insertBefore( ::hxGeomAlgo::_Tess2::DictNode node, ::hxGeomAlgo::_Tess2::ActiveRegion key){
            	HX_GC_STACKFRAME(&_hx_pos_7fb9134980825821_1505_insertBefore)
HXLINE(1506)		while(true){
HXLINE(1507)			node = node->prev;
HXLINE(1508)			bool _hx_tmp;
HXDLIN(1508)			if (::hx::IsNotNull( node->key )) {
HXLINE(1508)				_hx_tmp = !(( (bool)(this->leq(this->frame,node->key,key)) ));
            			}
            			else {
HXLINE(1508)				_hx_tmp = false;
            			}
HXLINE(1506)			if (!(_hx_tmp)) {
HXLINE(1506)				goto _hx_goto_5;
            			}
            		}
            		_hx_goto_5:;
HXLINE(1510)		 ::hxGeomAlgo::_Tess2::DictNode newNode =  ::hxGeomAlgo::_Tess2::DictNode_obj::__alloc( HX_CTX );
HXLINE(1511)		newNode->key = key;
HXLINE(1512)		newNode->next = node->next;
HXLINE(1513)		node->next->prev = newNode;
HXLINE(1514)		newNode->prev = node;
HXLINE(1515)		node->next = newNode;
HXLINE(1517)		return newNode;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Dict_obj,insertBefore,return )

void Dict_obj::_hx_delete( ::hxGeomAlgo::_Tess2::DictNode node){
            	HX_STACKFRAME(&_hx_pos_7fb9134980825821_1520_delete)
HXLINE(1521)		node->next->prev = node->prev;
HXLINE(1522)		node->prev->next = node->next;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dict_obj,_hx_delete,(void))


::hx::ObjectPtr< Dict_obj > Dict_obj::__new( ::hxGeomAlgo::Tesselator frame, ::Dynamic leq) {
	::hx::ObjectPtr< Dict_obj > __this = new Dict_obj();
	__this->__construct(frame,leq);
	return __this;
}

::hx::ObjectPtr< Dict_obj > Dict_obj::__alloc(::hx::Ctx *_hx_ctx, ::hxGeomAlgo::Tesselator frame, ::Dynamic leq) {
	Dict_obj *__this = (Dict_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Dict_obj), true, "hxGeomAlgo._Tess2.Dict"));
	*(void **)__this = Dict_obj::_hx_vtable;
	__this->__construct(frame,leq);
	return __this;
}

Dict_obj::Dict_obj()
{
}

void Dict_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Dict);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(leq,"leq");
	HX_MARK_END_CLASS();
}

void Dict_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(leq,"leq");
}

::hx::Val Dict_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"leq") ) { return ::hx::Val( leq ); }
		if (HX_FIELD_EQ(inName,"min") ) { return ::hx::Val( min_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return ::hx::Val( head ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return ::hx::Val( frame ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"insert") ) { return ::hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"search") ) { return ::hx::Val( search_dyn() ); }
		if (HX_FIELD_EQ(inName,"delete") ) { return ::hx::Val( _hx_delete_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"insertBefore") ) { return ::hx::Val( insertBefore_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Dict_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"leq") ) { leq=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::hxGeomAlgo::_Tess2::DictNode >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast<  ::hxGeomAlgo::Tesselator >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Dict_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("frame",2d,78,83,06));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Dict_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::DictNode */ ,(int)offsetof(Dict_obj,head),HX_("head",20,29,0b,45)},
	{::hx::fsObject /*  ::hxGeomAlgo::Tesselator */ ,(int)offsetof(Dict_obj,frame),HX_("frame",2d,78,83,06)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Dict_obj,leq),HX_("leq",d8,4b,52,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Dict_obj_sStaticStorageInfo = 0;
#endif

static ::String Dict_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("frame",2d,78,83,06),
	HX_("leq",d8,4b,52,00),
	HX_("min",92,11,53,00),
	HX_("insert",39,43,dd,9d),
	HX_("search",68,9f,f7,62),
	HX_("insertBefore",98,bc,bf,10),
	HX_("delete",2b,c0,d8,6a),
	::String(null()) };

::hx::Class Dict_obj::__mClass;

void Dict_obj::__register()
{
	Dict_obj _hx_dummy;
	Dict_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo._Tess2.Dict",93,d0,e6,22);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Dict_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Dict_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Dict_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Dict_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
} // end namespace _Tess2
