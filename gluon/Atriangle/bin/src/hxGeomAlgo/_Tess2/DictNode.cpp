// Generated by Haxe 4.3.0-rc.1+88ebbd0
#include <hxcpp.h>

#ifndef INCLUDED_hxGeomAlgo__Tess2_ActiveRegion
#include <hxGeomAlgo/_Tess2/ActiveRegion.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_DictNode
#include <hxGeomAlgo/_Tess2/DictNode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_115df84e1da0aa9a_1456_new,"hxGeomAlgo._Tess2.DictNode","new",0x75e7aba7,"hxGeomAlgo._Tess2.DictNode.new","hxGeomAlgo/Tess2.hx",1456,0xf73e622d)
namespace hxGeomAlgo{
namespace _Tess2{

void DictNode_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_115df84e1da0aa9a_1456_new)
HXLINE(1460)		this->prev = null();
HXLINE(1459)		this->next = null();
HXLINE(1458)		this->key = null();
            	}

Dynamic DictNode_obj::__CreateEmpty() { return new DictNode_obj; }

void *DictNode_obj::_hx_vtable = 0;

Dynamic DictNode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DictNode_obj > _hx_result = new DictNode_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DictNode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x071dfdc1;
}


::hx::ObjectPtr< DictNode_obj > DictNode_obj::__new() {
	::hx::ObjectPtr< DictNode_obj > __this = new DictNode_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< DictNode_obj > DictNode_obj::__alloc(::hx::Ctx *_hx_ctx) {
	DictNode_obj *__this = (DictNode_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DictNode_obj), true, "hxGeomAlgo._Tess2.DictNode"));
	*(void **)__this = DictNode_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DictNode_obj::DictNode_obj()
{
}

void DictNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DictNode);
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_END_CLASS();
}

void DictNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(prev,"prev");
}

::hx::Val DictNode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return ::hx::Val( key ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"prev") ) { return ::hx::Val( prev ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DictNode_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast<  ::hxGeomAlgo::_Tess2::ActiveRegion >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::hxGeomAlgo::_Tess2::DictNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::hxGeomAlgo::_Tess2::DictNode >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DictNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("key",9f,89,51,00));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("prev",f3,be,5e,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DictNode_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::ActiveRegion */ ,(int)offsetof(DictNode_obj,key),HX_("key",9f,89,51,00)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::DictNode */ ,(int)offsetof(DictNode_obj,next),HX_("next",f3,84,02,49)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::DictNode */ ,(int)offsetof(DictNode_obj,prev),HX_("prev",f3,be,5e,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DictNode_obj_sStaticStorageInfo = 0;
#endif

static ::String DictNode_obj_sMemberFields[] = {
	HX_("key",9f,89,51,00),
	HX_("next",f3,84,02,49),
	HX_("prev",f3,be,5e,4a),
	::String(null()) };

::hx::Class DictNode_obj::__mClass;

void DictNode_obj::__register()
{
	DictNode_obj _hx_dummy;
	DictNode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo._Tess2.DictNode",35,4c,59,be);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DictNode_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DictNode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DictNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DictNode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
} // end namespace _Tess2
