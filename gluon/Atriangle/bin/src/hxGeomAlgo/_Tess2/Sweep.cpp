// Generated by Haxe 4.3.0-rc.1+88ebbd0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_hxGeomAlgo_Debug
#include <hxGeomAlgo/Debug.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_Tesselator
#include <hxGeomAlgo/Tesselator.h>
#endif
#ifndef INCLUDED_hxGeomAlgo_WindingRule
#include <hxGeomAlgo/WindingRule.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_ActiveRegion
#include <hxGeomAlgo/_Tess2/ActiveRegion.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_Dict
#include <hxGeomAlgo/_Tess2/Dict.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_DictNode
#include <hxGeomAlgo/_Tess2/DictNode.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_Geom
#include <hxGeomAlgo/_Tess2/Geom.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_PriorityQ
#include <hxGeomAlgo/_Tess2/PriorityQ.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_Sweep
#include <hxGeomAlgo/_Tess2/Sweep.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessFace
#include <hxGeomAlgo/_Tess2/TessFace.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessHalfEdge
#include <hxGeomAlgo/_Tess2/TessHalfEdge.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessMesh
#include <hxGeomAlgo/_Tess2/TessMesh.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessVertex
#include <hxGeomAlgo/_Tess2/TessVertex.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1752_regionBelow,"hxGeomAlgo._Tess2.Sweep","regionBelow",0xa5cc0a5e,"hxGeomAlgo._Tess2.Sweep.regionBelow","hxGeomAlgo/Tess2.hx",1752,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1756_regionAbove,"hxGeomAlgo._Tess2.Sweep","regionAbove",0x106c1eca,"hxGeomAlgo._Tess2.Sweep.regionAbove","hxGeomAlgo/Tess2.hx",1756,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1759_debugEvent,"hxGeomAlgo._Tess2.Sweep","debugEvent",0xf86f26a6,"hxGeomAlgo._Tess2.Sweep.debugEvent","hxGeomAlgo/Tess2.hx",1759,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1796_addWinding,"hxGeomAlgo._Tess2.Sweep","addWinding",0xd3c102d8,"hxGeomAlgo._Tess2.Sweep.addWinding","hxGeomAlgo/Tess2.hx",1796,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1802_edgeLeq,"hxGeomAlgo._Tess2.Sweep","edgeLeq",0x2e39e05c,"hxGeomAlgo._Tess2.Sweep.edgeLeq","hxGeomAlgo/Tess2.hx",1802,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1843_deleteRegion,"hxGeomAlgo._Tess2.Sweep","deleteRegion",0x5411eb1e,"hxGeomAlgo._Tess2.Sweep.deleteRegion","hxGeomAlgo/Tess2.hx",1843,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1856_fixUpperEdge,"hxGeomAlgo._Tess2.Sweep","fixUpperEdge",0x929425c9,"hxGeomAlgo._Tess2.Sweep.fixUpperEdge","hxGeomAlgo/Tess2.hx",1856,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1868_topLeftRegion,"hxGeomAlgo._Tess2.Sweep","topLeftRegion",0x074cfad1,"hxGeomAlgo._Tess2.Sweep.topLeftRegion","hxGeomAlgo/Tess2.hx",1868,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1891_topRightRegion,"hxGeomAlgo._Tess2.Sweep","topRightRegion",0x4bf0b6ba,"hxGeomAlgo._Tess2.Sweep.topRightRegion","hxGeomAlgo/Tess2.hx",1891,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1902_addRegionBelow,"hxGeomAlgo._Tess2.Sweep","addRegionBelow",0x3699e5db,"hxGeomAlgo._Tess2.Sweep.addRegionBelow","hxGeomAlgo/Tess2.hx",1902,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1923_isWindingInside,"hxGeomAlgo._Tess2.Sweep","isWindingInside",0xe7e0e02d,"hxGeomAlgo._Tess2.Sweep.isWindingInside","hxGeomAlgo/Tess2.hx",1923,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1940_computeWinding,"hxGeomAlgo._Tess2.Sweep","computeWinding",0x6a4f7fc2,"hxGeomAlgo._Tess2.Sweep.computeWinding","hxGeomAlgo/Tess2.hx",1940,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1946_finishRegion,"hxGeomAlgo._Tess2.Sweep","finishRegion",0xeaf2f946,"hxGeomAlgo._Tess2.Sweep.finishRegion","hxGeomAlgo/Tess2.hx",1946,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_1964_finishLeftRegions,"hxGeomAlgo._Tess2.Sweep","finishLeftRegions",0xe381b226,"hxGeomAlgo._Tess2.Sweep.finishLeftRegions","hxGeomAlgo/Tess2.hx",1964,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2017_addRightEdges,"hxGeomAlgo._Tess2.Sweep","addRightEdges",0x3964c51c,"hxGeomAlgo._Tess2.Sweep.addRightEdges","hxGeomAlgo/Tess2.hx",2017,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2091_spliceMergeVertices,"hxGeomAlgo._Tess2.Sweep","spliceMergeVertices",0x2fb8e1f6,"hxGeomAlgo._Tess2.Sweep.spliceMergeVertices","hxGeomAlgo/Tess2.hx",2091,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2095_vertexWeights,"hxGeomAlgo._Tess2.Sweep","vertexWeights",0x44b24078,"hxGeomAlgo._Tess2.Sweep.vertexWeights","hxGeomAlgo/Tess2.hx",2095,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2113_getIntersectData,"hxGeomAlgo._Tess2.Sweep","getIntersectData",0x468e4752,"hxGeomAlgo._Tess2.Sweep.getIntersectData","hxGeomAlgo/Tess2.hx",2113,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2126_checkForRightSplice,"hxGeomAlgo._Tess2.Sweep","checkForRightSplice",0x8a739718,"hxGeomAlgo._Tess2.Sweep.checkForRightSplice","hxGeomAlgo/Tess2.hx",2126,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2183_checkForLeftSplice,"hxGeomAlgo._Tess2.Sweep","checkForLeftSplice",0x2f687043,"hxGeomAlgo._Tess2.Sweep.checkForLeftSplice","hxGeomAlgo/Tess2.hx",2183,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2231_checkForIntersect,"hxGeomAlgo._Tess2.Sweep","checkForIntersect",0xe49cdd7f,"hxGeomAlgo._Tess2.Sweep.checkForIntersect","hxGeomAlgo/Tess2.hx",2231,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2380_walkDirtyRegions,"hxGeomAlgo._Tess2.Sweep","walkDirtyRegions",0x549444d5,"hxGeomAlgo._Tess2.Sweep.walkDirtyRegions","hxGeomAlgo/Tess2.hx",2380,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2466_connectRightVertex,"hxGeomAlgo._Tess2.Sweep","connectRightVertex",0x71a31d75,"hxGeomAlgo._Tess2.Sweep.connectRightVertex","hxGeomAlgo/Tess2.hx",2466,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2557_connectLeftDegenerate,"hxGeomAlgo._Tess2.Sweep","connectLeftDegenerate",0xca89c0a8,"hxGeomAlgo._Tess2.Sweep.connectLeftDegenerate","hxGeomAlgo/Tess2.hx",2557,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2616_connectLeftVertex,"hxGeomAlgo._Tess2.Sweep","connectLeftVertex",0x87561b56,"hxGeomAlgo._Tess2.Sweep.connectLeftVertex","hxGeomAlgo/Tess2.hx",2616,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2683_sweepEvent,"hxGeomAlgo._Tess2.Sweep","sweepEvent",0xbd3bb86d,"hxGeomAlgo._Tess2.Sweep.sweepEvent","hxGeomAlgo/Tess2.hx",2683,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2738_addSentinel,"hxGeomAlgo._Tess2.Sweep","addSentinel",0x206b1d66,"hxGeomAlgo._Tess2.Sweep.addSentinel","hxGeomAlgo/Tess2.hx",2738,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2764_initEdgeDict,"hxGeomAlgo._Tess2.Sweep","initEdgeDict",0xe46a3b22,"hxGeomAlgo._Tess2.Sweep.initEdgeDict","hxGeomAlgo/Tess2.hx",2764,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2785_doneEdgeDict,"hxGeomAlgo._Tess2.Sweep","doneEdgeDict",0x81dab294,"hxGeomAlgo._Tess2.Sweep.doneEdgeDict","hxGeomAlgo/Tess2.hx",2785,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2806_removeDegenerateEdges,"hxGeomAlgo._Tess2.Sweep","removeDegenerateEdges",0xe302729d,"hxGeomAlgo._Tess2.Sweep.removeDegenerateEdges","hxGeomAlgo/Tess2.hx",2806,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2839_initPriorityQ,"hxGeomAlgo._Tess2.Sweep","initPriorityQ",0xf8e366be,"hxGeomAlgo._Tess2.Sweep.initPriorityQ","hxGeomAlgo/Tess2.hx",2839,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2879_donePriorityQ,"hxGeomAlgo._Tess2.Sweep","donePriorityQ",0x1ddb730c,"hxGeomAlgo._Tess2.Sweep.donePriorityQ","hxGeomAlgo/Tess2.hx",2879,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2882_removeDegenerateFaces,"hxGeomAlgo._Tess2.Sweep","removeDegenerateFaces",0x746a5a3d,"hxGeomAlgo._Tess2.Sweep.removeDegenerateFaces","hxGeomAlgo/Tess2.hx",2882,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_f847c6a08bf6eeba_2917_computeInterior,"hxGeomAlgo._Tess2.Sweep","computeInterior",0x49e34488,"hxGeomAlgo._Tess2.Sweep.computeInterior","hxGeomAlgo/Tess2.hx",2917,0xf73e622d)
namespace hxGeomAlgo{
namespace _Tess2{

void Sweep_obj::__construct() { }

Dynamic Sweep_obj::__CreateEmpty() { return new Sweep_obj; }

void *Sweep_obj::_hx_vtable = 0;

Dynamic Sweep_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Sweep_obj > _hx_result = new Sweep_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Sweep_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x371362eb;
}

 ::hxGeomAlgo::_Tess2::ActiveRegion Sweep_obj::regionBelow( ::hxGeomAlgo::_Tess2::ActiveRegion r){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1752_regionBelow)
HXDLIN(1752)		return r->nodeUp->prev->key;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sweep_obj,regionBelow,return )

 ::hxGeomAlgo::_Tess2::ActiveRegion Sweep_obj::regionAbove( ::hxGeomAlgo::_Tess2::ActiveRegion r){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1756_regionAbove)
HXDLIN(1756)		return r->nodeUp->next->key;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sweep_obj,regionAbove,return )

void Sweep_obj::debugEvent( ::hxGeomAlgo::Tesselator tess){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1759_debugEvent)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sweep_obj,debugEvent,(void))

void Sweep_obj::addWinding( ::hxGeomAlgo::_Tess2::TessHalfEdge eDst, ::hxGeomAlgo::_Tess2::TessHalfEdge eSrc){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1796_addWinding)
HXLINE(1797)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eDst1 = eDst;
HXDLIN(1797)		eDst1->winding = (eDst1->winding + eSrc->winding);
HXLINE(1798)		 ::hxGeomAlgo::_Tess2::TessHalfEdge fh = eDst->Sym;
HXDLIN(1798)		fh->winding = (fh->winding + eSrc->Sym->winding);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,addWinding,(void))

bool Sweep_obj::edgeLeq( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion reg1, ::hxGeomAlgo::_Tess2::ActiveRegion reg2){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1802_edgeLeq)
HXLINE(1814)		 ::hxGeomAlgo::_Tess2::TessVertex ev = tess->event;
HXLINE(1815)		 ::Dynamic t1;
HXDLIN(1815)		 ::Dynamic t2;
HXLINE(1817)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e1 = reg1->eUp;
HXLINE(1818)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e2 = reg2->eUp;
HXLINE(1820)		if (::hx::IsInstanceEq( e1->get_Dst(),ev )) {
HXLINE(1821)			if (::hx::IsInstanceEq( e2->get_Dst(),ev )) {
HXLINE(1825)				if (::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(e1->Org,e2->Org)) {
HXLINE(1826)					 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = e2->get_Dst();
HXDLIN(1826)					return (::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(_hx_tmp,e1->Org,e2->Org) <= 0);
            				}
HXLINE(1828)				 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = e1->get_Dst();
HXDLIN(1828)				return (::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(_hx_tmp,e2->Org,e1->Org) >= 0);
            			}
HXLINE(1830)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = e2->get_Dst();
HXDLIN(1830)			return (::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(_hx_tmp,ev,e2->Org) <= 0);
            		}
HXLINE(1832)		if (::hx::IsInstanceEq( e2->get_Dst(),ev )) {
HXLINE(1833)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = e1->get_Dst();
HXDLIN(1833)			return (::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(_hx_tmp,ev,e1->Org) >= 0);
            		}
HXLINE(1837)		 ::hxGeomAlgo::_Tess2::TessVertex t11 = e1->get_Dst();
HXDLIN(1837)		Float t12 = ::hxGeomAlgo::_Tess2::Geom_obj::edgeEval(t11,ev,e1->Org);
HXLINE(1838)		 ::hxGeomAlgo::_Tess2::TessVertex t21 = e2->get_Dst();
HXDLIN(1838)		Float t22 = ::hxGeomAlgo::_Tess2::Geom_obj::edgeEval(t21,ev,e2->Org);
HXLINE(1839)		return (t12 >= t22);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Sweep_obj,edgeLeq,return )

void Sweep_obj::deleteRegion( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion reg){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1843_deleteRegion)
HXLINE(1844)		if (reg->fixUpperEdge) {
HXLINE(1849)			::hxGeomAlgo::Debug_obj::_hx_assert((reg->eUp->winding == 0),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1849,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("deleteRegion",7f,e7,24,67)));
            		}
HXLINE(1851)		reg->eUp->activeRegion = null();
HXLINE(1852)		tess->dict->_hx_delete(reg->nodeUp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,deleteRegion,(void))

void Sweep_obj::fixUpperEdge( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion reg, ::hxGeomAlgo::_Tess2::TessHalfEdge newEdge){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1856_fixUpperEdge)
HXLINE(1860)		::hxGeomAlgo::Debug_obj::_hx_assert(reg->fixUpperEdge,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1860,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("fixUpperEdge",2a,22,a7,a5)));
HXLINE(1861)		tess->mesh->_hx_delete(reg->eUp);
HXLINE(1862)		reg->fixUpperEdge = false;
HXLINE(1863)		reg->eUp = newEdge;
HXLINE(1864)		newEdge->activeRegion = reg;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Sweep_obj,fixUpperEdge,(void))

 ::hxGeomAlgo::_Tess2::ActiveRegion Sweep_obj::topLeftRegion( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion reg){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1868_topLeftRegion)
HXLINE(1869)		 ::hxGeomAlgo::_Tess2::TessVertex org = reg->eUp->Org;
HXLINE(1870)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e;
HXLINE(1873)		while(true){
HXLINE(1874)			reg = ::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(reg);
HXLINE(1873)			if (!(::hx::IsInstanceEq( reg->eUp->Org,org ))) {
HXLINE(1873)				goto _hx_goto_7;
            			}
            		}
            		_hx_goto_7:;
HXLINE(1880)		if (reg->fixUpperEdge) {
HXLINE(1881)			 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(1881)			e = tess1->connect(::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(reg)->eUp->Sym,reg->eUp->Lnext);
HXLINE(1882)			if (::hx::IsNull( e )) {
HXLINE(1882)				return null();
            			}
HXLINE(1883)			::hxGeomAlgo::_Tess2::Sweep_obj::fixUpperEdge(tess,reg,e);
HXLINE(1884)			reg = ::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(reg);
            		}
HXLINE(1886)		return reg;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,topLeftRegion,return )

 ::hxGeomAlgo::_Tess2::ActiveRegion Sweep_obj::topRightRegion( ::hxGeomAlgo::_Tess2::ActiveRegion reg){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1891_topRightRegion)
HXLINE(1892)		 ::hxGeomAlgo::_Tess2::TessVertex dst = reg->eUp->get_Dst();
HXLINE(1895)		while(true){
HXLINE(1896)			reg = ::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(reg);
HXLINE(1895)			if (!(::hx::IsInstanceEq( reg->eUp->get_Dst(),dst ))) {
HXLINE(1895)				goto _hx_goto_9;
            			}
            		}
            		_hx_goto_9:;
HXLINE(1898)		return reg;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sweep_obj,topRightRegion,return )

 ::hxGeomAlgo::_Tess2::ActiveRegion Sweep_obj::addRegionBelow( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion regAbove, ::hxGeomAlgo::_Tess2::TessHalfEdge eNewUp){
            	HX_GC_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1902_addRegionBelow)
HXLINE(1909)		 ::hxGeomAlgo::_Tess2::ActiveRegion regNew =  ::hxGeomAlgo::_Tess2::ActiveRegion_obj::__alloc( HX_CTX );
HXLINE(1910)		regNew->eUp = eNewUp;
HXLINE(1911)		regNew->nodeUp = tess->dict->insertBefore(regAbove->nodeUp,regNew);
HXLINE(1913)		regNew->fixUpperEdge = false;
HXLINE(1914)		regNew->sentinel = false;
HXLINE(1915)		regNew->dirty = false;
HXLINE(1917)		eNewUp->activeRegion = regNew;
HXLINE(1918)		return regNew;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Sweep_obj,addRegionBelow,return )

bool Sweep_obj::isWindingInside( ::hxGeomAlgo::Tesselator tess,int n){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1923_isWindingInside)
HXDLIN(1923)		switch((int)(tess->windingRule->_hx_getIndex())){
            			case (int)0: {
HXLINE(1925)				return ((n & 1) != 0);
            			}
            			break;
            			case (int)1: {
HXLINE(1927)				return (n != 0);
            			}
            			break;
            			case (int)2: {
HXLINE(1929)				return (n > 0);
            			}
            			break;
            			case (int)3: {
HXLINE(1931)				return (n < 0);
            			}
            			break;
            			case (int)4: {
HXLINE(1933)				if ((n < 2)) {
HXLINE(1933)					return (n <= -2);
            				}
            				else {
HXLINE(1933)					return true;
            				}
            			}
            			break;
            		}
HXLINE(1923)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,isWindingInside,return )

void Sweep_obj::computeWinding( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion reg){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1940_computeWinding)
HXLINE(1941)		reg->windingNumber = (::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(reg)->windingNumber + reg->eUp->winding);
HXLINE(1942)		reg->inside = ::hxGeomAlgo::_Tess2::Sweep_obj::isWindingInside(tess,reg->windingNumber);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,computeWinding,(void))

void Sweep_obj::finishRegion( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion reg){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1946_finishRegion)
HXLINE(1954)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = reg->eUp;
HXLINE(1955)		 ::hxGeomAlgo::_Tess2::TessFace f = e->Lface;
HXLINE(1957)		f->inside = reg->inside;
HXLINE(1958)		f->anEdge = e;
HXLINE(1959)		::hxGeomAlgo::_Tess2::Sweep_obj::deleteRegion(tess,reg);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,finishRegion,(void))

 ::hxGeomAlgo::_Tess2::TessHalfEdge Sweep_obj::finishLeftRegions( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion regFirst, ::hxGeomAlgo::_Tess2::ActiveRegion regLast){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_1964_finishLeftRegions)
HXLINE(1977)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e;
HXDLIN(1977)		 ::Dynamic ePrev;
HXLINE(1978)		 ::hxGeomAlgo::_Tess2::ActiveRegion reg = null();
HXLINE(1979)		 ::hxGeomAlgo::_Tess2::ActiveRegion regPrev = regFirst;
HXLINE(1980)		 ::hxGeomAlgo::_Tess2::TessHalfEdge ePrev1 = regFirst->eUp;
HXLINE(1981)		while(::hx::IsInstanceNotEq( regPrev,regLast )){
HXLINE(1982)			regPrev->fixUpperEdge = false;
HXLINE(1983)			reg = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regPrev);
HXLINE(1984)			e = reg->eUp;
HXLINE(1985)			if (::hx::IsInstanceNotEq( e->Org,ePrev1->Org )) {
HXLINE(1986)				if (!(reg->fixUpperEdge)) {
HXLINE(1993)					::hxGeomAlgo::_Tess2::Sweep_obj::finishRegion(tess,regPrev);
HXLINE(1994)					goto _hx_goto_15;
            				}
HXLINE(1999)				 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(1999)				 ::hxGeomAlgo::_Tess2::TessHalfEdge e1 = ePrev1->get_Lprev();
HXDLIN(1999)				e = tess1->connect(e1,e->Sym);
HXLINE(2001)				::hxGeomAlgo::_Tess2::Sweep_obj::fixUpperEdge(tess,reg,e);
            			}
HXLINE(2005)			if (::hx::IsInstanceNotEq( ePrev1->Onext,e )) {
HXLINE(2006)				 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(2006)				tess1->splice(e->get_Oprev(),e);
HXLINE(2007)				tess->mesh->splice(ePrev1,e);
            			}
HXLINE(2009)			::hxGeomAlgo::_Tess2::Sweep_obj::finishRegion(tess,regPrev);
HXLINE(2010)			ePrev1 = reg->eUp;
HXLINE(2011)			regPrev = reg;
            		}
            		_hx_goto_15:;
HXLINE(2013)		return ePrev1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Sweep_obj,finishLeftRegions,return )

void Sweep_obj::addRightEdges( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion regUp, ::hxGeomAlgo::_Tess2::TessHalfEdge eFirst, ::hxGeomAlgo::_Tess2::TessHalfEdge eLast, ::hxGeomAlgo::_Tess2::TessHalfEdge eTopLeft,bool cleanUp){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2017_addRightEdges)
HXLINE(2028)		 ::hxGeomAlgo::_Tess2::ActiveRegion reg = null();
HXLINE(2030)		bool firstTime = true;
HXLINE(2029)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = eFirst;
HXLINE(2034)		while(true){
HXLINE(2035)			 ::hxGeomAlgo::_Tess2::TessVertex e1 = e->Org;
HXDLIN(2035)			bool _hx_tmp = ::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(e1,e->get_Dst());
HXDLIN(2035)			::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2035,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("addRightEdges",9b,9d,ee,d6)));
HXLINE(2036)			::hxGeomAlgo::_Tess2::Sweep_obj::addRegionBelow(tess,regUp,e->Sym);
HXLINE(2037)			e = e->Onext;
HXLINE(2034)			if (!(::hx::IsInstanceNotEq( e,eLast ))) {
HXLINE(2034)				goto _hx_goto_17;
            			}
            		}
            		_hx_goto_17:;
HXLINE(2044)		if (::hx::IsNull( eTopLeft )) {
HXLINE(2045)			eTopLeft = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp)->eUp->get_Rprev();
            		}
HXLINE(2028)		 ::hxGeomAlgo::_Tess2::ActiveRegion regPrev = regUp;
HXLINE(2029)		 ::hxGeomAlgo::_Tess2::TessHalfEdge ePrev = eTopLeft;
HXLINE(2049)		while(true){
HXLINE(2050)			reg = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regPrev);
HXLINE(2051)			e = reg->eUp->Sym;
HXLINE(2052)			if (::hx::IsInstanceNotEq( e->Org,ePrev->Org )) {
HXLINE(2052)				goto _hx_goto_18;
            			}
HXLINE(2054)			if (::hx::IsInstanceNotEq( e->Onext,ePrev )) {
HXLINE(2056)				 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(2056)				tess1->splice(e->get_Oprev(),e);
HXLINE(2057)				 ::hxGeomAlgo::_Tess2::TessMesh tess2 = tess->mesh;
HXDLIN(2057)				tess2->splice(ePrev->get_Oprev(),e);
            			}
HXLINE(2060)			reg->windingNumber = (regPrev->windingNumber - e->winding);
HXLINE(2061)			reg->inside = ::hxGeomAlgo::_Tess2::Sweep_obj::isWindingInside(tess,reg->windingNumber);
HXLINE(2066)			regPrev->dirty = true;
HXLINE(2067)			bool _hx_tmp;
HXDLIN(2067)			if (!(firstTime)) {
HXLINE(2067)				_hx_tmp = ::hxGeomAlgo::_Tess2::Sweep_obj::checkForRightSplice(tess,regPrev);
            			}
            			else {
HXLINE(2067)				_hx_tmp = false;
            			}
HXDLIN(2067)			if (_hx_tmp) {
HXLINE(2068)				::hxGeomAlgo::_Tess2::Sweep_obj::addWinding(e,ePrev);
HXLINE(2069)				::hxGeomAlgo::_Tess2::Sweep_obj::deleteRegion(tess,regPrev);
HXLINE(2070)				tess->mesh->_hx_delete(ePrev);
            			}
HXLINE(2072)			firstTime = false;
HXLINE(2073)			regPrev = reg;
HXLINE(2074)			ePrev = e;
            		}
            		_hx_goto_18:;
HXLINE(2076)		regPrev->dirty = true;
HXLINE(2077)		::hxGeomAlgo::Debug_obj::_hx_assert(((regPrev->windingNumber - e->winding) == reg->windingNumber),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2077,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("addRightEdges",9b,9d,ee,d6)));
HXLINE(2079)		if (cleanUp) {
HXLINE(2081)			::hxGeomAlgo::_Tess2::Sweep_obj::walkDirtyRegions(tess,regPrev);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Sweep_obj,addRightEdges,(void))

void Sweep_obj::spliceMergeVertices( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::TessHalfEdge e1, ::hxGeomAlgo::_Tess2::TessHalfEdge e2){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2091_spliceMergeVertices)
HXDLIN(2091)		tess->mesh->splice(e1,e2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Sweep_obj,spliceMergeVertices,(void))

void Sweep_obj::vertexWeights( ::hxGeomAlgo::_Tess2::TessVertex isect, ::hxGeomAlgo::_Tess2::TessVertex org, ::hxGeomAlgo::_Tess2::TessVertex dst){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2095_vertexWeights)
HXLINE(2103)		Float t1 = ::hxGeomAlgo::_Tess2::Geom_obj::vertL1dist(org,isect);
HXLINE(2104)		Float t2 = ::hxGeomAlgo::_Tess2::Geom_obj::vertL1dist(dst,isect);
HXLINE(2105)		Float w0 = ((((Float)0.5) * t2) / (t1 + t2));
HXLINE(2106)		Float w1 = ((((Float)0.5) * t1) / (t1 + t2));
HXLINE(2107)		::Array< Float > base = isect->coords;
HXDLIN(2107)		int _hx_tmp = 0;
HXDLIN(2107)		base[_hx_tmp] = (base->__get(_hx_tmp) + ((w0 * org->coords->__get(0)) + (w1 * dst->coords->__get(0))));
HXLINE(2108)		::Array< Float > base1 = isect->coords;
HXDLIN(2108)		int _hx_tmp1 = 1;
HXDLIN(2108)		base1[_hx_tmp1] = (base1->__get(_hx_tmp1) + ((w0 * org->coords->__get(1)) + (w1 * dst->coords->__get(1))));
HXLINE(2109)		::Array< Float > base2 = isect->coords;
HXDLIN(2109)		int _hx_tmp2 = 2;
HXDLIN(2109)		base2[_hx_tmp2] = (base2->__get(_hx_tmp2) + ((w0 * org->coords->__get(2)) + (w1 * dst->coords->__get(2))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Sweep_obj,vertexWeights,(void))

void Sweep_obj::getIntersectData( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::TessVertex isect, ::hxGeomAlgo::_Tess2::TessVertex orgUp, ::hxGeomAlgo::_Tess2::TessVertex dstUp, ::hxGeomAlgo::_Tess2::TessVertex orgLo, ::hxGeomAlgo::_Tess2::TessVertex dstLo){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2113_getIntersectData)
HXLINE(2119)		Float _hx_tmp = (isect->coords[1] = (isect->coords[2] = ( (Float)(0) )));
HXDLIN(2119)		isect->coords[0] = _hx_tmp;
HXLINE(2120)		isect->idx = -1;
HXLINE(2121)		::hxGeomAlgo::_Tess2::Sweep_obj::vertexWeights(isect,orgUp,dstUp);
HXLINE(2122)		::hxGeomAlgo::_Tess2::Sweep_obj::vertexWeights(isect,orgLo,dstLo);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Sweep_obj,getIntersectData,(void))

bool Sweep_obj::checkForRightSplice( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion regUp){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2126_checkForRightSplice)
HXLINE(2152)		 ::hxGeomAlgo::_Tess2::ActiveRegion regLo = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp);
HXLINE(2153)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eUp = regUp->eUp;
HXLINE(2154)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eLo = regLo->eUp;
HXLINE(2156)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(eUp->Org,eLo->Org)) {
HXLINE(2157)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = eLo->get_Dst();
HXDLIN(2157)			if ((::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(_hx_tmp,eUp->Org,eLo->Org) > 0)) {
HXLINE(2157)				return false;
            			}
HXLINE(2160)			if (!(::hxGeomAlgo::_Tess2::Geom_obj::vertEq(eUp->Org,eLo->Org))) {
HXLINE(2162)				tess->mesh->splitEdge(eLo->Sym);
HXLINE(2163)				 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(2163)				tess1->splice(eUp,eLo->get_Oprev());
HXLINE(2164)				regUp->dirty = (regLo->dirty = true);
            			}
            			else {
HXLINE(2166)				if (::hx::IsInstanceNotEq( eUp->Org,eLo->Org )) {
HXLINE(2168)					tess->pq->_hx_delete(eUp->Org->pqHandle);
HXLINE(2169)					::hxGeomAlgo::_Tess2::Sweep_obj::spliceMergeVertices(tess,eLo->get_Oprev(),eUp);
            				}
            			}
            		}
            		else {
HXLINE(2172)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = eUp->get_Dst();
HXDLIN(2172)			if ((::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(_hx_tmp,eLo->Org,eUp->Org) < 0)) {
HXLINE(2172)				return false;
            			}
HXLINE(2175)			::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(regUp)->dirty = (regUp->dirty = true);
HXLINE(2176)			tess->mesh->splitEdge(eUp->Sym);
HXLINE(2177)			 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(2177)			tess1->splice(eLo->get_Oprev(),eUp);
            		}
HXLINE(2179)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,checkForRightSplice,return )

bool Sweep_obj::checkForLeftSplice( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion regUp){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2183_checkForLeftSplice)
HXLINE(2202)		 ::hxGeomAlgo::_Tess2::ActiveRegion regLo = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp);
HXLINE(2203)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eUp = regUp->eUp;
HXLINE(2204)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eLo = regLo->eUp;
HXLINE(2205)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e;
HXLINE(2207)		 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = eUp->get_Dst();
HXDLIN(2207)		 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp1 = eLo->get_Dst();
HXDLIN(2207)		::hxGeomAlgo::Debug_obj::_hx_assert(!(::hxGeomAlgo::_Tess2::Geom_obj::vertEq(_hx_tmp,_hx_tmp1)),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2207,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("checkForLeftSplice",64,6b,82,be)));
HXLINE(2209)		 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp2 = eUp->get_Dst();
HXDLIN(2209)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(_hx_tmp2,eLo->get_Dst())) {
HXLINE(2210)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = eUp->get_Dst();
HXDLIN(2210)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp1 = eLo->get_Dst();
HXDLIN(2210)			if ((::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(_hx_tmp,_hx_tmp1,eUp->Org) < 0)) {
HXLINE(2210)				return false;
            			}
HXLINE(2213)			::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(regUp)->dirty = (regUp->dirty = true);
HXLINE(2214)			e = tess->mesh->splitEdge(eUp);
HXLINE(2215)			tess->mesh->splice(eLo->Sym,e);
HXLINE(2216)			e->Lface->inside = regUp->inside;
            		}
            		else {
HXLINE(2218)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = eLo->get_Dst();
HXDLIN(2218)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp1 = eUp->get_Dst();
HXDLIN(2218)			if ((::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(_hx_tmp,_hx_tmp1,eLo->Org) > 0)) {
HXLINE(2218)				return false;
            			}
HXLINE(2221)			regUp->dirty = (regLo->dirty = true);
HXLINE(2222)			e = tess->mesh->splitEdge(eLo);
HXLINE(2223)			tess->mesh->splice(eUp->Lnext,eLo->Sym);
HXLINE(2224)			e->get_Rface()->inside = regUp->inside;
            		}
HXLINE(2226)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,checkForLeftSplice,return )

bool Sweep_obj::checkForIntersect( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion regUp){
            	HX_GC_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2231_checkForIntersect)
HXLINE(2241)		 ::hxGeomAlgo::_Tess2::ActiveRegion regLo = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp);
HXLINE(2242)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eUp = regUp->eUp;
HXLINE(2243)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eLo = regLo->eUp;
HXLINE(2244)		 ::hxGeomAlgo::_Tess2::TessVertex orgUp = eUp->Org;
HXLINE(2245)		 ::hxGeomAlgo::_Tess2::TessVertex orgLo = eLo->Org;
HXLINE(2246)		 ::hxGeomAlgo::_Tess2::TessVertex dstUp = eUp->get_Dst();
HXLINE(2247)		 ::hxGeomAlgo::_Tess2::TessVertex dstLo = eLo->get_Dst();
HXLINE(2249)		 ::hxGeomAlgo::_Tess2::TessVertex isect =  ::hxGeomAlgo::_Tess2::TessVertex_obj::__alloc( HX_CTX );
HXDLIN(2249)		 ::hxGeomAlgo::_Tess2::TessVertex orgMin;
HXLINE(2250)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e;
HXLINE(2252)		::hxGeomAlgo::Debug_obj::_hx_assert(!(::hxGeomAlgo::_Tess2::Geom_obj::vertEq(dstLo,dstUp)),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2252,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("checkForIntersect",7e,61,d6,27)));
HXLINE(2253)		bool _hx_tmp = (::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(dstUp,tess->event,orgUp) <= 0);
HXDLIN(2253)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2253,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("checkForIntersect",7e,61,d6,27)));
HXLINE(2254)		bool _hx_tmp1 = (::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(dstLo,tess->event,orgLo) >= 0);
HXDLIN(2254)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp1,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2254,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("checkForIntersect",7e,61,d6,27)));
HXLINE(2255)		bool _hx_tmp2;
HXDLIN(2255)		if (::hx::IsInstanceNotEq( orgUp,tess->event )) {
HXLINE(2255)			_hx_tmp2 = ::hx::IsInstanceNotEq( orgLo,tess->event );
            		}
            		else {
HXLINE(2255)			_hx_tmp2 = false;
            		}
HXDLIN(2255)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp2,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2255,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("checkForIntersect",7e,61,d6,27)));
HXLINE(2256)		bool _hx_tmp3;
HXDLIN(2256)		if (!(regUp->fixUpperEdge)) {
HXLINE(2256)			_hx_tmp3 = !(regLo->fixUpperEdge);
            		}
            		else {
HXLINE(2256)			_hx_tmp3 = false;
            		}
HXDLIN(2256)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp3,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2256,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("checkForIntersect",7e,61,d6,27)));
HXLINE(2258)		if (::hx::IsInstanceEq( orgUp,orgLo )) {
HXLINE(2258)			return false;
            		}
HXLINE(2248)		Float tMinUp = ::Math_obj::min(orgUp->t,dstUp->t);
HXDLIN(2248)		Float tMaxLo = ::Math_obj::max(orgLo->t,dstLo->t);
HXLINE(2262)		if ((tMinUp > tMaxLo)) {
HXLINE(2262)			return false;
            		}
HXLINE(2264)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(orgUp,orgLo)) {
HXLINE(2265)			if ((::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(dstLo,orgUp,orgLo) > 0)) {
HXLINE(2265)				return false;
            			}
            		}
            		else {
HXLINE(2267)			if ((::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(dstUp,orgLo,orgUp) < 0)) {
HXLINE(2267)				return false;
            			}
            		}
HXLINE(2271)		::hxGeomAlgo::_Tess2::Sweep_obj::debugEvent(tess);
HXLINE(2273)		::hxGeomAlgo::_Tess2::Geom_obj::intersect(dstUp,orgUp,dstLo,orgLo,isect);
HXLINE(2275)		::hxGeomAlgo::Debug_obj::_hx_assert((::Math_obj::min(orgUp->t,dstUp->t) <= isect->t),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2275,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("checkForIntersect",7e,61,d6,27)));
HXLINE(2276)		::hxGeomAlgo::Debug_obj::_hx_assert((isect->t <= ::Math_obj::max(orgLo->t,dstLo->t)),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2276,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("checkForIntersect",7e,61,d6,27)));
HXLINE(2277)		::hxGeomAlgo::Debug_obj::_hx_assert((::Math_obj::min(dstLo->s,dstUp->s) <= isect->s),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2277,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("checkForIntersect",7e,61,d6,27)));
HXLINE(2278)		::hxGeomAlgo::Debug_obj::_hx_assert((isect->s <= ::Math_obj::max(orgLo->s,orgUp->s)),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2278,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("checkForIntersect",7e,61,d6,27)));
HXLINE(2280)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(isect,tess->event)) {
HXLINE(2287)			isect->s = tess->event->s;
HXLINE(2288)			isect->t = tess->event->t;
            		}
HXLINE(2296)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(orgUp,orgLo)) {
HXLINE(2296)			orgMin = orgUp;
            		}
            		else {
HXLINE(2296)			orgMin = orgLo;
            		}
HXLINE(2297)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(orgMin,isect)) {
HXLINE(2298)			isect->s = orgMin->s;
HXLINE(2299)			isect->t = orgMin->t;
            		}
HXLINE(2302)		bool _hx_tmp4;
HXDLIN(2302)		if (!(::hxGeomAlgo::_Tess2::Geom_obj::vertEq(isect,orgUp))) {
HXLINE(2302)			_hx_tmp4 = ::hxGeomAlgo::_Tess2::Geom_obj::vertEq(isect,orgLo);
            		}
            		else {
HXLINE(2302)			_hx_tmp4 = true;
            		}
HXDLIN(2302)		if (_hx_tmp4) {
HXLINE(2304)			::hxGeomAlgo::_Tess2::Sweep_obj::checkForRightSplice(tess,regUp);
HXLINE(2305)			return false;
            		}
HXLINE(2308)		bool _hx_tmp5;
HXDLIN(2308)		bool _hx_tmp6;
HXDLIN(2308)		if (!(::hxGeomAlgo::_Tess2::Geom_obj::vertEq(dstUp,tess->event))) {
HXLINE(2308)			_hx_tmp6 = (::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(dstUp,tess->event,isect) >= 0);
            		}
            		else {
HXLINE(2308)			_hx_tmp6 = false;
            		}
HXDLIN(2308)		if (!(_hx_tmp6)) {
HXLINE(2310)			if (!(::hxGeomAlgo::_Tess2::Geom_obj::vertEq(dstLo,tess->event))) {
HXLINE(2308)				_hx_tmp5 = (::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(dstLo,tess->event,isect) <= 0);
            			}
            			else {
HXLINE(2308)				_hx_tmp5 = false;
            			}
            		}
            		else {
HXLINE(2308)			_hx_tmp5 = true;
            		}
HXDLIN(2308)		if (_hx_tmp5) {
HXLINE(2317)			if (::hx::IsInstanceEq( dstLo,tess->event )) {
HXLINE(2319)				tess->mesh->splitEdge(eUp->Sym);
HXLINE(2320)				tess->mesh->splice(eLo->Sym,eUp);
HXLINE(2321)				regUp = ::hxGeomAlgo::_Tess2::Sweep_obj::topLeftRegion(tess,regUp);
HXLINE(2323)				eUp = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp)->eUp;
HXLINE(2324)				::hxGeomAlgo::_Tess2::Sweep_obj::finishLeftRegions(tess,::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp),regLo);
HXLINE(2325)				::hxGeomAlgo::_Tess2::Sweep_obj::addRightEdges(tess,regUp,eUp->get_Oprev(),eUp,eUp,true);
HXLINE(2326)				return true;
            			}
HXLINE(2328)			if (::hx::IsInstanceEq( dstUp,tess->event )) {
HXLINE(2330)				tess->mesh->splitEdge(eLo->Sym);
HXLINE(2331)				 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(2331)				 ::hxGeomAlgo::_Tess2::TessHalfEdge eUp1 = eUp->Lnext;
HXDLIN(2331)				tess1->splice(eUp1,eLo->get_Oprev());
HXLINE(2332)				regLo = regUp;
HXLINE(2333)				regUp = ::hxGeomAlgo::_Tess2::Sweep_obj::topRightRegion(regUp);
HXLINE(2334)				e = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp)->eUp->get_Rprev();
HXLINE(2335)				regLo->eUp = eLo->get_Oprev();
HXLINE(2336)				eLo = ::hxGeomAlgo::_Tess2::Sweep_obj::finishLeftRegions(tess,regLo,null());
HXLINE(2337)				 ::hxGeomAlgo::_Tess2::TessHalfEdge eLo1 = eLo->Onext;
HXDLIN(2337)				::hxGeomAlgo::_Tess2::Sweep_obj::addRightEdges(tess,regUp,eLo1,eUp->get_Rprev(),e,true);
HXLINE(2338)				return true;
            			}
HXLINE(2344)			if ((::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(dstUp,tess->event,isect) >= 0)) {
HXLINE(2345)				::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(regUp)->dirty = (regUp->dirty = true);
HXLINE(2346)				tess->mesh->splitEdge(eUp->Sym);
HXLINE(2347)				eUp->Org->s = tess->event->s;
HXLINE(2348)				eUp->Org->t = tess->event->t;
            			}
HXLINE(2350)			if ((::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(dstLo,tess->event,isect) <= 0)) {
HXLINE(2351)				regUp->dirty = (regLo->dirty = true);
HXLINE(2352)				tess->mesh->splitEdge(eLo->Sym);
HXLINE(2353)				eLo->Org->s = tess->event->s;
HXLINE(2354)				eLo->Org->t = tess->event->t;
            			}
HXLINE(2357)			return false;
            		}
HXLINE(2368)		tess->mesh->splitEdge(eUp->Sym);
HXLINE(2369)		tess->mesh->splitEdge(eLo->Sym);
HXLINE(2370)		 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(2370)		tess1->splice(eLo->get_Oprev(),eUp);
HXLINE(2371)		eUp->Org->s = isect->s;
HXLINE(2372)		eUp->Org->t = isect->t;
HXLINE(2373)		eUp->Org->pqHandle = tess->pq->insert(eUp->Org);
HXLINE(2374)		::hxGeomAlgo::_Tess2::Sweep_obj::getIntersectData(tess,eUp->Org,orgUp,dstUp,orgLo,dstLo);
HXLINE(2375)		::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(regUp)->dirty = (regUp->dirty = (regLo->dirty = true));
HXLINE(2376)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,checkForIntersect,return )

void Sweep_obj::walkDirtyRegions( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion regUp){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2380_walkDirtyRegions)
HXLINE(2389)		 ::hxGeomAlgo::_Tess2::ActiveRegion regLo = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp);
HXLINE(2390)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eUp;
HXDLIN(2390)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eLo;
HXLINE(2392)		while(true){
HXLINE(2394)			while(regLo->dirty){
HXLINE(2395)				regUp = regLo;
HXLINE(2396)				regLo = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regLo);
            			}
HXLINE(2398)			if (!(regUp->dirty)) {
HXLINE(2399)				regLo = regUp;
HXLINE(2400)				regUp = ::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(regUp);
HXLINE(2401)				bool _hx_tmp;
HXDLIN(2401)				if (::hx::IsNotNull( regUp )) {
HXLINE(2401)					_hx_tmp = !(regUp->dirty);
            				}
            				else {
HXLINE(2401)					_hx_tmp = true;
            				}
HXDLIN(2401)				if (_hx_tmp) {
HXLINE(2403)					return;
            				}
            			}
HXLINE(2406)			regUp->dirty = false;
HXLINE(2407)			eUp = regUp->eUp;
HXLINE(2408)			eLo = regLo->eUp;
HXLINE(2410)			 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = eUp->get_Dst();
HXDLIN(2410)			if (::hx::IsInstanceNotEq( _hx_tmp,eLo->get_Dst() )) {
HXLINE(2412)				if (::hxGeomAlgo::_Tess2::Sweep_obj::checkForLeftSplice(tess,regUp)) {
HXLINE(2418)					if (regLo->fixUpperEdge) {
HXLINE(2419)						::hxGeomAlgo::_Tess2::Sweep_obj::deleteRegion(tess,regLo);
HXLINE(2420)						tess->mesh->_hx_delete(eLo);
HXLINE(2421)						regLo = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp);
HXLINE(2422)						eLo = regLo->eUp;
            					}
            					else {
HXLINE(2423)						if (regUp->fixUpperEdge) {
HXLINE(2424)							::hxGeomAlgo::_Tess2::Sweep_obj::deleteRegion(tess,regUp);
HXLINE(2425)							tess->mesh->_hx_delete(eUp);
HXLINE(2426)							regUp = ::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(regLo);
HXLINE(2427)							eUp = regUp->eUp;
            						}
            					}
            				}
            			}
HXLINE(2431)			if (::hx::IsInstanceNotEq( eUp->Org,eLo->Org )) {
HXLINE(2432)				bool _hx_tmp;
HXDLIN(2432)				bool _hx_tmp1;
HXDLIN(2432)				bool _hx_tmp2;
HXDLIN(2432)				 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp3 = eUp->get_Dst();
HXDLIN(2432)				if (::hx::IsInstanceNotEq( _hx_tmp3,eLo->get_Dst() )) {
HXLINE(2432)					_hx_tmp2 = !(regUp->fixUpperEdge);
            				}
            				else {
HXLINE(2432)					_hx_tmp2 = false;
            				}
HXDLIN(2432)				if (_hx_tmp2) {
HXLINE(2432)					_hx_tmp1 = !(regLo->fixUpperEdge);
            				}
            				else {
HXLINE(2432)					_hx_tmp1 = false;
            				}
HXDLIN(2432)				if (_hx_tmp1) {
HXLINE(2434)					 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp1 = eUp->get_Dst();
HXDLIN(2434)					if (::hx::IsInstanceNotEq( _hx_tmp1,tess->event )) {
HXLINE(2434)						 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp1 = eLo->get_Dst();
HXLINE(2432)						_hx_tmp = ::hx::IsInstanceEq( _hx_tmp1,tess->event );
            					}
            					else {
HXLINE(2432)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(2432)					_hx_tmp = false;
            				}
HXDLIN(2432)				if (_hx_tmp) {
HXLINE(2444)					if (::hxGeomAlgo::_Tess2::Sweep_obj::checkForIntersect(tess,regUp)) {
HXLINE(2446)						return;
            					}
            				}
            				else {
HXLINE(2452)					::hxGeomAlgo::_Tess2::Sweep_obj::checkForRightSplice(tess,regUp);
            				}
            			}
HXLINE(2455)			bool _hx_tmp1;
HXDLIN(2455)			if (::hx::IsInstanceEq( eUp->Org,eLo->Org )) {
HXLINE(2455)				 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = eUp->get_Dst();
HXDLIN(2455)				_hx_tmp1 = ::hx::IsInstanceEq( _hx_tmp,eLo->get_Dst() );
            			}
            			else {
HXLINE(2455)				_hx_tmp1 = false;
            			}
HXDLIN(2455)			if (_hx_tmp1) {
HXLINE(2457)				::hxGeomAlgo::_Tess2::Sweep_obj::addWinding(eLo,eUp);
HXLINE(2458)				::hxGeomAlgo::_Tess2::Sweep_obj::deleteRegion(tess,regUp);
HXLINE(2459)				tess->mesh->_hx_delete(eUp);
HXLINE(2460)				regUp = ::hxGeomAlgo::_Tess2::Sweep_obj::regionAbove(regLo);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,walkDirtyRegions,(void))

void Sweep_obj::connectRightVertex( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion regUp, ::hxGeomAlgo::_Tess2::TessHalfEdge eBottomLeft){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2466_connectRightVertex)
HXLINE(2498)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNew;
HXLINE(2499)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eTopLeft = eBottomLeft->Onext;
HXLINE(2500)		 ::hxGeomAlgo::_Tess2::ActiveRegion regLo = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp);
HXLINE(2501)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eUp = regUp->eUp;
HXLINE(2502)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eLo = regLo->eUp;
HXLINE(2503)		bool degenerate = false;
HXLINE(2505)		 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = eUp->get_Dst();
HXDLIN(2505)		if (::hx::IsInstanceNotEq( _hx_tmp,eLo->get_Dst() )) {
HXLINE(2506)			::hxGeomAlgo::_Tess2::Sweep_obj::checkForIntersect(tess,regUp);
            		}
HXLINE(2512)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertEq(eUp->Org,tess->event)) {
HXLINE(2513)			 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(2513)			tess1->splice(eTopLeft->get_Oprev(),eUp);
HXLINE(2514)			regUp = ::hxGeomAlgo::_Tess2::Sweep_obj::topLeftRegion(tess,regUp);
HXLINE(2515)			eTopLeft = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp)->eUp;
HXLINE(2516)			::hxGeomAlgo::_Tess2::Sweep_obj::finishLeftRegions(tess,::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp),regLo);
HXLINE(2517)			degenerate = true;
            		}
HXLINE(2519)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertEq(eLo->Org,tess->event)) {
HXLINE(2520)			 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(2520)			tess1->splice(eBottomLeft,eLo->get_Oprev());
HXLINE(2521)			eBottomLeft = ::hxGeomAlgo::_Tess2::Sweep_obj::finishLeftRegions(tess,regLo,null());
HXLINE(2522)			degenerate = true;
            		}
HXLINE(2524)		if (degenerate) {
HXLINE(2525)			::hxGeomAlgo::_Tess2::Sweep_obj::addRightEdges(tess,regUp,eBottomLeft->Onext,eTopLeft,eTopLeft,true);
HXLINE(2526)			return;
            		}
HXLINE(2532)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(eLo->Org,eUp->Org)) {
HXLINE(2533)			eNew = eLo->get_Oprev();
            		}
            		else {
HXLINE(2535)			eNew = eUp;
            		}
HXLINE(2537)		 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(2537)		eNew = tess1->connect(eBottomLeft->get_Lprev(),eNew);
HXLINE(2542)		::hxGeomAlgo::_Tess2::Sweep_obj::addRightEdges(tess,regUp,eNew,eNew->Onext,eNew->Onext,false);
HXLINE(2543)		eNew->Sym->activeRegion->fixUpperEdge = true;
HXLINE(2544)		::hxGeomAlgo::_Tess2::Sweep_obj::walkDirtyRegions(tess,regUp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Sweep_obj,connectRightVertex,(void))

void Sweep_obj::connectLeftDegenerate( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::ActiveRegion regUp, ::hxGeomAlgo::_Tess2::TessVertex vEvent){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2557_connectLeftDegenerate)
HXLINE(2563)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = regUp->eUp;
HXLINE(2567)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertEq(e->Org,vEvent)) {
HXLINE(2571)			::hxGeomAlgo::Debug_obj::_hx_assert(false,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2571,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("connectLeftDegenerate",27,b0,6e,ef)));
HXLINE(2572)			::hxGeomAlgo::_Tess2::Sweep_obj::spliceMergeVertices(tess,e,vEvent->anEdge);
HXLINE(2573)			return;
            		}
HXLINE(2576)		if (!(::hxGeomAlgo::_Tess2::Geom_obj::vertEq(e->get_Dst(),vEvent))) {
HXLINE(2578)			tess->mesh->splitEdge(e->Sym);
HXLINE(2579)			if (regUp->fixUpperEdge) {
HXLINE(2581)				tess->mesh->_hx_delete(e->Onext);
HXLINE(2582)				regUp->fixUpperEdge = false;
            			}
HXLINE(2584)			tess->mesh->splice(vEvent->anEdge,e);
HXLINE(2585)			::hxGeomAlgo::_Tess2::Sweep_obj::sweepEvent(tess,vEvent);
HXLINE(2586)			return;
            		}
HXLINE(2592)		::hxGeomAlgo::Debug_obj::_hx_assert(false,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2592,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("connectLeftDegenerate",27,b0,6e,ef)));
HXLINE(2593)		regUp = ::hxGeomAlgo::_Tess2::Sweep_obj::topRightRegion(regUp);
HXLINE(2564)		 ::hxGeomAlgo::_Tess2::ActiveRegion reg = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp);
HXLINE(2563)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eTopRight = reg->eUp->Sym;
HXDLIN(2563)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eLast = eTopRight->Onext;
HXDLIN(2563)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eTopLeft = eLast;
HXLINE(2597)		if (reg->fixUpperEdge) {
HXLINE(2601)			::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceNotEq( eTopLeft,eTopRight ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2601,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("connectLeftDegenerate",27,b0,6e,ef)));
HXLINE(2602)			::hxGeomAlgo::_Tess2::Sweep_obj::deleteRegion(tess,reg);
HXLINE(2603)			tess->mesh->_hx_delete(eTopRight);
HXLINE(2604)			eTopRight = eTopLeft->get_Oprev();
            		}
HXLINE(2606)		tess->mesh->splice(vEvent->anEdge,eTopRight);
HXLINE(2607)		if (!(::hxGeomAlgo::_Tess2::Geom_obj::edgeGoesLeft(eTopLeft))) {
HXLINE(2609)			eTopLeft = null();
            		}
HXLINE(2611)		::hxGeomAlgo::_Tess2::Sweep_obj::addRightEdges(tess,regUp,eTopRight->Onext,eLast,eTopLeft,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Sweep_obj,connectLeftDegenerate,(void))

void Sweep_obj::connectLeftVertex( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::TessVertex vEvent){
            	HX_GC_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2616_connectLeftVertex)
HXLINE(2632)		 ::hxGeomAlgo::_Tess2::ActiveRegion reg;
HXLINE(2633)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNew;
HXLINE(2634)		 ::hxGeomAlgo::_Tess2::ActiveRegion tmp =  ::hxGeomAlgo::_Tess2::ActiveRegion_obj::__alloc( HX_CTX );
HXLINE(2639)		tmp->eUp = vEvent->anEdge->Sym;
HXLINE(2632)		 ::hxGeomAlgo::_Tess2::ActiveRegion regUp = tess->dict->search(tmp)->key;
HXDLIN(2632)		 ::hxGeomAlgo::_Tess2::ActiveRegion regLo = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp);
HXLINE(2643)		if (::hx::IsNull( regLo )) {
HXLINE(2645)			return;
            		}
HXLINE(2633)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eUp = regUp->eUp;
HXDLIN(2633)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eLo = regLo->eUp;
HXLINE(2651)		 ::hxGeomAlgo::_Tess2::TessVertex _hx_tmp = eUp->get_Dst();
HXDLIN(2651)		if ((::hxGeomAlgo::_Tess2::Geom_obj::edgeSign(_hx_tmp,vEvent,eUp->Org) == ((Float)0.0))) {
HXLINE(2652)			::hxGeomAlgo::_Tess2::Sweep_obj::connectLeftDegenerate(tess,regUp,vEvent);
HXLINE(2653)			return;
            		}
HXLINE(2659)		 ::hxGeomAlgo::_Tess2::TessVertex reg1 = eLo->get_Dst();
HXDLIN(2659)		if (::hxGeomAlgo::_Tess2::Geom_obj::vertLeq(reg1,eUp->get_Dst())) {
HXLINE(2659)			reg = regUp;
            		}
            		else {
HXLINE(2659)			reg = regLo;
            		}
HXLINE(2661)		bool _hx_tmp1;
HXDLIN(2661)		if (!(regUp->inside)) {
HXLINE(2661)			_hx_tmp1 = reg->fixUpperEdge;
            		}
            		else {
HXLINE(2661)			_hx_tmp1 = true;
            		}
HXDLIN(2661)		if (_hx_tmp1) {
HXLINE(2662)			if (::hx::IsInstanceEq( reg,regUp )) {
HXLINE(2663)				eNew = tess->mesh->connect(vEvent->anEdge->Sym,eUp->Lnext);
            			}
            			else {
HXLINE(2665)				 ::hxGeomAlgo::_Tess2::TessMesh tess1 = tess->mesh;
HXDLIN(2665)				 ::hxGeomAlgo::_Tess2::TessHalfEdge tempHalfEdge = eLo->get_Dnext();
HXDLIN(2665)				 ::hxGeomAlgo::_Tess2::TessHalfEdge tempHalfEdge1 = tess1->connect(tempHalfEdge,vEvent->anEdge);
HXLINE(2666)				eNew = tempHalfEdge1->Sym;
            			}
HXLINE(2668)			if (reg->fixUpperEdge) {
HXLINE(2669)				::hxGeomAlgo::_Tess2::Sweep_obj::fixUpperEdge(tess,reg,eNew);
            			}
            			else {
HXLINE(2671)				::hxGeomAlgo::_Tess2::Sweep_obj::computeWinding(tess,::hxGeomAlgo::_Tess2::Sweep_obj::addRegionBelow(tess,regUp,eNew));
            			}
HXLINE(2673)			::hxGeomAlgo::_Tess2::Sweep_obj::sweepEvent(tess,vEvent);
            		}
            		else {
HXLINE(2678)			::hxGeomAlgo::_Tess2::Sweep_obj::addRightEdges(tess,regUp,vEvent->anEdge,vEvent->anEdge,null(),true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,connectLeftVertex,(void))

void Sweep_obj::sweepEvent( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::TessVertex vEvent){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2683_sweepEvent)
HXLINE(2689)		tess->event = vEvent;
HXLINE(2690)		::hxGeomAlgo::_Tess2::Sweep_obj::debugEvent(tess);
HXLINE(2696)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = vEvent->anEdge;
HXLINE(2697)		while(::hx::IsNull( e->activeRegion )){
HXLINE(2698)			e = e->Onext;
HXLINE(2699)			if (::hx::IsInstanceEq( e,vEvent->anEdge )) {
HXLINE(2701)				::hxGeomAlgo::_Tess2::Sweep_obj::connectLeftVertex(tess,vEvent);
HXLINE(2702)				return;
            			}
            		}
HXLINE(2713)		 ::hxGeomAlgo::_Tess2::ActiveRegion regUp = ::hxGeomAlgo::_Tess2::Sweep_obj::topLeftRegion(tess,e->activeRegion);
HXLINE(2714)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsNotNull( regUp ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2714,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("sweepEvent",8e,2a,75,39)));
HXLINE(2716)		 ::hxGeomAlgo::_Tess2::ActiveRegion reg = ::hxGeomAlgo::_Tess2::Sweep_obj::regionBelow(regUp);
HXLINE(2717)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eTopLeft = reg->eUp;
HXLINE(2718)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eBottomLeft = ::hxGeomAlgo::_Tess2::Sweep_obj::finishLeftRegions(tess,reg,null());
HXLINE(2725)		if (::hx::IsInstanceEq( eBottomLeft->Onext,eTopLeft )) {
HXLINE(2727)			::hxGeomAlgo::_Tess2::Sweep_obj::connectRightVertex(tess,regUp,eBottomLeft);
            		}
            		else {
HXLINE(2729)			::hxGeomAlgo::_Tess2::Sweep_obj::addRightEdges(tess,regUp,eBottomLeft->Onext,eTopLeft,eTopLeft,true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,sweepEvent,(void))

void Sweep_obj::addSentinel( ::hxGeomAlgo::Tesselator tess,Float smin,Float smax,Float t){
            	HX_GC_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2738_addSentinel)
HXLINE(2743)		 ::hxGeomAlgo::_Tess2::ActiveRegion reg =  ::hxGeomAlgo::_Tess2::ActiveRegion_obj::__alloc( HX_CTX );
HXLINE(2744)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = tess->mesh->makeEdge();
HXLINE(2747)		e->Org->s = smax;
HXLINE(2748)		e->Org->t = t;
HXLINE(2749)		e->get_Dst()->s = smin;
HXLINE(2750)		e->get_Dst()->t = t;
HXLINE(2751)		tess->event = e->get_Dst();
HXLINE(2753)		reg->eUp = e;
HXLINE(2754)		reg->windingNumber = 0;
HXLINE(2755)		reg->inside = false;
HXLINE(2756)		reg->fixUpperEdge = false;
HXLINE(2757)		reg->sentinel = true;
HXLINE(2758)		reg->dirty = false;
HXLINE(2759)		reg->nodeUp = tess->dict->insert(reg);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Sweep_obj,addSentinel,(void))

void Sweep_obj::initEdgeDict( ::hxGeomAlgo::Tesselator tess){
            	HX_GC_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2764_initEdgeDict)
HXLINE(2769)		tess->dict =  ::hxGeomAlgo::_Tess2::Dict_obj::__alloc( HX_CTX ,tess,::hxGeomAlgo::_Tess2::Sweep_obj::edgeLeq_dyn());
HXLINE(2772)		Float w = (tess->bmax->__get(0) - tess->bmin->__get(0));
HXLINE(2773)		Float h = (tess->bmax->__get(1) - tess->bmin->__get(1));
HXLINE(2775)		Float smin = (tess->bmin->__get(0) - w);
HXLINE(2776)		Float smax = (tess->bmax->__get(0) + w);
HXLINE(2777)		Float tmin = (tess->bmin->__get(1) - h);
HXLINE(2778)		Float tmax = (tess->bmax->__get(1) + h);
HXLINE(2780)		::hxGeomAlgo::_Tess2::Sweep_obj::addSentinel(tess,smin,smax,tmin);
HXLINE(2781)		::hxGeomAlgo::_Tess2::Sweep_obj::addSentinel(tess,smin,smax,tmax);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sweep_obj,initEdgeDict,(void))

void Sweep_obj::doneEdgeDict( ::hxGeomAlgo::Tesselator tess){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2785_doneEdgeDict)
HXLINE(2786)		 ::hxGeomAlgo::_Tess2::ActiveRegion reg;
HXLINE(2787)		int fixedEdges = 0;
HXLINE(2789)		while(true){
HXLINE(2789)			reg = tess->dict->min()->key;
HXDLIN(2789)			if (!(::hx::IsNotNull( reg ))) {
HXLINE(2789)				goto _hx_goto_36;
            			}
HXLINE(2795)			if (!(reg->sentinel)) {
HXLINE(2796)				::hxGeomAlgo::Debug_obj::_hx_assert(reg->fixUpperEdge,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2796,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("doneEdgeDict",f5,ae,ed,94)));
HXLINE(2797)				fixedEdges = (fixedEdges + 1);
HXDLIN(2797)				::hxGeomAlgo::Debug_obj::_hx_assert((fixedEdges == 1),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2797,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("doneEdgeDict",f5,ae,ed,94)));
            			}
HXLINE(2799)			::hxGeomAlgo::Debug_obj::_hx_assert((reg->windingNumber == 0),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2799,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("doneEdgeDict",f5,ae,ed,94)));
HXLINE(2800)			::hxGeomAlgo::_Tess2::Sweep_obj::deleteRegion(tess,reg);
            		}
            		_hx_goto_36:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sweep_obj,doneEdgeDict,(void))

void Sweep_obj::removeDegenerateEdges( ::hxGeomAlgo::Tesselator tess){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2806_removeDegenerateEdges)
HXLINE(2810)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNext;
HXDLIN(2810)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eLnext;
HXLINE(2811)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eHead = tess->mesh->eHead;
HXLINE(2810)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = eHead->next;
HXLINE(2815)		while(::hx::IsInstanceNotEq( e,eHead )){
HXLINE(2816)			eNext = e->next;
HXLINE(2817)			eLnext = e->Lnext;
HXLINE(2819)			bool _hx_tmp;
HXDLIN(2819)			 ::hxGeomAlgo::_Tess2::TessVertex e1 = e->Org;
HXDLIN(2819)			if (::hxGeomAlgo::_Tess2::Geom_obj::vertEq(e1,e->get_Dst())) {
HXLINE(2819)				_hx_tmp = ::hx::IsInstanceNotEq( e->Lnext->Lnext,e );
            			}
            			else {
HXLINE(2819)				_hx_tmp = false;
            			}
HXDLIN(2819)			if (_hx_tmp) {
HXLINE(2821)				::hxGeomAlgo::_Tess2::Sweep_obj::spliceMergeVertices(tess,eLnext,e);
HXLINE(2822)				tess->mesh->_hx_delete(e);
HXLINE(2823)				e = eLnext;
HXLINE(2824)				eLnext = e->Lnext;
            			}
HXLINE(2826)			if (::hx::IsInstanceEq( eLnext->Lnext,e )) {
HXLINE(2828)				if (::hx::IsInstanceNotEq( eLnext,e )) {
HXLINE(2829)					bool _hx_tmp;
HXDLIN(2829)					if (::hx::IsInstanceNotEq( eLnext,eNext )) {
HXLINE(2829)						_hx_tmp = ::hx::IsInstanceEq( eLnext,eNext->Sym );
            					}
            					else {
HXLINE(2829)						_hx_tmp = true;
            					}
HXDLIN(2829)					if (_hx_tmp) {
HXLINE(2829)						eNext = eNext->next;
            					}
HXLINE(2830)					tess->mesh->_hx_delete(eLnext);
            				}
HXLINE(2832)				bool _hx_tmp;
HXDLIN(2832)				if (::hx::IsInstanceNotEq( e,eNext )) {
HXLINE(2832)					_hx_tmp = ::hx::IsInstanceEq( e,eNext->Sym );
            				}
            				else {
HXLINE(2832)					_hx_tmp = true;
            				}
HXDLIN(2832)				if (_hx_tmp) {
HXLINE(2832)					eNext = eNext->next;
            				}
HXLINE(2833)				tess->mesh->_hx_delete(e);
            			}
HXLINE(2835)			e = eNext;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sweep_obj,removeDegenerateEdges,(void))

bool Sweep_obj::initPriorityQ( ::Dynamic tess){
            	HX_GC_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2839_initPriorityQ)
HXLINE(2846)		int vertexCount = 0;
HXLINE(2845)		 ::hxGeomAlgo::_Tess2::TessVertex vHead = ( ( ::hxGeomAlgo::_Tess2::TessVertex)( ::Dynamic(tess->__Field(HX_("mesh",ed,49,59,48),::hx::paccDynamic))->__Field(HX_("vHead",b6,c8,2c,21),::hx::paccDynamic)) );
HXDLIN(2845)		 ::hxGeomAlgo::_Tess2::TessVertex v = vHead->next;
HXLINE(2850)		while(::hx::IsInstanceNotEq( v,vHead )){
HXLINE(2851)			vertexCount = (vertexCount + 1);
HXLINE(2852)			v = v->next;
            		}
HXLINE(2855)		vertexCount = (vertexCount + 8);
HXLINE(2844)		 ::hxGeomAlgo::_Tess2::PriorityQ pq = (tess->__SetField(HX_("pq",01,62,00,00), ::hxGeomAlgo::_Tess2::PriorityQ_obj::__alloc( HX_CTX ,vertexCount,::hxGeomAlgo::_Tess2::Geom_obj::vertLeq_dyn()),::hx::paccDynamic));
HXLINE(2860)		vHead = ( ( ::hxGeomAlgo::_Tess2::TessVertex)( ::Dynamic(tess->__Field(HX_("mesh",ed,49,59,48),::hx::paccDynamic))->__Field(HX_("vHead",b6,c8,2c,21),::hx::paccDynamic)) );
HXLINE(2861)		v = vHead->next;
HXLINE(2862)		while(::hx::IsInstanceNotEq( v,vHead )){
HXLINE(2863)			v->pqHandle = pq->insert(v);
HXLINE(2864)			v = v->next;
            		}
HXLINE(2869)		if (::hx::IsInstanceNotEq( v,vHead )) {
HXLINE(2870)			return false;
            		}
HXLINE(2873)		pq->init();
HXLINE(2875)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sweep_obj,initPriorityQ,return )

void Sweep_obj::donePriorityQ( ::Dynamic tess){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2879_donePriorityQ)
HXDLIN(2879)		tess->__SetField(HX_("pq",01,62,00,00),null(),::hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sweep_obj,donePriorityQ,(void))

bool Sweep_obj::removeDegenerateFaces( ::hxGeomAlgo::Tesselator tess, ::hxGeomAlgo::_Tess2::TessMesh mesh){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2882_removeDegenerateFaces)
HXLINE(2897)		 ::hxGeomAlgo::_Tess2::TessFace fNext;
HXLINE(2898)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e;
HXLINE(2897)		 ::hxGeomAlgo::_Tess2::TessFace f = mesh->fHead->next;
HXLINE(2902)		while(::hx::IsInstanceNotEq( f,mesh->fHead )){
HXLINE(2903)			fNext = f->next;
HXLINE(2904)			e = f->anEdge;
HXLINE(2905)			::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceNotEq( e->Lnext,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),2905,HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13),HX_("removeDegenerateFaces",bc,49,4f,99)));
HXLINE(2907)			if (::hx::IsInstanceEq( e->Lnext->Lnext,e )) {
HXLINE(2909)				::hxGeomAlgo::_Tess2::Sweep_obj::addWinding(e->Onext,e);
HXLINE(2910)				tess->mesh->_hx_delete(e);
            			}
HXLINE(2912)			f = fNext;
            		}
HXLINE(2914)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sweep_obj,removeDegenerateFaces,return )

bool Sweep_obj::computeInterior( ::hxGeomAlgo::Tesselator tess){
            	HX_STACKFRAME(&_hx_pos_f847c6a08bf6eeba_2917_computeInterior)
HXLINE(2925)		 ::hxGeomAlgo::_Tess2::TessVertex v;
HXDLIN(2925)		 ::hxGeomAlgo::_Tess2::TessVertex vNext;
HXLINE(2933)		::hxGeomAlgo::_Tess2::Sweep_obj::removeDegenerateEdges(tess);
HXLINE(2934)		if (!(::hxGeomAlgo::_Tess2::Sweep_obj::initPriorityQ(tess))) {
HXLINE(2934)			return false;
            		}
HXLINE(2935)		::hxGeomAlgo::_Tess2::Sweep_obj::initEdgeDict(tess);
HXLINE(2937)		 ::hxGeomAlgo::_Tess2::PriorityQ pq = tess->pq;
HXLINE(2939)		while(true){
HXLINE(2939)			v = tess->pq->extractMin();
HXDLIN(2939)			if (!(::hx::IsNotNull( v ))) {
HXLINE(2939)				goto _hx_goto_46;
            			}
HXLINE(2940)			while(true){
HXLINE(2941)				vNext = tess->pq->min();
HXLINE(2942)				bool _hx_tmp;
HXDLIN(2942)				if (::hx::IsNotNull( vNext )) {
HXLINE(2942)					_hx_tmp = !(::hxGeomAlgo::_Tess2::Geom_obj::vertEq(vNext,v));
            				}
            				else {
HXLINE(2942)					_hx_tmp = true;
            				}
HXDLIN(2942)				if (_hx_tmp) {
HXLINE(2942)					goto _hx_goto_47;
            				}
HXLINE(2958)				vNext = tess->pq->extractMin();
HXLINE(2959)				::hxGeomAlgo::_Tess2::Sweep_obj::spliceMergeVertices(tess,v->anEdge,vNext->anEdge);
            			}
            			_hx_goto_47:;
HXLINE(2961)			::hxGeomAlgo::_Tess2::Sweep_obj::sweepEvent(tess,v);
            		}
            		_hx_goto_46:;
HXLINE(2965)		tess->event = tess->dict->min()->key->eUp->Org;
HXLINE(2966)		::hxGeomAlgo::_Tess2::Sweep_obj::debugEvent(tess);
HXLINE(2967)		::hxGeomAlgo::_Tess2::Sweep_obj::doneEdgeDict(tess);
HXLINE(2968)		::hxGeomAlgo::_Tess2::Sweep_obj::donePriorityQ(tess);
HXLINE(2970)		if (!(::hxGeomAlgo::_Tess2::Sweep_obj::removeDegenerateFaces(tess,tess->mesh))) {
HXLINE(2970)			return false;
            		}
HXLINE(2971)		tess->mesh->check();
HXLINE(2973)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sweep_obj,computeInterior,return )


Sweep_obj::Sweep_obj()
{
}

bool Sweep_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"edgeLeq") ) { outValue = edgeLeq_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"debugEvent") ) { outValue = debugEvent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addWinding") ) { outValue = addWinding_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sweepEvent") ) { outValue = sweepEvent_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"regionBelow") ) { outValue = regionBelow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"regionAbove") ) { outValue = regionAbove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addSentinel") ) { outValue = addSentinel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deleteRegion") ) { outValue = deleteRegion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fixUpperEdge") ) { outValue = fixUpperEdge_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"finishRegion") ) { outValue = finishRegion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initEdgeDict") ) { outValue = initEdgeDict_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"doneEdgeDict") ) { outValue = doneEdgeDict_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"topLeftRegion") ) { outValue = topLeftRegion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addRightEdges") ) { outValue = addRightEdges_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"vertexWeights") ) { outValue = vertexWeights_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initPriorityQ") ) { outValue = initPriorityQ_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"donePriorityQ") ) { outValue = donePriorityQ_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"topRightRegion") ) { outValue = topRightRegion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addRegionBelow") ) { outValue = addRegionBelow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"computeWinding") ) { outValue = computeWinding_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isWindingInside") ) { outValue = isWindingInside_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"computeInterior") ) { outValue = computeInterior_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getIntersectData") ) { outValue = getIntersectData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"walkDirtyRegions") ) { outValue = walkDirtyRegions_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"finishLeftRegions") ) { outValue = finishLeftRegions_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"checkForIntersect") ) { outValue = checkForIntersect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"connectLeftVertex") ) { outValue = connectLeftVertex_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"checkForLeftSplice") ) { outValue = checkForLeftSplice_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"connectRightVertex") ) { outValue = connectRightVertex_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"spliceMergeVertices") ) { outValue = spliceMergeVertices_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"checkForRightSplice") ) { outValue = checkForRightSplice_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"connectLeftDegenerate") ) { outValue = connectLeftDegenerate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeDegenerateEdges") ) { outValue = removeDegenerateEdges_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeDegenerateFaces") ) { outValue = removeDegenerateFaces_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Sweep_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Sweep_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Sweep_obj::__mClass;

static ::String Sweep_obj_sStaticFields[] = {
	HX_("regionBelow",1d,75,d6,db),
	HX_("regionAbove",89,89,76,46),
	HX_("debugEvent",c7,98,a8,74),
	HX_("addWinding",f9,74,fa,4f),
	HX_("edgeLeq",9b,3f,ea,f4),
	HX_("deleteRegion",7f,e7,24,67),
	HX_("fixUpperEdge",2a,22,a7,a5),
	HX_("topLeftRegion",50,d3,d6,a4),
	HX_("topRightRegion",5b,4d,04,87),
	HX_("addRegionBelow",7c,7c,ad,71),
	HX_("isWindingInside",6c,16,f1,5d),
	HX_("computeWinding",63,16,63,a5),
	HX_("finishRegion",a7,f5,05,fe),
	HX_("finishLeftRegions",25,36,bb,26),
	HX_("addRightEdges",9b,9d,ee,d6),
	HX_("spliceMergeVertices",b5,a3,5a,d7),
	HX_("vertexWeights",f7,18,3c,e2),
	HX_("getIntersectData",33,88,ad,1e),
	HX_("checkForRightSplice",d7,58,15,32),
	HX_("checkForLeftSplice",64,6b,82,be),
	HX_("checkForIntersect",7e,61,d6,27),
	HX_("walkDirtyRegions",b6,85,b3,2c),
	HX_("connectRightVertex",96,18,bd,00),
	HX_("connectLeftDegenerate",27,b0,6e,ef),
	HX_("connectLeftVertex",55,9f,8f,ca),
	HX_("sweepEvent",8e,2a,75,39),
	HX_("addSentinel",25,88,75,56),
	HX_("initEdgeDict",83,37,7d,f7),
	HX_("doneEdgeDict",f5,ae,ed,94),
	HX_("removeDegenerateEdges",1c,62,e7,07),
	HX_("initPriorityQ",3d,3f,6d,96),
	HX_("donePriorityQ",8b,4b,65,bb),
	HX_("removeDegenerateFaces",bc,49,4f,99),
	HX_("computeInterior",c7,7a,f3,bf),
	::String(null())
};

void Sweep_obj::__register()
{
	Sweep_obj _hx_dummy;
	Sweep_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo._Tess2.Sweep",2f,d8,54,13);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Sweep_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Sweep_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Sweep_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sweep_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sweep_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
} // end namespace _Tess2
