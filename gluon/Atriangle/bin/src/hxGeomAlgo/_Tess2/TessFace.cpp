// Generated by Haxe 4.3.0-rc.1+88ebbd0
#include <hxcpp.h>

#ifndef INCLUDED_hxGeomAlgo__Tess2_TessFace
#include <hxGeomAlgo/_Tess2/TessFace.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessHalfEdge
#include <hxGeomAlgo/_Tess2/TessHalfEdge.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dff9ee1231ccfcd3_326_new,"hxGeomAlgo._Tess2.TessFace","new",0x49ff819d,"hxGeomAlgo._Tess2.TessFace.new","hxGeomAlgo/Tess2.hx",326,0xf73e622d)
namespace hxGeomAlgo{
namespace _Tess2{

void TessFace_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_dff9ee1231ccfcd3_326_new)
HXLINE( 336)		this->inside = false;
HXLINE( 335)		this->marked = false;
HXLINE( 334)		this->n = 0;
HXLINE( 333)		this->trail = null();
HXLINE( 330)		this->anEdge = null();
HXLINE( 329)		this->prev = null();
HXLINE( 328)		this->next = null();
            	}

Dynamic TessFace_obj::__CreateEmpty() { return new TessFace_obj; }

void *TessFace_obj::_hx_vtable = 0;

Dynamic TessFace_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TessFace_obj > _hx_result = new TessFace_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TessFace_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x72dd41ef;
}


::hx::ObjectPtr< TessFace_obj > TessFace_obj::__new() {
	::hx::ObjectPtr< TessFace_obj > __this = new TessFace_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TessFace_obj > TessFace_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TessFace_obj *__this = (TessFace_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TessFace_obj), true, "hxGeomAlgo._Tess2.TessFace"));
	*(void **)__this = TessFace_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TessFace_obj::TessFace_obj()
{
}

void TessFace_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TessFace);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(anEdge,"anEdge");
	HX_MARK_MEMBER_NAME(trail,"trail");
	HX_MARK_MEMBER_NAME(n,"n");
	HX_MARK_MEMBER_NAME(marked,"marked");
	HX_MARK_MEMBER_NAME(inside,"inside");
	HX_MARK_END_CLASS();
}

void TessFace_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(anEdge,"anEdge");
	HX_VISIT_MEMBER_NAME(trail,"trail");
	HX_VISIT_MEMBER_NAME(n,"n");
	HX_VISIT_MEMBER_NAME(marked,"marked");
	HX_VISIT_MEMBER_NAME(inside,"inside");
}

::hx::Val TessFace_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"n") ) { return ::hx::Val( n ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"prev") ) { return ::hx::Val( prev ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"trail") ) { return ::hx::Val( trail ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"anEdge") ) { return ::hx::Val( anEdge ); }
		if (HX_FIELD_EQ(inName,"marked") ) { return ::hx::Val( marked ); }
		if (HX_FIELD_EQ(inName,"inside") ) { return ::hx::Val( inside ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TessFace_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"n") ) { n=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessFace >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessFace >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"trail") ) { trail=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessFace >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"anEdge") ) { anEdge=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
		if (HX_FIELD_EQ(inName,"marked") ) { marked=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inside") ) { inside=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TessFace_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("prev",f3,be,5e,4a));
	outFields->push(HX_("anEdge",ca,c3,99,4c));
	outFields->push(HX_("trail",c6,93,1f,16));
	outFields->push(HX_("n",6e,00,00,00));
	outFields->push(HX_("marked",ac,75,70,ba));
	outFields->push(HX_("inside",fc,3f,e0,9d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TessFace_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessFace */ ,(int)offsetof(TessFace_obj,next),HX_("next",f3,84,02,49)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessFace */ ,(int)offsetof(TessFace_obj,prev),HX_("prev",f3,be,5e,4a)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(TessFace_obj,anEdge),HX_("anEdge",ca,c3,99,4c)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessFace */ ,(int)offsetof(TessFace_obj,trail),HX_("trail",c6,93,1f,16)},
	{::hx::fsInt,(int)offsetof(TessFace_obj,n),HX_("n",6e,00,00,00)},
	{::hx::fsBool,(int)offsetof(TessFace_obj,marked),HX_("marked",ac,75,70,ba)},
	{::hx::fsBool,(int)offsetof(TessFace_obj,inside),HX_("inside",fc,3f,e0,9d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TessFace_obj_sStaticStorageInfo = 0;
#endif

static ::String TessFace_obj_sMemberFields[] = {
	HX_("next",f3,84,02,49),
	HX_("prev",f3,be,5e,4a),
	HX_("anEdge",ca,c3,99,4c),
	HX_("trail",c6,93,1f,16),
	HX_("n",6e,00,00,00),
	HX_("marked",ac,75,70,ba),
	HX_("inside",fc,3f,e0,9d),
	::String(null()) };

::hx::Class TessFace_obj::__mClass;

void TessFace_obj::__register()
{
	TessFace_obj _hx_dummy;
	TessFace_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo._Tess2.TessFace",2b,6f,25,78);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TessFace_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TessFace_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TessFace_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TessFace_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
} // end namespace _Tess2
