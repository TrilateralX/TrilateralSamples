// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_hxGeomAlgo_Debug
#include <hxGeomAlgo/Debug.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_ActiveRegion
#include <hxGeomAlgo/_Tess2/ActiveRegion.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_Geom
#include <hxGeomAlgo/_Tess2/Geom.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessFace
#include <hxGeomAlgo/_Tess2/TessFace.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessHalfEdge
#include <hxGeomAlgo/_Tess2/TessHalfEdge.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessMesh
#include <hxGeomAlgo/_Tess2/TessMesh.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessVertex
#include <hxGeomAlgo/_Tess2/TessVertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_395_new,"hxGeomAlgo._Tess2.TessMesh","new",0xa09ffeed,"hxGeomAlgo._Tess2.TessMesh.new","hxGeomAlgo/Tess2.hx",395,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_526_makeEdge_,"hxGeomAlgo._Tess2.TessMesh","makeEdge_",0xe16dfb01,"hxGeomAlgo._Tess2.TessMesh.makeEdge_","hxGeomAlgo/Tess2.hx",526,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_568_splice_,"hxGeomAlgo._Tess2.TessMesh","splice_",0x3f914070,"hxGeomAlgo._Tess2.TessMesh.splice_","hxGeomAlgo/Tess2.hx",568,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_584_makeVertex_,"hxGeomAlgo._Tess2.TessMesh","makeVertex_",0x1dc347ba,"hxGeomAlgo._Tess2.TessMesh.makeVertex_","hxGeomAlgo/Tess2.hx",584,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_613_makeFace_,"hxGeomAlgo._Tess2.TessMesh","makeFace_",0x72d5e2a1,"hxGeomAlgo._Tess2.TessMesh.makeFace_","hxGeomAlgo/Tess2.hx",613,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_645_killEdge_,"hxGeomAlgo._Tess2.TessMesh","killEdge_",0xfb33b751,"hxGeomAlgo._Tess2.TessMesh.killEdge_","hxGeomAlgo/Tess2.hx",645,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_660_killVertex_,"hxGeomAlgo._Tess2.TessMesh","killVertex_",0x81acb80a,"hxGeomAlgo._Tess2.TessMesh.killVertex_","hxGeomAlgo/Tess2.hx",660,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_680_killFace_,"hxGeomAlgo._Tess2.TessMesh","killFace_",0x8c9b9ef1,"hxGeomAlgo._Tess2.TessMesh.killFace_","hxGeomAlgo/Tess2.hx",680,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_703_makeEdge,"hxGeomAlgo._Tess2.TessMesh","makeEdge",0xd0cbaf9e,"hxGeomAlgo._Tess2.TessMesh.makeEdge","hxGeomAlgo/Tess2.hx",703,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_738_splice,"hxGeomAlgo._Tess2.TessMesh","splice",0x1bd62d0f,"hxGeomAlgo._Tess2.TessMesh.splice","hxGeomAlgo/Tess2.hx",738,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_868_delete,"hxGeomAlgo._Tess2.TessMesh","delete",0xc71067be,"hxGeomAlgo._Tess2.TessMesh.delete","hxGeomAlgo/Tess2.hx",868,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_926_addEdgeVertex,"hxGeomAlgo._Tess2.TessMesh","addEdgeVertex",0x582a6dcf,"hxGeomAlgo._Tess2.TessMesh.addEdgeVertex","hxGeomAlgo/Tess2.hx",926,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_950_splitEdge,"hxGeomAlgo._Tess2.TessMesh","splitEdge",0xeb636a84,"hxGeomAlgo._Tess2.TessMesh.splitEdge","hxGeomAlgo/Tess2.hx",950,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_979_connect,"hxGeomAlgo._Tess2.TessMesh","connect",0x69fb34f7,"hxGeomAlgo._Tess2.TessMesh.connect","hxGeomAlgo/Tess2.hx",979,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_1018_zapFace,"hxGeomAlgo._Tess2.TessMesh","zapFace",0x99c36a33,"hxGeomAlgo._Tess2.TessMesh.zapFace","hxGeomAlgo/Tess2.hx",1018,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_1059_countFaceVerts_,"hxGeomAlgo._Tess2.TessMesh","countFaceVerts_",0x4e8333b6,"hxGeomAlgo._Tess2.TessMesh.countFaceVerts_","hxGeomAlgo/Tess2.hx",1059,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_1072_mergeConvexFaces,"hxGeomAlgo._Tess2.TessMesh","mergeConvexFaces",0xd45215ca,"hxGeomAlgo._Tess2.TessMesh.mergeConvexFaces","hxGeomAlgo/Tess2.hx",1072,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_1130_check,"hxGeomAlgo._Tess2.TessMesh","check",0xb4554495,"hxGeomAlgo._Tess2.TessMesh.check","hxGeomAlgo/Tess2.hx",1130,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_4a3d0d6dfa41f614_780_flipEdge,"hxGeomAlgo._Tess2.TessMesh","flipEdge",0x928853dd,"hxGeomAlgo._Tess2.TessMesh.flipEdge","hxGeomAlgo/Tess2.hx",780,0xf73e622d)
namespace hxGeomAlgo{
namespace _Tess2{

void TessMesh_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_395_new)
HXLINE( 400)		this->eSym =  ::hxGeomAlgo::_Tess2::TessHalfEdge_obj::__alloc( HX_CTX ,1);
HXLINE( 399)		this->e =  ::hxGeomAlgo::_Tess2::TessHalfEdge_obj::__alloc( HX_CTX ,0);
HXLINE( 398)		this->f =  ::hxGeomAlgo::_Tess2::TessFace_obj::__alloc( HX_CTX );
HXLINE( 397)		this->v =  ::hxGeomAlgo::_Tess2::TessVertex_obj::__alloc( HX_CTX );
HXLINE( 409)		this->v->next = (this->v->prev = this->v);
HXLINE( 410)		this->v->anEdge = null();
HXLINE( 412)		this->f->next = (this->f->prev = this->f);
HXLINE( 413)		this->f->anEdge = null();
HXLINE( 414)		this->f->trail = null();
HXLINE( 415)		this->f->marked = false;
HXLINE( 416)		this->f->inside = false;
HXLINE( 418)		this->e->next = this->e;
HXLINE( 419)		this->e->Sym = this->eSym;
HXLINE( 420)		this->e->Onext = null();
HXLINE( 421)		this->e->Lnext = null();
HXLINE( 422)		this->e->Org = null();
HXLINE( 423)		this->e->Lface = null();
HXLINE( 424)		this->e->winding = 0;
HXLINE( 425)		this->e->activeRegion = null();
HXLINE( 426)		this->e->mark = false;
HXLINE( 428)		this->eSym->next = this->eSym;
HXLINE( 429)		this->eSym->Sym = this->e;
HXLINE( 430)		this->eSym->Onext = null();
HXLINE( 431)		this->eSym->Lnext = null();
HXLINE( 432)		this->eSym->Org = null();
HXLINE( 433)		this->eSym->Lface = null();
HXLINE( 434)		this->eSym->winding = 0;
HXLINE( 435)		this->eSym->activeRegion = null();
HXLINE( 436)		this->e->Sym->mark = false;
HXLINE( 438)		this->vHead = this->v;
HXLINE( 439)		this->fHead = this->f;
HXLINE( 440)		this->eHead = this->e;
HXLINE( 441)		this->eHeadSym = this->eSym;
            	}

Dynamic TessMesh_obj::__CreateEmpty() { return new TessMesh_obj; }

void *TessMesh_obj::_hx_vtable = 0;

Dynamic TessMesh_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TessMesh_obj > _hx_result = new TessMesh_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TessMesh_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7780d73f;
}

 ::hxGeomAlgo::_Tess2::TessHalfEdge TessMesh_obj::makeEdge_( ::hxGeomAlgo::_Tess2::TessHalfEdge eNext){
            	HX_GC_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_526_makeEdge_)
HXLINE( 527)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e =  ::hxGeomAlgo::_Tess2::TessHalfEdge_obj::__alloc( HX_CTX ,0);
HXLINE( 528)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eSym =  ::hxGeomAlgo::_Tess2::TessHalfEdge_obj::__alloc( HX_CTX ,1);
HXLINE( 531)		if ((eNext->Sym->side < eNext->side)) {
HXLINE( 531)			eNext = eNext->Sym;
            		}
HXLINE( 536)		 ::hxGeomAlgo::_Tess2::TessHalfEdge ePrev = eNext->Sym->next;
HXLINE( 537)		eSym->next = ePrev;
HXLINE( 538)		ePrev->Sym->next = e;
HXLINE( 539)		e->next = eNext;
HXLINE( 540)		eNext->Sym->next = eSym;
HXLINE( 542)		e->Sym = eSym;
HXLINE( 543)		e->Onext = e;
HXLINE( 544)		e->Lnext = eSym;
HXLINE( 545)		e->Org = null();
HXLINE( 546)		e->Lface = null();
HXLINE( 547)		e->winding = 0;
HXLINE( 548)		e->activeRegion = null();
HXLINE( 550)		eSym->Sym = e;
HXLINE( 551)		eSym->Onext = eSym;
HXLINE( 552)		eSym->Lnext = e;
HXLINE( 553)		eSym->Org = null();
HXLINE( 554)		eSym->Lface = null();
HXLINE( 555)		eSym->winding = 0;
HXLINE( 556)		eSym->activeRegion = null();
HXLINE( 558)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TessMesh_obj,makeEdge_,return )

void TessMesh_obj::splice_( ::hxGeomAlgo::_Tess2::TessHalfEdge a, ::hxGeomAlgo::_Tess2::TessHalfEdge b){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_568_splice_)
HXLINE( 569)		 ::hxGeomAlgo::_Tess2::TessHalfEdge aOnext = a->Onext;
HXLINE( 570)		 ::hxGeomAlgo::_Tess2::TessHalfEdge bOnext = b->Onext;
HXLINE( 571)		aOnext->Sym->Lnext = b;
HXLINE( 572)		bOnext->Sym->Lnext = a;
HXLINE( 573)		a->Onext = bOnext;
HXLINE( 574)		b->Onext = aOnext;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TessMesh_obj,splice_,(void))

void TessMesh_obj::makeVertex_( ::hxGeomAlgo::_Tess2::TessVertex newVertex, ::hxGeomAlgo::_Tess2::TessHalfEdge eOrig, ::hxGeomAlgo::_Tess2::TessVertex vNext){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_584_makeVertex_)
HXLINE( 585)		 ::hxGeomAlgo::_Tess2::TessVertex vNew = newVertex;
HXLINE( 586)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsNotNull( vNew ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),586,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("makeVertex_",2d,44,a2,c1)));
HXLINE( 589)		 ::hxGeomAlgo::_Tess2::TessVertex vPrev = vNext->prev;
HXLINE( 590)		vNew->prev = vPrev;
HXLINE( 591)		vPrev->next = vNew;
HXLINE( 592)		vNew->next = vNext;
HXLINE( 593)		vNext->prev = vNew;
HXLINE( 595)		vNew->anEdge = eOrig;
HXLINE( 599)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = eOrig;
HXLINE( 600)		while(true){
HXLINE( 601)			e->Org = vNew;
HXLINE( 602)			e = e->Onext;
HXLINE( 600)			if (!(::hx::IsInstanceNotEq( e,eOrig ))) {
HXLINE( 600)				goto _hx_goto_3;
            			}
            		}
            		_hx_goto_3:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TessMesh_obj,makeVertex_,(void))

void TessMesh_obj::makeFace_( ::hxGeomAlgo::_Tess2::TessFace newFace, ::hxGeomAlgo::_Tess2::TessHalfEdge eOrig, ::hxGeomAlgo::_Tess2::TessFace fNext){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_613_makeFace_)
HXLINE( 614)		 ::hxGeomAlgo::_Tess2::TessFace fNew = newFace;
HXLINE( 615)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsNotNull( fNew ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),615,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("makeFace_",54,cc,e0,ce)));
HXLINE( 618)		 ::hxGeomAlgo::_Tess2::TessFace fPrev = fNext->prev;
HXLINE( 619)		fNew->prev = fPrev;
HXLINE( 620)		fPrev->next = fNew;
HXLINE( 621)		fNew->next = fNext;
HXLINE( 622)		fNext->prev = fNew;
HXLINE( 624)		fNew->anEdge = eOrig;
HXLINE( 625)		fNew->trail = null();
HXLINE( 626)		fNew->marked = false;
HXLINE( 631)		fNew->inside = fNext->inside;
HXLINE( 634)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = eOrig;
HXLINE( 635)		while(true){
HXLINE( 636)			e->Lface = fNew;
HXLINE( 637)			e = e->Lnext;
HXLINE( 635)			if (!(::hx::IsInstanceNotEq( e,eOrig ))) {
HXLINE( 635)				goto _hx_goto_5;
            			}
            		}
            		_hx_goto_5:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TessMesh_obj,makeFace_,(void))

void TessMesh_obj::killEdge_( ::hxGeomAlgo::_Tess2::TessHalfEdge eDel){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_645_killEdge_)
HXLINE( 647)		if ((eDel->Sym->side < eDel->side)) {
HXLINE( 647)			eDel = eDel->Sym;
            		}
HXLINE( 650)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNext = eDel->next;
HXLINE( 651)		 ::hxGeomAlgo::_Tess2::TessHalfEdge ePrev = eDel->Sym->next;
HXLINE( 652)		eNext->Sym->next = ePrev;
HXLINE( 653)		ePrev->Sym->next = eNext;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TessMesh_obj,killEdge_,(void))

void TessMesh_obj::killVertex_( ::hxGeomAlgo::_Tess2::TessVertex vDel, ::hxGeomAlgo::_Tess2::TessVertex newOrg){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_660_killVertex_)
HXLINE( 661)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eStart = vDel->anEdge;
HXLINE( 663)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = eStart;
HXLINE( 664)		while(true){
HXLINE( 665)			e->Org = newOrg;
HXLINE( 666)			e = e->Onext;
HXLINE( 664)			if (!(::hx::IsInstanceNotEq( e,eStart ))) {
HXLINE( 664)				goto _hx_goto_8;
            			}
            		}
            		_hx_goto_8:;
HXLINE( 670)		 ::hxGeomAlgo::_Tess2::TessVertex vPrev = vDel->prev;
HXLINE( 671)		 ::hxGeomAlgo::_Tess2::TessVertex vNext = vDel->next;
HXLINE( 672)		vNext->prev = vPrev;
HXLINE( 673)		vPrev->next = vNext;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TessMesh_obj,killVertex_,(void))

void TessMesh_obj::killFace_( ::hxGeomAlgo::_Tess2::TessFace fDel, ::hxGeomAlgo::_Tess2::TessFace newLface){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_680_killFace_)
HXLINE( 681)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eStart = fDel->anEdge;
HXLINE( 684)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = eStart;
HXLINE( 685)		while(true){
HXLINE( 686)			e->Lface = newLface;
HXLINE( 687)			e = e->Lnext;
HXLINE( 685)			if (!(::hx::IsInstanceNotEq( e,eStart ))) {
HXLINE( 685)				goto _hx_goto_10;
            			}
            		}
            		_hx_goto_10:;
HXLINE( 691)		 ::hxGeomAlgo::_Tess2::TessFace fPrev = fDel->prev;
HXLINE( 692)		 ::hxGeomAlgo::_Tess2::TessFace fNext = fDel->next;
HXLINE( 693)		fNext->prev = fPrev;
HXLINE( 694)		fPrev->next = fNext;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TessMesh_obj,killFace_,(void))

 ::hxGeomAlgo::_Tess2::TessHalfEdge TessMesh_obj::makeEdge(){
            	HX_GC_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_703_makeEdge)
HXLINE( 704)		 ::hxGeomAlgo::_Tess2::TessVertex newVertex1 =  ::hxGeomAlgo::_Tess2::TessVertex_obj::__alloc( HX_CTX );
HXLINE( 705)		 ::hxGeomAlgo::_Tess2::TessVertex newVertex2 =  ::hxGeomAlgo::_Tess2::TessVertex_obj::__alloc( HX_CTX );
HXLINE( 706)		 ::hxGeomAlgo::_Tess2::TessFace newFace =  ::hxGeomAlgo::_Tess2::TessFace_obj::__alloc( HX_CTX );
HXLINE( 707)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e = this->makeEdge_(this->eHead);
HXLINE( 708)		this->makeVertex_(newVertex1,e,this->vHead);
HXLINE( 709)		this->makeVertex_(newVertex2,e->Sym,this->vHead);
HXLINE( 710)		this->makeFace_(newFace,e,this->fHead);
HXLINE( 711)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TessMesh_obj,makeEdge,return )

void TessMesh_obj::splice( ::hxGeomAlgo::_Tess2::TessHalfEdge eOrg, ::hxGeomAlgo::_Tess2::TessHalfEdge eDst){
            	HX_GC_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_738_splice)
HXLINE( 739)		bool joiningLoops = false;
HXLINE( 740)		bool joiningVertices = false;
HXLINE( 742)		if (::hx::IsInstanceEq( eOrg,eDst )) {
HXLINE( 742)			return;
            		}
HXLINE( 744)		if (::hx::IsInstanceNotEq( eDst->Org,eOrg->Org )) {
HXLINE( 746)			joiningVertices = true;
HXLINE( 747)			this->killVertex_(eDst->Org,eOrg->Org);
            		}
HXLINE( 749)		if (::hx::IsInstanceNotEq( eDst->Lface,eOrg->Lface )) {
HXLINE( 751)			joiningLoops = true;
HXLINE( 752)			this->killFace_(eDst->Lface,eOrg->Lface);
            		}
HXLINE( 756)		this->splice_(eDst,eOrg);
HXLINE( 758)		if (!(joiningVertices)) {
HXLINE( 759)			 ::hxGeomAlgo::_Tess2::TessVertex newVertex =  ::hxGeomAlgo::_Tess2::TessVertex_obj::__alloc( HX_CTX );
HXLINE( 764)			this->makeVertex_(newVertex,eDst,eOrg->Org);
HXLINE( 765)			eOrg->Org->anEdge = eOrg;
            		}
HXLINE( 767)		if (!(joiningLoops)) {
HXLINE( 768)			 ::hxGeomAlgo::_Tess2::TessFace newFace =  ::hxGeomAlgo::_Tess2::TessFace_obj::__alloc( HX_CTX );
HXLINE( 773)			this->makeFace_(newFace,eDst,eOrg->Lface);
HXLINE( 774)			eOrg->Lface->anEdge = eOrg;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TessMesh_obj,splice,(void))

void TessMesh_obj::_hx_delete( ::hxGeomAlgo::_Tess2::TessHalfEdge eDel){
            	HX_GC_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_868_delete)
HXLINE( 869)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eDelSym = eDel->Sym;
HXLINE( 870)		bool joiningLoops = false;
HXLINE( 875)		 ::hxGeomAlgo::_Tess2::TessFace eDel1 = eDel->Lface;
HXDLIN( 875)		if (::hx::IsInstanceNotEq( eDel1,eDel->get_Rface() )) {
HXLINE( 877)			joiningLoops = true;
HXLINE( 878)			 ::hxGeomAlgo::_Tess2::TessFace eDel1 = eDel->Lface;
HXDLIN( 878)			this->killFace_(eDel1,eDel->get_Rface());
            		}
HXLINE( 881)		if (::hx::IsInstanceEq( eDel->Onext,eDel )) {
HXLINE( 882)			this->killVertex_(eDel->Org,null());
            		}
            		else {
HXLINE( 885)			eDel->get_Rface()->anEdge = eDel->get_Oprev();
HXLINE( 886)			eDel->Org->anEdge = eDel->Onext;
HXLINE( 888)			this->splice_(eDel,eDel->get_Oprev());
HXLINE( 889)			if (!(joiningLoops)) {
HXLINE( 890)				 ::hxGeomAlgo::_Tess2::TessFace newFace =  ::hxGeomAlgo::_Tess2::TessFace_obj::__alloc( HX_CTX );
HXLINE( 893)				this->makeFace_(newFace,eDel,eDel->Lface);
            			}
            		}
HXLINE( 900)		if (::hx::IsInstanceEq( eDelSym->Onext,eDelSym )) {
HXLINE( 901)			this->killVertex_(eDelSym->Org,null());
HXLINE( 902)			this->killFace_(eDelSym->Lface,null());
            		}
            		else {
HXLINE( 905)			eDel->Lface->anEdge = eDelSym->get_Oprev();
HXLINE( 906)			eDelSym->Org->anEdge = eDelSym->Onext;
HXLINE( 907)			this->splice_(eDelSym,eDelSym->get_Oprev());
            		}
HXLINE( 911)		this->killEdge_(eDel);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TessMesh_obj,_hx_delete,(void))

 ::hxGeomAlgo::_Tess2::TessHalfEdge TessMesh_obj::addEdgeVertex( ::hxGeomAlgo::_Tess2::TessHalfEdge eOrg){
            	HX_GC_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_926_addEdgeVertex)
HXLINE( 927)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNew = this->makeEdge_(eOrg);
HXLINE( 928)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNewSym = eNew->Sym;
HXLINE( 931)		this->splice_(eNew,eOrg->Lnext);
HXLINE( 934)		eNew->Org = eOrg->get_Dst();
HXLINE( 936)		 ::hxGeomAlgo::_Tess2::TessVertex newVertex =  ::hxGeomAlgo::_Tess2::TessVertex_obj::__alloc( HX_CTX );
HXLINE( 937)		this->makeVertex_(newVertex,eNewSym,eNew->Org);
HXLINE( 939)		eNew->Lface = (eNewSym->Lface = eOrg->Lface);
HXLINE( 941)		return eNew;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TessMesh_obj,addEdgeVertex,return )

 ::hxGeomAlgo::_Tess2::TessHalfEdge TessMesh_obj::splitEdge( ::hxGeomAlgo::_Tess2::TessHalfEdge eOrg){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_950_splitEdge)
HXLINE( 951)		 ::hxGeomAlgo::_Tess2::TessHalfEdge tempHalfEdge = this->addEdgeVertex(eOrg);
HXLINE( 952)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNew = tempHalfEdge->Sym;
HXLINE( 955)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eOrg1 = eOrg->Sym;
HXDLIN( 955)		this->splice_(eOrg1,eOrg->Sym->get_Oprev());
HXLINE( 956)		this->splice_(eOrg->Sym,eNew);
HXLINE( 959)		eOrg->set_Dst(eNew->Org);
HXLINE( 960)		eNew->get_Dst()->anEdge = eNew->Sym;
HXLINE( 961)		eNew->set_Rface(eOrg->get_Rface());
HXLINE( 962)		eNew->winding = eOrg->winding;
HXLINE( 963)		eNew->Sym->winding = eOrg->Sym->winding;
HXLINE( 965)		return eNew;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TessMesh_obj,splitEdge,return )

 ::hxGeomAlgo::_Tess2::TessHalfEdge TessMesh_obj::connect( ::hxGeomAlgo::_Tess2::TessHalfEdge eOrg, ::hxGeomAlgo::_Tess2::TessHalfEdge eDst){
            	HX_GC_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_979_connect)
HXLINE( 980)		bool joiningLoops = false;
HXLINE( 981)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNew = this->makeEdge_(eOrg);
HXLINE( 982)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNewSym = eNew->Sym;
HXLINE( 984)		if (::hx::IsInstanceNotEq( eDst->Lface,eOrg->Lface )) {
HXLINE( 986)			joiningLoops = true;
HXLINE( 987)			this->killFace_(eDst->Lface,eOrg->Lface);
            		}
HXLINE( 991)		this->splice_(eNew,eOrg->Lnext);
HXLINE( 992)		this->splice_(eNewSym,eDst);
HXLINE( 995)		eNew->Org = eOrg->get_Dst();
HXLINE( 996)		eNewSym->Org = eDst->Org;
HXLINE( 997)		eNew->Lface = (eNewSym->Lface = eOrg->Lface);
HXLINE(1000)		eOrg->Lface->anEdge = eNewSym;
HXLINE(1002)		if (!(joiningLoops)) {
HXLINE(1003)			 ::hxGeomAlgo::_Tess2::TessFace newFace =  ::hxGeomAlgo::_Tess2::TessFace_obj::__alloc( HX_CTX );
HXLINE(1005)			this->makeFace_(newFace,eNew,eOrg->Lface);
            		}
HXLINE(1007)		return eNew;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TessMesh_obj,connect,return )

void TessMesh_obj::zapFace( ::hxGeomAlgo::_Tess2::TessFace fZap){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_1018_zapFace)
HXLINE(1019)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eStart = fZap->anEdge;
HXLINE(1020)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e;
HXDLIN(1020)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eSym;
HXDLIN(1020)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNext = eStart->Lnext;
HXLINE(1025)		while(true){
HXLINE(1026)			e = eNext;
HXLINE(1027)			eNext = e->Lnext;
HXLINE(1029)			e->Lface = null();
HXLINE(1030)			if (::hx::IsNull( e->get_Rface() )) {
HXLINE(1033)				if (::hx::IsInstanceEq( e->Onext,e )) {
HXLINE(1034)					this->killVertex_(e->Org,null());
            				}
            				else {
HXLINE(1037)					e->Org->anEdge = e->Onext;
HXLINE(1038)					this->splice_(e,e->get_Oprev());
            				}
HXLINE(1040)				eSym = e->Sym;
HXLINE(1041)				if (::hx::IsInstanceEq( eSym->Onext,eSym )) {
HXLINE(1042)					this->killVertex_(eSym->Org,null());
            				}
            				else {
HXLINE(1045)					eSym->Org->anEdge = eSym->Onext;
HXLINE(1046)					this->splice_(eSym,eSym->get_Oprev());
            				}
HXLINE(1048)				this->killEdge_(e);
            			}
HXLINE(1025)			if (!(::hx::IsInstanceNotEq( e,eStart ))) {
HXLINE(1025)				goto _hx_goto_18;
            			}
            		}
            		_hx_goto_18:;
HXLINE(1021)		 ::hxGeomAlgo::_Tess2::TessFace fPrev = fZap->prev;
HXDLIN(1021)		 ::hxGeomAlgo::_Tess2::TessFace fNext = fZap->next;
HXLINE(1055)		fNext->prev = fPrev;
HXLINE(1056)		fPrev->next = fNext;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TessMesh_obj,zapFace,(void))

int TessMesh_obj::countFaceVerts_( ::hxGeomAlgo::_Tess2::TessFace f){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_1059_countFaceVerts_)
HXLINE(1060)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eCur = f->anEdge;
HXLINE(1061)		int n = 0;
HXLINE(1062)		while(true){
HXLINE(1064)			n = (n + 1);
HXLINE(1065)			eCur = eCur->Lnext;
HXLINE(1062)			if (!(::hx::IsInstanceNotEq( eCur,f->anEdge ))) {
HXLINE(1062)				goto _hx_goto_20;
            			}
            		}
            		_hx_goto_20:;
HXLINE(1068)		return n;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TessMesh_obj,countFaceVerts_,return )

bool TessMesh_obj::mergeConvexFaces(int maxVertsPerFace){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_1072_mergeConvexFaces)
HXLINE(1074)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eCur;
HXDLIN(1074)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eNext;
HXDLIN(1074)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eSym;
HXLINE(1075)		 ::hxGeomAlgo::_Tess2::TessVertex vStart;
HXLINE(1076)		int curNv;
HXDLIN(1076)		int symNv;
HXLINE(1073)		 ::hxGeomAlgo::_Tess2::TessFace f = this->fHead->next;
HXLINE(1079)		while(::hx::IsInstanceNotEq( f,this->fHead )){
HXLINE(1082)			if (!(f->inside)) {
HXLINE(1083)				f = f->next;
HXLINE(1084)				continue;
            			}
HXLINE(1087)			eCur = f->anEdge;
HXLINE(1088)			vStart = eCur->Org;
HXLINE(1090)			while(true){
HXLINE(1092)				eNext = eCur->Lnext;
HXLINE(1093)				eSym = eCur->Sym;
HXLINE(1096)				bool _hx_tmp;
HXDLIN(1096)				bool _hx_tmp1;
HXDLIN(1096)				if (::hx::IsNotNull( eSym )) {
HXLINE(1096)					_hx_tmp1 = ::hx::IsNotNull( eSym->Lface );
            				}
            				else {
HXLINE(1096)					_hx_tmp1 = false;
            				}
HXDLIN(1096)				if (_hx_tmp1) {
HXLINE(1096)					_hx_tmp = eSym->Lface->inside;
            				}
            				else {
HXLINE(1096)					_hx_tmp = false;
            				}
HXDLIN(1096)				if (_hx_tmp) {
HXLINE(1100)					curNv = this->countFaceVerts_(f);
HXLINE(1101)					symNv = this->countFaceVerts_(eSym->Lface);
HXLINE(1102)					if ((((curNv + symNv) - 2) <= maxVertsPerFace)) {
HXLINE(1105)						bool _hx_tmp;
HXDLIN(1105)						if (::hxGeomAlgo::_Tess2::Geom_obj::vertCCW(eCur->get_Lprev()->Org,eCur->Org,eSym->Lnext->Lnext->Org)) {
HXLINE(1105)							_hx_tmp = ::hxGeomAlgo::_Tess2::Geom_obj::vertCCW(eSym->get_Lprev()->Org,eSym->Org,eCur->Lnext->Lnext->Org);
            						}
            						else {
HXLINE(1105)							_hx_tmp = false;
            						}
HXDLIN(1105)						if (_hx_tmp) {
HXLINE(1108)							eNext = eSym->Lnext;
HXLINE(1109)							this->_hx_delete(eSym);
HXLINE(1110)							eCur = null();
HXLINE(1111)							eSym = null();
            						}
            					}
            				}
HXLINE(1116)				bool _hx_tmp2;
HXDLIN(1116)				if (::hx::IsNotNull( eCur )) {
HXLINE(1116)					_hx_tmp2 = ::hx::IsInstanceEq( eCur->Lnext->Org,vStart );
            				}
            				else {
HXLINE(1116)					_hx_tmp2 = false;
            				}
HXDLIN(1116)				if (_hx_tmp2) {
HXLINE(1117)					goto _hx_goto_23;
            				}
HXLINE(1120)				eCur = eNext;
            			}
            			_hx_goto_23:;
HXLINE(1123)			f = f->next;
            		}
HXLINE(1126)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TessMesh_obj,mergeConvexFaces,return )

void TessMesh_obj::check(){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_1130_check)
HXLINE(1131)		 ::hxGeomAlgo::_Tess2::TessFace fHead = this->fHead;
HXLINE(1132)		 ::hxGeomAlgo::_Tess2::TessVertex vHead = this->vHead;
HXLINE(1133)		 ::hxGeomAlgo::_Tess2::TessHalfEdge eHead = this->eHead;
HXLINE(1134)		 ::hxGeomAlgo::_Tess2::TessFace f;
HXDLIN(1134)		 ::hxGeomAlgo::_Tess2::TessVertex v;
HXDLIN(1134)		 ::hxGeomAlgo::_Tess2::TessHalfEdge e;
HXDLIN(1134)		 ::hxGeomAlgo::_Tess2::TessFace fPrev = fHead;
HXLINE(1137)		while(true){
HXLINE(1137)			f = fPrev->next;
HXDLIN(1137)			if (!(::hx::IsInstanceNotEq( f,fHead ))) {
HXLINE(1137)				goto _hx_goto_25;
            			}
HXLINE(1138)			::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( f->prev,fPrev ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1138,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1139)			e = f->anEdge;
HXLINE(1140)			while(true){
HXLINE(1141)				::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceNotEq( e->Sym,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1141,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1142)				::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Sym->Sym,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1142,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1143)				::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Lnext->Onext->Sym,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1143,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1144)				::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Onext->Sym->Lnext,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1144,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1145)				::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Lface,f ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1145,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1146)				e = e->Lnext;
HXLINE(1140)				if (!(::hx::IsInstanceNotEq( e,f->anEdge ))) {
HXLINE(1140)					goto _hx_goto_26;
            				}
            			}
            			_hx_goto_26:;
HXLINE(1148)			fPrev = f;
            		}
            		_hx_goto_25:;
HXLINE(1150)		bool _hx_tmp;
HXDLIN(1150)		if (::hx::IsInstanceEq( f->prev,fPrev )) {
HXLINE(1150)			_hx_tmp = ::hx::IsNull( f->anEdge );
            		}
            		else {
HXLINE(1150)			_hx_tmp = false;
            		}
HXDLIN(1150)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1150,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1134)		 ::hxGeomAlgo::_Tess2::TessVertex vPrev = vHead;
HXLINE(1153)		while(true){
HXLINE(1153)			v = vPrev->next;
HXDLIN(1153)			if (!(::hx::IsInstanceNotEq( v,vHead ))) {
HXLINE(1153)				goto _hx_goto_27;
            			}
HXLINE(1154)			::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( v->prev,vPrev ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1154,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1155)			e = v->anEdge;
HXLINE(1156)			while(true){
HXLINE(1157)				::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceNotEq( e->Sym,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1157,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1158)				::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Sym->Sym,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1158,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1159)				::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Lnext->Onext->Sym,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1159,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1160)				::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Onext->Sym->Lnext,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1160,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1161)				::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Org,v ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1161,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1162)				e = e->Onext;
HXLINE(1156)				if (!(::hx::IsInstanceNotEq( e,v->anEdge ))) {
HXLINE(1156)					goto _hx_goto_28;
            				}
            			}
            			_hx_goto_28:;
HXLINE(1164)			vPrev = v;
            		}
            		_hx_goto_27:;
HXLINE(1166)		bool _hx_tmp1;
HXDLIN(1166)		if (::hx::IsInstanceEq( v->prev,vPrev )) {
HXLINE(1166)			_hx_tmp1 = ::hx::IsNull( v->anEdge );
            		}
            		else {
HXLINE(1166)			_hx_tmp1 = false;
            		}
HXDLIN(1166)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp1,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1166,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1134)		 ::hxGeomAlgo::_Tess2::TessHalfEdge ePrev = eHead;
HXLINE(1169)		while(true){
HXLINE(1169)			e = ePrev->next;
HXDLIN(1169)			if (!(::hx::IsInstanceNotEq( e,eHead ))) {
HXLINE(1169)				goto _hx_goto_29;
            			}
HXLINE(1170)			::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Sym->next,ePrev->Sym ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1170,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1171)			::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceNotEq( e->Sym,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1171,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1172)			::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Sym->Sym,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1172,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1173)			::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsNotNull( e->Org ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1173,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1174)			bool _hx_tmp = ::hx::IsNotNull( e->get_Dst() );
HXDLIN(1174)			::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1174,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1175)			::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Lnext->Onext->Sym,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1175,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1176)			::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( e->Onext->Sym->Lnext,e ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1176,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
HXLINE(1177)			ePrev = e;
            		}
            		_hx_goto_29:;
HXLINE(1179)		bool _hx_tmp2;
HXDLIN(1179)		bool _hx_tmp3;
HXDLIN(1179)		bool _hx_tmp4;
HXDLIN(1179)		bool _hx_tmp5;
HXDLIN(1179)		bool _hx_tmp6;
HXDLIN(1179)		bool _hx_tmp7;
HXDLIN(1179)		if (::hx::IsInstanceEq( e->Sym->next,ePrev->Sym )) {
HXLINE(1179)			_hx_tmp7 = ::hx::IsInstanceEq( e->Sym,this->eHeadSym );
            		}
            		else {
HXLINE(1179)			_hx_tmp7 = false;
            		}
HXDLIN(1179)		if (_hx_tmp7) {
HXLINE(1179)			_hx_tmp6 = ::hx::IsInstanceEq( e->Sym->Sym,e );
            		}
            		else {
HXLINE(1179)			_hx_tmp6 = false;
            		}
HXDLIN(1179)		if (_hx_tmp6) {
HXLINE(1179)			_hx_tmp5 = ::hx::IsNull( e->Org );
            		}
            		else {
HXLINE(1179)			_hx_tmp5 = false;
            		}
HXDLIN(1179)		if (_hx_tmp5) {
HXLINE(1179)			_hx_tmp4 = ::hx::IsNull( e->get_Dst() );
            		}
            		else {
HXLINE(1179)			_hx_tmp4 = false;
            		}
HXDLIN(1179)		if (_hx_tmp4) {
HXLINE(1179)			_hx_tmp3 = ::hx::IsNull( e->Lface );
            		}
            		else {
HXLINE(1179)			_hx_tmp3 = false;
            		}
HXDLIN(1179)		if (_hx_tmp3) {
HXLINE(1179)			_hx_tmp2 = ::hx::IsNull( e->get_Rface() );
            		}
            		else {
HXLINE(1179)			_hx_tmp2 = false;
            		}
HXDLIN(1179)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp2,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1179,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("check",c8,98,b6,45)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TessMesh_obj,check,(void))

void TessMesh_obj::flipEdge( ::hxGeomAlgo::_Tess2::TessMesh mesh, ::hxGeomAlgo::_Tess2::TessHalfEdge edge){
            	HX_STACKFRAME(&_hx_pos_4a3d0d6dfa41f614_780_flipEdge)
HXLINE( 781)		 ::hxGeomAlgo::_Tess2::TessHalfEdge a0 = edge;
HXLINE( 782)		 ::hxGeomAlgo::_Tess2::TessHalfEdge a1 = a0->Lnext;
HXLINE( 783)		 ::hxGeomAlgo::_Tess2::TessHalfEdge a2 = a1->Lnext;
HXLINE( 784)		 ::hxGeomAlgo::_Tess2::TessHalfEdge b0 = edge->Sym;
HXLINE( 785)		 ::hxGeomAlgo::_Tess2::TessHalfEdge b1 = b0->Lnext;
HXLINE( 786)		 ::hxGeomAlgo::_Tess2::TessHalfEdge b2 = b1->Lnext;
HXLINE( 788)		 ::hxGeomAlgo::_Tess2::TessVertex aOrg = a0->Org;
HXLINE( 789)		 ::hxGeomAlgo::_Tess2::TessVertex aOpp = a2->Org;
HXLINE( 790)		 ::hxGeomAlgo::_Tess2::TessVertex bOrg = b0->Org;
HXLINE( 791)		 ::hxGeomAlgo::_Tess2::TessVertex bOpp = b2->Org;
HXLINE( 793)		 ::hxGeomAlgo::_Tess2::TessFace fa = a0->Lface;
HXLINE( 794)		 ::hxGeomAlgo::_Tess2::TessFace fb = b0->Lface;
HXLINE( 796)		bool _hx_tmp = ::hxGeomAlgo::_Tess2::Geom_obj::edgeIsInternal(edge);
HXDLIN( 796)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),796,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 797)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( a2->Lnext,a0 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),797,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 798)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( b2->Lnext,b0 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),798,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 800)		a0->Org = bOpp;
HXLINE( 801)		a0->Onext = b1->Sym;
HXLINE( 802)		b0->Org = aOpp;
HXLINE( 803)		b0->Onext = a1->Sym;
HXLINE( 804)		a2->Onext = b0;
HXLINE( 805)		b2->Onext = a0;
HXLINE( 806)		b1->Onext = a2->Sym;
HXLINE( 807)		a1->Onext = b2->Sym;
HXLINE( 809)		a0->Lnext = a2;
HXLINE( 810)		a2->Lnext = b1;
HXLINE( 811)		b1->Lnext = a0;
HXLINE( 813)		b0->Lnext = b2;
HXLINE( 814)		b2->Lnext = a1;
HXLINE( 815)		a1->Lnext = b0;
HXLINE( 817)		a1->Lface = fb;
HXLINE( 818)		b1->Lface = fa;
HXLINE( 820)		fa->anEdge = a0;
HXLINE( 821)		fb->anEdge = b0;
HXLINE( 823)		if (::hx::IsInstanceEq( aOrg->anEdge,a0 )) {
HXLINE( 823)			aOrg->anEdge = b1;
            		}
HXLINE( 824)		if (::hx::IsInstanceEq( bOrg->anEdge,b0 )) {
HXLINE( 824)			bOrg->anEdge = a1;
            		}
HXLINE( 826)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( a0->Lnext->Onext->Sym,a0 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),826,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 827)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( a0->Onext->Sym->Lnext,a0 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),827,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 828)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( a0->Org->anEdge->Org,a0->Org ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),828,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 831)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( a1->Lnext->Onext->Sym,a1 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),831,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 832)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( a1->Onext->Sym->Lnext,a1 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),832,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 833)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( a1->Org->anEdge->Org,a1->Org ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),833,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 835)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( a2->Lnext->Onext->Sym,a2 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),835,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 836)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( a2->Onext->Sym->Lnext,a2 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),836,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 837)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( a2->Org->anEdge->Org,a2->Org ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),837,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 839)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( b0->Lnext->Onext->Sym,b0 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),839,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 840)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( b0->Onext->Sym->Lnext,b0 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),840,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 841)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( b0->Org->anEdge->Org,b0->Org ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),841,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 843)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( b1->Lnext->Onext->Sym,b1 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),843,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 844)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( b1->Onext->Sym->Lnext,b1 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),844,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 845)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( b1->Org->anEdge->Org,b1->Org ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),845,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 847)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( b2->Lnext->Onext->Sym,b2 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),847,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 848)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( b2->Onext->Sym->Lnext,b2 ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),848,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 849)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( b2->Org->anEdge->Org,b2->Org ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),849,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 851)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( aOrg->anEdge->Org,aOrg ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),851,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 852)		::hxGeomAlgo::Debug_obj::_hx_assert(::hx::IsInstanceEq( bOrg->anEdge->Org,bOrg ),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),852,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
HXLINE( 854)		bool _hx_tmp1 = ::hx::IsInstanceEq( a0->get_Oprev()->Onext->Org,a0->Org );
HXDLIN( 854)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp1,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),854,HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c),HX_("flipEdge",8a,61,69,fb)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TessMesh_obj,flipEdge,(void))


::hx::ObjectPtr< TessMesh_obj > TessMesh_obj::__new() {
	::hx::ObjectPtr< TessMesh_obj > __this = new TessMesh_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TessMesh_obj > TessMesh_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TessMesh_obj *__this = (TessMesh_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TessMesh_obj), true, "hxGeomAlgo._Tess2.TessMesh"));
	*(void **)__this = TessMesh_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TessMesh_obj::TessMesh_obj()
{
}

void TessMesh_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TessMesh);
	HX_MARK_MEMBER_NAME(v,"v");
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_MEMBER_NAME(e,"e");
	HX_MARK_MEMBER_NAME(eSym,"eSym");
	HX_MARK_MEMBER_NAME(vHead,"vHead");
	HX_MARK_MEMBER_NAME(fHead,"fHead");
	HX_MARK_MEMBER_NAME(eHead,"eHead");
	HX_MARK_MEMBER_NAME(eHeadSym,"eHeadSym");
	HX_MARK_END_CLASS();
}

void TessMesh_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(v,"v");
	HX_VISIT_MEMBER_NAME(f,"f");
	HX_VISIT_MEMBER_NAME(e,"e");
	HX_VISIT_MEMBER_NAME(eSym,"eSym");
	HX_VISIT_MEMBER_NAME(vHead,"vHead");
	HX_VISIT_MEMBER_NAME(fHead,"fHead");
	HX_VISIT_MEMBER_NAME(eHead,"eHead");
	HX_VISIT_MEMBER_NAME(eHeadSym,"eHeadSym");
}

::hx::Val TessMesh_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { return ::hx::Val( v ); }
		if (HX_FIELD_EQ(inName,"f") ) { return ::hx::Val( f ); }
		if (HX_FIELD_EQ(inName,"e") ) { return ::hx::Val( e ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"eSym") ) { return ::hx::Val( eSym ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vHead") ) { return ::hx::Val( vHead ); }
		if (HX_FIELD_EQ(inName,"fHead") ) { return ::hx::Val( fHead ); }
		if (HX_FIELD_EQ(inName,"eHead") ) { return ::hx::Val( eHead ); }
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"splice") ) { return ::hx::Val( splice_dyn() ); }
		if (HX_FIELD_EQ(inName,"delete") ) { return ::hx::Val( _hx_delete_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"splice_") ) { return ::hx::Val( splice__dyn() ); }
		if (HX_FIELD_EQ(inName,"connect") ) { return ::hx::Val( connect_dyn() ); }
		if (HX_FIELD_EQ(inName,"zapFace") ) { return ::hx::Val( zapFace_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"eHeadSym") ) { return ::hx::Val( eHeadSym ); }
		if (HX_FIELD_EQ(inName,"makeEdge") ) { return ::hx::Val( makeEdge_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"makeEdge_") ) { return ::hx::Val( makeEdge__dyn() ); }
		if (HX_FIELD_EQ(inName,"makeFace_") ) { return ::hx::Val( makeFace__dyn() ); }
		if (HX_FIELD_EQ(inName,"killEdge_") ) { return ::hx::Val( killEdge__dyn() ); }
		if (HX_FIELD_EQ(inName,"killFace_") ) { return ::hx::Val( killFace__dyn() ); }
		if (HX_FIELD_EQ(inName,"splitEdge") ) { return ::hx::Val( splitEdge_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"makeVertex_") ) { return ::hx::Val( makeVertex__dyn() ); }
		if (HX_FIELD_EQ(inName,"killVertex_") ) { return ::hx::Val( killVertex__dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addEdgeVertex") ) { return ::hx::Val( addEdgeVertex_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"countFaceVerts_") ) { return ::hx::Val( countFaceVerts__dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mergeConvexFaces") ) { return ::hx::Val( mergeConvexFaces_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TessMesh_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"flipEdge") ) { outValue = flipEdge_dyn(); return true; }
	}
	return false;
}

::hx::Val TessMesh_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { v=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessFace >(); return inValue; }
		if (HX_FIELD_EQ(inName,"e") ) { e=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"eSym") ) { eSym=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vHead") ) { vHead=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fHead") ) { fHead=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessFace >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eHead") ) { eHead=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"eHeadSym") ) { eHeadSym=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TessMesh_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("v",76,00,00,00));
	outFields->push(HX_("f",66,00,00,00));
	outFields->push(HX_("e",65,00,00,00));
	outFields->push(HX_("eSym",a2,f1,01,43));
	outFields->push(HX_("vHead",b6,c8,2c,21));
	outFields->push(HX_("fHead",a6,80,c3,ea));
	outFields->push(HX_("eHead",25,ec,5c,57));
	outFields->push(HX_("eHeadSym",e2,dd,32,c1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TessMesh_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessVertex */ ,(int)offsetof(TessMesh_obj,v),HX_("v",76,00,00,00)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessFace */ ,(int)offsetof(TessMesh_obj,f),HX_("f",66,00,00,00)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(TessMesh_obj,e),HX_("e",65,00,00,00)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(TessMesh_obj,eSym),HX_("eSym",a2,f1,01,43)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessVertex */ ,(int)offsetof(TessMesh_obj,vHead),HX_("vHead",b6,c8,2c,21)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessFace */ ,(int)offsetof(TessMesh_obj,fHead),HX_("fHead",a6,80,c3,ea)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(TessMesh_obj,eHead),HX_("eHead",25,ec,5c,57)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(TessMesh_obj,eHeadSym),HX_("eHeadSym",e2,dd,32,c1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TessMesh_obj_sStaticStorageInfo = 0;
#endif

static ::String TessMesh_obj_sMemberFields[] = {
	HX_("v",76,00,00,00),
	HX_("f",66,00,00,00),
	HX_("e",65,00,00,00),
	HX_("eSym",a2,f1,01,43),
	HX_("vHead",b6,c8,2c,21),
	HX_("fHead",a6,80,c3,ea),
	HX_("eHead",25,ec,5c,57),
	HX_("eHeadSym",e2,dd,32,c1),
	HX_("makeEdge_",b4,e4,78,3d),
	HX_("splice_",63,47,16,eb),
	HX_("makeVertex_",2d,44,a2,c1),
	HX_("makeFace_",54,cc,e0,ce),
	HX_("killEdge_",04,a1,3e,57),
	HX_("killVertex_",7d,b4,8b,25),
	HX_("killFace_",a4,88,a6,e8),
	HX_("makeEdge",4b,bd,ac,39),
	HX_("splice",7c,85,9e,bf),
	HX_("delete",2b,c0,d8,6a),
	HX_("addEdgeVertex",02,ad,17,ef),
	HX_("splitEdge",37,54,6e,47),
	HX_("connect",ea,3b,80,15),
	HX_("zapFace",26,71,48,45),
	HX_("countFaceVerts_",a9,e5,a4,6a),
	HX_("mergeConvexFaces",77,18,ac,55),
	HX_("check",c8,98,b6,45),
	::String(null()) };

::hx::Class TessMesh_obj::__mClass;

static ::String TessMesh_obj_sStaticFields[] = {
	HX_("flipEdge",8a,61,69,fb),
	::String(null())
};

void TessMesh_obj::__register()
{
	TessMesh_obj _hx_dummy;
	TessMesh_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo._Tess2.TessMesh",7b,04,c9,7c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TessMesh_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TessMesh_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TessMesh_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TessMesh_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TessMesh_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TessMesh_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
} // end namespace _Tess2
