// Generated by Haxe 4.3.0-rc.1+88ebbd0
#include <hxcpp.h>

#ifndef INCLUDED_hxGeomAlgo__Tess2_TessHalfEdge
#include <hxGeomAlgo/_Tess2/TessHalfEdge.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessVertex
#include <hxGeomAlgo/_Tess2/TessVertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5d60d88454d91829_308_new,"hxGeomAlgo._Tess2.TessVertex","new",0x1f7e1764,"hxGeomAlgo._Tess2.TessVertex.new","hxGeomAlgo/Tess2.hx",308,0xf73e622d)
static const Float _hx_array_data_9d05d572_1[] = {
	(Float)0,(Float)0,(Float)0,
};
namespace hxGeomAlgo{
namespace _Tess2{

void TessVertex_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5d60d88454d91829_308_new)
HXLINE( 321)		this->idx = 0;
HXLINE( 320)		this->n = 0;
HXLINE( 319)		this->pqHandle = 0;
HXLINE( 318)		this->t = ((Float)0.0);
HXLINE( 317)		this->s = ((Float)0.0);
HXLINE( 316)		this->coords = ::Array_obj< Float >::fromData( _hx_array_data_9d05d572_1,3);
HXLINE( 313)		this->anEdge = null();
HXLINE( 312)		this->prev = null();
HXLINE( 311)		this->next = null();
            	}

Dynamic TessVertex_obj::__CreateEmpty() { return new TessVertex_obj; }

void *TessVertex_obj::_hx_vtable = 0;

Dynamic TessVertex_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TessVertex_obj > _hx_result = new TessVertex_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TessVertex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5c76f19a;
}


::hx::ObjectPtr< TessVertex_obj > TessVertex_obj::__new() {
	::hx::ObjectPtr< TessVertex_obj > __this = new TessVertex_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TessVertex_obj > TessVertex_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TessVertex_obj *__this = (TessVertex_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TessVertex_obj), true, "hxGeomAlgo._Tess2.TessVertex"));
	*(void **)__this = TessVertex_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TessVertex_obj::TessVertex_obj()
{
}

void TessVertex_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TessVertex);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(anEdge,"anEdge");
	HX_MARK_MEMBER_NAME(coords,"coords");
	HX_MARK_MEMBER_NAME(s,"s");
	HX_MARK_MEMBER_NAME(t,"t");
	HX_MARK_MEMBER_NAME(pqHandle,"pqHandle");
	HX_MARK_MEMBER_NAME(n,"n");
	HX_MARK_MEMBER_NAME(idx,"idx");
	HX_MARK_END_CLASS();
}

void TessVertex_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(anEdge,"anEdge");
	HX_VISIT_MEMBER_NAME(coords,"coords");
	HX_VISIT_MEMBER_NAME(s,"s");
	HX_VISIT_MEMBER_NAME(t,"t");
	HX_VISIT_MEMBER_NAME(pqHandle,"pqHandle");
	HX_VISIT_MEMBER_NAME(n,"n");
	HX_VISIT_MEMBER_NAME(idx,"idx");
}

::hx::Val TessVertex_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { return ::hx::Val( s ); }
		if (HX_FIELD_EQ(inName,"t") ) { return ::hx::Val( t ); }
		if (HX_FIELD_EQ(inName,"n") ) { return ::hx::Val( n ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"idx") ) { return ::hx::Val( idx ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"prev") ) { return ::hx::Val( prev ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"anEdge") ) { return ::hx::Val( anEdge ); }
		if (HX_FIELD_EQ(inName,"coords") ) { return ::hx::Val( coords ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pqHandle") ) { return ::hx::Val( pqHandle ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TessVertex_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"t") ) { t=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"n") ) { n=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"idx") ) { idx=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessVertex >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"anEdge") ) { anEdge=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
		if (HX_FIELD_EQ(inName,"coords") ) { coords=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pqHandle") ) { pqHandle=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TessVertex_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("prev",f3,be,5e,4a));
	outFields->push(HX_("anEdge",ca,c3,99,4c));
	outFields->push(HX_("coords",1e,a4,84,c8));
	outFields->push(HX_("s",73,00,00,00));
	outFields->push(HX_("t",74,00,00,00));
	outFields->push(HX_("pqHandle",89,50,9d,4d));
	outFields->push(HX_("n",6e,00,00,00));
	outFields->push(HX_("idx",3d,04,50,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TessVertex_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessVertex */ ,(int)offsetof(TessVertex_obj,next),HX_("next",f3,84,02,49)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessVertex */ ,(int)offsetof(TessVertex_obj,prev),HX_("prev",f3,be,5e,4a)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(TessVertex_obj,anEdge),HX_("anEdge",ca,c3,99,4c)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(TessVertex_obj,coords),HX_("coords",1e,a4,84,c8)},
	{::hx::fsFloat,(int)offsetof(TessVertex_obj,s),HX_("s",73,00,00,00)},
	{::hx::fsFloat,(int)offsetof(TessVertex_obj,t),HX_("t",74,00,00,00)},
	{::hx::fsInt,(int)offsetof(TessVertex_obj,pqHandle),HX_("pqHandle",89,50,9d,4d)},
	{::hx::fsInt,(int)offsetof(TessVertex_obj,n),HX_("n",6e,00,00,00)},
	{::hx::fsInt,(int)offsetof(TessVertex_obj,idx),HX_("idx",3d,04,50,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TessVertex_obj_sStaticStorageInfo = 0;
#endif

static ::String TessVertex_obj_sMemberFields[] = {
	HX_("next",f3,84,02,49),
	HX_("prev",f3,be,5e,4a),
	HX_("anEdge",ca,c3,99,4c),
	HX_("coords",1e,a4,84,c8),
	HX_("s",73,00,00,00),
	HX_("t",74,00,00,00),
	HX_("pqHandle",89,50,9d,4d),
	HX_("n",6e,00,00,00),
	HX_("idx",3d,04,50,00),
	::String(null()) };

::hx::Class TessVertex_obj::__mClass;

void TessVertex_obj::__register()
{
	TessVertex_obj _hx_dummy;
	TessVertex_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo._Tess2.TessVertex",72,d5,05,9d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TessVertex_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TessVertex_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TessVertex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TessVertex_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
} // end namespace _Tess2
