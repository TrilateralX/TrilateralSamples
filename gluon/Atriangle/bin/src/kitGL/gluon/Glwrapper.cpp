// Generated by Haxe 4.3.0-rc.1+88ebbd0
#include <hxcpp.h>

#ifndef INCLUDED_66c800784bc86d2f
#define INCLUDED_66c800784bc86d2f
#include "linc_glfw.h"
#endif
#ifndef INCLUDED_2710e462964f946c
#define INCLUDED_2710e462964f946c
#include "stdlib.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_glfw_GLFWErrorHandler
#include <glfw/GLFWErrorHandler.h>
#endif
#ifndef INCLUDED_glfw_GLFWKeyHandler
#include <glfw/GLFWKeyHandler.h>
#endif
#ifndef INCLUDED_glfw_GLFWMouseButtonHandler
#include <glfw/GLFWMouseButtonHandler.h>
#endif
#ifndef INCLUDED_glfw_GLFWMouseMoveHandler
#include <glfw/GLFWMouseMoveHandler.h>
#endif
#ifndef INCLUDED_glfw_GLFWWindowSizeHandler
#include <glfw/GLFWWindowSizeHandler.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLContext
#include <gluon/webgl/native/GLContext.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_kitGL_gluon_Glwrapper
#include <kitGL/gluon/Glwrapper.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_314ff55008b760ea_12_new,"kitGL.gluon.Glwrapper","new",0x80c5b58e,"kitGL.gluon.Glwrapper.new","kitGL/gluon/Glwrapper.hx",12,0x600b4764)
HX_LOCAL_STACK_FRAME(_hx_pos_314ff55008b760ea_82_terminate,"kitGL.gluon.Glwrapper","terminate",0x15192e0f,"kitGL.gluon.Glwrapper.terminate","kitGL/gluon/Glwrapper.hx",82,0x600b4764)
HX_LOCAL_STACK_FRAME(_hx_pos_314ff55008b760ea_87_mainLoop,"kitGL.gluon.Glwrapper","mainLoop",0x0434af4f,"kitGL.gluon.Glwrapper.mainLoop","kitGL/gluon/Glwrapper.hx",87,0x600b4764)
HX_LOCAL_STACK_FRAME(_hx_pos_314ff55008b760ea_105_onGLFWError,"kitGL.gluon.Glwrapper","onGLFWError",0xde5fdf61,"kitGL.gluon.Glwrapper.onGLFWError","kitGL/gluon/Glwrapper.hx",105,0x600b4764)
HX_LOCAL_STACK_FRAME(_hx_pos_314ff55008b760ea_108_onResize,"kitGL.gluon.Glwrapper","onResize",0x4c22e485,"kitGL.gluon.Glwrapper.onResize","kitGL/gluon/Glwrapper.hx",108,0x600b4764)
HX_LOCAL_STACK_FRAME(_hx_pos_314ff55008b760ea_113_onKey,"kitGL.gluon.Glwrapper","onKey",0x1f012a6e,"kitGL.gluon.Glwrapper.onKey","kitGL/gluon/Glwrapper.hx",113,0x600b4764)
HX_LOCAL_STACK_FRAME(_hx_pos_314ff55008b760ea_114_onMousePosChange,"kitGL.gluon.Glwrapper","onMousePosChange",0xa2852ad0,"kitGL.gluon.Glwrapper.onMousePosChange","kitGL/gluon/Glwrapper.hx",114,0x600b4764)
HX_LOCAL_STACK_FRAME(_hx_pos_314ff55008b760ea_115_onMouseButton,"kitGL.gluon.Glwrapper","onMouseButton",0x27ec1dc6,"kitGL.gluon.Glwrapper.onMouseButton","kitGL/gluon/Glwrapper.hx",115,0x600b4764)
namespace kitGL{
namespace gluon{

void Glwrapper_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_314ff55008b760ea_12_new)
HXLINE(  18)		this->windowFail = HX_("Could not create GLFW window",42,0d,7a,5b);
HXLINE(  17)		this->initFail = HX_("Could not initialize GLFW",ba,9b,1d,2b);
HXLINE(  15)		this->pixelRatio = ((Float)1);
HXLINE(  13)		this->startupFullscreen = false;
HXLINE(  23)		{
HXLINE(  23)			::glfw::GLFWErrorHandler_obj::setCallback(this->onGLFWError_dyn());
HXDLIN(  23)			 ::glfwSetErrorCallback(::cpp::Function< void (int,const char*)>(::hx::AnyCast(&::glfw::GLFWErrorHandler_obj::nativeCallack )));
            		}
HXLINE(  24)		void();
HXDLIN(  24)		if (::hx::IsEq( glfwInit(),0 )) {
HXLINE(  24)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(this->initFail));
            		}
HXLINE(  25)		{
HXLINE(  25)			glfwWindowHint(139266,2);
HXDLIN(  25)			glfwWindowHint(139267,1);
HXDLIN(  25)			glfwWindowHint(135181,0);
HXDLIN(  25)			glfwWindowHint(135183,60);
HXDLIN(  25)			glfwWindowHint(131075,1);
HXDLIN(  25)			glfwWindowHint(131078,1);
HXDLIN(  25)			glfwWindowHint(143361,1);
HXDLIN(  25)			glfwWindowHint(139276,1);
            		}
HXLINE(  26)		::cpp::Pointer<  GLFWmonitor > monitor = glfwGetPrimaryMonitor();
HXLINE(  27)		::cpp::Pointer<  cpp::Struct<GLFWvidmode> > videoMode = glfwGetVideoMode(monitor);
HXLINE(  29)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  29)		::String _hx_tmp1 = ((HX_("VideoMode: ",84,13,a1,1d) + videoMode->get_value()->width) + HX_("x",78,00,00,00));
HXDLIN(  29)		::String _hx_tmp2 = ((_hx_tmp1 + videoMode->get_value()->height) + HX_(" @ ",00,80,18,00));
HXDLIN(  29)		::String _hx_tmp3 = (_hx_tmp2 + videoMode->get_value()->refreshRate);
HXDLIN(  29)		_hx_tmp(_hx_tmp3,::hx::SourceInfo(HX_("kitGL/gluon/Glwrapper.hx",64,47,0b,60),29,HX_("kitGL.gluon.Glwrapper",9c,96,84,e2),HX_("new",60,d0,53,00)));
HXLINE(  30)		 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN(  30)		int count = 0;
HXDLIN(  30)		::cpp::Pointer<  cpp::Struct<GLFWvidmode> > modesPtr =  ::glfwGetVideoModes(monitor,&(count));
HXDLIN(  30)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  30)		{
HXLINE(  30)			int _g1 = 0;
HXDLIN(  30)			int _g2 = count;
HXDLIN(  30)			while((_g1 < _g2)){
HXLINE(  30)				_g1 = (_g1 + 1);
HXDLIN(  30)				int i = (_g1 - 1);
HXDLIN(  30)				_g->push(modesPtr->at(i));
            			}
            		}
HXDLIN(  30)		::Array< ::Dynamic> _this = _g;
HXDLIN(  30)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN(  30)		{
HXLINE(  30)			int _g3 = 0;
HXDLIN(  30)			int _g4 = _this->length;
HXDLIN(  30)			while((_g3 < _g4)){
HXLINE(  30)				_g3 = (_g3 + 1);
HXDLIN(  30)				int i = (_g3 - 1);
HXDLIN(  30)				{
HXLINE(  31)					 cpp::Struct<GLFWvidmode> m = ( ( cpp::Struct<GLFWvidmode>)(_hx_array_unsafe_get(_this,i)) );
HXLINE(  30)					result->__unsafe_set(i,(((((HX_("",00,00,00,00) + m->width) + HX_("x",78,00,00,00)) + m->height) + HX_(" @ ",00,80,18,00)) + m->refreshRate));
            				}
            			}
            		}
HXDLIN(  30)		_hx_tmp4(result,::hx::SourceInfo(HX_("kitGL/gluon/Glwrapper.hx",64,47,0b,60),30,HX_("kitGL.gluon.Glwrapper",9c,96,84,e2),HX_("new",60,d0,53,00)));
HXLINE(  32)		 cpp::Struct<GLFWvidmode> & dim = videoMode->get_value();
HXLINE(  33)		int windowWidth = ::Std_obj::_hx_int(( (Float)(dim->width) ));
HXLINE(  34)		int windowHeight = ::Std_obj::_hx_int(( (Float)(dim->height) ));
HXLINE(  38)		::cpp::Pointer<  GLFWmonitor > tmp;
HXDLIN(  38)		if (this->startupFullscreen) {
HXLINE(  38)			tmp = glfwGetPrimaryMonitor();
            		}
            		else {
HXLINE(  38)			tmp = null();
            		}
HXDLIN(  38)		::cpp::Pointer<  GLFWwindow > tmp1 = null();
HXDLIN(  38)		::cpp::Pointer<  GLFWmonitor > tmp2 = tmp;
HXDLIN(  38)		::cpp::Pointer<  GLFWwindow > tmp3 = tmp1;
HXLINE(  35)		this->window = glfwCreateWindow(windowWidth,windowHeight,HX_("Gluon Demo",54,f7,af,13),tmp2,tmp3);
HXLINE(  39)		if (::hx::IsNull( this->window )) {
HXLINE(  40)			glfwTerminate();
HXLINE(  41)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(this->windowFail));
            		}
HXLINE(  43)		::cpp::Pointer<  GLFWwindow > tmp21 = this->window;
HXDLIN(  43)		::cpp::Pointer<  GLFWwindow > tmp4 = tmp21;
HXDLIN(  43)		glfwMakeContextCurrent(tmp4);
HXLINE(  44)		glfwSwapInterval(1);
HXLINE(  45)		{
HXLINE(  45)			::cpp::Pointer<  GLFWwindow > window = this->window;
HXDLIN(  45)			::glfw::GLFWWindowSizeHandler_obj::setCallback(window->ptr,this->onResize_dyn());
HXDLIN(  45)			::cpp::Pointer<  GLFWwindow > tmp31 = window;
HXDLIN(  45)			::cpp::Pointer<  GLFWwindow > tmp5 = tmp31;
HXDLIN(  45)			 ::glfwSetWindowSizeCallback(tmp5,::cpp::Function< void ( GLFWwindow *,int,int)>(::hx::AnyCast(&::glfw::GLFWWindowSizeHandler_obj::nativeCallack )));
            		}
HXLINE(  46)		{
HXLINE(  46)			::cpp::Pointer<  GLFWwindow > window1 = this->window;
HXDLIN(  46)			::glfw::GLFWMouseMoveHandler_obj::setCallback(window1->ptr,this->onMousePosChange_dyn());
HXDLIN(  46)			::cpp::Pointer<  GLFWwindow > tmp41 = window1;
HXDLIN(  46)			::cpp::Pointer<  GLFWwindow > tmp6 = tmp41;
HXDLIN(  46)			 ::glfwSetCursorPosCallback(tmp6,::cpp::Function< void ( GLFWwindow *,Float,Float)>(::hx::AnyCast(&::glfw::GLFWMouseMoveHandler_obj::nativeCallack )));
            		}
HXLINE(  47)		{
HXLINE(  47)			::cpp::Pointer<  GLFWwindow > window2 = this->window;
HXDLIN(  47)			::glfw::GLFWMouseButtonHandler_obj::setCallback(window2->ptr,this->onMouseButton_dyn());
HXDLIN(  47)			::cpp::Pointer<  GLFWwindow > tmp51 = window2;
HXDLIN(  47)			::cpp::Pointer<  GLFWwindow > tmp7 = tmp51;
HXDLIN(  47)			 ::glfwSetMouseButtonCallback(tmp7,::cpp::Function< void ( GLFWwindow *,int,int,int)>(::hx::AnyCast(&::glfw::GLFWMouseButtonHandler_obj::nativeCallack )));
            		}
HXLINE(  48)		{
HXLINE(  48)			::cpp::Pointer<  GLFWwindow > window3 = this->window;
HXDLIN(  48)			::glfw::GLFWKeyHandler_obj::setCallback(window3->ptr,this->onKey_dyn());
HXDLIN(  48)			::cpp::Pointer<  GLFWwindow > tmp61 = window3;
HXDLIN(  48)			::cpp::Pointer<  GLFWwindow > tmp8 = tmp61;
HXDLIN(  48)			 ::glfwSetKeyCallback(tmp8,::cpp::Function< void ( GLFWwindow *,int,int,int,int)>(::hx::AnyCast(&::glfw::GLFWKeyHandler_obj::nativeCallack )));
            		}
HXLINE(  49)		this->gl =  ::gluon::webgl::native::GLContext_obj::__alloc( HX_CTX );
HXLINE(  50)		::cpp::Pointer<  cpp::Struct<GLFWvidmode> > videoMode1 = glfwGetVideoMode(monitor);
HXLINE(  51)		::cpp::Pointer<  cpp::Struct<GLFWvidmode> > videoMode2 = glfwGetVideoMode(monitor);
HXLINE(  52)		::String videoModeSize = ((HX_("",00,00,00,00) + videoMode2->get_value()->width) + HX_("x",78,00,00,00));
HXDLIN(  52)		::String videoModeSize1 = (videoModeSize + videoMode2->get_value()->height);
HXLINE(  56)		 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXLINE(  57)		int width = -1;
HXDLIN(  57)		int height = -1;
HXDLIN(  57)		::cpp::Pointer<  GLFWwindow > tmp71 = this->window;
HXDLIN(  57)		::cpp::Pointer< int > tmp81 = ::cpp::Pointer_obj::addressOf(width);
HXDLIN(  57)		::cpp::Pointer< int > tmp9 = ::cpp::Pointer_obj::addressOf(height);
HXDLIN(  57)		::cpp::Pointer<  GLFWwindow > tmp10 = tmp71;
HXDLIN(  57)		::cpp::Pointer< int > tmp11 = tmp81;
HXDLIN(  57)		::cpp::Pointer< int > tmp12 = tmp9;
HXDLIN(  57)		glfwGetFramebufferSize(tmp10,tmp11,tmp12);
HXDLIN(  57)		 ::Dynamic _hx_tmp6 =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("width",06,b6,62,ca),width)
            			->setFixed(1,HX_("height",e7,07,4c,02),height));
HXLINE(  58)		int width1 = -1;
HXDLIN(  58)		int height1 = -1;
HXDLIN(  58)		::cpp::Pointer<  GLFWwindow > tmp101 = this->window;
HXDLIN(  58)		::cpp::Pointer< int > tmp111 = ::cpp::Pointer_obj::addressOf(width1);
HXDLIN(  58)		::cpp::Pointer< int > tmp121 = ::cpp::Pointer_obj::addressOf(height1);
HXDLIN(  58)		::cpp::Pointer<  GLFWwindow > tmp13 = tmp101;
HXDLIN(  58)		::cpp::Pointer< int > tmp14 = tmp111;
HXDLIN(  58)		::cpp::Pointer< int > tmp15 = tmp121;
HXDLIN(  58)		glfwGetWindowSize(tmp13,tmp14,tmp15);
HXLINE(  56)		_hx_tmp5(videoModeSize1, ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("kitGL.gluon.Glwrapper",9c,96,84,e2))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(3)->init(0,_hx_tmp6)->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("width",06,b6,62,ca),width1)
            				->setFixed(1,HX_("height",e7,07,4c,02),height1)))->init(2,this->pixelRatio))
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("new",60,d0,53,00))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("kitGL/gluon/Glwrapper.hx",64,47,0b,60))
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),56)));
            	}

Dynamic Glwrapper_obj::__CreateEmpty() { return new Glwrapper_obj; }

void *Glwrapper_obj::_hx_vtable = 0;

Dynamic Glwrapper_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Glwrapper_obj > _hx_result = new Glwrapper_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Glwrapper_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x434f4a16;
}

void Glwrapper_obj::terminate(){
            	HX_STACKFRAME(&_hx_pos_314ff55008b760ea_82_terminate)
HXLINE(  83)		this->onStop();
HXLINE(  84)		::cpp::Pointer<  GLFWwindow > tmp = this->window;
HXDLIN(  84)		glfwDestroyWindow(tmp);
HXLINE(  85)		glfwTerminate();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Glwrapper_obj,terminate,(void))

void Glwrapper_obj::mainLoop(){
            	HX_STACKFRAME(&_hx_pos_314ff55008b760ea_87_mainLoop)
HXLINE(  88)		::cpp::Pointer<  GLFWwindow > tmp = this->window;
HXDLIN(  88)		if ((glfwWindowShouldClose(tmp) == 1)) {
HXLINE(  89)			this->terminate();
HXLINE(  90)			return;
            		}
HXLINE(  93)		int width = -1;
HXDLIN(  93)		int height = -1;
HXDLIN(  93)		::cpp::Pointer<  GLFWwindow > tmp1 = this->window;
HXDLIN(  93)		::cpp::Pointer< int > tmp2 = ::cpp::Pointer_obj::addressOf(width);
HXDLIN(  93)		::cpp::Pointer< int > tmp3 = ::cpp::Pointer_obj::addressOf(height);
HXDLIN(  93)		glfwGetFramebufferSize(tmp1,tmp2,tmp3);
HXDLIN(  93)		int screenBufferSize_width = width;
HXDLIN(  93)		int screenBufferSize_height = height;
HXLINE(  94)		bool _hx_tmp;
HXDLIN(  94)		if ((screenBufferSize_width > 0)) {
HXLINE(  94)			_hx_tmp = (screenBufferSize_height > 0);
            		}
            		else {
HXLINE(  94)			_hx_tmp = false;
            		}
HXDLIN(  94)		if (_hx_tmp) {
HXLINE(  95)			this->onFrame(screenBufferSize_width,screenBufferSize_height);
HXLINE( 100)			::cpp::Pointer<  GLFWwindow > tmp = this->window;
HXDLIN( 100)			glfwSwapBuffers(tmp);
            		}
HXLINE( 103)		glfwPollEvents();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Glwrapper_obj,mainLoop,(void))

void Glwrapper_obj::onGLFWError(int code,::String message){
            	HX_STACKFRAME(&_hx_pos_314ff55008b760ea_105_onGLFWError)
HXDLIN( 105)		::haxe::Log_obj::trace(((((HX_("GLFW Error: ",e4,a0,30,a0) + message) + HX_(" (",08,1c,00,00)) + code) + HX_(")",29,00,00,00)),::hx::SourceInfo(HX_("kitGL/gluon/Glwrapper.hx",64,47,0b,60),105,HX_("kitGL.gluon.Glwrapper",9c,96,84,e2),HX_("onGLFWError",33,1c,a0,2a)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Glwrapper_obj,onGLFWError,(void))

void Glwrapper_obj::onResize(::cpp::Pointer<  GLFWwindow > window,int width,int height){
            	HX_STACKFRAME(&_hx_pos_314ff55008b760ea_108_onResize)
HXLINE( 109)		int width1 = -1;
HXDLIN( 109)		int height1 = -1;
HXDLIN( 109)		::cpp::Pointer<  GLFWwindow > tmp = this->window;
HXDLIN( 109)		::cpp::Pointer< int > tmp1 = ::cpp::Pointer_obj::addressOf(width1);
HXDLIN( 109)		::cpp::Pointer< int > tmp2 = ::cpp::Pointer_obj::addressOf(height1);
HXDLIN( 109)		glfwGetFramebufferSize(tmp,tmp1,tmp2);
HXDLIN( 109)		int screenBufferSize_width = width1;
HXDLIN( 109)		int screenBufferSize_height = height1;
HXLINE( 110)		::haxe::Log_obj::trace((HX_("Resizing window to ",84,39,ec,7c) + (((HX_("",00,00,00,00) + screenBufferSize_width) + HX_("x",78,00,00,00)) + screenBufferSize_height)),::hx::SourceInfo(HX_("kitGL/gluon/Glwrapper.hx",64,47,0b,60),110,HX_("kitGL.gluon.Glwrapper",9c,96,84,e2),HX_("onResize",73,50,28,e8)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Glwrapper_obj,onResize,(void))

void Glwrapper_obj::onKey(int key,int scanCode,int action,int mods){
            	HX_STACKFRAME(&_hx_pos_314ff55008b760ea_113_onKey)
            	}


HX_DEFINE_DYNAMIC_FUNC4(Glwrapper_obj,onKey,(void))

void Glwrapper_obj::onMousePosChange(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_314ff55008b760ea_114_onMousePosChange)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Glwrapper_obj,onMousePosChange,(void))

void Glwrapper_obj::onMouseButton(int button,int action,int mods){
            	HX_STACKFRAME(&_hx_pos_314ff55008b760ea_115_onMouseButton)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Glwrapper_obj,onMouseButton,(void))


::hx::ObjectPtr< Glwrapper_obj > Glwrapper_obj::__new() {
	::hx::ObjectPtr< Glwrapper_obj > __this = new Glwrapper_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Glwrapper_obj > Glwrapper_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Glwrapper_obj *__this = (Glwrapper_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Glwrapper_obj), true, "kitGL.gluon.Glwrapper"));
	*(void **)__this = Glwrapper_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Glwrapper_obj::Glwrapper_obj()
{
}

void Glwrapper_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Glwrapper);
	HX_MARK_MEMBER_NAME(startupFullscreen,"startupFullscreen");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(pixelRatio,"pixelRatio");
	HX_MARK_MEMBER_NAME(initFail,"initFail");
	HX_MARK_MEMBER_NAME(windowFail,"windowFail");
	HX_MARK_MEMBER_NAME(onFrame,"onFrame");
	HX_MARK_MEMBER_NAME(onStop,"onStop");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_END_CLASS();
}

void Glwrapper_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(startupFullscreen,"startupFullscreen");
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(pixelRatio,"pixelRatio");
	HX_VISIT_MEMBER_NAME(initFail,"initFail");
	HX_VISIT_MEMBER_NAME(windowFail,"windowFail");
	HX_VISIT_MEMBER_NAME(onFrame,"onFrame");
	HX_VISIT_MEMBER_NAME(onStop,"onStop");
	HX_VISIT_MEMBER_NAME(gl,"gl");
}

::hx::Val Glwrapper_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return ::hx::Val( gl ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"onKey") ) { return ::hx::Val( onKey_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return ::hx::Val( window ); }
		if (HX_FIELD_EQ(inName,"onStop") ) { return ::hx::Val( onStop ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onFrame") ) { return ::hx::Val( onFrame ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"initFail") ) { return ::hx::Val( initFail ); }
		if (HX_FIELD_EQ(inName,"mainLoop") ) { return ::hx::Val( mainLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return ::hx::Val( onResize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"terminate") ) { return ::hx::Val( terminate_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pixelRatio") ) { return ::hx::Val( pixelRatio ); }
		if (HX_FIELD_EQ(inName,"windowFail") ) { return ::hx::Val( windowFail ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onGLFWError") ) { return ::hx::Val( onGLFWError_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onMouseButton") ) { return ::hx::Val( onMouseButton_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onMousePosChange") ) { return ::hx::Val( onMousePosChange_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"startupFullscreen") ) { return ::hx::Val( startupFullscreen ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Glwrapper_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::gluon::webgl::native::GLContext >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast< ::cpp::Pointer<  GLFWwindow > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onStop") ) { onStop=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onFrame") ) { onFrame=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"initFail") ) { initFail=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pixelRatio") ) { pixelRatio=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowFail") ) { windowFail=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"startupFullscreen") ) { startupFullscreen=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Glwrapper_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("startupFullscreen",d8,c3,4a,33));
	outFields->push(HX_("window",f0,93,8c,52));
	outFields->push(HX_("pixelRatio",a5,78,12,83));
	outFields->push(HX_("initFail",0e,e9,6c,48));
	outFields->push(HX_("windowFail",ee,31,8c,ce));
	outFields->push(HX_("gl",25,5a,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Glwrapper_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Glwrapper_obj,startupFullscreen),HX_("startupFullscreen",d8,c3,4a,33)},
	{::hx::fsUnknown /* ::cpp::Pointer<  GLFWwindow > */ ,(int)offsetof(Glwrapper_obj,window),HX_("window",f0,93,8c,52)},
	{::hx::fsFloat,(int)offsetof(Glwrapper_obj,pixelRatio),HX_("pixelRatio",a5,78,12,83)},
	{::hx::fsString,(int)offsetof(Glwrapper_obj,initFail),HX_("initFail",0e,e9,6c,48)},
	{::hx::fsString,(int)offsetof(Glwrapper_obj,windowFail),HX_("windowFail",ee,31,8c,ce)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Glwrapper_obj,onFrame),HX_("onFrame",8e,16,c1,9c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Glwrapper_obj,onStop),HX_("onStop",c1,f8,e5,ee)},
	{::hx::fsObject /*  ::gluon::webgl::native::GLContext */ ,(int)offsetof(Glwrapper_obj,gl),HX_("gl",25,5a,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Glwrapper_obj_sStaticStorageInfo = 0;
#endif

static ::String Glwrapper_obj_sMemberFields[] = {
	HX_("startupFullscreen",d8,c3,4a,33),
	HX_("window",f0,93,8c,52),
	HX_("pixelRatio",a5,78,12,83),
	HX_("initFail",0e,e9,6c,48),
	HX_("windowFail",ee,31,8c,ce),
	HX_("onFrame",8e,16,c1,9c),
	HX_("onStop",c1,f8,e5,ee),
	HX_("gl",25,5a,00,00),
	HX_("terminate",61,32,d2,fd),
	HX_("mainLoop",3d,1b,3a,a0),
	HX_("onGLFWError",33,1c,a0,2a),
	HX_("onResize",73,50,28,e8),
	HX_("onKey",c0,1d,69,32),
	HX_("onMousePosChange",be,34,dd,4e),
	HX_("onMouseButton",18,b3,52,32),
	::String(null()) };

::hx::Class Glwrapper_obj::__mClass;

void Glwrapper_obj::__register()
{
	Glwrapper_obj _hx_dummy;
	Glwrapper_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kitGL.gluon.Glwrapper",9c,96,84,e2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Glwrapper_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Glwrapper_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Glwrapper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Glwrapper_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kitGL
} // end namespace gluon
