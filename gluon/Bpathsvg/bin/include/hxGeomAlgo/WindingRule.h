// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_hxGeomAlgo_WindingRule
#define INCLUDED_hxGeomAlgo_WindingRule

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(hxGeomAlgo,WindingRule)
namespace hxGeomAlgo{


class WindingRule_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef WindingRule_obj OBJ_;

	public:
		WindingRule_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("hxGeomAlgo.WindingRule",07,80,4b,2b); }
		::String __ToString() const { return HX_("WindingRule.",58,98,c4,40) + _hx_tag; }

		static ::hxGeomAlgo::WindingRule ABS_GEQ_TWO;
		static inline ::hxGeomAlgo::WindingRule ABS_GEQ_TWO_dyn() { return ABS_GEQ_TWO; }
		static ::hxGeomAlgo::WindingRule NEGATIVE;
		static inline ::hxGeomAlgo::WindingRule NEGATIVE_dyn() { return NEGATIVE; }
		static ::hxGeomAlgo::WindingRule NON_ZERO;
		static inline ::hxGeomAlgo::WindingRule NON_ZERO_dyn() { return NON_ZERO; }
		static ::hxGeomAlgo::WindingRule ODD;
		static inline ::hxGeomAlgo::WindingRule ODD_dyn() { return ODD; }
		static ::hxGeomAlgo::WindingRule POSITIVE;
		static inline ::hxGeomAlgo::WindingRule POSITIVE_dyn() { return POSITIVE; }
};

} // end namespace hxGeomAlgo

#endif /* INCLUDED_hxGeomAlgo_WindingRule */ 
