// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_nodule_PenNodule
#define INCLUDED_trilateral3_nodule_PenNodule

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(trilateral3,drawing,Pen)
HX_DECLARE_CLASS2(trilateral3,nodule,PenNodule)
HX_DECLARE_CLASS1(typedarray,ArrayBufferView)
HX_DECLARE_CLASS1(typedarray,ArrayBufferViewBase)
HX_DECLARE_CLASS1(typedarray,Float32ArrayImpl)

namespace trilateral3{
namespace nodule{


class HXCPP_CLASS_ATTRIBUTES PenNodule_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PenNodule_obj OBJ_;
		PenNodule_obj();

	public:
		enum { _hx_ClassId = 0x052c2712 };

		void __construct(::hx::Null< bool >  __o_useGLScale);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="trilateral3.nodule.PenNodule")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"trilateral3.nodule.PenNodule"); }
		static ::hx::ObjectPtr< PenNodule_obj > __new(::hx::Null< bool >  __o_useGLScale);
		static ::hx::ObjectPtr< PenNodule_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_useGLScale);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PenNodule_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PenNodule",a4,e2,53,b6); }

		static void __boot();
		static int largeEnough;
		 ::typedarray::Float32ArrayImpl colorTriangles;
		 ::trilateral3::drawing::Pen pen;
		 ::trilateral3::drawing::Pen createPen();
		::Dynamic createPen_dyn();

		 ::typedarray::Float32ArrayImpl get_data();
		::Dynamic get_data_dyn();

		int get_size();
		::Dynamic get_size_dyn();

};

} // end namespace trilateral3
} // end namespace nodule

#endif /* INCLUDED_trilateral3_nodule_PenNodule */ 
