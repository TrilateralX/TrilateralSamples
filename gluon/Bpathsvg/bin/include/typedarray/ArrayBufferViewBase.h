// Generated by Haxe 4.2.0-rc.1+3ef20749a
#ifndef INCLUDED_typedarray_ArrayBufferViewBase
#define INCLUDED_typedarray_ArrayBufferViewBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_typedarray_ArrayBufferView
#include <typedarray/ArrayBufferView.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS1(typedarray,ArrayBufferView)
HX_DECLARE_CLASS1(typedarray,ArrayBufferViewBase)

namespace typedarray{


class HXCPP_CLASS_ATTRIBUTES ArrayBufferViewBase_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ArrayBufferViewBase_obj OBJ_;
		ArrayBufferViewBase_obj();

	public:
		enum { _hx_ClassId = 0x2ca3a6c0 };

		void __construct(int BYTES_PER_ELEMENT, ::Dynamic length, ::haxe::io::Bytes buffer, ::Dynamic byteOffset, ::Dynamic byteLength);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="typedarray.ArrayBufferViewBase")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"typedarray.ArrayBufferViewBase"); }
		static ::hx::ObjectPtr< ArrayBufferViewBase_obj > __new(int BYTES_PER_ELEMENT, ::Dynamic length, ::haxe::io::Bytes buffer, ::Dynamic byteOffset, ::Dynamic byteLength);
		static ::hx::ObjectPtr< ArrayBufferViewBase_obj > __alloc(::hx::Ctx *_hx_ctx,int BYTES_PER_ELEMENT, ::Dynamic length, ::haxe::io::Bytes buffer, ::Dynamic byteOffset, ::Dynamic byteLength);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ArrayBufferViewBase_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ArrayBufferViewBase",8f,09,e8,6e); }

		 ::haxe::io::Bytes buffer;
		int byteOffset;
		int byteLength;
		int BYTES_PER_ELEMENT_;
		int length;
};

} // end namespace typedarray

#endif /* INCLUDED_typedarray_ArrayBufferViewBase */ 
