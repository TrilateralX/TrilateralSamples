// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_TrilateralSVG
#include <TrilateralSVG.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLContext
#include <gluon/webgl/native/GLContext.h>
#endif
#ifndef INCLUDED_justPath_IPathContext
#include <justPath/IPathContext.h>
#endif
#ifndef INCLUDED_justPath_SvgPath
#include <justPath/SvgPath.h>
#endif
#ifndef INCLUDED_justPath_transform_TranslationContext
#include <justPath/transform/TranslationContext.h>
#endif
#ifndef INCLUDED_kitGL_gluon_Ply
#include <kitGL/gluon/Ply.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Pen
#include <trilateral3/drawing/Pen.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Sketch
#include <trilateral3/drawing/Sketch.h>
#endif
#ifndef INCLUDED_trilateral3_nodule_PenNodule
#include <trilateral3/nodule/PenNodule.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferView
#include <typedarray/ArrayBufferView.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferViewBase
#include <typedarray/ArrayBufferViewBase.h>
#endif
#ifndef INCLUDED_typedarray_Float32ArrayImpl
#include <typedarray/Float32ArrayImpl.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fff8ccda04e6eada_21_new,"TrilateralSVG","new",0x86741dea,"TrilateralSVG.new","TrilateralSVG.hx",21,0x2fab8cc6)
HX_LOCAL_STACK_FRAME(_hx_pos_fff8ccda04e6eada_30_draw,"TrilateralSVG","draw",0x1893b73a,"TrilateralSVG.draw","TrilateralSVG.hx",30,0x2fab8cc6)
HX_LOCAL_STACK_FRAME(_hx_pos_fff8ccda04e6eada_44_cubicSVG,"TrilateralSVG","cubicSVG",0xf3757170,"TrilateralSVG.cubicSVG","TrilateralSVG.hx",44,0x2fab8cc6)
HX_LOCAL_STACK_FRAME(_hx_pos_fff8ccda04e6eada_39_cubicSVG,"TrilateralSVG","cubicSVG",0xf3757170,"TrilateralSVG.cubicSVG","TrilateralSVG.hx",39,0x2fab8cc6)
HX_LOCAL_STACK_FRAME(_hx_pos_fff8ccda04e6eada_55_quadSVG,"TrilateralSVG","quadSVG",0xa5085e67,"TrilateralSVG.quadSVG","TrilateralSVG.hx",55,0x2fab8cc6)
HX_LOCAL_STACK_FRAME(_hx_pos_fff8ccda04e6eada_50_quadSVG,"TrilateralSVG","quadSVG",0xa5085e67,"TrilateralSVG.quadSVG","TrilateralSVG.hx",50,0x2fab8cc6)

void TrilateralSVG_obj::__construct( ::gluon::webgl::native::GLContext gl){
            	HX_GC_STACKFRAME(&_hx_pos_fff8ccda04e6eada_21_new)
HXLINE(  25)		this->penNodule =  ::trilateral3::nodule::PenNodule_obj::__alloc( HX_CTX ,null());
HXLINE(  23)		this->cubictest_d = HX_("M100,200 C100,100 250,100 250,200S400,300 400,200",b0,60,65,bc);
HXLINE(  22)		this->quadtest_d = HX_("M200,300 Q400,50 600,300 T1000,300",c7,a8,bf,30);
HXLINE(  27)		super::__construct(gl);
            	}

Dynamic TrilateralSVG_obj::__CreateEmpty() { return new TrilateralSVG_obj; }

void *TrilateralSVG_obj::_hx_vtable = 0;

Dynamic TrilateralSVG_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TrilateralSVG_obj > _hx_result = new TrilateralSVG_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TrilateralSVG_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1a013729) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1a013729;
	} else {
		return inClassId==(int)0x643fe68c;
	}
}

void TrilateralSVG_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_fff8ccda04e6eada_30_draw)
HXLINE(  31)		this->dataGL =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("get_data",b3,11,1e,c2),this->penNodule->get_data_dyn())
            			->setFixed(1,HX_("get_size",4a,5c,0e,cc),this->penNodule->get_size_dyn()));
HXLINE(  33)		this->pen = this->penNodule->pen;
HXLINE(  34)		this->pen->currentColor = -16776961;
HXLINE(  35)		this->cubicSVG();
HXLINE(  36)		this->pen->currentColor = -16776961;
HXLINE(  37)		this->quadSVG();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrilateralSVG_obj,draw,(void))

void TrilateralSVG_obj::cubicSVG(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(5)
            		int _hx_run(int colour,Float x,Float y,Float x_,Float y_){
            			HX_GC_STACKFRAME(&_hx_pos_fff8ccda04e6eada_44_cubicSVG)
HXLINE(  44)			return ::Math_obj::round((( (Float)(colour) ) - (x * y)));
            		}
            		HX_END_LOCAL_FUNC5(return)

            	HX_GC_STACKFRAME(&_hx_pos_fff8ccda04e6eada_39_cubicSVG)
HXLINE(  40)		 ::trilateral3::drawing::Sketch sketch =  ::trilateral3::drawing::Sketch_obj::__alloc( HX_CTX ,this->pen,4,3);
HXLINE(  41)		sketch->width = ( (Float)(20) );
HXLINE(  43)		sketch->colourFunction =  ::Dynamic(new _hx_Closure_0());
HXLINE(  46)		 ::justPath::transform::TranslationContext translateContext =  ::justPath::transform::TranslationContext_obj::__alloc( HX_CTX ,sketch,( (Float)(50) ),( (Float)(200) ));
HXLINE(  47)		 ::justPath::SvgPath p =  ::justPath::SvgPath_obj::__alloc( HX_CTX ,translateContext);
HXLINE(  48)		p->parse(this->cubictest_d);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrilateralSVG_obj,cubicSVG,(void))

void TrilateralSVG_obj::quadSVG(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(5)
            		Float _hx_run(Float width,Float x,Float y,Float x_,Float y_){
            			HX_GC_STACKFRAME(&_hx_pos_fff8ccda04e6eada_55_quadSVG)
HXLINE(  55)			return (width + ((Float)0.016));
            		}
            		HX_END_LOCAL_FUNC5(return)

            	HX_GC_STACKFRAME(&_hx_pos_fff8ccda04e6eada_50_quadSVG)
HXLINE(  51)		 ::trilateral3::drawing::Sketch sketch =  ::trilateral3::drawing::Sketch_obj::__alloc( HX_CTX ,this->pen,4,3);
HXLINE(  52)		sketch->width = ( (Float)(5) );
HXLINE(  54)		sketch->widthFunction =  ::Dynamic(new _hx_Closure_0());
HXLINE(  57)		 ::justPath::transform::TranslationContext translateContext =  ::justPath::transform::TranslationContext_obj::__alloc( HX_CTX ,sketch,( (Float)(-100) ),( (Float)(300) ));
HXLINE(  58)		 ::justPath::SvgPath p =  ::justPath::SvgPath_obj::__alloc( HX_CTX ,translateContext);
HXLINE(  59)		p->parse(this->quadtest_d);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrilateralSVG_obj,quadSVG,(void))


::hx::ObjectPtr< TrilateralSVG_obj > TrilateralSVG_obj::__new( ::gluon::webgl::native::GLContext gl) {
	::hx::ObjectPtr< TrilateralSVG_obj > __this = new TrilateralSVG_obj();
	__this->__construct(gl);
	return __this;
}

::hx::ObjectPtr< TrilateralSVG_obj > TrilateralSVG_obj::__alloc(::hx::Ctx *_hx_ctx, ::gluon::webgl::native::GLContext gl) {
	TrilateralSVG_obj *__this = (TrilateralSVG_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TrilateralSVG_obj), true, "TrilateralSVG"));
	*(void **)__this = TrilateralSVG_obj::_hx_vtable;
	__this->__construct(gl);
	return __this;
}

TrilateralSVG_obj::TrilateralSVG_obj()
{
}

void TrilateralSVG_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TrilateralSVG);
	HX_MARK_MEMBER_NAME(quadtest_d,"quadtest_d");
	HX_MARK_MEMBER_NAME(cubictest_d,"cubictest_d");
	HX_MARK_MEMBER_NAME(pen,"pen");
	HX_MARK_MEMBER_NAME(penNodule,"penNodule");
	 ::kitGL::gluon::Ply_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TrilateralSVG_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(quadtest_d,"quadtest_d");
	HX_VISIT_MEMBER_NAME(cubictest_d,"cubictest_d");
	HX_VISIT_MEMBER_NAME(pen,"pen");
	HX_VISIT_MEMBER_NAME(penNodule,"penNodule");
	 ::kitGL::gluon::Ply_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TrilateralSVG_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { return ::hx::Val( pen ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quadSVG") ) { return ::hx::Val( quadSVG_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cubicSVG") ) { return ::hx::Val( cubicSVG_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"penNodule") ) { return ::hx::Val( penNodule ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quadtest_d") ) { return ::hx::Val( quadtest_d ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cubictest_d") ) { return ::hx::Val( cubictest_d ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TrilateralSVG_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { pen=inValue.Cast<  ::trilateral3::drawing::Pen >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"penNodule") ) { penNodule=inValue.Cast<  ::trilateral3::nodule::PenNodule >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quadtest_d") ) { quadtest_d=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cubictest_d") ) { cubictest_d=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TrilateralSVG_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("quadtest_d",fe,db,ed,08));
	outFields->push(HX_("cubictest_d",c1,84,2e,d8));
	outFields->push(HX_("pen",d9,54,55,00));
	outFields->push(HX_("penNodule",c4,02,81,14));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TrilateralSVG_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(TrilateralSVG_obj,quadtest_d),HX_("quadtest_d",fe,db,ed,08)},
	{::hx::fsString,(int)offsetof(TrilateralSVG_obj,cubictest_d),HX_("cubictest_d",c1,84,2e,d8)},
	{::hx::fsObject /*  ::trilateral3::drawing::Pen */ ,(int)offsetof(TrilateralSVG_obj,pen),HX_("pen",d9,54,55,00)},
	{::hx::fsObject /*  ::trilateral3::nodule::PenNodule */ ,(int)offsetof(TrilateralSVG_obj,penNodule),HX_("penNodule",c4,02,81,14)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TrilateralSVG_obj_sStaticStorageInfo = 0;
#endif

static ::String TrilateralSVG_obj_sMemberFields[] = {
	HX_("quadtest_d",fe,db,ed,08),
	HX_("cubictest_d",c1,84,2e,d8),
	HX_("pen",d9,54,55,00),
	HX_("penNodule",c4,02,81,14),
	HX_("draw",04,2c,70,42),
	HX_("cubicSVG",3a,13,8d,05),
	HX_("quadSVG",dd,83,f1,3e),
	::String(null()) };

::hx::Class TrilateralSVG_obj::__mClass;

void TrilateralSVG_obj::__register()
{
	TrilateralSVG_obj _hx_dummy;
	TrilateralSVG_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TrilateralSVG",f8,a0,88,1b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TrilateralSVG_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TrilateralSVG_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TrilateralSVG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TrilateralSVG_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

