// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TrilateralTriangle
#include <TrilateralTriangle.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLContext
#include <gluon/webgl/native/GLContext.h>
#endif
#ifndef INCLUDED_justPath_IPathContext
#include <justPath/IPathContext.h>
#endif
#ifndef INCLUDED_kitGL_gluon_InterleaveAlterGL
#include <kitGL/gluon/InterleaveAlterGL.h>
#endif
#ifndef INCLUDED_trilateral3_Trilateral
#include <trilateral3/Trilateral.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Pen
#include <trilateral3/drawing/Pen.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Sketch
#include <trilateral3/drawing/Sketch.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif
#ifndef INCLUDED_trilateral3_nodule_PenNodule
#include <trilateral3/nodule/PenNodule.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferView
#include <typedarray/ArrayBufferView.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferViewBase
#include <typedarray/ArrayBufferViewBase.h>
#endif
#ifndef INCLUDED_typedarray_Float32ArrayImpl
#include <typedarray/Float32ArrayImpl.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eea6cf277589ad4e_21_new,"TrilateralTriangle","new",0x9b865ea6,"TrilateralTriangle.new","TrilateralTriangle.hx",21,0xd75eb78a)
HX_LOCAL_STACK_FRAME(_hx_pos_eea6cf277589ad4e_28_draw,"TrilateralTriangle","draw",0x737a1afe,"TrilateralTriangle.draw","TrilateralTriangle.hx",28,0xd75eb78a)
HX_LOCAL_STACK_FRAME(_hx_pos_eea6cf277589ad4e_61_renderDraw,"TrilateralTriangle","renderDraw",0x8da08cf4,"TrilateralTriangle.renderDraw","TrilateralTriangle.hx",61,0xd75eb78a)

void TrilateralTriangle_obj::__construct( ::gluon::webgl::native::GLContext gl){
            	HX_GC_STACKFRAME(&_hx_pos_eea6cf277589ad4e_21_new)
HXLINE(  23)		this->penNodule =  ::trilateral3::nodule::PenNodule_obj::__alloc( HX_CTX ,null());
HXLINE(  25)		super::__construct(gl);
            	}

Dynamic TrilateralTriangle_obj::__CreateEmpty() { return new TrilateralTriangle_obj; }

void *TrilateralTriangle_obj::_hx_vtable = 0;

Dynamic TrilateralTriangle_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TrilateralTriangle_obj > _hx_result = new TrilateralTriangle_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TrilateralTriangle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1c3f678c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1c3f678c;
	} else {
		return inClassId==(int)0x3208b674;
	}
}

void TrilateralTriangle_obj::draw(){
            	HX_GC_STACKFRAME(&_hx_pos_eea6cf277589ad4e_28_draw)
HXLINE(  29)		this->interleaveDataGL =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("get_data",b3,11,1e,c2),this->penNodule->get_data_dyn())
            			->setFixed(1,HX_("get_size",4a,5c,0e,cc),this->penNodule->get_size_dyn()));
HXLINE(  30)		this->pen = this->penNodule->pen;
HXLINE(  31)		{
HXLINE(  31)			 ::trilateral3::drawing::Pen _this = this->pen;
HXDLIN(  31)			_this->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(((Float)100.),((Float)100.),((Float)0.),((Float)500.),((Float)500.),((Float)0.),((Float)100.),((Float)500.),((Float)0.));
HXDLIN(  31)			if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
HXLINE(  31)				_this->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
            			}
HXDLIN(  31)			_this->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
            		}
HXLINE(  34)		{
HXLINE(  34)			 ::trilateral3::drawing::Pen _this1 = this->pen;
HXDLIN(  34)			_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(((Float)100.),((Float)100.),((Float)0.),((Float)500.),((Float)100.),((Float)0.),((Float)500.),((Float)500.),((Float)0.));
HXDLIN(  34)			if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
HXLINE(  34)				_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
            			}
HXDLIN(  34)			_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
            		}
HXLINE(  37)		{
HXLINE(  37)			 ::trilateral3::drawing::Pen _this2 = this->pen;
HXDLIN(  37)			_this2->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(((Float)300.),((Float)300.),((Float)0.),((Float)400.),((Float)300.),((Float)0.),((Float)400.),((Float)400.),((Float)0.));
HXDLIN(  37)			if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
HXLINE(  37)				_this2->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
            			}
HXDLIN(  37)			_this2->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
            		}
HXLINE(  41)		{
HXLINE(  41)			 ::trilateral3::drawing::Pen _this3 = this->pen;
HXDLIN(  41)			_this3->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(0);
HXDLIN(  41)			_this3->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(0);
            		}
HXLINE(  42)		{
HXLINE(  42)			 ::trilateral3::drawing::Pen _this4 = this->pen;
HXDLIN(  42)			int color = 16777215;
HXDLIN(  42)			if ((color == -1)) {
HXLINE(  42)				color = _this4->currentColor;
            			}
HXDLIN(  42)			_this4->colorType->__Field(HX_("colorTriangles",c8,da,ed,e6),::hx::paccDynamic)(color,1);
            		}
HXLINE(  43)		{
HXLINE(  43)			 ::trilateral3::drawing::Pen _this5 = this->pen;
HXDLIN(  43)			int color1 = -65536;
HXDLIN(  43)			if ((color1 == -1)) {
HXLINE(  43)				color1 = _this5->currentColor;
            			}
HXDLIN(  43)			_this5->colorType->__Field(HX_("colorTriangles",c8,da,ed,e6),::hx::paccDynamic)(color1,1);
            		}
HXLINE(  44)		{
HXLINE(  44)			 ::trilateral3::drawing::Pen _this6 = this->pen;
HXDLIN(  44)			int color2 = -256;
HXDLIN(  44)			if ((color2 == -1)) {
HXLINE(  44)				color2 = _this6->currentColor;
            			}
HXDLIN(  44)			_this6->colorType->__Field(HX_("colorTriangles",c8,da,ed,e6),::hx::paccDynamic)(color2,1);
            		}
HXLINE(  46)		 ::trilateral3::drawing::Sketch sketch =  ::trilateral3::drawing::Sketch_obj::__alloc( HX_CTX ,this->pen,4,3);
HXLINE(  48)		sketch->width = ( (Float)(30) );
HXLINE(  49)		Float start = ( (Float)(this->pen->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) );
HXLINE(  50)		sketch->moveTo(((Float)50.),((Float)50.));
HXLINE(  51)		{
HXLINE(  51)			bool repeat;
HXDLIN(  51)			if ((sketch->x == ((Float)550.))) {
HXLINE(  51)				repeat = (sketch->y == ((Float)50.));
            			}
            			else {
HXLINE(  51)				repeat = false;
            			}
HXDLIN(  51)			if (!(repeat)) {
HXLINE(  51)				if (::hx::IsNotNull( sketch->widthFunction )) {
HXLINE(  51)					sketch->width = ( (Float)(sketch->widthFunction(sketch->width,sketch->x,sketch->y,((Float)550.),((Float)50.))) );
            				}
HXDLIN(  51)				if (::hx::IsNotNull( sketch->colourFunction )) {
HXLINE(  51)					sketch->pen->currentColor = ( (int)(sketch->colourFunction(sketch->pen->currentColor,sketch->x,sketch->y,((Float)550.),((Float)50.))) );
            				}
HXDLIN(  51)				sketch->line(((Float)550.),((Float)50.));
HXDLIN(  51)				int l = sketch->points->length;
HXDLIN(  51)				::Array< Float > p = sketch->points->__get((l - 1)).StaticCast< ::Array< Float > >();
HXDLIN(  51)				int l2 = p->length;
HXDLIN(  51)				p[l2] = ((Float)550.);
HXDLIN(  51)				p[(l2 + 1)] = ((Float)50.);
HXDLIN(  51)				{
HXLINE(  51)					 ::Dynamic d = sketch->dim->__get((sketch->dim->length - 1));
HXDLIN(  51)					if (::hx::IsLess( ((Float)550.),d->__Field(HX_("minX",86,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  51)						d->__SetField(HX_("minX",86,4e,5c,48),((Float)550.),::hx::paccDynamic);
            					}
HXDLIN(  51)					if (::hx::IsGreater( ((Float)550.),d->__Field(HX_("maxX",34,45,56,48),::hx::paccDynamic) )) {
HXLINE(  51)						d->__SetField(HX_("maxX",34,45,56,48),((Float)550.),::hx::paccDynamic);
            					}
HXDLIN(  51)					if (::hx::IsLess( ((Float)50.),d->__Field(HX_("minY",87,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  51)						d->__SetField(HX_("minY",87,4e,5c,48),((Float)50.),::hx::paccDynamic);
            					}
HXDLIN(  51)					if (::hx::IsGreater( ((Float)50.),d->__Field(HX_("maxY",35,45,56,48),::hx::paccDynamic) )) {
HXLINE(  51)						d->__SetField(HX_("maxY",35,45,56,48),((Float)50.),::hx::paccDynamic);
            					}
            				}
HXDLIN(  51)				sketch->x = ((Float)550.);
HXDLIN(  51)				sketch->y = ((Float)50.);
            			}
            		}
HXLINE(  52)		{
HXLINE(  52)			bool repeat1;
HXDLIN(  52)			if ((sketch->x == ((Float)550.))) {
HXLINE(  52)				repeat1 = (sketch->y == ((Float)550.));
            			}
            			else {
HXLINE(  52)				repeat1 = false;
            			}
HXDLIN(  52)			if (!(repeat1)) {
HXLINE(  52)				if (::hx::IsNotNull( sketch->widthFunction )) {
HXLINE(  52)					sketch->width = ( (Float)(sketch->widthFunction(sketch->width,sketch->x,sketch->y,((Float)550.),((Float)550.))) );
            				}
HXDLIN(  52)				if (::hx::IsNotNull( sketch->colourFunction )) {
HXLINE(  52)					sketch->pen->currentColor = ( (int)(sketch->colourFunction(sketch->pen->currentColor,sketch->x,sketch->y,((Float)550.),((Float)550.))) );
            				}
HXDLIN(  52)				sketch->line(((Float)550.),((Float)550.));
HXDLIN(  52)				int l = sketch->points->length;
HXDLIN(  52)				::Array< Float > p = sketch->points->__get((l - 1)).StaticCast< ::Array< Float > >();
HXDLIN(  52)				int l2 = p->length;
HXDLIN(  52)				p[l2] = ((Float)550.);
HXDLIN(  52)				p[(l2 + 1)] = ((Float)550.);
HXDLIN(  52)				{
HXLINE(  52)					 ::Dynamic d = sketch->dim->__get((sketch->dim->length - 1));
HXDLIN(  52)					if (::hx::IsLess( ((Float)550.),d->__Field(HX_("minX",86,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  52)						d->__SetField(HX_("minX",86,4e,5c,48),((Float)550.),::hx::paccDynamic);
            					}
HXDLIN(  52)					if (::hx::IsGreater( ((Float)550.),d->__Field(HX_("maxX",34,45,56,48),::hx::paccDynamic) )) {
HXLINE(  52)						d->__SetField(HX_("maxX",34,45,56,48),((Float)550.),::hx::paccDynamic);
            					}
HXDLIN(  52)					if (::hx::IsLess( ((Float)550.),d->__Field(HX_("minY",87,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  52)						d->__SetField(HX_("minY",87,4e,5c,48),((Float)550.),::hx::paccDynamic);
            					}
HXDLIN(  52)					if (::hx::IsGreater( ((Float)550.),d->__Field(HX_("maxY",35,45,56,48),::hx::paccDynamic) )) {
HXLINE(  52)						d->__SetField(HX_("maxY",35,45,56,48),((Float)550.),::hx::paccDynamic);
            					}
            				}
HXDLIN(  52)				sketch->x = ((Float)550.);
HXDLIN(  52)				sketch->y = ((Float)550.);
            			}
            		}
HXLINE(  53)		{
HXLINE(  53)			bool repeat2;
HXDLIN(  53)			if ((sketch->x == ((Float)50.))) {
HXLINE(  53)				repeat2 = (sketch->y == ((Float)550.));
            			}
            			else {
HXLINE(  53)				repeat2 = false;
            			}
HXDLIN(  53)			if (!(repeat2)) {
HXLINE(  53)				if (::hx::IsNotNull( sketch->widthFunction )) {
HXLINE(  53)					sketch->width = ( (Float)(sketch->widthFunction(sketch->width,sketch->x,sketch->y,((Float)50.),((Float)550.))) );
            				}
HXDLIN(  53)				if (::hx::IsNotNull( sketch->colourFunction )) {
HXLINE(  53)					sketch->pen->currentColor = ( (int)(sketch->colourFunction(sketch->pen->currentColor,sketch->x,sketch->y,((Float)50.),((Float)550.))) );
            				}
HXDLIN(  53)				sketch->line(((Float)50.),((Float)550.));
HXDLIN(  53)				int l = sketch->points->length;
HXDLIN(  53)				::Array< Float > p = sketch->points->__get((l - 1)).StaticCast< ::Array< Float > >();
HXDLIN(  53)				int l2 = p->length;
HXDLIN(  53)				p[l2] = ((Float)50.);
HXDLIN(  53)				p[(l2 + 1)] = ((Float)550.);
HXDLIN(  53)				{
HXLINE(  53)					 ::Dynamic d = sketch->dim->__get((sketch->dim->length - 1));
HXDLIN(  53)					if (::hx::IsLess( ((Float)50.),d->__Field(HX_("minX",86,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  53)						d->__SetField(HX_("minX",86,4e,5c,48),((Float)50.),::hx::paccDynamic);
            					}
HXDLIN(  53)					if (::hx::IsGreater( ((Float)50.),d->__Field(HX_("maxX",34,45,56,48),::hx::paccDynamic) )) {
HXLINE(  53)						d->__SetField(HX_("maxX",34,45,56,48),((Float)50.),::hx::paccDynamic);
            					}
HXDLIN(  53)					if (::hx::IsLess( ((Float)550.),d->__Field(HX_("minY",87,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  53)						d->__SetField(HX_("minY",87,4e,5c,48),((Float)550.),::hx::paccDynamic);
            					}
HXDLIN(  53)					if (::hx::IsGreater( ((Float)550.),d->__Field(HX_("maxY",35,45,56,48),::hx::paccDynamic) )) {
HXLINE(  53)						d->__SetField(HX_("maxY",35,45,56,48),((Float)550.),::hx::paccDynamic);
            					}
            				}
HXDLIN(  53)				sketch->x = ((Float)50.);
HXDLIN(  53)				sketch->y = ((Float)550.);
            			}
            		}
HXLINE(  54)		{
HXLINE(  54)			bool repeat3;
HXDLIN(  54)			if ((sketch->x == ((Float)50.))) {
HXLINE(  54)				repeat3 = (sketch->y == ((Float)50.));
            			}
            			else {
HXLINE(  54)				repeat3 = false;
            			}
HXDLIN(  54)			if (!(repeat3)) {
HXLINE(  54)				if (::hx::IsNotNull( sketch->widthFunction )) {
HXLINE(  54)					sketch->width = ( (Float)(sketch->widthFunction(sketch->width,sketch->x,sketch->y,((Float)50.),((Float)50.))) );
            				}
HXDLIN(  54)				if (::hx::IsNotNull( sketch->colourFunction )) {
HXLINE(  54)					sketch->pen->currentColor = ( (int)(sketch->colourFunction(sketch->pen->currentColor,sketch->x,sketch->y,((Float)50.),((Float)50.))) );
            				}
HXDLIN(  54)				sketch->line(((Float)50.),((Float)50.));
HXDLIN(  54)				int l = sketch->points->length;
HXDLIN(  54)				::Array< Float > p = sketch->points->__get((l - 1)).StaticCast< ::Array< Float > >();
HXDLIN(  54)				int l2 = p->length;
HXDLIN(  54)				p[l2] = ((Float)50.);
HXDLIN(  54)				p[(l2 + 1)] = ((Float)50.);
HXDLIN(  54)				{
HXLINE(  54)					 ::Dynamic d = sketch->dim->__get((sketch->dim->length - 1));
HXDLIN(  54)					if (::hx::IsLess( ((Float)50.),d->__Field(HX_("minX",86,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  54)						d->__SetField(HX_("minX",86,4e,5c,48),((Float)50.),::hx::paccDynamic);
            					}
HXDLIN(  54)					if (::hx::IsGreater( ((Float)50.),d->__Field(HX_("maxX",34,45,56,48),::hx::paccDynamic) )) {
HXLINE(  54)						d->__SetField(HX_("maxX",34,45,56,48),((Float)50.),::hx::paccDynamic);
            					}
HXDLIN(  54)					if (::hx::IsLess( ((Float)50.),d->__Field(HX_("minY",87,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  54)						d->__SetField(HX_("minY",87,4e,5c,48),((Float)50.),::hx::paccDynamic);
            					}
HXDLIN(  54)					if (::hx::IsGreater( ((Float)50.),d->__Field(HX_("maxY",35,45,56,48),::hx::paccDynamic) )) {
HXLINE(  54)						d->__SetField(HX_("maxY",35,45,56,48),((Float)50.),::hx::paccDynamic);
            					}
            				}
HXDLIN(  54)				sketch->x = ((Float)50.);
HXDLIN(  54)				sketch->y = ((Float)50.);
            			}
            		}
HXLINE(  55)		Float end = ( (Float)(this->pen->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) );
HXLINE(  56)		{
HXLINE(  56)			 ::trilateral3::drawing::Pen _this7 = this->pen;
HXDLIN(  56)			_this7->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(start);
HXDLIN(  56)			_this7->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(start);
            		}
HXLINE(  57)		int numberTriangles = ::Std_obj::_hx_int((end - start));
HXLINE(  58)		{
HXLINE(  58)			 ::trilateral3::drawing::Pen _this8 = this->pen;
HXDLIN(  58)			int color3 = -16776961;
HXDLIN(  58)			if ((color3 == -1)) {
HXLINE(  58)				color3 = _this8->currentColor;
            			}
HXDLIN(  58)			_this8->colorType->__Field(HX_("colorTriangles",c8,da,ed,e6),::hx::paccDynamic)(color3,numberTriangles);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrilateralTriangle_obj,draw,(void))

void TrilateralTriangle_obj::renderDraw(){
            	HX_STACKFRAME(&_hx_pos_eea6cf277589ad4e_61_renderDraw)
            	}



::hx::ObjectPtr< TrilateralTriangle_obj > TrilateralTriangle_obj::__new( ::gluon::webgl::native::GLContext gl) {
	::hx::ObjectPtr< TrilateralTriangle_obj > __this = new TrilateralTriangle_obj();
	__this->__construct(gl);
	return __this;
}

::hx::ObjectPtr< TrilateralTriangle_obj > TrilateralTriangle_obj::__alloc(::hx::Ctx *_hx_ctx, ::gluon::webgl::native::GLContext gl) {
	TrilateralTriangle_obj *__this = (TrilateralTriangle_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TrilateralTriangle_obj), true, "TrilateralTriangle"));
	*(void **)__this = TrilateralTriangle_obj::_hx_vtable;
	__this->__construct(gl);
	return __this;
}

TrilateralTriangle_obj::TrilateralTriangle_obj()
{
}

void TrilateralTriangle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TrilateralTriangle);
	HX_MARK_MEMBER_NAME(pen,"pen");
	HX_MARK_MEMBER_NAME(penNodule,"penNodule");
	 ::kitGL::gluon::InterleaveAlterGL_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TrilateralTriangle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pen,"pen");
	HX_VISIT_MEMBER_NAME(penNodule,"penNodule");
	 ::kitGL::gluon::InterleaveAlterGL_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TrilateralTriangle_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { return ::hx::Val( pen ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"penNodule") ) { return ::hx::Val( penNodule ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderDraw") ) { return ::hx::Val( renderDraw_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TrilateralTriangle_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { pen=inValue.Cast<  ::trilateral3::drawing::Pen >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"penNodule") ) { penNodule=inValue.Cast<  ::trilateral3::nodule::PenNodule >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TrilateralTriangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pen",d9,54,55,00));
	outFields->push(HX_("penNodule",c4,02,81,14));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TrilateralTriangle_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::trilateral3::drawing::Pen */ ,(int)offsetof(TrilateralTriangle_obj,pen),HX_("pen",d9,54,55,00)},
	{::hx::fsObject /*  ::trilateral3::nodule::PenNodule */ ,(int)offsetof(TrilateralTriangle_obj,penNodule),HX_("penNodule",c4,02,81,14)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TrilateralTriangle_obj_sStaticStorageInfo = 0;
#endif

static ::String TrilateralTriangle_obj_sMemberFields[] = {
	HX_("pen",d9,54,55,00),
	HX_("penNodule",c4,02,81,14),
	HX_("draw",04,2c,70,42),
	HX_("renderDraw",7a,26,7a,df),
	::String(null()) };

::hx::Class TrilateralTriangle_obj::__mClass;

void TrilateralTriangle_obj::__register()
{
	TrilateralTriangle_obj _hx_dummy;
	TrilateralTriangle_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TrilateralTriangle",b4,d3,44,da);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TrilateralTriangle_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TrilateralTriangle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TrilateralTriangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TrilateralTriangle_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

