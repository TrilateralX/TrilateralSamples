// Generated by Haxe 4.2.0-rc.1+3ef20749a
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_
#include <dsHelper/flatInterleave/_FloatColorTriangles/FloatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif

namespace dsHelper{
namespace flatInterleave{
namespace _FloatColorTriangles{

void FloatColorTriangles_Impl__obj::__construct() { }

Dynamic FloatColorTriangles_Impl__obj::__CreateEmpty() { return new FloatColorTriangles_Impl__obj; }

void *FloatColorTriangles_Impl__obj::_hx_vtable = 0;

Dynamic FloatColorTriangles_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FloatColorTriangles_Impl__obj > _hx_result = new FloatColorTriangles_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FloatColorTriangles_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x76c05f06;
}

Float FloatColorTriangles_Impl__obj::get_ax( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = this1->byteOffset;
	bool k;
	if ((pos >= 0)) {
		k = ((pos + 4) > _this->length);
	}
	else {
		k = true;
	}
	if (k) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	int k1 = (::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21);
	 ::haxe::io::Bytes _this1 = this1->bytes;
	int pos1 = (((k1 + 2) << 2) + this1->byteOffset);
	bool _hx_tmp;
	if ((pos1 >= 0)) {
		_hx_tmp = ((pos1 + 4) > _this1->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return  ::__hxcpp_memory_get_float(_this1->b,pos1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_ax,return )

Float FloatColorTriangles_Impl__obj::set_ax( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_ax,return )

Float FloatColorTriangles_Impl__obj::get_ay( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = this1->byteOffset;
	bool k;
	if ((pos >= 0)) {
		k = ((pos + 4) > _this->length);
	}
	else {
		k = true;
	}
	if (k) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 1);
	 ::haxe::io::Bytes _this1 = this1->bytes;
	int pos1 = (((k1 + 2) << 2) + this1->byteOffset);
	bool _hx_tmp;
	if ((pos1 >= 0)) {
		_hx_tmp = ((pos1 + 4) > _this1->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return  ::__hxcpp_memory_get_float(_this1->b,pos1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_ay,return )

Float FloatColorTriangles_Impl__obj::set_ay( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 1) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_ay,return )

Float FloatColorTriangles_Impl__obj::get_az( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = this1->byteOffset;
	bool k;
	if ((pos >= 0)) {
		k = ((pos + 4) > _this->length);
	}
	else {
		k = true;
	}
	if (k) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 2);
	 ::haxe::io::Bytes _this1 = this1->bytes;
	int pos1 = (((k1 + 2) << 2) + this1->byteOffset);
	bool _hx_tmp;
	if ((pos1 >= 0)) {
		_hx_tmp = ((pos1 + 4) > _this1->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return  ::__hxcpp_memory_get_float(_this1->b,pos1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_az,return )

Float FloatColorTriangles_Impl__obj::set_az( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 2) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_az,return )

Float FloatColorTriangles_Impl__obj::get_redA( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = this1->byteOffset;
	bool k;
	if ((pos >= 0)) {
		k = ((pos + 4) > _this->length);
	}
	else {
		k = true;
	}
	if (k) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 3);
	 ::haxe::io::Bytes _this1 = this1->bytes;
	int pos1 = (((k1 + 2) << 2) + this1->byteOffset);
	bool _hx_tmp;
	if ((pos1 >= 0)) {
		_hx_tmp = ((pos1 + 4) > _this1->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return  ::__hxcpp_memory_get_float(_this1->b,pos1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_redA,return )

Float FloatColorTriangles_Impl__obj::set_redA( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 3) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_redA,return )

Float FloatColorTriangles_Impl__obj::get_bx( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = this1->byteOffset;
	bool k;
	if ((pos >= 0)) {
		k = ((pos + 4) > _this->length);
	}
	else {
		k = true;
	}
	if (k) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 7);
	 ::haxe::io::Bytes _this1 = this1->bytes;
	int pos1 = (((k1 + 2) << 2) + this1->byteOffset);
	bool _hx_tmp;
	if ((pos1 >= 0)) {
		_hx_tmp = ((pos1 + 4) > _this1->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return  ::__hxcpp_memory_get_float(_this1->b,pos1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_bx,return )

Float FloatColorTriangles_Impl__obj::set_bx( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 7) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_bx,return )

Float FloatColorTriangles_Impl__obj::get_by( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = this1->byteOffset;
	bool k;
	if ((pos >= 0)) {
		k = ((pos + 4) > _this->length);
	}
	else {
		k = true;
	}
	if (k) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 8);
	 ::haxe::io::Bytes _this1 = this1->bytes;
	int pos1 = (((k1 + 2) << 2) + this1->byteOffset);
	bool _hx_tmp;
	if ((pos1 >= 0)) {
		_hx_tmp = ((pos1 + 4) > _this1->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return  ::__hxcpp_memory_get_float(_this1->b,pos1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_by,return )

Float FloatColorTriangles_Impl__obj::set_by( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 8) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_by,return )

Float FloatColorTriangles_Impl__obj::get_bz( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = this1->byteOffset;
	bool k;
	if ((pos >= 0)) {
		k = ((pos + 4) > _this->length);
	}
	else {
		k = true;
	}
	if (k) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 9);
	 ::haxe::io::Bytes _this1 = this1->bytes;
	int pos1 = (((k1 + 2) << 2) + this1->byteOffset);
	bool _hx_tmp;
	if ((pos1 >= 0)) {
		_hx_tmp = ((pos1 + 4) > _this1->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return  ::__hxcpp_memory_get_float(_this1->b,pos1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_bz,return )

Float FloatColorTriangles_Impl__obj::set_bz( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 9) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_bz,return )

Float FloatColorTriangles_Impl__obj::set_redB( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 10) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_redB,return )

Float FloatColorTriangles_Impl__obj::get_cx( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = this1->byteOffset;
	bool k;
	if ((pos >= 0)) {
		k = ((pos + 4) > _this->length);
	}
	else {
		k = true;
	}
	if (k) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 14);
	 ::haxe::io::Bytes _this1 = this1->bytes;
	int pos1 = (((k1 + 2) << 2) + this1->byteOffset);
	bool _hx_tmp;
	if ((pos1 >= 0)) {
		_hx_tmp = ((pos1 + 4) > _this1->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return  ::__hxcpp_memory_get_float(_this1->b,pos1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_cx,return )

Float FloatColorTriangles_Impl__obj::set_cx( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 14) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_cx,return )

Float FloatColorTriangles_Impl__obj::get_cy( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = this1->byteOffset;
	bool k;
	if ((pos >= 0)) {
		k = ((pos + 4) > _this->length);
	}
	else {
		k = true;
	}
	if (k) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 15);
	 ::haxe::io::Bytes _this1 = this1->bytes;
	int pos1 = (((k1 + 2) << 2) + this1->byteOffset);
	bool _hx_tmp;
	if ((pos1 >= 0)) {
		_hx_tmp = ((pos1 + 4) > _this1->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return  ::__hxcpp_memory_get_float(_this1->b,pos1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_cy,return )

Float FloatColorTriangles_Impl__obj::set_cy( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 15) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_cy,return )

Float FloatColorTriangles_Impl__obj::get_cz( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = this1->byteOffset;
	bool k;
	if ((pos >= 0)) {
		k = ((pos + 4) > _this->length);
	}
	else {
		k = true;
	}
	if (k) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 16);
	 ::haxe::io::Bytes _this1 = this1->bytes;
	int pos1 = (((k1 + 2) << 2) + this1->byteOffset);
	bool _hx_tmp;
	if ((pos1 >= 0)) {
		_hx_tmp = ((pos1 + 4) > _this1->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return  ::__hxcpp_memory_get_float(_this1->b,pos1);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_cz,return )

Float FloatColorTriangles_Impl__obj::set_cz( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 16) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_cz,return )

Float FloatColorTriangles_Impl__obj::set_redC( ::haxe::io::ArrayBufferViewImpl this1,Float v){
	{
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		{
			int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 17) + 2);
			bool _hx_tmp;
			if ((index >= 0)) {
				_hx_tmp = (index < (this1->byteLength >> 2));
			}
			else {
				_hx_tmp = false;
			}
			if (_hx_tmp) {
				this1->bytes->setFloat(((index << 2) + this1->byteOffset),v);
			}
		}
	}
	return v;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_redC,return )

bool FloatColorTriangles_Impl__obj::triangle( ::haxe::io::ArrayBufferViewImpl this1,Float ax_,Float ay_,Float az_,Float bx_,Float by_,Float bz_,Float cx_,Float cy_,Float cz_){
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(this1,ax_);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(this1,ay_);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_az(this1,az_);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(this1,bx_);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(this1,by_);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bz(this1,bz_);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(this1,cx_);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(this1,cy_);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cz(this1,cz_);
	bool windingAdjusted = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::adjustWinding(this1);
	if (windingAdjusted) {
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(this1,ax_);
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(this1,ay_);
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(this1,cx_);
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(this1,cy_);
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(this1,bx_);
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(this1,by_);
	}
	return windingAdjusted;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(FloatColorTriangles_Impl__obj,triangle,return )

bool FloatColorTriangles_Impl__obj::adjustWinding( ::haxe::io::ArrayBufferViewImpl this1){
	Float _hx_tmp = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
	Float _hx_tmp1 = (_hx_tmp * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1));
	Float _hx_tmp2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1);
	Float _hx_tmp3 = (_hx_tmp1 - (_hx_tmp2 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1)));
	Float _hx_tmp4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1);
	Float _hx_tmp5 = (_hx_tmp4 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1));
	Float _hx_tmp6 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1);
	Float _hx_tmp7 = (_hx_tmp3 + (_hx_tmp5 - (_hx_tmp6 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1))));
	Float _hx_tmp8 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1);
	Float _hx_tmp9 = (_hx_tmp8 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1));
	Float _hx_tmp10 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
	return ((_hx_tmp7 + (_hx_tmp9 - (_hx_tmp10 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1)))) > 0);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,adjustWinding,return )

void FloatColorTriangles_Impl__obj::moveDelta( ::haxe::io::ArrayBufferViewImpl this1,Float dx,Float dy){
	{
		 ::haxe::io::ArrayBufferViewImpl _g = this1;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_g,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_g) + dx));
	}
	{
		 ::haxe::io::ArrayBufferViewImpl _g1 = this1;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_g1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_g1) + dy));
	}
	{
		 ::haxe::io::ArrayBufferViewImpl _g2 = this1;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_g2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_g2) + dx));
	}
	{
		 ::haxe::io::ArrayBufferViewImpl _g3 = this1;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_g3,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_g3) + dy));
	}
	{
		 ::haxe::io::ArrayBufferViewImpl _g4 = this1;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_g4,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_g4) + dx));
	}
	{
		 ::haxe::io::ArrayBufferViewImpl _g5 = this1;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_g5,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_g5) + dy));
	}
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatColorTriangles_Impl__obj,moveDelta,(void))

bool FloatColorTriangles_Impl__obj::fullHit( ::haxe::io::ArrayBufferViewImpl this1,Float px,Float py){
	bool _hx_tmp;
	bool _hx_tmp1;
	bool _hx_tmp2;
	Float _hx_tmp3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
	Float _hx_tmp4 = ::Math_obj::min(_hx_tmp3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1));
	if ((px > ::Math_obj::min(_hx_tmp4,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1)))) {
		Float _hx_tmp = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
		Float _hx_tmp1 = ::Math_obj::max(_hx_tmp,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1));
		_hx_tmp2 = (px < ::Math_obj::max(_hx_tmp1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1)));
	}
	else {
		_hx_tmp2 = false;
	}
	if (_hx_tmp2) {
		Float _hx_tmp = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1);
		Float _hx_tmp2 = ::Math_obj::min(_hx_tmp,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1));
		_hx_tmp1 = (py > ::Math_obj::min(_hx_tmp2,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1)));
	}
	else {
		_hx_tmp1 = false;
	}
	if (_hx_tmp1) {
		Float _hx_tmp1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1);
		Float _hx_tmp2 = ::Math_obj::max(_hx_tmp1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1));
		_hx_tmp = (py < ::Math_obj::max(_hx_tmp2,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1)));
	}
	else {
		_hx_tmp = false;
	}
	if (_hx_tmp) {
		return true;
	}
	Float planeAB = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1) - px);
	Float planeAB1 = (planeAB * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1) - py));
	Float planeAB2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1) - px);
	Float planeAB3 = (planeAB1 - (planeAB2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1) - py)));
	Float planeBC = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1) - px);
	Float planeBC1 = (planeBC * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1) - py));
	Float planeBC2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1) - px);
	Float planeBC3 = (planeBC1 - (planeBC2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1) - py)));
	Float planeCA = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1) - px);
	Float planeCA1 = (planeCA * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1) - py));
	Float planeCA2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1) - px);
	Float planeCA3 = (planeCA1 - (planeCA2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1) - py)));
	int _hx_tmp5 = ::Std_obj::_hx_int((::Math_obj::abs(planeAB3) / planeAB3));
	if ((_hx_tmp5 == ::Std_obj::_hx_int((::Math_obj::abs(planeBC3) / planeBC3)))) {
		int _hx_tmp = ::Std_obj::_hx_int((::Math_obj::abs(planeBC3) / planeBC3));
		return (_hx_tmp == ::Std_obj::_hx_int((::Math_obj::abs(planeCA3) / planeCA3)));
	}
	else {
		return false;
	}
	return false;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatColorTriangles_Impl__obj,fullHit,return )


FloatColorTriangles_Impl__obj::FloatColorTriangles_Impl__obj()
{
}

bool FloatColorTriangles_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"get_ax") ) { outValue = get_ax_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_ax") ) { outValue = set_ax_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_ay") ) { outValue = get_ay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_ay") ) { outValue = set_ay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_az") ) { outValue = get_az_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_az") ) { outValue = set_az_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_bx") ) { outValue = get_bx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_bx") ) { outValue = set_bx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_by") ) { outValue = get_by_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_by") ) { outValue = set_by_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_bz") ) { outValue = get_bz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_bz") ) { outValue = set_bz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cx") ) { outValue = get_cx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cx") ) { outValue = set_cx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cy") ) { outValue = get_cy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cy") ) { outValue = set_cy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cz") ) { outValue = get_cz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cz") ) { outValue = set_cz_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fullHit") ) { outValue = fullHit_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_redA") ) { outValue = get_redA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redA") ) { outValue = set_redA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redB") ) { outValue = set_redB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redC") ) { outValue = set_redC_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"triangle") ) { outValue = triangle_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"moveDelta") ) { outValue = moveDelta_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"adjustWinding") ) { outValue = adjustWinding_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FloatColorTriangles_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FloatColorTriangles_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FloatColorTriangles_Impl__obj::__mClass;

static ::String FloatColorTriangles_Impl__obj_sStaticFields[] = {
	HX_("get_ax",40,ec,2f,a3),
	HX_("set_ax",b4,40,78,6f),
	HX_("get_ay",41,ec,2f,a3),
	HX_("set_ay",b5,40,78,6f),
	HX_("get_az",42,ec,2f,a3),
	HX_("set_az",b6,40,78,6f),
	HX_("get_redA",59,09,62,cb),
	HX_("set_redA",cd,62,bf,79),
	HX_("get_bx",1f,ed,2f,a3),
	HX_("set_bx",93,41,78,6f),
	HX_("get_by",20,ed,2f,a3),
	HX_("set_by",94,41,78,6f),
	HX_("get_bz",21,ed,2f,a3),
	HX_("set_bz",95,41,78,6f),
	HX_("set_redB",ce,62,bf,79),
	HX_("get_cx",fe,ed,2f,a3),
	HX_("set_cx",72,42,78,6f),
	HX_("get_cy",ff,ed,2f,a3),
	HX_("set_cy",73,42,78,6f),
	HX_("get_cz",00,ee,2f,a3),
	HX_("set_cz",74,42,78,6f),
	HX_("set_redC",cf,62,bf,79),
	HX_("triangle",c8,be,c5,8d),
	HX_("adjustWinding",4b,e4,e6,bd),
	HX_("moveDelta",27,b7,ed,94),
	HX_("fullHit",04,38,2f,d0),
	::String(null())
};

void FloatColorTriangles_Impl__obj::__register()
{
	FloatColorTriangles_Impl__obj _hx_dummy;
	FloatColorTriangles_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_",a4,23,08,1f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FloatColorTriangles_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FloatColorTriangles_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FloatColorTriangles_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FloatColorTriangles_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FloatColorTriangles_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace dsHelper
} // end namespace flatInterleave
} // end namespace _FloatColorTriangles
