// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_
#include <dsHelper/flatInterleave/_FloatColorTriangles/FloatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferView
#include <typedarray/ArrayBufferView.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferViewBase
#include <typedarray/ArrayBufferViewBase.h>
#endif
#ifndef INCLUDED_typedarray_Float32ArrayImpl
#include <typedarray/Float32ArrayImpl.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_14_get_ax,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_ax",0xf7ee9bca,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_ax","dsHelper/flatInterleave/FloatColorTriangles.hx",14,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_16_set_ax,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_ax",0xc436f03e,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_ax","dsHelper/flatInterleave/FloatColorTriangles.hx",16,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_22_get_ay,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_ay",0xf7ee9bcb,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_ay","dsHelper/flatInterleave/FloatColorTriangles.hx",22,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_24_set_ay,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_ay",0xc436f03f,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_ay","dsHelper/flatInterleave/FloatColorTriangles.hx",24,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_30_get_az,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_az",0xf7ee9bcc,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_az","dsHelper/flatInterleave/FloatColorTriangles.hx",30,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_32_set_az,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_az",0xc436f040,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_az","dsHelper/flatInterleave/FloatColorTriangles.hx",32,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_39_get_redA,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_redA",0xd0d32f63,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_redA","dsHelper/flatInterleave/FloatColorTriangles.hx",39,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_41_set_redA,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_redA",0x7f3088d7,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_redA","dsHelper/flatInterleave/FloatColorTriangles.hx",41,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_79_get_bx,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_bx",0xf7ee9ca9,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_bx","dsHelper/flatInterleave/FloatColorTriangles.hx",79,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_81_set_bx,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_bx",0xc436f11d,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_bx","dsHelper/flatInterleave/FloatColorTriangles.hx",81,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_87_get_by,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_by",0xf7ee9caa,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_by","dsHelper/flatInterleave/FloatColorTriangles.hx",87,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_89_set_by,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_by",0xc436f11e,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_by","dsHelper/flatInterleave/FloatColorTriangles.hx",89,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_95_get_bz,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_bz",0xf7ee9cab,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_bz","dsHelper/flatInterleave/FloatColorTriangles.hx",95,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_97_set_bz,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_bz",0xc436f11f,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_bz","dsHelper/flatInterleave/FloatColorTriangles.hx",97,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_104_get_redB,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_redB",0xd0d32f64,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_redB","dsHelper/flatInterleave/FloatColorTriangles.hx",104,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_106_set_redB,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_redB",0x7f3088d8,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_redB","dsHelper/flatInterleave/FloatColorTriangles.hx",106,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_144_get_cx,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_cx",0xf7ee9d88,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_cx","dsHelper/flatInterleave/FloatColorTriangles.hx",144,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_146_set_cx,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_cx",0xc436f1fc,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_cx","dsHelper/flatInterleave/FloatColorTriangles.hx",146,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_152_get_cy,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_cy",0xf7ee9d89,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_cy","dsHelper/flatInterleave/FloatColorTriangles.hx",152,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_154_set_cy,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_cy",0xc436f1fd,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_cy","dsHelper/flatInterleave/FloatColorTriangles.hx",154,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_160_get_cz,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_cz",0xf7ee9d8a,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_cz","dsHelper/flatInterleave/FloatColorTriangles.hx",160,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_162_set_cz,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_cz",0xc436f1fe,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_cz","dsHelper/flatInterleave/FloatColorTriangles.hx",162,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_169_get_redC,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","get_redC",0xd0d32f65,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.get_redC","dsHelper/flatInterleave/FloatColorTriangles.hx",169,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_171_set_redC,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","set_redC",0x7f3088d9,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.set_redC","dsHelper/flatInterleave/FloatColorTriangles.hx",171,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_209_triangle,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","triangle",0x9336e4d2,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.triangle","dsHelper/flatInterleave/FloatColorTriangles.hx",209,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_232_adjustWinding,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","adjustWinding",0xee1d9a01,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.adjustWinding","dsHelper/flatInterleave/FloatColorTriangles.hx",232,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_288_moveDelta,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","moveDelta",0x527dd9dd,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.moveDelta","dsHelper/flatInterleave/FloatColorTriangles.hx",288,0x64596be3)
HX_LOCAL_STACK_FRAME(_hx_pos_5399da44140645b8_310_fullHit,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_","fullHit",0xa24a213a,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_.fullHit","dsHelper/flatInterleave/FloatColorTriangles.hx",310,0x64596be3)
namespace dsHelper{
namespace flatInterleave{
namespace _FloatColorTriangles{

void FloatColorTriangles_Impl__obj::__construct() { }

Dynamic FloatColorTriangles_Impl__obj::__CreateEmpty() { return new FloatColorTriangles_Impl__obj; }

void *FloatColorTriangles_Impl__obj::_hx_vtable = 0;

Dynamic FloatColorTriangles_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FloatColorTriangles_Impl__obj > _hx_result = new FloatColorTriangles_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FloatColorTriangles_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x76c05f06;
}

Float FloatColorTriangles_Impl__obj::get_ax( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_14_get_ax)
HXDLIN(  14)		if ((0 >= this1->length)) {
HXDLIN(  14)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  14)		int p = this1->byteOffset;
HXDLIN(  14)		int i = ((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 2);
HXDLIN(  14)		bool _hx_tmp;
HXDLIN(  14)		if ((i >= 0)) {
HXDLIN(  14)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  14)			_hx_tmp = true;
            		}
HXDLIN(  14)		if (_hx_tmp) {
HXDLIN(  14)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  14)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  14)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_ax,return )

Float FloatColorTriangles_Impl__obj::set_ax( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_16_set_ax)
HXLINE(  17)		{
HXLINE(  17)			if ((0 >= this1->length)) {
HXLINE(  17)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  17)			int p = this1->byteOffset;
HXDLIN(  17)			{
HXLINE(  17)				int i = ((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 2);
HXDLIN(  17)				{
HXLINE(  17)					bool _hx_tmp;
HXDLIN(  17)					if ((i >= 0)) {
HXLINE(  17)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  17)						_hx_tmp = true;
            					}
HXDLIN(  17)					if (_hx_tmp) {
HXLINE(  17)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  17)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  17)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  18)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_ax,return )

Float FloatColorTriangles_Impl__obj::get_ay( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_22_get_ay)
HXDLIN(  22)		if ((0 >= this1->length)) {
HXDLIN(  22)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  22)		int p = this1->byteOffset;
HXDLIN(  22)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 1) + 2);
HXDLIN(  22)		bool _hx_tmp;
HXDLIN(  22)		if ((i >= 0)) {
HXDLIN(  22)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  22)			_hx_tmp = true;
            		}
HXDLIN(  22)		if (_hx_tmp) {
HXDLIN(  22)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  22)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  22)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_ay,return )

Float FloatColorTriangles_Impl__obj::set_ay( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_24_set_ay)
HXLINE(  25)		{
HXLINE(  25)			if ((0 >= this1->length)) {
HXLINE(  25)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  25)			int p = this1->byteOffset;
HXDLIN(  25)			{
HXLINE(  25)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 1) + 2);
HXDLIN(  25)				{
HXLINE(  25)					bool _hx_tmp;
HXDLIN(  25)					if ((i >= 0)) {
HXLINE(  25)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  25)						_hx_tmp = true;
            					}
HXDLIN(  25)					if (_hx_tmp) {
HXLINE(  25)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  25)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  25)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  26)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_ay,return )

Float FloatColorTriangles_Impl__obj::get_az( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_30_get_az)
HXDLIN(  30)		if ((0 >= this1->length)) {
HXDLIN(  30)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  30)		int p = this1->byteOffset;
HXDLIN(  30)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 2) + 2);
HXDLIN(  30)		bool _hx_tmp;
HXDLIN(  30)		if ((i >= 0)) {
HXDLIN(  30)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  30)			_hx_tmp = true;
            		}
HXDLIN(  30)		if (_hx_tmp) {
HXDLIN(  30)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  30)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  30)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_az,return )

Float FloatColorTriangles_Impl__obj::set_az( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_32_set_az)
HXLINE(  33)		{
HXLINE(  33)			if ((0 >= this1->length)) {
HXLINE(  33)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  33)			int p = this1->byteOffset;
HXDLIN(  33)			{
HXLINE(  33)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 2) + 2);
HXDLIN(  33)				{
HXLINE(  33)					bool _hx_tmp;
HXDLIN(  33)					if ((i >= 0)) {
HXLINE(  33)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  33)						_hx_tmp = true;
            					}
HXDLIN(  33)					if (_hx_tmp) {
HXLINE(  33)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  33)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  33)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  34)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_az,return )

Float FloatColorTriangles_Impl__obj::get_redA( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_39_get_redA)
HXDLIN(  39)		if ((0 >= this1->length)) {
HXDLIN(  39)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  39)		int p = this1->byteOffset;
HXDLIN(  39)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 3) + 2);
HXDLIN(  39)		bool _hx_tmp;
HXDLIN(  39)		if ((i >= 0)) {
HXDLIN(  39)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  39)			_hx_tmp = true;
            		}
HXDLIN(  39)		if (_hx_tmp) {
HXDLIN(  39)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  39)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  39)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_redA,return )

Float FloatColorTriangles_Impl__obj::set_redA( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_41_set_redA)
HXLINE(  42)		{
HXLINE(  42)			if ((0 >= this1->length)) {
HXLINE(  42)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  42)			int p = this1->byteOffset;
HXDLIN(  42)			{
HXLINE(  42)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 3) + 2);
HXDLIN(  42)				{
HXLINE(  42)					bool _hx_tmp;
HXDLIN(  42)					if ((i >= 0)) {
HXLINE(  42)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  42)						_hx_tmp = true;
            					}
HXDLIN(  42)					if (_hx_tmp) {
HXLINE(  42)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  42)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  42)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  43)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_redA,return )

Float FloatColorTriangles_Impl__obj::get_bx( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_79_get_bx)
HXDLIN(  79)		if ((0 >= this1->length)) {
HXDLIN(  79)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  79)		int p = this1->byteOffset;
HXDLIN(  79)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 7) + 2);
HXDLIN(  79)		bool _hx_tmp;
HXDLIN(  79)		if ((i >= 0)) {
HXDLIN(  79)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  79)			_hx_tmp = true;
            		}
HXDLIN(  79)		if (_hx_tmp) {
HXDLIN(  79)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  79)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  79)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_bx,return )

Float FloatColorTriangles_Impl__obj::set_bx( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_81_set_bx)
HXLINE(  82)		{
HXLINE(  82)			if ((0 >= this1->length)) {
HXLINE(  82)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  82)			int p = this1->byteOffset;
HXDLIN(  82)			{
HXLINE(  82)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 7) + 2);
HXDLIN(  82)				{
HXLINE(  82)					bool _hx_tmp;
HXDLIN(  82)					if ((i >= 0)) {
HXLINE(  82)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  82)						_hx_tmp = true;
            					}
HXDLIN(  82)					if (_hx_tmp) {
HXLINE(  82)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  82)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  82)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  83)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_bx,return )

Float FloatColorTriangles_Impl__obj::get_by( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_87_get_by)
HXDLIN(  87)		if ((0 >= this1->length)) {
HXDLIN(  87)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  87)		int p = this1->byteOffset;
HXDLIN(  87)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 8) + 2);
HXDLIN(  87)		bool _hx_tmp;
HXDLIN(  87)		if ((i >= 0)) {
HXDLIN(  87)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  87)			_hx_tmp = true;
            		}
HXDLIN(  87)		if (_hx_tmp) {
HXDLIN(  87)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  87)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  87)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_by,return )

Float FloatColorTriangles_Impl__obj::set_by( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_89_set_by)
HXLINE(  90)		{
HXLINE(  90)			if ((0 >= this1->length)) {
HXLINE(  90)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  90)			int p = this1->byteOffset;
HXDLIN(  90)			{
HXLINE(  90)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 8) + 2);
HXDLIN(  90)				{
HXLINE(  90)					bool _hx_tmp;
HXDLIN(  90)					if ((i >= 0)) {
HXLINE(  90)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  90)						_hx_tmp = true;
            					}
HXDLIN(  90)					if (_hx_tmp) {
HXLINE(  90)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  90)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  90)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  91)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_by,return )

Float FloatColorTriangles_Impl__obj::get_bz( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_95_get_bz)
HXDLIN(  95)		if ((0 >= this1->length)) {
HXDLIN(  95)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  95)		int p = this1->byteOffset;
HXDLIN(  95)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 9) + 2);
HXDLIN(  95)		bool _hx_tmp;
HXDLIN(  95)		if ((i >= 0)) {
HXDLIN(  95)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN(  95)			_hx_tmp = true;
            		}
HXDLIN(  95)		if (_hx_tmp) {
HXDLIN(  95)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  95)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  95)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_bz,return )

Float FloatColorTriangles_Impl__obj::set_bz( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_97_set_bz)
HXLINE(  98)		{
HXLINE(  98)			if ((0 >= this1->length)) {
HXLINE(  98)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  98)			int p = this1->byteOffset;
HXDLIN(  98)			{
HXLINE(  98)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 9) + 2);
HXDLIN(  98)				{
HXLINE(  98)					bool _hx_tmp;
HXDLIN(  98)					if ((i >= 0)) {
HXLINE(  98)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE(  98)						_hx_tmp = true;
            					}
HXDLIN(  98)					if (_hx_tmp) {
HXLINE(  98)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  98)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN(  98)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  99)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_bz,return )

Float FloatColorTriangles_Impl__obj::get_redB( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_104_get_redB)
HXDLIN( 104)		if ((0 >= this1->length)) {
HXDLIN( 104)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 104)		int p = this1->byteOffset;
HXDLIN( 104)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 10) + 2);
HXDLIN( 104)		bool _hx_tmp;
HXDLIN( 104)		if ((i >= 0)) {
HXDLIN( 104)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN( 104)			_hx_tmp = true;
            		}
HXDLIN( 104)		if (_hx_tmp) {
HXDLIN( 104)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 104)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 104)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_redB,return )

Float FloatColorTriangles_Impl__obj::set_redB( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_106_set_redB)
HXLINE( 107)		{
HXLINE( 107)			if ((0 >= this1->length)) {
HXLINE( 107)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN( 107)			int p = this1->byteOffset;
HXDLIN( 107)			{
HXLINE( 107)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 10) + 2);
HXDLIN( 107)				{
HXLINE( 107)					bool _hx_tmp;
HXDLIN( 107)					if ((i >= 0)) {
HXLINE( 107)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE( 107)						_hx_tmp = true;
            					}
HXDLIN( 107)					if (_hx_tmp) {
HXLINE( 107)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 107)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 107)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 108)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_redB,return )

Float FloatColorTriangles_Impl__obj::get_cx( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_144_get_cx)
HXDLIN( 144)		if ((0 >= this1->length)) {
HXDLIN( 144)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 144)		int p = this1->byteOffset;
HXDLIN( 144)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 14) + 2);
HXDLIN( 144)		bool _hx_tmp;
HXDLIN( 144)		if ((i >= 0)) {
HXDLIN( 144)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN( 144)			_hx_tmp = true;
            		}
HXDLIN( 144)		if (_hx_tmp) {
HXDLIN( 144)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 144)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 144)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_cx,return )

Float FloatColorTriangles_Impl__obj::set_cx( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_146_set_cx)
HXLINE( 147)		{
HXLINE( 147)			if ((0 >= this1->length)) {
HXLINE( 147)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN( 147)			int p = this1->byteOffset;
HXDLIN( 147)			{
HXLINE( 147)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 14) + 2);
HXDLIN( 147)				{
HXLINE( 147)					bool _hx_tmp;
HXDLIN( 147)					if ((i >= 0)) {
HXLINE( 147)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE( 147)						_hx_tmp = true;
            					}
HXDLIN( 147)					if (_hx_tmp) {
HXLINE( 147)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 147)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 147)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 148)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_cx,return )

Float FloatColorTriangles_Impl__obj::get_cy( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_152_get_cy)
HXDLIN( 152)		if ((0 >= this1->length)) {
HXDLIN( 152)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 152)		int p = this1->byteOffset;
HXDLIN( 152)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 15) + 2);
HXDLIN( 152)		bool _hx_tmp;
HXDLIN( 152)		if ((i >= 0)) {
HXDLIN( 152)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN( 152)			_hx_tmp = true;
            		}
HXDLIN( 152)		if (_hx_tmp) {
HXDLIN( 152)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 152)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 152)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_cy,return )

Float FloatColorTriangles_Impl__obj::set_cy( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_154_set_cy)
HXLINE( 155)		{
HXLINE( 155)			if ((0 >= this1->length)) {
HXLINE( 155)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN( 155)			int p = this1->byteOffset;
HXDLIN( 155)			{
HXLINE( 155)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 15) + 2);
HXDLIN( 155)				{
HXLINE( 155)					bool _hx_tmp;
HXDLIN( 155)					if ((i >= 0)) {
HXLINE( 155)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE( 155)						_hx_tmp = true;
            					}
HXDLIN( 155)					if (_hx_tmp) {
HXLINE( 155)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 155)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 155)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 156)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_cy,return )

Float FloatColorTriangles_Impl__obj::get_cz( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_160_get_cz)
HXDLIN( 160)		if ((0 >= this1->length)) {
HXDLIN( 160)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 160)		int p = this1->byteOffset;
HXDLIN( 160)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 16) + 2);
HXDLIN( 160)		bool _hx_tmp;
HXDLIN( 160)		if ((i >= 0)) {
HXDLIN( 160)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN( 160)			_hx_tmp = true;
            		}
HXDLIN( 160)		if (_hx_tmp) {
HXDLIN( 160)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 160)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 160)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_cz,return )

Float FloatColorTriangles_Impl__obj::set_cz( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_162_set_cz)
HXLINE( 163)		{
HXLINE( 163)			if ((0 >= this1->length)) {
HXLINE( 163)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN( 163)			int p = this1->byteOffset;
HXDLIN( 163)			{
HXLINE( 163)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 16) + 2);
HXDLIN( 163)				{
HXLINE( 163)					bool _hx_tmp;
HXDLIN( 163)					if ((i >= 0)) {
HXLINE( 163)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE( 163)						_hx_tmp = true;
            					}
HXDLIN( 163)					if (_hx_tmp) {
HXLINE( 163)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 163)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 163)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 164)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_cz,return )

Float FloatColorTriangles_Impl__obj::get_redC( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_169_get_redC)
HXDLIN( 169)		if ((0 >= this1->length)) {
HXDLIN( 169)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 169)		int p = this1->byteOffset;
HXDLIN( 169)		int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 17) + 2);
HXDLIN( 169)		bool _hx_tmp;
HXDLIN( 169)		if ((i >= 0)) {
HXDLIN( 169)			_hx_tmp = (i >= this1->length);
            		}
            		else {
HXDLIN( 169)			_hx_tmp = true;
            		}
HXDLIN( 169)		if (_hx_tmp) {
HXDLIN( 169)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN( 169)		int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 169)		return ( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,get_redC,return )

Float FloatColorTriangles_Impl__obj::set_redC( ::typedarray::Float32ArrayImpl this1,Float v){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_171_set_redC)
HXLINE( 172)		{
HXLINE( 172)			if ((0 >= this1->length)) {
HXLINE( 172)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN( 172)			int p = this1->byteOffset;
HXDLIN( 172)			{
HXLINE( 172)				int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) )) * 21) + 17) + 2);
HXDLIN( 172)				{
HXLINE( 172)					bool _hx_tmp;
HXDLIN( 172)					if ((i >= 0)) {
HXLINE( 172)						_hx_tmp = (i >= this1->length);
            					}
            					else {
HXLINE( 172)						_hx_tmp = true;
            					}
HXDLIN( 172)					if (_hx_tmp) {
HXLINE( 172)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 172)					int p1 = ((i * 4) + this1->byteOffset);
HXDLIN( 172)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE( 173)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatColorTriangles_Impl__obj,set_redC,return )

bool FloatColorTriangles_Impl__obj::triangle( ::typedarray::Float32ArrayImpl this1,Float ax_,Float ay_,Float az_,Float bx_,Float by_,Float bz_,Float cx_,Float cy_,Float cz_){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_209_triangle)
HXLINE( 210)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(this1,ax_);
HXLINE( 211)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(this1,ay_);
HXLINE( 212)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_az(this1,az_);
HXLINE( 213)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(this1,bx_);
HXLINE( 214)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(this1,by_);
HXLINE( 215)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bz(this1,bz_);
HXLINE( 216)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(this1,cx_);
HXLINE( 217)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(this1,cy_);
HXLINE( 218)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cz(this1,cz_);
HXLINE( 220)		bool windingAdjusted = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::adjustWinding(this1);
HXLINE( 221)		if (windingAdjusted) {
HXLINE( 222)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(this1,ax_);
HXLINE( 223)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(this1,ay_);
HXLINE( 224)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(this1,cx_);
HXLINE( 225)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(this1,cy_);
HXLINE( 226)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(this1,bx_);
HXLINE( 227)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(this1,by_);
            		}
HXLINE( 229)		return windingAdjusted;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(FloatColorTriangles_Impl__obj,triangle,return )

bool FloatColorTriangles_Impl__obj::adjustWinding( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_232_adjustWinding)
HXDLIN( 232)		Float _hx_tmp = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN( 232)		Float _hx_tmp1 = (_hx_tmp * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1));
HXDLIN( 232)		Float _hx_tmp2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1);
HXDLIN( 232)		Float _hx_tmp3 = (_hx_tmp1 - (_hx_tmp2 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1)));
HXDLIN( 232)		Float _hx_tmp4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1);
HXDLIN( 232)		Float _hx_tmp5 = (_hx_tmp4 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1));
HXDLIN( 232)		Float _hx_tmp6 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1);
HXDLIN( 232)		Float _hx_tmp7 = (_hx_tmp3 + (_hx_tmp5 - (_hx_tmp6 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1))));
HXDLIN( 232)		Float _hx_tmp8 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1);
HXDLIN( 232)		Float _hx_tmp9 = (_hx_tmp8 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1));
HXDLIN( 232)		Float _hx_tmp10 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN( 232)		return ((_hx_tmp7 + (_hx_tmp9 - (_hx_tmp10 * ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1)))) > 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatColorTriangles_Impl__obj,adjustWinding,return )

void FloatColorTriangles_Impl__obj::moveDelta( ::typedarray::Float32ArrayImpl this1,Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_288_moveDelta)
HXLINE( 289)		{
HXLINE( 289)			 ::typedarray::Float32ArrayImpl _g = this1;
HXDLIN( 289)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_g,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_g) + dx));
            		}
HXLINE( 290)		{
HXLINE( 290)			 ::typedarray::Float32ArrayImpl _g1 = this1;
HXDLIN( 290)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_g1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_g1) + dy));
            		}
HXLINE( 291)		{
HXLINE( 291)			 ::typedarray::Float32ArrayImpl _g2 = this1;
HXDLIN( 291)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_g2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_g2) + dx));
            		}
HXLINE( 292)		{
HXLINE( 292)			 ::typedarray::Float32ArrayImpl _g3 = this1;
HXDLIN( 292)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_g3,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_g3) + dy));
            		}
HXLINE( 293)		{
HXLINE( 293)			 ::typedarray::Float32ArrayImpl _g4 = this1;
HXDLIN( 293)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_g4,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_g4) + dx));
            		}
HXLINE( 294)		{
HXLINE( 294)			 ::typedarray::Float32ArrayImpl _g5 = this1;
HXDLIN( 294)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_g5,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_g5) + dy));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatColorTriangles_Impl__obj,moveDelta,(void))

bool FloatColorTriangles_Impl__obj::fullHit( ::typedarray::Float32ArrayImpl this1,Float px,Float py){
            	HX_STACKFRAME(&_hx_pos_5399da44140645b8_310_fullHit)
HXLINE( 311)		bool _hx_tmp;
HXDLIN( 311)		bool _hx_tmp1;
HXDLIN( 311)		bool _hx_tmp2;
HXDLIN( 311)		Float _hx_tmp3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN( 311)		Float _hx_tmp4 = ::Math_obj::min(_hx_tmp3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1));
HXDLIN( 311)		if ((px > ::Math_obj::min(_hx_tmp4,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1)))) {
HXLINE( 311)			Float _hx_tmp = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN( 311)			Float _hx_tmp1 = ::Math_obj::max(_hx_tmp,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1));
HXDLIN( 311)			_hx_tmp2 = (px < ::Math_obj::max(_hx_tmp1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1)));
            		}
            		else {
HXLINE( 311)			_hx_tmp2 = false;
            		}
HXDLIN( 311)		if (_hx_tmp2) {
HXLINE( 311)			Float _hx_tmp = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1);
HXDLIN( 311)			Float _hx_tmp2 = ::Math_obj::min(_hx_tmp,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1));
HXDLIN( 311)			_hx_tmp1 = (py > ::Math_obj::min(_hx_tmp2,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1)));
            		}
            		else {
HXLINE( 311)			_hx_tmp1 = false;
            		}
HXDLIN( 311)		if (_hx_tmp1) {
HXLINE( 311)			Float _hx_tmp1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1);
HXDLIN( 311)			Float _hx_tmp2 = ::Math_obj::max(_hx_tmp1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1));
HXDLIN( 311)			_hx_tmp = (py < ::Math_obj::max(_hx_tmp2,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1)));
            		}
            		else {
HXLINE( 311)			_hx_tmp = false;
            		}
HXDLIN( 311)		if (_hx_tmp) {
HXLINE( 311)			return true;
            		}
HXLINE( 312)		Float planeAB = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1) - px);
HXDLIN( 312)		Float planeAB1 = (planeAB * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1) - py));
HXDLIN( 312)		Float planeAB2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1) - px);
HXDLIN( 312)		Float planeAB3 = (planeAB1 - (planeAB2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1) - py)));
HXDLIN( 312)		Float planeBC = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1) - px);
HXDLIN( 312)		Float planeBC1 = (planeBC * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1) - py));
HXDLIN( 312)		Float planeBC2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1) - px);
HXDLIN( 312)		Float planeBC3 = (planeBC1 - (planeBC2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1) - py)));
HXDLIN( 312)		Float planeCA = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1) - px);
HXDLIN( 312)		Float planeCA1 = (planeCA * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1) - py));
HXDLIN( 312)		Float planeCA2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1) - px);
HXDLIN( 312)		Float planeCA3 = (planeCA1 - (planeCA2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1) - py)));
HXDLIN( 312)		int _hx_tmp5 = ::Std_obj::_hx_int((::Math_obj::abs(planeAB3) / planeAB3));
HXDLIN( 312)		if ((_hx_tmp5 == ::Std_obj::_hx_int((::Math_obj::abs(planeBC3) / planeBC3)))) {
HXLINE( 312)			int _hx_tmp = ::Std_obj::_hx_int((::Math_obj::abs(planeBC3) / planeBC3));
HXDLIN( 312)			return (_hx_tmp == ::Std_obj::_hx_int((::Math_obj::abs(planeCA3) / planeCA3)));
            		}
            		else {
HXLINE( 312)			return false;
            		}
HXDLIN( 312)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatColorTriangles_Impl__obj,fullHit,return )


FloatColorTriangles_Impl__obj::FloatColorTriangles_Impl__obj()
{
}

bool FloatColorTriangles_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"get_ax") ) { outValue = get_ax_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_ax") ) { outValue = set_ax_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_ay") ) { outValue = get_ay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_ay") ) { outValue = set_ay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_az") ) { outValue = get_az_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_az") ) { outValue = set_az_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_bx") ) { outValue = get_bx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_bx") ) { outValue = set_bx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_by") ) { outValue = get_by_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_by") ) { outValue = set_by_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_bz") ) { outValue = get_bz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_bz") ) { outValue = set_bz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cx") ) { outValue = get_cx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cx") ) { outValue = set_cx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cy") ) { outValue = get_cy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cy") ) { outValue = set_cy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cz") ) { outValue = get_cz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cz") ) { outValue = set_cz_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fullHit") ) { outValue = fullHit_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_redA") ) { outValue = get_redA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redA") ) { outValue = set_redA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_redB") ) { outValue = get_redB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redB") ) { outValue = set_redB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_redC") ) { outValue = get_redC_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redC") ) { outValue = set_redC_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"triangle") ) { outValue = triangle_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"moveDelta") ) { outValue = moveDelta_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"adjustWinding") ) { outValue = adjustWinding_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FloatColorTriangles_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FloatColorTriangles_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FloatColorTriangles_Impl__obj::__mClass;

static ::String FloatColorTriangles_Impl__obj_sStaticFields[] = {
	HX_("get_ax",40,ec,2f,a3),
	HX_("set_ax",b4,40,78,6f),
	HX_("get_ay",41,ec,2f,a3),
	HX_("set_ay",b5,40,78,6f),
	HX_("get_az",42,ec,2f,a3),
	HX_("set_az",b6,40,78,6f),
	HX_("get_redA",59,09,62,cb),
	HX_("set_redA",cd,62,bf,79),
	HX_("get_bx",1f,ed,2f,a3),
	HX_("set_bx",93,41,78,6f),
	HX_("get_by",20,ed,2f,a3),
	HX_("set_by",94,41,78,6f),
	HX_("get_bz",21,ed,2f,a3),
	HX_("set_bz",95,41,78,6f),
	HX_("get_redB",5a,09,62,cb),
	HX_("set_redB",ce,62,bf,79),
	HX_("get_cx",fe,ed,2f,a3),
	HX_("set_cx",72,42,78,6f),
	HX_("get_cy",ff,ed,2f,a3),
	HX_("set_cy",73,42,78,6f),
	HX_("get_cz",00,ee,2f,a3),
	HX_("set_cz",74,42,78,6f),
	HX_("get_redC",5b,09,62,cb),
	HX_("set_redC",cf,62,bf,79),
	HX_("triangle",c8,be,c5,8d),
	HX_("adjustWinding",4b,e4,e6,bd),
	HX_("moveDelta",27,b7,ed,94),
	HX_("fullHit",04,38,2f,d0),
	::String(null())
};

void FloatColorTriangles_Impl__obj::__register()
{
	FloatColorTriangles_Impl__obj _hx_dummy;
	FloatColorTriangles_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_",a4,23,08,1f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FloatColorTriangles_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FloatColorTriangles_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FloatColorTriangles_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FloatColorTriangles_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FloatColorTriangles_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace dsHelper
} // end namespace flatInterleave
} // end namespace _FloatColorTriangles
