// Generated by Haxe 4.2.0-rc.1+cb30bd580
#include <hxcpp.h>

#ifndef INCLUDED_c8a65390b4b62196
#define INCLUDED_c8a65390b4b62196
#include "/usr/local/lib/haxeLibrary/gluon/git/src/gluon/webgl/native/ES2Context.h"
#endif
#ifndef INCLUDED_gluon_webgl__GLContext_GLContext_Impl_
#include <gluon/webgl/_GLContext/GLContext_Impl_.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLContext
#include <gluon/webgl/native/GLContext.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif

namespace gluon{
namespace webgl{
namespace _GLContext{

void GLContext_Impl__obj::__construct() { }

Dynamic GLContext_Impl__obj::__CreateEmpty() { return new GLContext_Impl__obj; }

void *GLContext_Impl__obj::_hx_vtable = 0;

Dynamic GLContext_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GLContext_Impl__obj > _hx_result = new GLContext_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLContext_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2c4cd4ad;
}

void GLContext_Impl__obj::reportErrors( ::gluon::webgl::native::GLContext this1,::String fnName){
	unsigned int result = ( (unsigned int)(0) );
	while(true){
		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,printStackItem) HXARGC(1)
		::String _hx_run( ::haxe::StackItem item){
			switch((int)(item->_hx_getIndex())){
				case (int)0: {
					return HX_("CFunction",7b,e2,32,23);
				}
				break;
				case (int)1: {
					::String m = item->_hx_getString(0);
					return (HX_("Module \"$",96,44,c1,b7) + HX_("m\"",15,5f,00,00));
				}
				break;
				case (int)2: {
					 ::Dynamic _g = item->_hx_getObject(3);
					int line = item->_hx_getInt(2);
					::String file = item->_hx_getString(1);
					 ::haxe::StackItem s = item->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
					::String _hx_tmp;
					if (::hx::IsNotNull( s )) {
						_hx_tmp = (HX_(" - ",73,6f,18,00) + printStackItem->__get(0)(s));
					}
					else {
						_hx_tmp = HX_("",00,00,00,00);
					}
					return (((HX_("$",24,00,00,00) + HX_("file:$",26,98,29,85)) + HX_("line",f4,17,b3,47)) + _hx_tmp);
				}
				break;
				case (int)3: {
					::String method = item->_hx_getString(1);
					::String className = item->_hx_getString(0);
					return ((HX_("$",24,00,00,00) + HX_("{className}.$",2b,c4,a2,18)) + HX_("{method}()",a2,60,42,5e));
				}
				break;
				case (int)4: {
					 ::Dynamic v = item->_hx_getObject(0);
					return (HX_("Local Function $",f1,ad,43,10) + HX_("v",76,00,00,00));
				}
				break;
			}
			return null();
		}
		HX_END_LOCAL_FUNC1(return)

		result = glGetError();
		if (!((result != ( (unsigned int)(0) )))) {
			goto _hx_goto_0;
		}
		::String errorName;
		unsigned int _hx_switch_0 = result;
		if (  (_hx_switch_0==( (unsigned int)(0) )) ){
			errorName = HX_("NO_ERROR",ea,b5,7d,2f);
			goto _hx_goto_1;
		}
		if (  (_hx_switch_0==( (unsigned int)(1280) )) ){
			errorName = HX_("INVALID_ENUM",a9,74,70,13);
			goto _hx_goto_1;
		}
		if (  (_hx_switch_0==( (unsigned int)(1281) )) ){
			errorName = HX_("INVALID_VALUE",a9,e8,26,b0);
			goto _hx_goto_1;
		}
		if (  (_hx_switch_0==( (unsigned int)(1282) )) ){
			errorName = HX_("INVALID_OPERATION",5f,b1,c8,29);
			goto _hx_goto_1;
		}
		if (  (_hx_switch_0==( (unsigned int)(1285) )) ){
			errorName = HX_("OUT_OF_MEMORY",18,f2,97,e1);
			goto _hx_goto_1;
		}
		if (  (_hx_switch_0==( (unsigned int)(1286) )) ){
			errorName = HX_("INVALID_FRAMEBUFFER_OPERATION",2d,d4,c5,43);
			goto _hx_goto_1;
		}
		_hx_goto_1:;
		::Array< ::Dynamic> printStackItem = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
		printStackItem[0] =  ::Dynamic(new _hx_Closure_0(printStackItem));
		::Array< ::Dynamic> _this = ::haxe::_CallStack::CallStack_Impl__obj::callStack()->slice(1,null());
		 ::Dynamic f = printStackItem->__get(0);
		::Array< ::String > result1 = ::Array_obj< ::String >::__new(_this->length);
		{
			int _g = 0;
			int _g1 = _this->length;
			while((_g < _g1)){
				_g = (_g + 1);
				int i = (_g - 1);
				{
					::String inValue = ( (::String)(f(_hx_array_unsafe_get(_this,i))) );
					result1->__unsafe_set(i,inValue);
				}
			}
		}
		::String callStackString = (HX_("\n\t",bf,08,00,00) + result1->join(HX_("\n\t",bf,08,00,00)));
		::haxe::Log_obj::trace(((HX_("OpenGL Error in \"$",94,47,1e,a4) + HX_("fnName\": $",0f,f1,6b,43)) + HX_("errorName",33,ee,67,6f)), ::Dynamic(::hx::Anon_obj::Create(5)
			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("gluon.webgl._GLContext.GLContext_Impl_",1b,7c,7f,55))
			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,callStackString))
			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("reportErrors",7f,b3,6d,8c))
			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("gluon/webgl/GLContextDebug.hx",1f,12,5f,75))
			->setFixed(4,HX_("lineNumber",dd,81,22,76),86)));
	}
	_hx_goto_0:;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext_Impl__obj,reportErrors,(void))


GLContext_Impl__obj::GLContext_Impl__obj()
{
}

bool GLContext_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"reportErrors") ) { outValue = reportErrors_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GLContext_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *GLContext_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class GLContext_Impl__obj::__mClass;

static ::String GLContext_Impl__obj_sStaticFields[] = {
	HX_("reportErrors",7f,b3,6d,8c),
	::String(null())
};

void GLContext_Impl__obj::__register()
{
	GLContext_Impl__obj _hx_dummy;
	GLContext_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gluon.webgl._GLContext.GLContext_Impl_",1b,7c,7f,55);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLContext_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GLContext_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< GLContext_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLContext_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLContext_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gluon
} // end namespace webgl
} // end namespace _GLContext
