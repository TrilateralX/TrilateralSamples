// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_hxGeomAlgo_Debug
#include <hxGeomAlgo/Debug.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_PQHandleElem
#include <hxGeomAlgo/_Tess2/PQHandleElem.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_PQNode
#include <hxGeomAlgo/_Tess2/PQNode.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_PriorityQ
#include <hxGeomAlgo/_Tess2/PriorityQ.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessVertex
#include <hxGeomAlgo/_Tess2/TessVertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8a60478c78c46496_1552_new,"hxGeomAlgo._Tess2.PriorityQ","new",0x754f9522,"hxGeomAlgo._Tess2.PriorityQ.new","hxGeomAlgo/Tess2.hx",1552,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_8a60478c78c46496_1573_floatDown_,"hxGeomAlgo._Tess2.PriorityQ","floatDown_",0xe46369ff,"hxGeomAlgo._Tess2.PriorityQ.floatDown_","hxGeomAlgo/Tess2.hx",1573,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_8a60478c78c46496_1601_floatUp_,"hxGeomAlgo._Tess2.PriorityQ","floatUp_",0xfeaa4166,"hxGeomAlgo._Tess2.PriorityQ.floatUp_","hxGeomAlgo/Tess2.hx",1601,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_8a60478c78c46496_1622_init,"hxGeomAlgo._Tess2.PriorityQ","init",0x2d0ba00e,"hxGeomAlgo._Tess2.PriorityQ.init","hxGeomAlgo/Tess2.hx",1622,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_8a60478c78c46496_1633_min,"hxGeomAlgo._Tess2.PriorityQ","min",0x754ed654,"hxGeomAlgo._Tess2.PriorityQ.min","hxGeomAlgo/Tess2.hx",1633,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_8a60478c78c46496_1644_insert,"hxGeomAlgo._Tess2.PriorityQ","insert",0x45cf63b7,"hxGeomAlgo._Tess2.PriorityQ.insert","hxGeomAlgo/Tess2.hx",1644,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_8a60478c78c46496_1678_extractMin,"hxGeomAlgo._Tess2.PriorityQ","extractMin",0x2c254a4f,"hxGeomAlgo._Tess2.PriorityQ.extractMin","hxGeomAlgo/Tess2.hx",1678,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_8a60478c78c46496_1700_delete,"hxGeomAlgo._Tess2.PriorityQ","delete",0x12cae0a9,"hxGeomAlgo._Tess2.PriorityQ.delete","hxGeomAlgo/Tess2.hx",1700,0xf73e622d)
namespace hxGeomAlgo{
namespace _Tess2{

void PriorityQ_obj::__construct(int size, ::Dynamic leq){
            	HX_GC_STACKFRAME(&_hx_pos_8a60478c78c46496_1552_new)
HXLINE(1553)		this->size = 0;
HXLINE(1554)		this->max = size;
HXLINE(1556)		this->nodes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1557)		{
HXLINE(1557)			int _g = 0;
HXDLIN(1557)			int _g1 = (size + 1);
HXDLIN(1557)			while((_g < _g1)){
HXLINE(1557)				_g = (_g + 1);
HXDLIN(1557)				int i = (_g - 1);
HXLINE(1558)				this->nodes[i] =  ::hxGeomAlgo::_Tess2::PQNode_obj::__alloc( HX_CTX );
            			}
            		}
HXLINE(1560)		this->handles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1561)		{
HXLINE(1561)			int _g2 = 0;
HXDLIN(1561)			int _g3 = (size + 1);
HXDLIN(1561)			while((_g2 < _g3)){
HXLINE(1561)				_g2 = (_g2 + 1);
HXDLIN(1561)				int i = (_g2 - 1);
HXLINE(1562)				this->handles[i] =  ::hxGeomAlgo::_Tess2::PQHandleElem_obj::__alloc( HX_CTX );
            			}
            		}
HXLINE(1564)		this->initialized = false;
HXLINE(1565)		this->freeList = 0;
HXLINE(1566)		this->leq = leq;
HXLINE(1568)		this->nodes->__get(1).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle = 1;
HXLINE(1569)		this->handles->__get(1).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key = null();
            	}

Dynamic PriorityQ_obj::__CreateEmpty() { return new PriorityQ_obj; }

void *PriorityQ_obj::_hx_vtable = 0;

Dynamic PriorityQ_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PriorityQ_obj > _hx_result = new PriorityQ_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PriorityQ_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f8972f0;
}

void PriorityQ_obj::floatDown_(int curr){
            	HX_STACKFRAME(&_hx_pos_8a60478c78c46496_1573_floatDown_)
HXLINE(1574)		::Array< ::Dynamic> n = this->nodes;
HXLINE(1575)		::Array< ::Dynamic> h = this->handles;
HXLINE(1576)		int hChild;
HXLINE(1577)		int child;
HXLINE(1576)		int hCurr = n->__get(curr).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle;
HXLINE(1580)		while(true){
HXLINE(1581)			child = (curr << 1);
HXLINE(1582)			bool _hx_tmp;
HXDLIN(1582)			if ((child < this->size)) {
HXLINE(1582)				_hx_tmp = ( (bool)(this->leq(h->__get(n->__get((child + 1)).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key,h->__get(n->__get(child).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key)) );
            			}
            			else {
HXLINE(1582)				_hx_tmp = false;
            			}
HXDLIN(1582)			if (_hx_tmp) {
HXLINE(1583)				child = (child + 1);
            			}
HXLINE(1586)			::hxGeomAlgo::Debug_obj::_hx_assert((child <= this->max),null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1586,HX_("hxGeomAlgo._Tess2.PriorityQ",30,1c,1a,66),HX_("floatDown_",81,32,64,fc)));
HXLINE(1588)			hChild = n->__get(child).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle;
HXLINE(1589)			bool _hx_tmp1;
HXDLIN(1589)			if ((child <= this->size)) {
HXLINE(1589)				_hx_tmp1 = ( (bool)(this->leq(h->__get(hCurr).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key,h->__get(hChild).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key)) );
            			}
            			else {
HXLINE(1589)				_hx_tmp1 = true;
            			}
HXDLIN(1589)			if (_hx_tmp1) {
HXLINE(1590)				n->__get(curr).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle = hCurr;
HXLINE(1591)				h->__get(hCurr).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node = curr;
HXLINE(1592)				goto _hx_goto_3;
            			}
HXLINE(1594)			n->__get(curr).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle = hChild;
HXLINE(1595)			h->__get(hChild).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node = curr;
HXLINE(1596)			curr = child;
            		}
            		_hx_goto_3:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PriorityQ_obj,floatDown_,(void))

void PriorityQ_obj::floatUp_(int curr){
            	HX_STACKFRAME(&_hx_pos_8a60478c78c46496_1601_floatUp_)
HXLINE(1602)		::Array< ::Dynamic> n = this->nodes;
HXLINE(1603)		::Array< ::Dynamic> h = this->handles;
HXLINE(1604)		int hParent;
HXLINE(1605)		int parent;
HXLINE(1604)		int hCurr = n->__get(curr).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle;
HXLINE(1608)		while(true){
HXLINE(1609)			parent = (curr >> 1);
HXLINE(1610)			hParent = n->__get(parent).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle;
HXLINE(1611)			bool _hx_tmp;
HXDLIN(1611)			if ((parent != 0)) {
HXLINE(1611)				_hx_tmp = ( (bool)(this->leq(h->__get(hParent).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key,h->__get(hCurr).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key)) );
            			}
            			else {
HXLINE(1611)				_hx_tmp = true;
            			}
HXDLIN(1611)			if (_hx_tmp) {
HXLINE(1612)				n->__get(curr).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle = hCurr;
HXLINE(1613)				h->__get(hCurr).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node = curr;
HXLINE(1614)				goto _hx_goto_5;
            			}
HXLINE(1616)			n->__get(curr).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle = hParent;
HXLINE(1617)			h->__get(hParent).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node = curr;
HXLINE(1618)			curr = parent;
            		}
            		_hx_goto_5:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PriorityQ_obj,floatUp_,(void))

void PriorityQ_obj::init(){
            	HX_STACKFRAME(&_hx_pos_8a60478c78c46496_1622_init)
HXLINE(1624)		int i = this->size;
HXLINE(1625)		while((i >= 1)){
HXLINE(1626)			this->floatDown_(i);
HXLINE(1627)			i = (i - 1);
            		}
HXLINE(1629)		this->initialized = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PriorityQ_obj,init,(void))

 ::hxGeomAlgo::_Tess2::TessVertex PriorityQ_obj::min(){
            	HX_STACKFRAME(&_hx_pos_8a60478c78c46496_1633_min)
HXDLIN(1633)		return this->handles->__get(this->nodes->__get(1).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PriorityQ_obj,min,return )

int PriorityQ_obj::insert( ::hxGeomAlgo::_Tess2::TessVertex keyNew){
            	HX_GC_STACKFRAME(&_hx_pos_8a60478c78c46496_1644_insert)
HXLINE(1646)		int free;
HXLINE(1645)		int curr = ++this->size;
HXLINE(1649)		if (((curr * 2) > this->max)) {
HXLINE(1650)			 ::hxGeomAlgo::_Tess2::PriorityQ _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1650)			_hx_tmp->max = (_hx_tmp->max * 2);
HXLINE(1651)			int s = this->nodes->length;
HXLINE(1652)			{
HXLINE(1652)				int _g = s;
HXDLIN(1652)				int _g1 = (this->max + 1);
HXDLIN(1652)				while((_g < _g1)){
HXLINE(1652)					_g = (_g + 1);
HXDLIN(1652)					int i = (_g - 1);
HXLINE(1653)					this->nodes[i] =  ::hxGeomAlgo::_Tess2::PQNode_obj::__alloc( HX_CTX );
            				}
            			}
HXLINE(1655)			s = this->handles->length;
HXLINE(1656)			{
HXLINE(1656)				int _g2 = this->handles->length;
HXDLIN(1656)				int _g3 = (this->max + 1);
HXDLIN(1656)				while((_g2 < _g3)){
HXLINE(1656)					_g2 = (_g2 + 1);
HXDLIN(1656)					int i = (_g2 - 1);
HXLINE(1657)					this->handles[i] =  ::hxGeomAlgo::_Tess2::PQHandleElem_obj::__alloc( HX_CTX );
            				}
            			}
            		}
HXLINE(1660)		if ((this->freeList == 0)) {
HXLINE(1661)			free = curr;
            		}
            		else {
HXLINE(1663)			free = this->freeList;
HXLINE(1664)			this->freeList = this->handles->__get(free).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node;
            		}
HXLINE(1667)		this->nodes->__get(curr).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle = free;
HXLINE(1668)		this->handles->__get(free).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node = curr;
HXLINE(1669)		this->handles->__get(free).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key = keyNew;
HXLINE(1671)		if (this->initialized) {
HXLINE(1672)			this->floatUp_(curr);
            		}
HXLINE(1674)		return free;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PriorityQ_obj,insert,return )

 ::hxGeomAlgo::_Tess2::TessVertex PriorityQ_obj::extractMin(){
            	HX_STACKFRAME(&_hx_pos_8a60478c78c46496_1678_extractMin)
HXLINE(1679)		::Array< ::Dynamic> n = this->nodes;
HXLINE(1680)		::Array< ::Dynamic> h = this->handles;
HXLINE(1681)		int hMin = n->__get(1).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle;
HXLINE(1682)		 ::hxGeomAlgo::_Tess2::TessVertex min = h->__get(hMin).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key;
HXLINE(1684)		if ((this->size > 0)) {
HXLINE(1685)			n->__get(1).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle = n->__get(this->size).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle;
HXLINE(1686)			h->__get(n->__get(1).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node = 1;
HXLINE(1688)			h->__get(hMin).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key = null();
HXLINE(1689)			h->__get(hMin).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node = this->freeList;
HXLINE(1690)			this->freeList = hMin;
HXLINE(1692)			--this->size;
HXLINE(1693)			if ((this->size > 0)) {
HXLINE(1694)				this->floatDown_(1);
            			}
            		}
HXLINE(1697)		return min;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PriorityQ_obj,extractMin,return )

void PriorityQ_obj::_hx_delete(int hCurr){
            	HX_STACKFRAME(&_hx_pos_8a60478c78c46496_1700_delete)
HXLINE(1701)		::Array< ::Dynamic> n = this->nodes;
HXLINE(1702)		::Array< ::Dynamic> h = this->handles;
HXLINE(1705)		bool _hx_tmp;
HXDLIN(1705)		bool _hx_tmp1;
HXDLIN(1705)		if ((hCurr >= 1)) {
HXLINE(1705)			_hx_tmp1 = (hCurr <= this->max);
            		}
            		else {
HXLINE(1705)			_hx_tmp1 = false;
            		}
HXDLIN(1705)		if (_hx_tmp1) {
HXLINE(1705)			_hx_tmp = ::hx::IsNotNull( h->__get(hCurr).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key );
            		}
            		else {
HXLINE(1705)			_hx_tmp = false;
            		}
HXDLIN(1705)		::hxGeomAlgo::Debug_obj::_hx_assert(_hx_tmp,null(),::hx::SourceInfo(HX_("hxGeomAlgo/Tess2.hx",2d,62,3e,f7),1705,HX_("hxGeomAlgo._Tess2.PriorityQ",30,1c,1a,66),HX_("delete",2b,c0,d8,6a)));
HXLINE(1703)		int curr = h->__get(hCurr).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node;
HXLINE(1708)		n->__get(curr).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle = n->__get(this->size).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle;
HXLINE(1709)		h->__get(n->__get(curr).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node = curr;
HXLINE(1711)		--this->size;
HXLINE(1712)		if ((curr <= this->size)) {
HXLINE(1713)			bool _hx_tmp;
HXDLIN(1713)			if ((curr > 1)) {
HXLINE(1713)				_hx_tmp = ( (bool)(this->leq(h->__get(n->__get((curr >> 1)).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key,h->__get(n->__get(curr).StaticCast<  ::hxGeomAlgo::_Tess2::PQNode >()->handle).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key)) );
            			}
            			else {
HXLINE(1713)				_hx_tmp = true;
            			}
HXDLIN(1713)			if (_hx_tmp) {
HXLINE(1714)				this->floatDown_(curr);
            			}
            			else {
HXLINE(1716)				this->floatUp_(curr);
            			}
            		}
HXLINE(1719)		h->__get(hCurr).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->key = null();
HXLINE(1720)		h->__get(hCurr).StaticCast<  ::hxGeomAlgo::_Tess2::PQHandleElem >()->node = this->freeList;
HXLINE(1721)		this->freeList = hCurr;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PriorityQ_obj,_hx_delete,(void))


::hx::ObjectPtr< PriorityQ_obj > PriorityQ_obj::__new(int size, ::Dynamic leq) {
	::hx::ObjectPtr< PriorityQ_obj > __this = new PriorityQ_obj();
	__this->__construct(size,leq);
	return __this;
}

::hx::ObjectPtr< PriorityQ_obj > PriorityQ_obj::__alloc(::hx::Ctx *_hx_ctx,int size, ::Dynamic leq) {
	PriorityQ_obj *__this = (PriorityQ_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PriorityQ_obj), true, "hxGeomAlgo._Tess2.PriorityQ"));
	*(void **)__this = PriorityQ_obj::_hx_vtable;
	__this->__construct(size,leq);
	return __this;
}

PriorityQ_obj::PriorityQ_obj()
{
}

void PriorityQ_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PriorityQ);
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_MEMBER_NAME(nodes,"nodes");
	HX_MARK_MEMBER_NAME(handles,"handles");
	HX_MARK_MEMBER_NAME(initialized,"initialized");
	HX_MARK_MEMBER_NAME(freeList,"freeList");
	HX_MARK_MEMBER_NAME(leq,"leq");
	HX_MARK_END_CLASS();
}

void PriorityQ_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(max,"max");
	HX_VISIT_MEMBER_NAME(nodes,"nodes");
	HX_VISIT_MEMBER_NAME(handles,"handles");
	HX_VISIT_MEMBER_NAME(initialized,"initialized");
	HX_VISIT_MEMBER_NAME(freeList,"freeList");
	HX_VISIT_MEMBER_NAME(leq,"leq");
}

::hx::Val PriorityQ_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { return ::hx::Val( max ); }
		if (HX_FIELD_EQ(inName,"leq") ) { return ::hx::Val( leq ); }
		if (HX_FIELD_EQ(inName,"min") ) { return ::hx::Val( min_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return ::hx::Val( size ); }
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nodes") ) { return ::hx::Val( nodes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"insert") ) { return ::hx::Val( insert_dyn() ); }
		if (HX_FIELD_EQ(inName,"delete") ) { return ::hx::Val( _hx_delete_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"handles") ) { return ::hx::Val( handles ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"freeList") ) { return ::hx::Val( freeList ); }
		if (HX_FIELD_EQ(inName,"floatUp_") ) { return ::hx::Val( floatUp__dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"floatDown_") ) { return ::hx::Val( floatDown__dyn() ); }
		if (HX_FIELD_EQ(inName,"extractMin") ) { return ::hx::Val( extractMin_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { return ::hx::Val( initialized ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PriorityQ_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leq") ) { leq=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nodes") ) { nodes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"handles") ) { handles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"freeList") ) { freeList=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PriorityQ_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("max",a4,0a,53,00));
	outFields->push(HX_("nodes",31,b8,be,9f));
	outFields->push(HX_("handles",cb,af,d5,45));
	outFields->push(HX_("initialized",14,f5,0f,37));
	outFields->push(HX_("freeList",2a,ab,b8,0a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PriorityQ_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(PriorityQ_obj,size),HX_("size",c1,a0,53,4c)},
	{::hx::fsInt,(int)offsetof(PriorityQ_obj,max),HX_("max",a4,0a,53,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PriorityQ_obj,nodes),HX_("nodes",31,b8,be,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PriorityQ_obj,handles),HX_("handles",cb,af,d5,45)},
	{::hx::fsBool,(int)offsetof(PriorityQ_obj,initialized),HX_("initialized",14,f5,0f,37)},
	{::hx::fsInt,(int)offsetof(PriorityQ_obj,freeList),HX_("freeList",2a,ab,b8,0a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PriorityQ_obj,leq),HX_("leq",d8,4b,52,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PriorityQ_obj_sStaticStorageInfo = 0;
#endif

static ::String PriorityQ_obj_sMemberFields[] = {
	HX_("size",c1,a0,53,4c),
	HX_("max",a4,0a,53,00),
	HX_("nodes",31,b8,be,9f),
	HX_("handles",cb,af,d5,45),
	HX_("initialized",14,f5,0f,37),
	HX_("freeList",2a,ab,b8,0a),
	HX_("leq",d8,4b,52,00),
	HX_("floatDown_",81,32,64,fc),
	HX_("floatUp_",68,85,90,dd),
	HX_("init",10,3b,bb,45),
	HX_("min",92,11,53,00),
	HX_("insert",39,43,dd,9d),
	HX_("extractMin",d1,12,26,44),
	HX_("delete",2b,c0,d8,6a),
	::String(null()) };

::hx::Class PriorityQ_obj::__mClass;

void PriorityQ_obj::__register()
{
	PriorityQ_obj _hx_dummy;
	PriorityQ_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo._Tess2.PriorityQ",30,1c,1a,66);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PriorityQ_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PriorityQ_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PriorityQ_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PriorityQ_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
} // end namespace _Tess2
