// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_hxGeomAlgo__Tess2_ActiveRegion
#include <hxGeomAlgo/_Tess2/ActiveRegion.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessFace
#include <hxGeomAlgo/_Tess2/TessFace.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessHalfEdge
#include <hxGeomAlgo/_Tess2/TessHalfEdge.h>
#endif
#ifndef INCLUDED_hxGeomAlgo__Tess2_TessVertex
#include <hxGeomAlgo/_Tess2/TessVertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_07154760b2367861_341_new,"hxGeomAlgo._Tess2.TessHalfEdge","new",0xf7391510,"hxGeomAlgo._Tess2.TessHalfEdge.new","hxGeomAlgo/Tess2.hx",341,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_07154760b2367861_363_get_Rface,"hxGeomAlgo._Tess2.TessHalfEdge","get_Rface",0xb92c8af6,"hxGeomAlgo._Tess2.TessHalfEdge.get_Rface","hxGeomAlgo/Tess2.hx",363,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_07154760b2367861_364_set_Rface,"hxGeomAlgo._Tess2.TessHalfEdge","set_Rface",0x9c7d7702,"hxGeomAlgo._Tess2.TessHalfEdge.set_Rface","hxGeomAlgo/Tess2.hx",364,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_07154760b2367861_367_get_Dst,"hxGeomAlgo._Tess2.TessHalfEdge","get_Dst",0x8a06232c,"hxGeomAlgo._Tess2.TessHalfEdge.get_Dst","hxGeomAlgo/Tess2.hx",367,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_07154760b2367861_368_set_Dst,"hxGeomAlgo._Tess2.TessHalfEdge","set_Dst",0x7d07b438,"hxGeomAlgo._Tess2.TessHalfEdge.set_Dst","hxGeomAlgo/Tess2.hx",368,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_07154760b2367861_371_get_Oprev,"hxGeomAlgo._Tess2.TessHalfEdge","get_Oprev",0x05a1d7c9,"hxGeomAlgo._Tess2.TessHalfEdge.get_Oprev","hxGeomAlgo/Tess2.hx",371,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_07154760b2367861_375_get_Lprev,"hxGeomAlgo._Tess2.TessHalfEdge","get_Lprev",0x4b6e1a46,"hxGeomAlgo._Tess2.TessHalfEdge.get_Lprev","hxGeomAlgo/Tess2.hx",375,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_07154760b2367861_383_get_Rprev,"hxGeomAlgo._Tess2.TessHalfEdge","get_Rprev",0xbfd5954c,"hxGeomAlgo._Tess2.TessHalfEdge.get_Rprev","hxGeomAlgo/Tess2.hx",383,0xf73e622d)
HX_LOCAL_STACK_FRAME(_hx_pos_07154760b2367861_387_get_Dnext,"hxGeomAlgo._Tess2.TessHalfEdge","get_Dnext",0xaedd3c3e,"hxGeomAlgo._Tess2.TessHalfEdge.get_Dnext","hxGeomAlgo/Tess2.hx",387,0xf73e622d)
namespace hxGeomAlgo{
namespace _Tess2{

void TessHalfEdge_obj::__construct(int side){
            	HX_STACKFRAME(&_hx_pos_07154760b2367861_341_new)
HXLINE( 352)		this->winding = 0;
HXLINE( 351)		this->activeRegion = null();
HXLINE( 348)		this->Lface = null();
HXLINE( 347)		this->Org = null();
HXLINE( 346)		this->Lnext = null();
HXLINE( 345)		this->Onext = null();
HXLINE( 344)		this->Sym = null();
HXLINE( 343)		this->next = null();
HXLINE( 359)		this->side = side;
            	}

Dynamic TessHalfEdge_obj::__CreateEmpty() { return new TessHalfEdge_obj; }

void *TessHalfEdge_obj::_hx_vtable = 0;

Dynamic TessHalfEdge_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TessHalfEdge_obj > _hx_result = new TessHalfEdge_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TessHalfEdge_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1ac011e2;
}

 ::hxGeomAlgo::_Tess2::TessFace TessHalfEdge_obj::get_Rface(){
            	HX_STACKFRAME(&_hx_pos_07154760b2367861_363_get_Rface)
HXDLIN( 363)		return this->Sym->Lface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TessHalfEdge_obj,get_Rface,return )

 ::hxGeomAlgo::_Tess2::TessFace TessHalfEdge_obj::set_Rface( ::hxGeomAlgo::_Tess2::TessFace v){
            	HX_STACKFRAME(&_hx_pos_07154760b2367861_364_set_Rface)
HXDLIN( 364)		return (this->Sym->Lface = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TessHalfEdge_obj,set_Rface,return )

 ::hxGeomAlgo::_Tess2::TessVertex TessHalfEdge_obj::get_Dst(){
            	HX_STACKFRAME(&_hx_pos_07154760b2367861_367_get_Dst)
HXDLIN( 367)		return this->Sym->Org;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TessHalfEdge_obj,get_Dst,return )

 ::hxGeomAlgo::_Tess2::TessVertex TessHalfEdge_obj::set_Dst( ::hxGeomAlgo::_Tess2::TessVertex v){
            	HX_STACKFRAME(&_hx_pos_07154760b2367861_368_set_Dst)
HXDLIN( 368)		return (this->Sym->Org = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TessHalfEdge_obj,set_Dst,return )

 ::hxGeomAlgo::_Tess2::TessHalfEdge TessHalfEdge_obj::get_Oprev(){
            	HX_STACKFRAME(&_hx_pos_07154760b2367861_371_get_Oprev)
HXDLIN( 371)		return this->Sym->Lnext;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TessHalfEdge_obj,get_Oprev,return )

 ::hxGeomAlgo::_Tess2::TessHalfEdge TessHalfEdge_obj::get_Lprev(){
            	HX_STACKFRAME(&_hx_pos_07154760b2367861_375_get_Lprev)
HXDLIN( 375)		return this->Onext->Sym;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TessHalfEdge_obj,get_Lprev,return )

 ::hxGeomAlgo::_Tess2::TessHalfEdge TessHalfEdge_obj::get_Rprev(){
            	HX_STACKFRAME(&_hx_pos_07154760b2367861_383_get_Rprev)
HXDLIN( 383)		return this->Sym->Onext;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TessHalfEdge_obj,get_Rprev,return )

 ::hxGeomAlgo::_Tess2::TessHalfEdge TessHalfEdge_obj::get_Dnext(){
            	HX_STACKFRAME(&_hx_pos_07154760b2367861_387_get_Dnext)
HXDLIN( 387)		return this->Sym->Onext->Sym;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TessHalfEdge_obj,get_Dnext,return )


::hx::ObjectPtr< TessHalfEdge_obj > TessHalfEdge_obj::__new(int side) {
	::hx::ObjectPtr< TessHalfEdge_obj > __this = new TessHalfEdge_obj();
	__this->__construct(side);
	return __this;
}

::hx::ObjectPtr< TessHalfEdge_obj > TessHalfEdge_obj::__alloc(::hx::Ctx *_hx_ctx,int side) {
	TessHalfEdge_obj *__this = (TessHalfEdge_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TessHalfEdge_obj), true, "hxGeomAlgo._Tess2.TessHalfEdge"));
	*(void **)__this = TessHalfEdge_obj::_hx_vtable;
	__this->__construct(side);
	return __this;
}

TessHalfEdge_obj::TessHalfEdge_obj()
{
}

void TessHalfEdge_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TessHalfEdge);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(Sym,"Sym");
	HX_MARK_MEMBER_NAME(Onext,"Onext");
	HX_MARK_MEMBER_NAME(Lnext,"Lnext");
	HX_MARK_MEMBER_NAME(Org,"Org");
	HX_MARK_MEMBER_NAME(Lface,"Lface");
	HX_MARK_MEMBER_NAME(activeRegion,"activeRegion");
	HX_MARK_MEMBER_NAME(winding,"winding");
	HX_MARK_MEMBER_NAME(side,"side");
	HX_MARK_MEMBER_NAME(mark,"mark");
	HX_MARK_END_CLASS();
}

void TessHalfEdge_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(Sym,"Sym");
	HX_VISIT_MEMBER_NAME(Onext,"Onext");
	HX_VISIT_MEMBER_NAME(Lnext,"Lnext");
	HX_VISIT_MEMBER_NAME(Org,"Org");
	HX_VISIT_MEMBER_NAME(Lface,"Lface");
	HX_VISIT_MEMBER_NAME(activeRegion,"activeRegion");
	HX_VISIT_MEMBER_NAME(winding,"winding");
	HX_VISIT_MEMBER_NAME(side,"side");
	HX_VISIT_MEMBER_NAME(mark,"mark");
}

::hx::Val TessHalfEdge_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"Sym") ) { return ::hx::Val( Sym ); }
		if (HX_FIELD_EQ(inName,"Org") ) { return ::hx::Val( Org ); }
		if (HX_FIELD_EQ(inName,"Dst") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_Dst() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"side") ) { return ::hx::Val( side ); }
		if (HX_FIELD_EQ(inName,"mark") ) { return ::hx::Val( mark ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"Onext") ) { return ::hx::Val( Onext ); }
		if (HX_FIELD_EQ(inName,"Lnext") ) { return ::hx::Val( Lnext ); }
		if (HX_FIELD_EQ(inName,"Lface") ) { return ::hx::Val( Lface ); }
		if (HX_FIELD_EQ(inName,"Rface") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_Rface() ); }
		if (HX_FIELD_EQ(inName,"Oprev") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_Oprev() ); }
		if (HX_FIELD_EQ(inName,"Lprev") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_Lprev() ); }
		if (HX_FIELD_EQ(inName,"Rprev") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_Rprev() ); }
		if (HX_FIELD_EQ(inName,"Dnext") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_Dnext() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"winding") ) { return ::hx::Val( winding ); }
		if (HX_FIELD_EQ(inName,"get_Dst") ) { return ::hx::Val( get_Dst_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_Dst") ) { return ::hx::Val( set_Dst_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_Rface") ) { return ::hx::Val( get_Rface_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_Rface") ) { return ::hx::Val( set_Rface_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_Oprev") ) { return ::hx::Val( get_Oprev_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_Lprev") ) { return ::hx::Val( get_Lprev_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_Rprev") ) { return ::hx::Val( get_Rprev_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_Dnext") ) { return ::hx::Val( get_Dnext_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeRegion") ) { return ::hx::Val( activeRegion ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TessHalfEdge_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"Sym") ) { Sym=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Org") ) { Org=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Dst") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_Dst(inValue.Cast<  ::hxGeomAlgo::_Tess2::TessVertex >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
		if (HX_FIELD_EQ(inName,"side") ) { side=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mark") ) { mark=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"Onext") ) { Onext=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Lnext") ) { Lnext=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessHalfEdge >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Lface") ) { Lface=inValue.Cast<  ::hxGeomAlgo::_Tess2::TessFace >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Rface") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_Rface(inValue.Cast<  ::hxGeomAlgo::_Tess2::TessFace >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"winding") ) { winding=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeRegion") ) { activeRegion=inValue.Cast<  ::hxGeomAlgo::_Tess2::ActiveRegion >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TessHalfEdge_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("Sym",e7,64,3f,00));
	outFields->push(HX_("Onext",c2,58,aa,c5));
	outFields->push(HX_("Lnext",3f,9b,76,0b));
	outFields->push(HX_("Org",c4,55,3c,00));
	outFields->push(HX_("Lface",e9,ca,29,06));
	outFields->push(HX_("activeRegion",5a,0f,a8,60));
	outFields->push(HX_("winding",1a,49,70,e8));
	outFields->push(HX_("side",97,8d,53,4c));
	outFields->push(HX_("mark",0d,40,56,48));
	outFields->push(HX_("Rface",ef,45,91,7a));
	outFields->push(HX_("Dst",e5,fd,33,00));
	outFields->push(HX_("Oprev",c2,92,06,c7));
	outFields->push(HX_("Lprev",3f,d5,d2,0c));
	outFields->push(HX_("Rprev",45,50,3a,81));
	outFields->push(HX_("Dnext",37,f7,41,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TessHalfEdge_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(TessHalfEdge_obj,next),HX_("next",f3,84,02,49)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(TessHalfEdge_obj,Sym),HX_("Sym",e7,64,3f,00)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(TessHalfEdge_obj,Onext),HX_("Onext",c2,58,aa,c5)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessHalfEdge */ ,(int)offsetof(TessHalfEdge_obj,Lnext),HX_("Lnext",3f,9b,76,0b)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessVertex */ ,(int)offsetof(TessHalfEdge_obj,Org),HX_("Org",c4,55,3c,00)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::TessFace */ ,(int)offsetof(TessHalfEdge_obj,Lface),HX_("Lface",e9,ca,29,06)},
	{::hx::fsObject /*  ::hxGeomAlgo::_Tess2::ActiveRegion */ ,(int)offsetof(TessHalfEdge_obj,activeRegion),HX_("activeRegion",5a,0f,a8,60)},
	{::hx::fsInt,(int)offsetof(TessHalfEdge_obj,winding),HX_("winding",1a,49,70,e8)},
	{::hx::fsInt,(int)offsetof(TessHalfEdge_obj,side),HX_("side",97,8d,53,4c)},
	{::hx::fsBool,(int)offsetof(TessHalfEdge_obj,mark),HX_("mark",0d,40,56,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TessHalfEdge_obj_sStaticStorageInfo = 0;
#endif

static ::String TessHalfEdge_obj_sMemberFields[] = {
	HX_("next",f3,84,02,49),
	HX_("Sym",e7,64,3f,00),
	HX_("Onext",c2,58,aa,c5),
	HX_("Lnext",3f,9b,76,0b),
	HX_("Org",c4,55,3c,00),
	HX_("Lface",e9,ca,29,06),
	HX_("activeRegion",5a,0f,a8,60),
	HX_("winding",1a,49,70,e8),
	HX_("side",97,8d,53,4c),
	HX_("mark",0d,40,56,48),
	HX_("get_Rface",46,a2,3a,be),
	HX_("set_Rface",52,8e,8b,a1),
	HX_("get_Dst",7c,c6,a8,26),
	HX_("set_Dst",88,57,aa,19),
	HX_("get_Oprev",19,ef,af,0a),
	HX_("get_Lprev",96,31,7c,50),
	HX_("get_Rprev",9c,ac,e3,c4),
	HX_("get_Dnext",8e,53,eb,b3),
	::String(null()) };

::hx::Class TessHalfEdge_obj::__mClass;

void TessHalfEdge_obj::__register()
{
	TessHalfEdge_obj _hx_dummy;
	TessHalfEdge_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxGeomAlgo._Tess2.TessHalfEdge",1e,8d,2d,f8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TessHalfEdge_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TessHalfEdge_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TessHalfEdge_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TessHalfEdge_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxGeomAlgo
} // end namespace _Tess2
