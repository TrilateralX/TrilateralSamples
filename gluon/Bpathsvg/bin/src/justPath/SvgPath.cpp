// Generated by Haxe 4.2.0-rc.1+3ef20749a
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_justPath_EllipseArc
#include <justPath/EllipseArc.h>
#endif
#ifndef INCLUDED_justPath_IPathContext
#include <justPath/IPathContext.h>
#endif
#ifndef INCLUDED_justPath_StoreF6
#include <justPath/StoreF6.h>
#endif
#ifndef INCLUDED_justPath_SvgPath
#include <justPath/SvgPath.h>
#endif

namespace justPath{

void SvgPath_obj::__construct(::Dynamic pathContext_){
	this->l = 0;
	this->c = 0;
	this->controlY = ((Float)0.);
	this->controlX = ((Float)0.);
	this->lastY = ((Float)0.);
	this->lastX = ((Float)0.);
	this->pos = 0;
	this->str = HX_("",00,00,00,00);
	this->pathContext = pathContext_;
}

Dynamic SvgPath_obj::__CreateEmpty() { return new SvgPath_obj; }

void *SvgPath_obj::_hx_vtable = 0;

Dynamic SvgPath_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SvgPath_obj > _hx_result = new SvgPath_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SvgPath_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fb92d04;
}

::String SvgPath_obj::parse(::String str_){
            	HX_JUST_GC_STACKFRAME
	this->str = str_;
	this->pos = 0;
	this->l = this->str.length;
	this->c = this->str.cca(this->pos++);
	int count = 0;
	this->store =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
	while((this->pos < this->l)){
		::haxe::Log_obj::trace((((HX_("pos",94,5d,55,00) + this->pos) + HX_(" ",20,00,00,00)) + this->l),::hx::SourceInfo(HX_("justPath/SvgPath.hx",f3,2a,f9,4d),35,HX_("justPath.SvgPath",8c,a2,03,48),HX_("parse",33,90,55,bd)));
		switch((int)(this->c)){
			case (int)65: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_1;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_1:;
				}
				if ((this->store->l == 7)) {
					Float sx = this->lastX;
					Float sy = this->lastY;
					 ::justPath::StoreF6 _this = this->store;
					 ::Dynamic out = _this->s0;
					if ((_this->l != 0)) {
						_this->s0 = _this->s1;
						_this->s1 = _this->s2;
						_this->s2 = _this->s3;
						_this->s3 = _this->s4;
						_this->s4 = _this->s5;
						_this->s5 = null();
						if (::hx::IsNotNull( _this->s6 )) {
							 ::justPath::StoreF6 _this1 = _this->s6;
							 ::Dynamic out = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									_this1->s5 = _this1->s6->shift();
								}
								_this1->l--;
							}
							_this->s5 = out;
						}
						_this->l--;
					}
					 ::Dynamic xr = out;
					 ::justPath::StoreF6 _this1 = this->store;
					 ::Dynamic out1 = _this1->s0;
					if ((_this1->l != 0)) {
						_this1->s0 = _this1->s1;
						_this1->s1 = _this1->s2;
						_this1->s2 = _this1->s3;
						_this1->s3 = _this1->s4;
						_this1->s4 = _this1->s5;
						_this1->s5 = null();
						if (::hx::IsNotNull( _this1->s6 )) {
							 ::justPath::StoreF6 _this = _this1->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this1->s5 = out;
						}
						_this1->l--;
					}
					 ::Dynamic yr = out1;
					 ::justPath::StoreF6 _this2 = this->store;
					 ::Dynamic out2 = _this2->s0;
					if ((_this2->l != 0)) {
						_this2->s0 = _this2->s1;
						_this2->s1 = _this2->s2;
						_this2->s2 = _this2->s3;
						_this2->s3 = _this2->s4;
						_this2->s4 = _this2->s5;
						_this2->s5 = null();
						if (::hx::IsNotNull( _this2->s6 )) {
							 ::justPath::StoreF6 _this = _this2->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this2->s5 = out;
						}
						_this2->l--;
					}
					 ::Dynamic phi = out2;
					 ::justPath::StoreF6 _this3 = this->store;
					 ::Dynamic out3 = _this3->s0;
					if ((_this3->l != 0)) {
						_this3->s0 = _this3->s1;
						_this3->s1 = _this3->s2;
						_this3->s2 = _this3->s3;
						_this3->s3 = _this3->s4;
						_this3->s4 = _this3->s5;
						_this3->s5 = null();
						if (::hx::IsNotNull( _this3->s6 )) {
							 ::justPath::StoreF6 _this = _this3->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this3->s5 = out;
						}
						_this3->l--;
					}
					int large = ::Std_obj::_hx_int(( (Float)(out3) ));
					 ::justPath::StoreF6 _this4 = this->store;
					 ::Dynamic out4 = _this4->s0;
					if ((_this4->l != 0)) {
						_this4->s0 = _this4->s1;
						_this4->s1 = _this4->s2;
						_this4->s2 = _this4->s3;
						_this4->s3 = _this4->s4;
						_this4->s4 = _this4->s5;
						_this4->s5 = null();
						if (::hx::IsNotNull( _this4->s6 )) {
							 ::justPath::StoreF6 _this = _this4->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this4->s5 = out;
						}
						_this4->l--;
					}
					int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
					 ::justPath::StoreF6 _this5 = this->store;
					 ::Dynamic out5 = _this5->s0;
					if ((_this5->l != 0)) {
						_this5->s0 = _this5->s1;
						_this5->s1 = _this5->s2;
						_this5->s2 = _this5->s3;
						_this5->s3 = _this5->s4;
						_this5->s4 = _this5->s5;
						_this5->s5 = null();
						if (::hx::IsNotNull( _this5->s6 )) {
							 ::justPath::StoreF6 _this = _this5->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this5->s5 = out;
						}
						_this5->l--;
					}
					this->lastX = ( (Float)(out5) );
					 ::justPath::StoreF6 _this6 = this->store;
					 ::Dynamic out6 = _this6->s0;
					if ((_this6->l != 0)) {
						_this6->s0 = _this6->s1;
						_this6->s1 = _this6->s2;
						_this6->s2 = _this6->s3;
						_this6->s3 = _this6->s4;
						_this6->s4 = _this6->s5;
						_this6->s5 = null();
						if (::hx::IsNotNull( _this6->s6 )) {
							 ::justPath::StoreF6 _this = _this6->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this6->s5 = out;
						}
						_this6->l--;
					}
					this->lastY = ( (Float)(out6) );
					Float sx1 = sx;
					Float sy1 = sy;
					Float phi1 = ( (Float)(phi) );
					Float ex = this->lastX;
					Float ey = this->lastY;
					Float mx = ((sx1 - ex) / ( (Float)(2) ));
					Float my = ((sy1 - ey) / ( (Float)(2) ));
					Float ax = ((sx1 + ex) / ( (Float)(2) ));
					Float ay = ((sy1 + ey) / ( (Float)(2) ));
					phi1 = ::hx::Mod(phi1,360);
					phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
					Float sin = ::Math_obj::sin(phi1);
					Float cos = ::Math_obj::cos(phi1);
					Float x1 = ((mx * cos) + (my * sin));
					Float y1 = ((-(mx) * sin) + (my * cos));
					Float rx = ::Math_obj::abs(( (Float)(xr) ));
					Float ry = ::Math_obj::abs(( (Float)(yr) ));
					Float rxx = (rx * rx);
					Float ryy = (ry * ry);
					Float xx1 = (x1 * x1);
					Float yy1 = (y1 * y1);
					Float check = ((xx1 / rxx) + (yy1 / ryy));
					if ((check > 1)) {
						rx = (rx * ::Math_obj::sqrt(check));
						ry = (ry * ::Math_obj::sqrt(check));
						rxx = (rx * rx);
						ryy = (ry * ry);
					}
					int sign;
					if ((large == sweep)) {
						sign = -1;
					}
					else {
						sign = 1;
					}
					Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
					if ((sq < 0)) {
						sq = ( (Float)(0) );
					}
					Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
					Float cx1 = (((coef * rx) * y1) / ry);
					Float cy1 = (((-(coef) * ry) * x1) / rx);
					Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
					Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
					Float phiSin = ::Math_obj::sin(-(phi1));
					Float phiCos = ::Math_obj::cos(-(phi1));
					sx1 = (sx1 - cx);
					sy1 = (sy1 - cy);
					Float dx = sx1;
					Float dy = sy1;
					sx1 = ((dx * phiCos) - (dy * phiSin));
					sy1 = ((dx * phiSin) + (dy * phiCos));
					sx1 = (sx1 + cx);
					sy1 = (sy1 + cy);
					ex = (ex - cx);
					ey = (ey - cy);
					Float dx1 = ex;
					Float dy1 = ey;
					ex = ((dx1 * phiCos) - (dy1 * phiSin));
					ey = ((dx1 * phiSin) + (dy1 * phiCos));
					ex = (ex + cx);
					ey = (ey + cy);
					Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
					Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
					Float delta = (alpha - omega);
					bool _hx_tmp;
					if ((sweep == 1)) {
						_hx_tmp = (delta > 0);
					}
					else {
						_hx_tmp = false;
					}
					if (_hx_tmp) {
						delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
					}
					else {
						bool _hx_tmp;
						if ((sweep == 0)) {
							_hx_tmp = (delta < 0);
						}
						else {
							_hx_tmp = false;
						}
						if (_hx_tmp) {
							delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
						}
					}
					 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
						->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
						->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
						->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
						->setFixed(3,HX_("cx",b5,56,00,00),cx)
						->setFixed(4,HX_("cy",b6,56,00,00),cy)
						->setFixed(5,HX_("rx",c6,63,00,00),rx)
						->setFixed(6,HX_("ry",c7,63,00,00),ry)
						->setFixed(7,HX_("phi",71,57,55,00),phi1)
						->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
						->setFixed(9,HX_("omega",61,a3,d3,31),omega));
					 ::Dynamic ellipseData = this1;
					 ::justPath::EllipseArc ellipse =  ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
					ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
				}
				else {
					if ((this->store->l > 7)) {
						while((this->store->l > 6)){
							Float sx = this->lastX;
							Float sy = this->lastY;
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							 ::Dynamic xr = out;
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							 ::Dynamic yr = out1;
							 ::justPath::StoreF6 _this2 = this->store;
							 ::Dynamic out2 = _this2->s0;
							if ((_this2->l != 0)) {
								_this2->s0 = _this2->s1;
								_this2->s1 = _this2->s2;
								_this2->s2 = _this2->s3;
								_this2->s3 = _this2->s4;
								_this2->s4 = _this2->s5;
								_this2->s5 = null();
								if (::hx::IsNotNull( _this2->s6 )) {
									 ::justPath::StoreF6 _this = _this2->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this2->s5 = out;
								}
								_this2->l--;
							}
							 ::Dynamic phi = out2;
							 ::justPath::StoreF6 _this3 = this->store;
							 ::Dynamic out3 = _this3->s0;
							if ((_this3->l != 0)) {
								_this3->s0 = _this3->s1;
								_this3->s1 = _this3->s2;
								_this3->s2 = _this3->s3;
								_this3->s3 = _this3->s4;
								_this3->s4 = _this3->s5;
								_this3->s5 = null();
								if (::hx::IsNotNull( _this3->s6 )) {
									 ::justPath::StoreF6 _this = _this3->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this3->s5 = out;
								}
								_this3->l--;
							}
							int large = ::Std_obj::_hx_int(( (Float)(out3) ));
							 ::justPath::StoreF6 _this4 = this->store;
							 ::Dynamic out4 = _this4->s0;
							if ((_this4->l != 0)) {
								_this4->s0 = _this4->s1;
								_this4->s1 = _this4->s2;
								_this4->s2 = _this4->s3;
								_this4->s3 = _this4->s4;
								_this4->s4 = _this4->s5;
								_this4->s5 = null();
								if (::hx::IsNotNull( _this4->s6 )) {
									 ::justPath::StoreF6 _this = _this4->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this4->s5 = out;
								}
								_this4->l--;
							}
							int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
							 ::justPath::StoreF6 _this5 = this->store;
							 ::Dynamic out5 = _this5->s0;
							if ((_this5->l != 0)) {
								_this5->s0 = _this5->s1;
								_this5->s1 = _this5->s2;
								_this5->s2 = _this5->s3;
								_this5->s3 = _this5->s4;
								_this5->s4 = _this5->s5;
								_this5->s5 = null();
								if (::hx::IsNotNull( _this5->s6 )) {
									 ::justPath::StoreF6 _this = _this5->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this5->s5 = out;
								}
								_this5->l--;
							}
							this->lastX = ( (Float)(out5) );
							 ::justPath::StoreF6 _this6 = this->store;
							 ::Dynamic out6 = _this6->s0;
							if ((_this6->l != 0)) {
								_this6->s0 = _this6->s1;
								_this6->s1 = _this6->s2;
								_this6->s2 = _this6->s3;
								_this6->s3 = _this6->s4;
								_this6->s4 = _this6->s5;
								_this6->s5 = null();
								if (::hx::IsNotNull( _this6->s6 )) {
									 ::justPath::StoreF6 _this = _this6->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this6->s5 = out;
								}
								_this6->l--;
							}
							this->lastY = ( (Float)(out6) );
							Float sx1 = sx;
							Float sy1 = sy;
							Float phi1 = ( (Float)(phi) );
							Float ex = this->lastX;
							Float ey = this->lastY;
							Float mx = ((sx1 - ex) / ( (Float)(2) ));
							Float my = ((sy1 - ey) / ( (Float)(2) ));
							Float ax = ((sx1 + ex) / ( (Float)(2) ));
							Float ay = ((sy1 + ey) / ( (Float)(2) ));
							phi1 = ::hx::Mod(phi1,360);
							phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
							Float sin = ::Math_obj::sin(phi1);
							Float cos = ::Math_obj::cos(phi1);
							Float x1 = ((mx * cos) + (my * sin));
							Float y1 = ((-(mx) * sin) + (my * cos));
							Float rx = ::Math_obj::abs(( (Float)(xr) ));
							Float ry = ::Math_obj::abs(( (Float)(yr) ));
							Float rxx = (rx * rx);
							Float ryy = (ry * ry);
							Float xx1 = (x1 * x1);
							Float yy1 = (y1 * y1);
							Float check = ((xx1 / rxx) + (yy1 / ryy));
							if ((check > 1)) {
								rx = (rx * ::Math_obj::sqrt(check));
								ry = (ry * ::Math_obj::sqrt(check));
								rxx = (rx * rx);
								ryy = (ry * ry);
							}
							int sign;
							if ((large == sweep)) {
								sign = -1;
							}
							else {
								sign = 1;
							}
							Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
							if ((sq < 0)) {
								sq = ( (Float)(0) );
							}
							Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
							Float cx1 = (((coef * rx) * y1) / ry);
							Float cy1 = (((-(coef) * ry) * x1) / rx);
							Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
							Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
							Float phiSin = ::Math_obj::sin(-(phi1));
							Float phiCos = ::Math_obj::cos(-(phi1));
							sx1 = (sx1 - cx);
							sy1 = (sy1 - cy);
							Float dx = sx1;
							Float dy = sy1;
							sx1 = ((dx * phiCos) - (dy * phiSin));
							sy1 = ((dx * phiSin) + (dy * phiCos));
							sx1 = (sx1 + cx);
							sy1 = (sy1 + cy);
							ex = (ex - cx);
							ey = (ey - cy);
							Float dx1 = ex;
							Float dy1 = ey;
							ex = ((dx1 * phiCos) - (dy1 * phiSin));
							ey = ((dx1 * phiSin) + (dy1 * phiCos));
							ex = (ex + cx);
							ey = (ey + cy);
							Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
							Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
							Float delta = (alpha - omega);
							bool _hx_tmp;
							if ((sweep == 1)) {
								_hx_tmp = (delta > 0);
							}
							else {
								_hx_tmp = false;
							}
							if (_hx_tmp) {
								delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
							}
							else {
								bool _hx_tmp;
								if ((sweep == 0)) {
									_hx_tmp = (delta < 0);
								}
								else {
									_hx_tmp = false;
								}
								if (_hx_tmp) {
									delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
								}
							}
							 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
								->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
								->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
								->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
								->setFixed(3,HX_("cx",b5,56,00,00),cx)
								->setFixed(4,HX_("cy",b6,56,00,00),cy)
								->setFixed(5,HX_("rx",c6,63,00,00),rx)
								->setFixed(6,HX_("ry",c7,63,00,00),ry)
								->setFixed(7,HX_("phi",71,57,55,00),phi1)
								->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
								->setFixed(9,HX_("omega",61,a3,d3,31),omega));
							 ::Dynamic ellipseData = this1;
							 ::justPath::EllipseArc ellipse =  ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
							ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
						}
					}
				}
			}
			break;
			case (int)66: {
				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
				::String _hx_tmp1 = (((this->pos + HX_(" ",20,00,00,00)) + count) + HX_("  ",00,1c,00,00));
				::String _hx_tmp2 = (_hx_tmp1 + ::Std_obj::string(this->store));
				_hx_tmp(_hx_tmp2,::hx::SourceInfo(HX_("justPath/SvgPath.hx",f3,2a,f9,4d),378,HX_("justPath.SvgPath",8c,a2,03,48),HX_("parse",33,90,55,bd)));
				::haxe::Log_obj::trace(HX_("bearing - not implemented",90,1f,b8,d8),::hx::SourceInfo(HX_("justPath/SvgPath.hx",f3,2a,f9,4d),379,HX_("justPath.SvgPath",8c,a2,03,48),HX_("parse",33,90,55,bd)));
				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("bearing not supported please remove",09,97,54,2d)));
			}
			break;
			case (int)67: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_3;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_3:;
				}
				if ((this->store->l == 4)) {
					this->controlX = ( (Float)(this->store->s2) );
					this->controlY = ( (Float)(this->store->s3) );
					this->lastX = ( (Float)(this->store->s4) );
					this->lastY = ( (Float)(this->store->s5) );
					::justPath::IPathContext_obj::curveTo(this->pathContext,this->store->s0,this->store->s1,this->controlX,this->controlY,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 4)) {
						while((this->store->l > 3)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							 ::Dynamic firstX = out;
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							 ::Dynamic firstY = out1;
							 ::justPath::StoreF6 _this2 = this->store;
							 ::Dynamic out2 = _this2->s0;
							if ((_this2->l != 0)) {
								_this2->s0 = _this2->s1;
								_this2->s1 = _this2->s2;
								_this2->s2 = _this2->s3;
								_this2->s3 = _this2->s4;
								_this2->s4 = _this2->s5;
								_this2->s5 = null();
								if (::hx::IsNotNull( _this2->s6 )) {
									 ::justPath::StoreF6 _this = _this2->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this2->s5 = out;
								}
								_this2->l--;
							}
							this->controlX = ( (Float)(out2) );
							 ::justPath::StoreF6 _this3 = this->store;
							 ::Dynamic out3 = _this3->s0;
							if ((_this3->l != 0)) {
								_this3->s0 = _this3->s1;
								_this3->s1 = _this3->s2;
								_this3->s2 = _this3->s3;
								_this3->s3 = _this3->s4;
								_this3->s4 = _this3->s5;
								_this3->s5 = null();
								if (::hx::IsNotNull( _this3->s6 )) {
									 ::justPath::StoreF6 _this = _this3->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this3->s5 = out;
								}
								_this3->l--;
							}
							this->controlY = ( (Float)(out3) );
							 ::justPath::StoreF6 _this4 = this->store;
							 ::Dynamic out4 = _this4->s0;
							if ((_this4->l != 0)) {
								_this4->s0 = _this4->s1;
								_this4->s1 = _this4->s2;
								_this4->s2 = _this4->s3;
								_this4->s3 = _this4->s4;
								_this4->s4 = _this4->s5;
								_this4->s5 = null();
								if (::hx::IsNotNull( _this4->s6 )) {
									 ::justPath::StoreF6 _this = _this4->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this4->s5 = out;
								}
								_this4->l--;
							}
							this->lastX = ( (Float)(out4) );
							 ::justPath::StoreF6 _this5 = this->store;
							 ::Dynamic out5 = _this5->s0;
							if ((_this5->l != 0)) {
								_this5->s0 = _this5->s1;
								_this5->s1 = _this5->s2;
								_this5->s2 = _this5->s3;
								_this5->s3 = _this5->s4;
								_this5->s4 = _this5->s5;
								_this5->s5 = null();
								if (::hx::IsNotNull( _this5->s6 )) {
									 ::justPath::StoreF6 _this = _this5->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this5->s5 = out;
								}
								_this5->l--;
							}
							this->lastY = ( (Float)(out5) );
							::justPath::IPathContext_obj::curveTo(this->pathContext,firstX,firstY,this->controlX,this->controlY,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)72: {
				{
					 ::Dynamic process = false;
					if (::hx::IsNull( process )) {
						process = true;
					}
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_5;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_5:;
				}
				if ((this->store->l == 1)) {
					this->lastX = ( (Float)(this->store->s0) );
					::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 1)) {
						while((this->store->l > 0)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->lastX = ( (Float)(out) );
							::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)76: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_7;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_7:;
				}
				if ((this->store->l == 2)) {
					this->lastX = ( (Float)(this->store->s0) );
					this->lastY = ( (Float)(this->store->s1) );
					::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 2)) {
						while((this->store->l > 1)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->lastX = ( (Float)(out) );
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							this->lastY = ( (Float)(out1) );
							::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)77: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_9;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_9:;
				}
				if ((this->store->l == 2)) {
					this->lastX = ( (Float)(this->store->s0) );
					this->lastY = ( (Float)(this->store->s1) );
					::justPath::IPathContext_obj::moveTo(this->pathContext,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 2)) {
						 ::justPath::StoreF6 _this = this->store;
						 ::Dynamic out = _this->s0;
						if ((_this->l != 0)) {
							_this->s0 = _this->s1;
							_this->s1 = _this->s2;
							_this->s2 = _this->s3;
							_this->s3 = _this->s4;
							_this->s4 = _this->s5;
							_this->s5 = null();
							if (::hx::IsNotNull( _this->s6 )) {
								 ::justPath::StoreF6 _this1 = _this->s6;
								 ::Dynamic out = _this1->s0;
								if ((_this1->l != 0)) {
									_this1->s0 = _this1->s1;
									_this1->s1 = _this1->s2;
									_this1->s2 = _this1->s3;
									_this1->s3 = _this1->s4;
									_this1->s4 = _this1->s5;
									_this1->s5 = null();
									if (::hx::IsNotNull( _this1->s6 )) {
										_this1->s5 = _this1->s6->shift();
									}
									_this1->l--;
								}
								_this->s5 = out;
							}
							_this->l--;
						}
						this->lastX = ( (Float)(out) );
						 ::justPath::StoreF6 _this1 = this->store;
						 ::Dynamic out1 = _this1->s0;
						if ((_this1->l != 0)) {
							_this1->s0 = _this1->s1;
							_this1->s1 = _this1->s2;
							_this1->s2 = _this1->s3;
							_this1->s3 = _this1->s4;
							_this1->s4 = _this1->s5;
							_this1->s5 = null();
							if (::hx::IsNotNull( _this1->s6 )) {
								 ::justPath::StoreF6 _this = _this1->s6;
								 ::Dynamic out = _this->s0;
								if ((_this->l != 0)) {
									_this->s0 = _this->s1;
									_this->s1 = _this->s2;
									_this->s2 = _this->s3;
									_this->s3 = _this->s4;
									_this->s4 = _this->s5;
									_this->s5 = null();
									if (::hx::IsNotNull( _this->s6 )) {
										_this->s5 = _this->s6->shift();
									}
									_this->l--;
								}
								_this1->s5 = out;
							}
							_this1->l--;
						}
						this->lastY = ( (Float)(out1) );
						::justPath::IPathContext_obj::moveTo(this->pathContext,this->lastX,this->lastY);
						while((this->store->l > 1)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->lastX = ( (Float)(out) );
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							this->lastY = ( (Float)(out1) );
							::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)81: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_11;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_11:;
				}
				if ((this->store->l == 4)) {
					this->controlX = ( (Float)(this->store->s0) );
					this->controlY = ( (Float)(this->store->s1) );
					this->lastX = ( (Float)(this->store->s2) );
					this->lastY = ( (Float)(this->store->s3) );
					::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 4)) {
						while((this->store->l > 3)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->controlX = ( (Float)(out) );
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							this->controlY = ( (Float)(out1) );
							 ::justPath::StoreF6 _this2 = this->store;
							 ::Dynamic out2 = _this2->s0;
							if ((_this2->l != 0)) {
								_this2->s0 = _this2->s1;
								_this2->s1 = _this2->s2;
								_this2->s2 = _this2->s3;
								_this2->s3 = _this2->s4;
								_this2->s4 = _this2->s5;
								_this2->s5 = null();
								if (::hx::IsNotNull( _this2->s6 )) {
									 ::justPath::StoreF6 _this = _this2->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this2->s5 = out;
								}
								_this2->l--;
							}
							this->lastX = ( (Float)(out2) );
							 ::justPath::StoreF6 _this3 = this->store;
							 ::Dynamic out3 = _this3->s0;
							if ((_this3->l != 0)) {
								_this3->s0 = _this3->s1;
								_this3->s1 = _this3->s2;
								_this3->s2 = _this3->s3;
								_this3->s3 = _this3->s4;
								_this3->s4 = _this3->s5;
								_this3->s5 = null();
								if (::hx::IsNotNull( _this3->s6 )) {
									 ::justPath::StoreF6 _this = _this3->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this3->s5 = out;
								}
								_this3->l--;
							}
							this->lastY = ( (Float)(out3) );
							::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)83: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_13;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_13:;
				}
				if ((this->store->l == 4)) {
					 ::Dynamic firstX = this->store->s0;
					 ::Dynamic firstY = this->store->s1;
					this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
					this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
					 ::Dynamic endX = this->store->s2;
					 ::Dynamic endY = this->store->s3;
					::justPath::IPathContext_obj::curveTo(this->pathContext,this->controlX,this->controlY,firstX,firstY,endX,endY);
					this->controlX = ( (Float)(this->store->s0) );
					this->controlY = ( (Float)(this->store->s1) );
					this->lastX = ( (Float)(endX) );
					this->lastY = ( (Float)(endY) );
				}
				else {
					if ((this->store->l > 4)) {
						while((this->store->l > 3)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							 ::Dynamic firstX = out;
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							 ::Dynamic firstY = out1;
							this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
							this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
							 ::justPath::StoreF6 _this2 = this->store;
							 ::Dynamic out2 = _this2->s0;
							if ((_this2->l != 0)) {
								_this2->s0 = _this2->s1;
								_this2->s1 = _this2->s2;
								_this2->s2 = _this2->s3;
								_this2->s3 = _this2->s4;
								_this2->s4 = _this2->s5;
								_this2->s5 = null();
								if (::hx::IsNotNull( _this2->s6 )) {
									 ::justPath::StoreF6 _this = _this2->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this2->s5 = out;
								}
								_this2->l--;
							}
							this->lastX = ( (Float)(out2) );
							 ::justPath::StoreF6 _this3 = this->store;
							 ::Dynamic out3 = _this3->s0;
							if ((_this3->l != 0)) {
								_this3->s0 = _this3->s1;
								_this3->s1 = _this3->s2;
								_this3->s2 = _this3->s3;
								_this3->s3 = _this3->s4;
								_this3->s4 = _this3->s5;
								_this3->s5 = null();
								if (::hx::IsNotNull( _this3->s6 )) {
									 ::justPath::StoreF6 _this = _this3->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this3->s5 = out;
								}
								_this3->l--;
							}
							this->lastY = ( (Float)(out3) );
							::justPath::IPathContext_obj::curveTo(this->pathContext,this->controlX,this->controlY,firstX,firstY,this->lastX,this->lastY);
							this->controlX = ( (Float)(firstX) );
							this->controlY = ( (Float)(firstY) );
						}
					}
				}
			}
			break;
			case (int)84: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_15;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_15:;
				}
				if ((this->store->l == 2)) {
					this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
					this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
					this->lastX = ( (Float)(this->store->s0) );
					this->lastY = ( (Float)(this->store->s1) );
					::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 2)) {
						while((this->store->l > 1)){
							this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
							this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->lastX = ( (Float)(out) );
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							this->lastY = ( (Float)(out1) );
							::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)86: {
				{
					 ::Dynamic process = false;
					if (::hx::IsNull( process )) {
						process = true;
					}
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_17;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_17:;
				}
				if ((this->store->l == 1)) {
					 ::justPath::StoreF6 _this = this->store;
					 ::Dynamic out = _this->s0;
					if ((_this->l != 0)) {
						_this->s0 = _this->s1;
						_this->s1 = _this->s2;
						_this->s2 = _this->s3;
						_this->s3 = _this->s4;
						_this->s4 = _this->s5;
						_this->s5 = null();
						if (::hx::IsNotNull( _this->s6 )) {
							 ::justPath::StoreF6 _this1 = _this->s6;
							 ::Dynamic out = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									_this1->s5 = _this1->s6->shift();
								}
								_this1->l--;
							}
							_this->s5 = out;
						}
						_this->l--;
					}
					this->lastY = ( (Float)(out) );
					::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 1)) {
						while((this->store->l > 0)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->lastY = ( (Float)(out) );
							::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)90: case (int)122: {
				this->lastX = ( (Float)(0) );
				this->lastY = ( (Float)(0) );
			}
			break;
			case (int)97: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_19;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_19:;
				}
				if ((this->store->l == 7)) {
					Float sx = this->lastX;
					Float sy = this->lastY;
					 ::justPath::StoreF6 _this = this->store;
					 ::Dynamic out = _this->s0;
					if ((_this->l != 0)) {
						_this->s0 = _this->s1;
						_this->s1 = _this->s2;
						_this->s2 = _this->s3;
						_this->s3 = _this->s4;
						_this->s4 = _this->s5;
						_this->s5 = null();
						if (::hx::IsNotNull( _this->s6 )) {
							 ::justPath::StoreF6 _this1 = _this->s6;
							 ::Dynamic out = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									_this1->s5 = _this1->s6->shift();
								}
								_this1->l--;
							}
							_this->s5 = out;
						}
						_this->l--;
					}
					 ::Dynamic xr = out;
					 ::justPath::StoreF6 _this1 = this->store;
					 ::Dynamic out1 = _this1->s0;
					if ((_this1->l != 0)) {
						_this1->s0 = _this1->s1;
						_this1->s1 = _this1->s2;
						_this1->s2 = _this1->s3;
						_this1->s3 = _this1->s4;
						_this1->s4 = _this1->s5;
						_this1->s5 = null();
						if (::hx::IsNotNull( _this1->s6 )) {
							 ::justPath::StoreF6 _this = _this1->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this1->s5 = out;
						}
						_this1->l--;
					}
					 ::Dynamic yr = out1;
					 ::justPath::StoreF6 _this2 = this->store;
					 ::Dynamic out2 = _this2->s0;
					if ((_this2->l != 0)) {
						_this2->s0 = _this2->s1;
						_this2->s1 = _this2->s2;
						_this2->s2 = _this2->s3;
						_this2->s3 = _this2->s4;
						_this2->s4 = _this2->s5;
						_this2->s5 = null();
						if (::hx::IsNotNull( _this2->s6 )) {
							 ::justPath::StoreF6 _this = _this2->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this2->s5 = out;
						}
						_this2->l--;
					}
					 ::Dynamic phi = out2;
					 ::justPath::StoreF6 _this3 = this->store;
					 ::Dynamic out3 = _this3->s0;
					if ((_this3->l != 0)) {
						_this3->s0 = _this3->s1;
						_this3->s1 = _this3->s2;
						_this3->s2 = _this3->s3;
						_this3->s3 = _this3->s4;
						_this3->s4 = _this3->s5;
						_this3->s5 = null();
						if (::hx::IsNotNull( _this3->s6 )) {
							 ::justPath::StoreF6 _this = _this3->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this3->s5 = out;
						}
						_this3->l--;
					}
					int large = ::Std_obj::_hx_int(( (Float)(out3) ));
					 ::justPath::StoreF6 _this4 = this->store;
					 ::Dynamic out4 = _this4->s0;
					if ((_this4->l != 0)) {
						_this4->s0 = _this4->s1;
						_this4->s1 = _this4->s2;
						_this4->s2 = _this4->s3;
						_this4->s3 = _this4->s4;
						_this4->s4 = _this4->s5;
						_this4->s5 = null();
						if (::hx::IsNotNull( _this4->s6 )) {
							 ::justPath::StoreF6 _this = _this4->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this4->s5 = out;
						}
						_this4->l--;
					}
					int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
					 ::justPath::StoreF6 _this5 = this->store;
					 ::Dynamic out5 = _this5->s0;
					if ((_this5->l != 0)) {
						_this5->s0 = _this5->s1;
						_this5->s1 = _this5->s2;
						_this5->s2 = _this5->s3;
						_this5->s3 = _this5->s4;
						_this5->s4 = _this5->s5;
						_this5->s5 = null();
						if (::hx::IsNotNull( _this5->s6 )) {
							 ::justPath::StoreF6 _this = _this5->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this5->s5 = out;
						}
						_this5->l--;
					}
					this->lastX = (out5 + this->lastX);
					 ::justPath::StoreF6 _this6 = this->store;
					 ::Dynamic out6 = _this6->s0;
					if ((_this6->l != 0)) {
						_this6->s0 = _this6->s1;
						_this6->s1 = _this6->s2;
						_this6->s2 = _this6->s3;
						_this6->s3 = _this6->s4;
						_this6->s4 = _this6->s5;
						_this6->s5 = null();
						if (::hx::IsNotNull( _this6->s6 )) {
							 ::justPath::StoreF6 _this = _this6->s6;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									_this->s5 = _this->s6->shift();
								}
								_this->l--;
							}
							_this6->s5 = out;
						}
						_this6->l--;
					}
					this->lastY = (out6 + this->lastY);
					Float sx1 = sx;
					Float sy1 = sy;
					Float phi1 = ( (Float)(phi) );
					Float ex = this->lastX;
					Float ey = this->lastY;
					Float mx = ((sx1 - ex) / ( (Float)(2) ));
					Float my = ((sy1 - ey) / ( (Float)(2) ));
					Float ax = ((sx1 + ex) / ( (Float)(2) ));
					Float ay = ((sy1 + ey) / ( (Float)(2) ));
					phi1 = ::hx::Mod(phi1,360);
					phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
					Float sin = ::Math_obj::sin(phi1);
					Float cos = ::Math_obj::cos(phi1);
					Float x1 = ((mx * cos) + (my * sin));
					Float y1 = ((-(mx) * sin) + (my * cos));
					Float rx = ::Math_obj::abs(( (Float)(xr) ));
					Float ry = ::Math_obj::abs(( (Float)(yr) ));
					Float rxx = (rx * rx);
					Float ryy = (ry * ry);
					Float xx1 = (x1 * x1);
					Float yy1 = (y1 * y1);
					Float check = ((xx1 / rxx) + (yy1 / ryy));
					if ((check > 1)) {
						rx = (rx * ::Math_obj::sqrt(check));
						ry = (ry * ::Math_obj::sqrt(check));
						rxx = (rx * rx);
						ryy = (ry * ry);
					}
					int sign;
					if ((large == sweep)) {
						sign = -1;
					}
					else {
						sign = 1;
					}
					Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
					if ((sq < 0)) {
						sq = ( (Float)(0) );
					}
					Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
					Float cx1 = (((coef * rx) * y1) / ry);
					Float cy1 = (((-(coef) * ry) * x1) / rx);
					Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
					Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
					Float phiSin = ::Math_obj::sin(-(phi1));
					Float phiCos = ::Math_obj::cos(-(phi1));
					sx1 = (sx1 - cx);
					sy1 = (sy1 - cy);
					Float dx = sx1;
					Float dy = sy1;
					sx1 = ((dx * phiCos) - (dy * phiSin));
					sy1 = ((dx * phiSin) + (dy * phiCos));
					sx1 = (sx1 + cx);
					sy1 = (sy1 + cy);
					ex = (ex - cx);
					ey = (ey - cy);
					Float dx1 = ex;
					Float dy1 = ey;
					ex = ((dx1 * phiCos) - (dy1 * phiSin));
					ey = ((dx1 * phiSin) + (dy1 * phiCos));
					ex = (ex + cx);
					ey = (ey + cy);
					Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
					Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
					Float delta = (alpha - omega);
					bool _hx_tmp;
					if ((sweep == 1)) {
						_hx_tmp = (delta > 0);
					}
					else {
						_hx_tmp = false;
					}
					if (_hx_tmp) {
						delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
					}
					else {
						bool _hx_tmp;
						if ((sweep == 0)) {
							_hx_tmp = (delta < 0);
						}
						else {
							_hx_tmp = false;
						}
						if (_hx_tmp) {
							delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
						}
					}
					 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
						->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
						->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
						->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
						->setFixed(3,HX_("cx",b5,56,00,00),cx)
						->setFixed(4,HX_("cy",b6,56,00,00),cy)
						->setFixed(5,HX_("rx",c6,63,00,00),rx)
						->setFixed(6,HX_("ry",c7,63,00,00),ry)
						->setFixed(7,HX_("phi",71,57,55,00),phi1)
						->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
						->setFixed(9,HX_("omega",61,a3,d3,31),omega));
					 ::Dynamic ellipseData = this1;
					 ::justPath::EllipseArc ellipse =  ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
					ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
				}
				else {
					if ((this->store->l > 7)) {
						while((this->store->l > 6)){
							Float sx = this->lastX;
							Float sy = this->lastY;
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							 ::Dynamic xr = out;
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							 ::Dynamic yr = out1;
							 ::justPath::StoreF6 _this2 = this->store;
							 ::Dynamic out2 = _this2->s0;
							if ((_this2->l != 0)) {
								_this2->s0 = _this2->s1;
								_this2->s1 = _this2->s2;
								_this2->s2 = _this2->s3;
								_this2->s3 = _this2->s4;
								_this2->s4 = _this2->s5;
								_this2->s5 = null();
								if (::hx::IsNotNull( _this2->s6 )) {
									 ::justPath::StoreF6 _this = _this2->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this2->s5 = out;
								}
								_this2->l--;
							}
							 ::Dynamic phi = out2;
							 ::justPath::StoreF6 _this3 = this->store;
							 ::Dynamic out3 = _this3->s0;
							if ((_this3->l != 0)) {
								_this3->s0 = _this3->s1;
								_this3->s1 = _this3->s2;
								_this3->s2 = _this3->s3;
								_this3->s3 = _this3->s4;
								_this3->s4 = _this3->s5;
								_this3->s5 = null();
								if (::hx::IsNotNull( _this3->s6 )) {
									 ::justPath::StoreF6 _this = _this3->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this3->s5 = out;
								}
								_this3->l--;
							}
							int large = ::Std_obj::_hx_int(( (Float)(out3) ));
							 ::justPath::StoreF6 _this4 = this->store;
							 ::Dynamic out4 = _this4->s0;
							if ((_this4->l != 0)) {
								_this4->s0 = _this4->s1;
								_this4->s1 = _this4->s2;
								_this4->s2 = _this4->s3;
								_this4->s3 = _this4->s4;
								_this4->s4 = _this4->s5;
								_this4->s5 = null();
								if (::hx::IsNotNull( _this4->s6 )) {
									 ::justPath::StoreF6 _this = _this4->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this4->s5 = out;
								}
								_this4->l--;
							}
							int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
							 ::justPath::StoreF6 _this5 = this->store;
							 ::Dynamic out5 = _this5->s0;
							if ((_this5->l != 0)) {
								_this5->s0 = _this5->s1;
								_this5->s1 = _this5->s2;
								_this5->s2 = _this5->s3;
								_this5->s3 = _this5->s4;
								_this5->s4 = _this5->s5;
								_this5->s5 = null();
								if (::hx::IsNotNull( _this5->s6 )) {
									 ::justPath::StoreF6 _this = _this5->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this5->s5 = out;
								}
								_this5->l--;
							}
							this->lastX = (out5 + this->lastX);
							 ::justPath::StoreF6 _this6 = this->store;
							 ::Dynamic out6 = _this6->s0;
							if ((_this6->l != 0)) {
								_this6->s0 = _this6->s1;
								_this6->s1 = _this6->s2;
								_this6->s2 = _this6->s3;
								_this6->s3 = _this6->s4;
								_this6->s4 = _this6->s5;
								_this6->s5 = null();
								if (::hx::IsNotNull( _this6->s6 )) {
									 ::justPath::StoreF6 _this = _this6->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this6->s5 = out;
								}
								_this6->l--;
							}
							this->lastY = (out6 + this->lastY);
							Float sx1 = sx;
							Float sy1 = sy;
							Float phi1 = ( (Float)(phi) );
							Float ex = this->lastX;
							Float ey = this->lastY;
							Float mx = ((sx1 - ex) / ( (Float)(2) ));
							Float my = ((sy1 - ey) / ( (Float)(2) ));
							Float ax = ((sx1 + ex) / ( (Float)(2) ));
							Float ay = ((sy1 + ey) / ( (Float)(2) ));
							phi1 = ::hx::Mod(phi1,360);
							phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
							Float sin = ::Math_obj::sin(phi1);
							Float cos = ::Math_obj::cos(phi1);
							Float x1 = ((mx * cos) + (my * sin));
							Float y1 = ((-(mx) * sin) + (my * cos));
							Float rx = ::Math_obj::abs(( (Float)(xr) ));
							Float ry = ::Math_obj::abs(( (Float)(yr) ));
							Float rxx = (rx * rx);
							Float ryy = (ry * ry);
							Float xx1 = (x1 * x1);
							Float yy1 = (y1 * y1);
							Float check = ((xx1 / rxx) + (yy1 / ryy));
							if ((check > 1)) {
								rx = (rx * ::Math_obj::sqrt(check));
								ry = (ry * ::Math_obj::sqrt(check));
								rxx = (rx * rx);
								ryy = (ry * ry);
							}
							int sign;
							if ((large == sweep)) {
								sign = -1;
							}
							else {
								sign = 1;
							}
							Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
							if ((sq < 0)) {
								sq = ( (Float)(0) );
							}
							Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
							Float cx1 = (((coef * rx) * y1) / ry);
							Float cy1 = (((-(coef) * ry) * x1) / rx);
							Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
							Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
							Float phiSin = ::Math_obj::sin(-(phi1));
							Float phiCos = ::Math_obj::cos(-(phi1));
							sx1 = (sx1 - cx);
							sy1 = (sy1 - cy);
							Float dx = sx1;
							Float dy = sy1;
							sx1 = ((dx * phiCos) - (dy * phiSin));
							sy1 = ((dx * phiSin) + (dy * phiCos));
							sx1 = (sx1 + cx);
							sy1 = (sy1 + cy);
							ex = (ex - cx);
							ey = (ey - cy);
							Float dx1 = ex;
							Float dy1 = ey;
							ex = ((dx1 * phiCos) - (dy1 * phiSin));
							ey = ((dx1 * phiSin) + (dy1 * phiCos));
							ex = (ex + cx);
							ey = (ey + cy);
							Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
							Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
							Float delta = (alpha - omega);
							bool _hx_tmp;
							if ((sweep == 1)) {
								_hx_tmp = (delta > 0);
							}
							else {
								_hx_tmp = false;
							}
							if (_hx_tmp) {
								delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
							}
							else {
								bool _hx_tmp;
								if ((sweep == 0)) {
									_hx_tmp = (delta < 0);
								}
								else {
									_hx_tmp = false;
								}
								if (_hx_tmp) {
									delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
								}
							}
							 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
								->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
								->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
								->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
								->setFixed(3,HX_("cx",b5,56,00,00),cx)
								->setFixed(4,HX_("cy",b6,56,00,00),cy)
								->setFixed(5,HX_("rx",c6,63,00,00),rx)
								->setFixed(6,HX_("ry",c7,63,00,00),ry)
								->setFixed(7,HX_("phi",71,57,55,00),phi1)
								->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
								->setFixed(9,HX_("omega",61,a3,d3,31),omega));
							 ::Dynamic ellipseData = this1;
							 ::justPath::EllipseArc ellipse =  ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
							ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
						}
					}
				}
			}
			break;
			case (int)99: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_21;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_21:;
				}
				if ((this->store->l == 4)) {
					Float firstX = (this->store->s0 + this->lastX);
					Float firstY = (this->store->s1 + this->lastY);
					this->controlX = (this->store->s2 + this->lastX);
					this->controlY = (this->store->s3 + this->lastY);
					this->lastX = (this->store->s4 + this->lastX);
					this->lastY = (this->store->s5 + this->lastY);
					::justPath::IPathContext_obj::curveTo(this->pathContext,firstX,firstY,this->controlX,this->controlY,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 4)) {
						while((this->store->l > 3)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							Float firstX = (out + this->lastX);
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							Float firstY = (out1 + this->lastY);
							 ::justPath::StoreF6 _this2 = this->store;
							 ::Dynamic out2 = _this2->s0;
							if ((_this2->l != 0)) {
								_this2->s0 = _this2->s1;
								_this2->s1 = _this2->s2;
								_this2->s2 = _this2->s3;
								_this2->s3 = _this2->s4;
								_this2->s4 = _this2->s5;
								_this2->s5 = null();
								if (::hx::IsNotNull( _this2->s6 )) {
									 ::justPath::StoreF6 _this = _this2->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this2->s5 = out;
								}
								_this2->l--;
							}
							this->controlX = (out2 + this->lastX);
							 ::justPath::StoreF6 _this3 = this->store;
							 ::Dynamic out3 = _this3->s0;
							if ((_this3->l != 0)) {
								_this3->s0 = _this3->s1;
								_this3->s1 = _this3->s2;
								_this3->s2 = _this3->s3;
								_this3->s3 = _this3->s4;
								_this3->s4 = _this3->s5;
								_this3->s5 = null();
								if (::hx::IsNotNull( _this3->s6 )) {
									 ::justPath::StoreF6 _this = _this3->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this3->s5 = out;
								}
								_this3->l--;
							}
							this->controlY = (out3 + this->lastY);
							 ::justPath::StoreF6 _this4 = this->store;
							 ::Dynamic out4 = _this4->s0;
							if ((_this4->l != 0)) {
								_this4->s0 = _this4->s1;
								_this4->s1 = _this4->s2;
								_this4->s2 = _this4->s3;
								_this4->s3 = _this4->s4;
								_this4->s4 = _this4->s5;
								_this4->s5 = null();
								if (::hx::IsNotNull( _this4->s6 )) {
									 ::justPath::StoreF6 _this = _this4->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this4->s5 = out;
								}
								_this4->l--;
							}
							this->lastX = (out4 + this->lastX);
							 ::justPath::StoreF6 _this5 = this->store;
							 ::Dynamic out5 = _this5->s0;
							if ((_this5->l != 0)) {
								_this5->s0 = _this5->s1;
								_this5->s1 = _this5->s2;
								_this5->s2 = _this5->s3;
								_this5->s3 = _this5->s4;
								_this5->s4 = _this5->s5;
								_this5->s5 = null();
								if (::hx::IsNotNull( _this5->s6 )) {
									 ::justPath::StoreF6 _this = _this5->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this5->s5 = out;
								}
								_this5->l--;
							}
							this->lastY = (out5 + this->lastY);
							::justPath::IPathContext_obj::curveTo(this->pathContext,firstX,firstY,this->controlX,this->controlY,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)104: {
				{
					 ::Dynamic process = false;
					if (::hx::IsNull( process )) {
						process = true;
					}
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_23;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_23:;
				}
				if ((this->store->l == 1)) {
					this->lastX = (this->lastX + this->store->s0);
					::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 1)) {
						while((this->store->l > 0)){
							Float _hx_tmp = this->lastX;
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->lastX = (_hx_tmp + out);
							::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)108: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_25;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_25:;
				}
				if ((this->store->l == 2)) {
					this->lastX = (this->store->s0 + this->lastX);
					this->lastY = (this->store->s1 + this->lastY);
					::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 2)) {
						while((this->store->l > 2)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->lastX = (out + this->lastX);
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							this->lastY = (out1 + this->lastY);
							::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)109: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_27;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_27:;
				}
				if ((this->store->l == 2)) {
					this->lastX = (this->store->s0 + this->lastX);
					this->lastY = (this->store->s1 + this->lastY);
					::justPath::IPathContext_obj::moveTo(this->pathContext,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 2)) {
						 ::justPath::StoreF6 _this = this->store;
						 ::Dynamic out = _this->s0;
						if ((_this->l != 0)) {
							_this->s0 = _this->s1;
							_this->s1 = _this->s2;
							_this->s2 = _this->s3;
							_this->s3 = _this->s4;
							_this->s4 = _this->s5;
							_this->s5 = null();
							if (::hx::IsNotNull( _this->s6 )) {
								 ::justPath::StoreF6 _this1 = _this->s6;
								 ::Dynamic out = _this1->s0;
								if ((_this1->l != 0)) {
									_this1->s0 = _this1->s1;
									_this1->s1 = _this1->s2;
									_this1->s2 = _this1->s3;
									_this1->s3 = _this1->s4;
									_this1->s4 = _this1->s5;
									_this1->s5 = null();
									if (::hx::IsNotNull( _this1->s6 )) {
										_this1->s5 = _this1->s6->shift();
									}
									_this1->l--;
								}
								_this->s5 = out;
							}
							_this->l--;
						}
						this->lastX = (out + this->lastX);
						 ::justPath::StoreF6 _this1 = this->store;
						 ::Dynamic out1 = _this1->s0;
						if ((_this1->l != 0)) {
							_this1->s0 = _this1->s1;
							_this1->s1 = _this1->s2;
							_this1->s2 = _this1->s3;
							_this1->s3 = _this1->s4;
							_this1->s4 = _this1->s5;
							_this1->s5 = null();
							if (::hx::IsNotNull( _this1->s6 )) {
								 ::justPath::StoreF6 _this = _this1->s6;
								 ::Dynamic out = _this->s0;
								if ((_this->l != 0)) {
									_this->s0 = _this->s1;
									_this->s1 = _this->s2;
									_this->s2 = _this->s3;
									_this->s3 = _this->s4;
									_this->s4 = _this->s5;
									_this->s5 = null();
									if (::hx::IsNotNull( _this->s6 )) {
										_this->s5 = _this->s6->shift();
									}
									_this->l--;
								}
								_this1->s5 = out;
							}
							_this1->l--;
						}
						this->lastY = (out1 + this->lastY);
						::justPath::IPathContext_obj::moveTo(this->pathContext,this->lastX,this->lastY);
						while((this->store->l > 1)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->lastX = (out + this->lastX);
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							this->lastY = (out1 + this->lastY);
							::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)113: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_29;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_29:;
				}
				if ((this->store->l == 4)) {
					this->controlX = (this->lastX + this->store->s0);
					this->controlY = (this->lastY + this->store->s1);
					this->lastX = (this->store->s0 + this->lastX);
					this->lastY = (this->store->s1 + this->lastY);
					::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 4)) {
						while((this->store->l > 3)){
							Float _hx_tmp = this->lastX;
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->controlX = (_hx_tmp + out);
							Float _hx_tmp1 = this->lastY;
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							this->controlY = (_hx_tmp1 + out1);
							 ::justPath::StoreF6 _this2 = this->store;
							 ::Dynamic out2 = _this2->s0;
							if ((_this2->l != 0)) {
								_this2->s0 = _this2->s1;
								_this2->s1 = _this2->s2;
								_this2->s2 = _this2->s3;
								_this2->s3 = _this2->s4;
								_this2->s4 = _this2->s5;
								_this2->s5 = null();
								if (::hx::IsNotNull( _this2->s6 )) {
									 ::justPath::StoreF6 _this = _this2->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this2->s5 = out;
								}
								_this2->l--;
							}
							this->lastX = (out2 + this->lastX);
							 ::justPath::StoreF6 _this3 = this->store;
							 ::Dynamic out3 = _this3->s0;
							if ((_this3->l != 0)) {
								_this3->s0 = _this3->s1;
								_this3->s1 = _this3->s2;
								_this3->s2 = _this3->s3;
								_this3->s3 = _this3->s4;
								_this3->s4 = _this3->s5;
								_this3->s5 = null();
								if (::hx::IsNotNull( _this3->s6 )) {
									 ::justPath::StoreF6 _this = _this3->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this3->s5 = out;
								}
								_this3->l--;
							}
							this->lastY = (out3 + this->lastY);
							::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)115: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_31;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_31:;
				}
				if ((this->store->l == 4)) {
					Float firstX = (this->store->s0 + this->lastX);
					Float firstY = (this->store->s1 + this->lastY);
					this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
					this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
					this->lastX = (this->store->s2 + this->lastX);
					this->lastY = (this->store->s3 + this->lastY);
					::justPath::IPathContext_obj::curveTo(this->pathContext,this->controlX,this->controlY,firstX,firstY,this->lastX,this->lastY);
					this->controlX = firstX;
					this->controlY = firstY;
				}
				else {
					if ((this->store->l > 4)) {
						while((this->store->l > 3)){
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							Float firstX = (out + this->lastX);
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							Float firstY = (out1 + this->lastY);
							this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
							this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
							 ::justPath::StoreF6 _this2 = this->store;
							 ::Dynamic out2 = _this2->s0;
							if ((_this2->l != 0)) {
								_this2->s0 = _this2->s1;
								_this2->s1 = _this2->s2;
								_this2->s2 = _this2->s3;
								_this2->s3 = _this2->s4;
								_this2->s4 = _this2->s5;
								_this2->s5 = null();
								if (::hx::IsNotNull( _this2->s6 )) {
									 ::justPath::StoreF6 _this = _this2->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this2->s5 = out;
								}
								_this2->l--;
							}
							this->lastX = (out2 + this->lastX);
							 ::justPath::StoreF6 _this3 = this->store;
							 ::Dynamic out3 = _this3->s0;
							if ((_this3->l != 0)) {
								_this3->s0 = _this3->s1;
								_this3->s1 = _this3->s2;
								_this3->s2 = _this3->s3;
								_this3->s3 = _this3->s4;
								_this3->s4 = _this3->s5;
								_this3->s5 = null();
								if (::hx::IsNotNull( _this3->s6 )) {
									 ::justPath::StoreF6 _this = _this3->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this3->s5 = out;
								}
								_this3->l--;
							}
							this->lastY = (out3 + this->lastY);
							::justPath::IPathContext_obj::curveTo(this->pathContext,this->controlX,this->controlY,firstX,firstY,this->lastX,this->lastY);
							this->controlX = firstX;
							this->controlY = firstY;
						}
					}
				}
			}
			break;
			case (int)116: {
				{
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (((this->store->l & 1) == 0)) {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_33;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_33:;
				}
				if ((this->store->l == 2)) {
					this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
					this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
					this->lastX = (this->store->s0 + this->lastY);
					this->lastY = (this->store->s1 + this->lastX);
					::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 2)) {
						while((this->store->l > 1)){
							this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
							this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->lastX = (out + this->lastY);
							 ::justPath::StoreF6 _this1 = this->store;
							 ::Dynamic out1 = _this1->s0;
							if ((_this1->l != 0)) {
								_this1->s0 = _this1->s1;
								_this1->s1 = _this1->s2;
								_this1->s2 = _this1->s3;
								_this1->s3 = _this1->s4;
								_this1->s4 = _this1->s5;
								_this1->s5 = null();
								if (::hx::IsNotNull( _this1->s6 )) {
									 ::justPath::StoreF6 _this = _this1->s6;
									 ::Dynamic out = _this->s0;
									if ((_this->l != 0)) {
										_this->s0 = _this->s1;
										_this->s1 = _this->s2;
										_this->s2 = _this->s3;
										_this->s3 = _this->s4;
										_this->s4 = _this->s5;
										_this->s5 = null();
										if (::hx::IsNotNull( _this->s6 )) {
											_this->s5 = _this->s6->shift();
										}
										_this->l--;
									}
									_this1->s5 = out;
								}
								_this1->l--;
							}
							this->lastY = (out1 + this->lastX);
							::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			case (int)118: {
				{
					 ::Dynamic process = false;
					if (::hx::IsNull( process )) {
						process = true;
					}
					{
						 ::justPath::StoreF6 _this = this->store;
						_this->l = 0;
						_this->s0 = null();
						_this->s1 = null();
						_this->s2 = null();
						_this->s3 = null();
						_this->s4 = null();
						_this->s5 = null();
						_this->s6 = null();
					}
					this->c = this->str.cca(this->pos++);
					::String temp = HX_("",00,00,00,00);
					bool exit = false;
					while(true){
						switch((int)(this->c)){
							case (int)32: case (int)44: {
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
							}
							break;
							case (int)45: {
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
								}
								temp = HX_("-",2d,00,00,00);
							}
							break;
							case (int)46: {
								temp = (temp + HX_(".",2e,00,00,00));
							}
							break;
							case (int)48: {
								temp = (temp + HX_("0",30,00,00,00));
							}
							break;
							case (int)49: {
								temp = (temp + HX_("1",31,00,00,00));
							}
							break;
							case (int)50: {
								temp = (temp + HX_("2",32,00,00,00));
							}
							break;
							case (int)51: {
								temp = (temp + HX_("3",33,00,00,00));
							}
							break;
							case (int)52: {
								temp = (temp + HX_("4",34,00,00,00));
							}
							break;
							case (int)53: {
								temp = (temp + HX_("5",35,00,00,00));
							}
							break;
							case (int)54: {
								temp = (temp + HX_("6",36,00,00,00));
							}
							break;
							case (int)55: {
								temp = (temp + HX_("7",37,00,00,00));
							}
							break;
							case (int)56: {
								temp = (temp + HX_("8",38,00,00,00));
							}
							break;
							case (int)57: {
								temp = (temp + HX_("9",39,00,00,00));
							}
							break;
							default:{
								if ((temp != HX_("",00,00,00,00))) {
									if (( (bool)(process) )) {
										if (((this->store->l & 1) == 0)) {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
										else {
											 ::justPath::StoreF6 _this = this->store;
											 ::Dynamic v = ::Std_obj::parseFloat(temp);
											switch((int)(_this->l)){
												case (int)0: {
													_this->s0 = v;
												}
												break;
												case (int)1: {
													_this->s1 = v;
												}
												break;
												case (int)2: {
													_this->s2 = v;
												}
												break;
												case (int)3: {
													_this->s3 = v;
												}
												break;
												case (int)4: {
													_this->s4 = v;
												}
												break;
												case (int)5: {
													_this->s5 = v;
												}
												break;
												default:{
													if (::hx::IsNull( _this->s6 )) {
														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
													}
													{
														 ::justPath::StoreF6 _this1 = _this->s6;
														switch((int)(_this1->l)){
															case (int)0: {
																_this1->s0 = v;
															}
															break;
															case (int)1: {
																_this1->s1 = v;
															}
															break;
															case (int)2: {
																_this1->s2 = v;
															}
															break;
															case (int)3: {
																_this1->s3 = v;
															}
															break;
															case (int)4: {
																_this1->s4 = v;
															}
															break;
															case (int)5: {
																_this1->s5 = v;
															}
															break;
															default:{
																if (::hx::IsNull( _this1->s6 )) {
																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
																}
																_this1->s6->push(v);
															}
														}
														_this1->l++;
													}
												}
											}
											_this->l++;
										}
									}
									else {
										 ::justPath::StoreF6 _this = this->store;
										 ::Dynamic v = ::Std_obj::parseFloat(temp);
										switch((int)(_this->l)){
											case (int)0: {
												_this->s0 = v;
											}
											break;
											case (int)1: {
												_this->s1 = v;
											}
											break;
											case (int)2: {
												_this->s2 = v;
											}
											break;
											case (int)3: {
												_this->s3 = v;
											}
											break;
											case (int)4: {
												_this->s4 = v;
											}
											break;
											case (int)5: {
												_this->s5 = v;
											}
											break;
											default:{
												if (::hx::IsNull( _this->s6 )) {
													_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
												}
												{
													 ::justPath::StoreF6 _this1 = _this->s6;
													switch((int)(_this1->l)){
														case (int)0: {
															_this1->s0 = v;
														}
														break;
														case (int)1: {
															_this1->s1 = v;
														}
														break;
														case (int)2: {
															_this1->s2 = v;
														}
														break;
														case (int)3: {
															_this1->s3 = v;
														}
														break;
														case (int)4: {
															_this1->s4 = v;
														}
														break;
														case (int)5: {
															_this1->s5 = v;
														}
														break;
														default:{
															if (::hx::IsNull( _this1->s6 )) {
																_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
															}
															_this1->s6->push(v);
														}
													}
													_this1->l++;
												}
											}
										}
										_this->l++;
									}
									temp = HX_("",00,00,00,00);
								}
								this->pos--;
								exit = true;
							}
						}
						if (exit) {
							goto _hx_goto_35;
						}
						this->c = this->str.cca(this->pos++);
					}
					_hx_goto_35:;
				}
				if ((this->store->l == 1)) {
					this->lastY = (this->lastY + this->store->s0);
					::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
				}
				else {
					if ((this->store->l > 1)) {
						while((this->store->l > 0)){
							Float _hx_tmp = this->lastY;
							 ::justPath::StoreF6 _this = this->store;
							 ::Dynamic out = _this->s0;
							if ((_this->l != 0)) {
								_this->s0 = _this->s1;
								_this->s1 = _this->s2;
								_this->s2 = _this->s3;
								_this->s3 = _this->s4;
								_this->s4 = _this->s5;
								_this->s5 = null();
								if (::hx::IsNotNull( _this->s6 )) {
									 ::justPath::StoreF6 _this1 = _this->s6;
									 ::Dynamic out = _this1->s0;
									if ((_this1->l != 0)) {
										_this1->s0 = _this1->s1;
										_this1->s1 = _this1->s2;
										_this1->s2 = _this1->s3;
										_this1->s3 = _this1->s4;
										_this1->s4 = _this1->s5;
										_this1->s5 = null();
										if (::hx::IsNotNull( _this1->s6 )) {
											_this1->s5 = _this1->s6->shift();
										}
										_this1->l--;
									}
									_this->s5 = out;
								}
								_this->l--;
							}
							this->lastY = (_hx_tmp + out);
							::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
						}
					}
				}
			}
			break;
			default:{
				count = (count + 1);
			}
		}
		this->c = this->str.cca(this->pos++);
	}
	return str_;
}


HX_DEFINE_DYNAMIC_FUNC1(SvgPath_obj,parse,return )


::hx::ObjectPtr< SvgPath_obj > SvgPath_obj::__new(::Dynamic pathContext_) {
	::hx::ObjectPtr< SvgPath_obj > __this = new SvgPath_obj();
	__this->__construct(pathContext_);
	return __this;
}

::hx::ObjectPtr< SvgPath_obj > SvgPath_obj::__alloc(::hx::Ctx *_hx_ctx,::Dynamic pathContext_) {
	SvgPath_obj *__this = (SvgPath_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SvgPath_obj), true, "justPath.SvgPath"));
	*(void **)__this = SvgPath_obj::_hx_vtable;
	__this->__construct(pathContext_);
	return __this;
}

SvgPath_obj::SvgPath_obj()
{
}

void SvgPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SvgPath);
	HX_MARK_MEMBER_NAME(str,"str");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(lastX,"lastX");
	HX_MARK_MEMBER_NAME(lastY,"lastY");
	HX_MARK_MEMBER_NAME(controlX,"controlX");
	HX_MARK_MEMBER_NAME(controlY,"controlY");
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_MEMBER_NAME(l,"l");
	HX_MARK_MEMBER_NAME(pathContext,"pathContext");
	HX_MARK_MEMBER_NAME(store,"store");
	HX_MARK_END_CLASS();
}

void SvgPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(str,"str");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(lastX,"lastX");
	HX_VISIT_MEMBER_NAME(lastY,"lastY");
	HX_VISIT_MEMBER_NAME(controlX,"controlX");
	HX_VISIT_MEMBER_NAME(controlY,"controlY");
	HX_VISIT_MEMBER_NAME(c,"c");
	HX_VISIT_MEMBER_NAME(l,"l");
	HX_VISIT_MEMBER_NAME(pathContext,"pathContext");
	HX_VISIT_MEMBER_NAME(store,"store");
}

::hx::Val SvgPath_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { return ::hx::Val( c ); }
		if (HX_FIELD_EQ(inName,"l") ) { return ::hx::Val( l ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { return ::hx::Val( str ); }
		if (HX_FIELD_EQ(inName,"pos") ) { return ::hx::Val( pos ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastX") ) { return ::hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return ::hx::Val( lastY ); }
		if (HX_FIELD_EQ(inName,"store") ) { return ::hx::Val( store ); }
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controlX") ) { return ::hx::Val( controlX ); }
		if (HX_FIELD_EQ(inName,"controlY") ) { return ::hx::Val( controlY ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pathContext") ) { return ::hx::Val( pathContext ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SvgPath_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l") ) { l=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { str=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"store") ) { store=inValue.Cast<  ::justPath::StoreF6 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controlX") ) { controlX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"controlY") ) { controlY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pathContext") ) { pathContext=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SvgPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("str",b1,a8,57,00));
	outFields->push(HX_("pos",94,5d,55,00));
	outFields->push(HX_("lastX",42,01,bc,6f));
	outFields->push(HX_("lastY",43,01,bc,6f));
	outFields->push(HX_("controlX",5b,86,bc,37));
	outFields->push(HX_("controlY",5c,86,bc,37));
	outFields->push(HX_("c",63,00,00,00));
	outFields->push(HX_("l",6c,00,00,00));
	outFields->push(HX_("pathContext",ca,06,31,f6));
	outFields->push(HX_("store",e1,13,16,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SvgPath_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(SvgPath_obj,str),HX_("str",b1,a8,57,00)},
	{::hx::fsInt,(int)offsetof(SvgPath_obj,pos),HX_("pos",94,5d,55,00)},
	{::hx::fsFloat,(int)offsetof(SvgPath_obj,lastX),HX_("lastX",42,01,bc,6f)},
	{::hx::fsFloat,(int)offsetof(SvgPath_obj,lastY),HX_("lastY",43,01,bc,6f)},
	{::hx::fsFloat,(int)offsetof(SvgPath_obj,controlX),HX_("controlX",5b,86,bc,37)},
	{::hx::fsFloat,(int)offsetof(SvgPath_obj,controlY),HX_("controlY",5c,86,bc,37)},
	{::hx::fsInt,(int)offsetof(SvgPath_obj,c),HX_("c",63,00,00,00)},
	{::hx::fsInt,(int)offsetof(SvgPath_obj,l),HX_("l",6c,00,00,00)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(SvgPath_obj,pathContext),HX_("pathContext",ca,06,31,f6)},
	{::hx::fsObject /*  ::justPath::StoreF6 */ ,(int)offsetof(SvgPath_obj,store),HX_("store",e1,13,16,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SvgPath_obj_sStaticStorageInfo = 0;
#endif

static ::String SvgPath_obj_sMemberFields[] = {
	HX_("str",b1,a8,57,00),
	HX_("pos",94,5d,55,00),
	HX_("lastX",42,01,bc,6f),
	HX_("lastY",43,01,bc,6f),
	HX_("controlX",5b,86,bc,37),
	HX_("controlY",5c,86,bc,37),
	HX_("c",63,00,00,00),
	HX_("l",6c,00,00,00),
	HX_("pathContext",ca,06,31,f6),
	HX_("store",e1,13,16,84),
	HX_("parse",33,90,55,bd),
	::String(null()) };

::hx::Class SvgPath_obj::__mClass;

void SvgPath_obj::__register()
{
	SvgPath_obj _hx_dummy;
	SvgPath_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("justPath.SvgPath",8c,a2,03,48);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SvgPath_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SvgPath_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SvgPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SvgPath_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace justPath
