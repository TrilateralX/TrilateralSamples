// Generated by Haxe 4.2.0-rc.1+3ef20749a
#include <hxcpp.h>

#ifndef INCLUDED_trilateral3_Trilateral
#include <trilateral3/Trilateral.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Contour
#include <trilateral3/drawing/Contour.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Pen
#include <trilateral3/drawing/Pen.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif

namespace trilateral3{
namespace drawing{

void Contour_obj::__construct( ::trilateral3::drawing::Pen pen_,::hx::Null< int >  __o_endLine_){
	int endLine_ = __o_endLine_.Default(0);
	this->count = 0;
	this->pointsAnti = ::Array_obj< Float >::__new(0);
	this->pointsClock = ::Array_obj< Float >::__new(0);
	this->pen = pen_;
	this->endLine = endLine_;
}

Dynamic Contour_obj::__CreateEmpty() { return new Contour_obj; }

void *Contour_obj::_hx_vtable = 0;

Dynamic Contour_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Contour_obj > _hx_result = new Contour_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Contour_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2f69a3a3;
}

void Contour_obj::reset(){
	this->angleA = ( (Float)(0) );
	this->count = 0;
	this->kax = ( (Float)(0) );
	this->kay = ( (Float)(0) );
	this->kbx = ( (Float)(0) );
	this->kby = ( (Float)(0) );
	this->kcx = ( (Float)(0) );
	this->kcy = ( (Float)(0) );
	this->ncx = ( (Float)(0) );
	this->ncy = ( (Float)(0) );
	this->ax = ( (Float)(0) );
	this->ay = ( (Float)(0) );
	this->bx = ( (Float)(0) );
	this->by = ( (Float)(0) );
	this->cx = ( (Float)(0) );
	this->cy = ( (Float)(0) );
	this->dx = null();
	this->dy = null();
	this->ex = null();
	this->ey = null();
	this->pointsClock->resize(0);
	this->pointsAnti->resize(0);
}


HX_DEFINE_DYNAMIC_FUNC0(Contour_obj,reset,(void))

void Contour_obj::endEdges(){
	int pC = this->pointsClock->length;
	int pA = this->pointsAnti->length;
	pC = (pC + 1);
	this->pointsClock[(pC - 1)] = this->penultimateCX;
	pC = (pC + 1);
	this->pointsClock[(pC - 1)] = this->penultimateCY;
	pC = (pC + 1);
	this->pointsClock[(pC - 1)] = this->lastClockX;
	pC = (pC + 1);
	this->pointsClock[(pC - 1)] = this->lastClockY;
	pA = (pA + 1);
	this->pointsAnti[(pA - 1)] = this->penultimateAX;
	pA = (pA + 1);
	this->pointsAnti[(pA - 1)] = this->penultimateAY;
	pA = (pA + 1);
	this->pointsAnti[(pA - 1)] = this->lastAntiX;
	pA = (pA + 1);
	this->pointsAnti[(pA - 1)] = this->lastAntiY;
}


HX_DEFINE_DYNAMIC_FUNC0(Contour_obj,endEdges,(void))

void Contour_obj::addQuads(bool clockWise,Float width_){
	Float currQuadIndex = ( (Float)(this->pen->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) );
	int pC = 0;
	int pA = 0;
	bool _hx_tmp;
	if (clockWise) {
		_hx_tmp = !(this->lastClock);
	}
	else {
		_hx_tmp = false;
	}
	if (_hx_tmp) {
		if ((this->count == 1)) {
			pA = this->pointsAnti->length;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kax;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kay;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jx;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jy;
			pC = this->pointsClock->length;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->kbx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->kby;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->ncx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->ncy;
			{
				 ::trilateral3::drawing::Pen _this = this->pen;
				Float v = (this->quadIndex + 1);
				_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
				_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
			}
			{
				 ::trilateral3::drawing::Pen _this1 = this->pen;
				int color = -1;
				if ((color == -1)) {
					color = _this1->currentColor;
				}
				{
					_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->kax,this->kay,0,this->kbx,this->kby,0,this->ncx,this->ncy,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this1->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color,color,color);
			}
		}
		else {
			pA = this->pointsAnti->length;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kax;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kay;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jx;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jy;
			pC = this->pointsClock->length;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jxOld;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jyOld;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->kbx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->kby;
			{
				 ::trilateral3::drawing::Pen _this = this->pen;
				Float v = (this->quadIndex + 1);
				_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
				_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
			}
			{
				 ::trilateral3::drawing::Pen _this1 = this->pen;
				int color = -1;
				if ((color == -1)) {
					color = _this1->currentColor;
				}
				{
					_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->kax,this->kay,0,this->kbx,this->kby,0,this->jxOld,this->jyOld,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this1->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color,color,color);
			}
		}
		{
			 ::trilateral3::drawing::Pen _this = this->pen;
			Float v = this->quadIndex;
			_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
			_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
		}
		{
			 ::trilateral3::drawing::Pen _this1 = this->pen;
			int color = -1;
			if ((color == -1)) {
				color = _this1->currentColor;
			}
			{
				_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->kax,this->kay,0,this->kbx,this->kby,0,this->jx,this->jy,0);
				if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
					_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
				}
				_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
			}
			_this1->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color,color,color);
		}
	}
	bool _hx_tmp1;
	if (clockWise) {
		_hx_tmp1 = this->lastClock;
	}
	else {
		_hx_tmp1 = false;
	}
	if (_hx_tmp1) {
		if ((this->count == 1)) {
			pA = this->pointsAnti->length;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jx;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jy;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kbx;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kby;
			pC = this->pointsClock->length;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->kax;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->kay;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->kbx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->kby;
			{
				 ::trilateral3::drawing::Pen _this = this->pen;
				Float v = this->quadIndex;
				_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
				_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
			}
			{
				 ::trilateral3::drawing::Pen _this1 = this->pen;
				int color = -1;
				if ((color == -1)) {
					color = _this1->currentColor;
				}
				{
					_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->kax,this->kay,0,this->kbx,this->kby,0,this->jx,this->jy,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this1->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color,color,color);
			}
			{
				 ::trilateral3::drawing::Pen _this2 = this->pen;
				Float v1 = (this->quadIndex + 1);
				_this2->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
				_this2->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
			}
			{
				 ::trilateral3::drawing::Pen _this3 = this->pen;
				int color1 = -1;
				if ((color1 == -1)) {
					color1 = _this3->currentColor;
				}
				{
					_this3->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->kax,this->kay,0,this->kbx,this->kby,0,this->ncx,this->ncy,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this3->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this3->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this3->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color1,color1,color1);
			}
		}
		else {
			pA = this->pointsAnti->length;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jxOld;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jyOld;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jx;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jy;
			pC = this->pointsClock->length;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->ncx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->ncy;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->kbx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->kby;
			{
				 ::trilateral3::drawing::Pen _this = this->pen;
				Float v = this->quadIndex;
				_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
				_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
			}
			{
				 ::trilateral3::drawing::Pen _this1 = this->pen;
				int color = -1;
				if ((color == -1)) {
					color = _this1->currentColor;
				}
				{
					_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->jxOld,this->jyOld,0,this->kbx,this->kby,0,this->jx,this->jy,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this1->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color,color,color);
			}
			{
				 ::trilateral3::drawing::Pen _this2 = this->pen;
				Float v1 = (this->quadIndex + 1);
				_this2->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
				_this2->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
			}
			{
				 ::trilateral3::drawing::Pen _this3 = this->pen;
				int color1 = -1;
				if ((color1 == -1)) {
					color1 = _this3->currentColor;
				}
				{
					_this3->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->jxOld,this->jyOld,0,this->kbx,this->kby,0,this->ncx,this->ncy,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this3->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this3->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this3->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color1,color1,color1);
			}
		}
	}
	bool _hx_tmp2;
	if (!(clockWise)) {
		_hx_tmp2 = !(this->lastClock);
	}
	else {
		_hx_tmp2 = false;
	}
	if (_hx_tmp2) {
		{
			 ::trilateral3::drawing::Pen _this = this->pen;
			Float v = this->quadIndex;
			_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
			_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
		}
		{
			 ::trilateral3::drawing::Pen _this1 = this->pen;
			int color = -1;
			if ((color == -1)) {
				color = _this1->currentColor;
			}
			{
				_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->kax,this->kay,0,this->jx,this->jy,0,this->kcx,this->kcy,0);
				if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
					_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
				}
				_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
			}
			_this1->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color,color,color);
		}
		if ((this->count == 1)) {
			pA = this->pointsAnti->length;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kax;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kay;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kcx;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kcy;
			pC = this->pointsClock->length;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->ncx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->ncy;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jy;
			{
				 ::trilateral3::drawing::Pen _this = this->pen;
				Float v = (this->quadIndex + 1);
				_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
				_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
			}
			{
				 ::trilateral3::drawing::Pen _this1 = this->pen;
				int color = -1;
				if ((color == -1)) {
					color = _this1->currentColor;
				}
				{
					_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->kax,this->kay,0,this->jx,this->jy,0,this->ncx,this->ncy,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this1->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color,color,color);
			}
		}
		else {
			pA = this->pointsAnti->length;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kax;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kay;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kcx;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kcy;
			pC = this->pointsClock->length;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jxOld;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jyOld;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jy;
			{
				 ::trilateral3::drawing::Pen _this = this->pen;
				Float v = (this->quadIndex + 1);
				_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
				_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
			}
			{
				 ::trilateral3::drawing::Pen _this1 = this->pen;
				int color = -1;
				if ((color == -1)) {
					color = _this1->currentColor;
				}
				{
					_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->kax,this->kay,0,this->jx,this->jy,0,this->jxOld,this->jyOld,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this1->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color,color,color);
			}
		}
	}
	bool _hx_tmp3;
	if (!(clockWise)) {
		_hx_tmp3 = this->lastClock;
	}
	else {
		_hx_tmp3 = false;
	}
	if (_hx_tmp3) {
		if ((this->count == 1)) {
			pA = this->pointsAnti->length;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kay;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kax;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kcx;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kcy;
			pC = this->pointsClock->length;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jy;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->ncx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->ncy;
			{
				 ::trilateral3::drawing::Pen _this = this->pen;
				Float v = this->quadIndex;
				_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
				_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
			}
			{
				 ::trilateral3::drawing::Pen _this1 = this->pen;
				int color = -1;
				if ((color == -1)) {
					color = _this1->currentColor;
				}
				{
					_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->kax,this->kay,0,this->jx,this->jy,0,this->kcx,this->kcy,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this1->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color,color,color);
			}
			{
				 ::trilateral3::drawing::Pen _this2 = this->pen;
				Float v1 = (this->quadIndex + 1);
				_this2->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
				_this2->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
			}
			{
				 ::trilateral3::drawing::Pen _this3 = this->pen;
				int color1 = -1;
				if ((color1 == -1)) {
					color1 = _this3->currentColor;
				}
				{
					_this3->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->kax,this->kay,0,this->jx,this->jy,0,this->ncx,this->ncy,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this3->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this3->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this3->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color1,color1,color1);
			}
		}
		else {
			pA = this->pointsAnti->length;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jxOld;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->jyOld;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kcx;
			pA = (pA + 1);
			this->pointsAnti[(pA - 1)] = this->kcy;
			pC = this->pointsClock->length;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->jy;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->ncx;
			pC = (pC + 1);
			this->pointsClock[(pC - 1)] = this->ncy;
			{
				 ::trilateral3::drawing::Pen _this = this->pen;
				Float v = this->quadIndex;
				_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
				_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
			}
			{
				 ::trilateral3::drawing::Pen _this1 = this->pen;
				int color = -1;
				if ((color == -1)) {
					color = _this1->currentColor;
				}
				{
					_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->jxOld,this->jyOld,0,this->jx,this->jy,0,this->kcx,this->kcy,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this1->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color,color,color);
			}
			{
				 ::trilateral3::drawing::Pen _this2 = this->pen;
				Float v1 = (this->quadIndex + 1);
				_this2->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
				_this2->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
			}
			{
				 ::trilateral3::drawing::Pen _this3 = this->pen;
				int color1 = -1;
				if ((color1 == -1)) {
					color1 = _this3->currentColor;
				}
				{
					_this3->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(this->jxOld,this->jyOld,0,this->jx,this->jy,0,this->ncx,this->ncy,0);
					if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
						_this3->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
					}
					_this3->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
				}
				_this3->colorType->__Field(HX_("cornerColors",65,87,ed,a2),::hx::paccDynamic)(color1,color1,color1);
			}
		}
	}
	{
		 ::trilateral3::drawing::Pen _this = this->pen;
		_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(currQuadIndex);
		_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(currQuadIndex);
	}
}


HX_DEFINE_DYNAMIC_FUNC2(Contour_obj,addQuads,(void))


::hx::ObjectPtr< Contour_obj > Contour_obj::__new( ::trilateral3::drawing::Pen pen_,::hx::Null< int >  __o_endLine_) {
	::hx::ObjectPtr< Contour_obj > __this = new Contour_obj();
	__this->__construct(pen_,__o_endLine_);
	return __this;
}

::hx::ObjectPtr< Contour_obj > Contour_obj::__alloc(::hx::Ctx *_hx_ctx, ::trilateral3::drawing::Pen pen_,::hx::Null< int >  __o_endLine_) {
	Contour_obj *__this = (Contour_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Contour_obj), true, "trilateral3.drawing.Contour"));
	*(void **)__this = Contour_obj::_hx_vtable;
	__this->__construct(pen_,__o_endLine_);
	return __this;
}

Contour_obj::Contour_obj()
{
}

void Contour_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Contour);
	HX_MARK_MEMBER_NAME(pointsClock,"pointsClock");
	HX_MARK_MEMBER_NAME(pointsAnti,"pointsAnti");
	HX_MARK_MEMBER_NAME(penultimateCX,"penultimateCX");
	HX_MARK_MEMBER_NAME(penultimateCY,"penultimateCY");
	HX_MARK_MEMBER_NAME(lastClockX,"lastClockX");
	HX_MARK_MEMBER_NAME(lastClockY,"lastClockY");
	HX_MARK_MEMBER_NAME(penultimateAX,"penultimateAX");
	HX_MARK_MEMBER_NAME(penultimateAY,"penultimateAY");
	HX_MARK_MEMBER_NAME(lastAntiX,"lastAntiX");
	HX_MARK_MEMBER_NAME(lastAntiY,"lastAntiY");
	HX_MARK_MEMBER_NAME(pen,"pen");
	HX_MARK_MEMBER_NAME(endLine,"endLine");
	HX_MARK_MEMBER_NAME(ax,"ax");
	HX_MARK_MEMBER_NAME(ay,"ay");
	HX_MARK_MEMBER_NAME(bx,"bx");
	HX_MARK_MEMBER_NAME(by,"by");
	HX_MARK_MEMBER_NAME(cx,"cx");
	HX_MARK_MEMBER_NAME(cy,"cy");
	HX_MARK_MEMBER_NAME(dx,"dx");
	HX_MARK_MEMBER_NAME(dy,"dy");
	HX_MARK_MEMBER_NAME(ex,"ex");
	HX_MARK_MEMBER_NAME(ey,"ey");
	HX_MARK_MEMBER_NAME(dxPrev,"dxPrev");
	HX_MARK_MEMBER_NAME(dyPrev,"dyPrev");
	HX_MARK_MEMBER_NAME(exPrev,"exPrev");
	HX_MARK_MEMBER_NAME(eyPrev,"eyPrev");
	HX_MARK_MEMBER_NAME(dxOld,"dxOld");
	HX_MARK_MEMBER_NAME(dyOld,"dyOld");
	HX_MARK_MEMBER_NAME(exOld,"exOld");
	HX_MARK_MEMBER_NAME(eyOld,"eyOld");
	HX_MARK_MEMBER_NAME(jx,"jx");
	HX_MARK_MEMBER_NAME(jy,"jy");
	HX_MARK_MEMBER_NAME(lastClock,"lastClock");
	HX_MARK_MEMBER_NAME(jxOld,"jxOld");
	HX_MARK_MEMBER_NAME(jyOld,"jyOld");
	HX_MARK_MEMBER_NAME(kax,"kax");
	HX_MARK_MEMBER_NAME(kay,"kay");
	HX_MARK_MEMBER_NAME(kbx,"kbx");
	HX_MARK_MEMBER_NAME(kby,"kby");
	HX_MARK_MEMBER_NAME(kcx,"kcx");
	HX_MARK_MEMBER_NAME(kcy,"kcy");
	HX_MARK_MEMBER_NAME(ncx,"ncx");
	HX_MARK_MEMBER_NAME(ncy,"ncy");
	HX_MARK_MEMBER_NAME(quadIndex,"quadIndex");
	HX_MARK_MEMBER_NAME(angleA,"angleA");
	HX_MARK_MEMBER_NAME(halfA,"halfA");
	HX_MARK_MEMBER_NAME(beta,"beta");
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(theta,"theta");
	HX_MARK_MEMBER_NAME(angle1,"angle1");
	HX_MARK_MEMBER_NAME(angle2,"angle2");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_END_CLASS();
}

void Contour_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pointsClock,"pointsClock");
	HX_VISIT_MEMBER_NAME(pointsAnti,"pointsAnti");
	HX_VISIT_MEMBER_NAME(penultimateCX,"penultimateCX");
	HX_VISIT_MEMBER_NAME(penultimateCY,"penultimateCY");
	HX_VISIT_MEMBER_NAME(lastClockX,"lastClockX");
	HX_VISIT_MEMBER_NAME(lastClockY,"lastClockY");
	HX_VISIT_MEMBER_NAME(penultimateAX,"penultimateAX");
	HX_VISIT_MEMBER_NAME(penultimateAY,"penultimateAY");
	HX_VISIT_MEMBER_NAME(lastAntiX,"lastAntiX");
	HX_VISIT_MEMBER_NAME(lastAntiY,"lastAntiY");
	HX_VISIT_MEMBER_NAME(pen,"pen");
	HX_VISIT_MEMBER_NAME(endLine,"endLine");
	HX_VISIT_MEMBER_NAME(ax,"ax");
	HX_VISIT_MEMBER_NAME(ay,"ay");
	HX_VISIT_MEMBER_NAME(bx,"bx");
	HX_VISIT_MEMBER_NAME(by,"by");
	HX_VISIT_MEMBER_NAME(cx,"cx");
	HX_VISIT_MEMBER_NAME(cy,"cy");
	HX_VISIT_MEMBER_NAME(dx,"dx");
	HX_VISIT_MEMBER_NAME(dy,"dy");
	HX_VISIT_MEMBER_NAME(ex,"ex");
	HX_VISIT_MEMBER_NAME(ey,"ey");
	HX_VISIT_MEMBER_NAME(dxPrev,"dxPrev");
	HX_VISIT_MEMBER_NAME(dyPrev,"dyPrev");
	HX_VISIT_MEMBER_NAME(exPrev,"exPrev");
	HX_VISIT_MEMBER_NAME(eyPrev,"eyPrev");
	HX_VISIT_MEMBER_NAME(dxOld,"dxOld");
	HX_VISIT_MEMBER_NAME(dyOld,"dyOld");
	HX_VISIT_MEMBER_NAME(exOld,"exOld");
	HX_VISIT_MEMBER_NAME(eyOld,"eyOld");
	HX_VISIT_MEMBER_NAME(jx,"jx");
	HX_VISIT_MEMBER_NAME(jy,"jy");
	HX_VISIT_MEMBER_NAME(lastClock,"lastClock");
	HX_VISIT_MEMBER_NAME(jxOld,"jxOld");
	HX_VISIT_MEMBER_NAME(jyOld,"jyOld");
	HX_VISIT_MEMBER_NAME(kax,"kax");
	HX_VISIT_MEMBER_NAME(kay,"kay");
	HX_VISIT_MEMBER_NAME(kbx,"kbx");
	HX_VISIT_MEMBER_NAME(kby,"kby");
	HX_VISIT_MEMBER_NAME(kcx,"kcx");
	HX_VISIT_MEMBER_NAME(kcy,"kcy");
	HX_VISIT_MEMBER_NAME(ncx,"ncx");
	HX_VISIT_MEMBER_NAME(ncy,"ncy");
	HX_VISIT_MEMBER_NAME(quadIndex,"quadIndex");
	HX_VISIT_MEMBER_NAME(angleA,"angleA");
	HX_VISIT_MEMBER_NAME(halfA,"halfA");
	HX_VISIT_MEMBER_NAME(beta,"beta");
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(theta,"theta");
	HX_VISIT_MEMBER_NAME(angle1,"angle1");
	HX_VISIT_MEMBER_NAME(angle2,"angle2");
	HX_VISIT_MEMBER_NAME(count,"count");
}

::hx::Val Contour_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return ::hx::Val( r ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ax") ) { return ::hx::Val( ax ); }
		if (HX_FIELD_EQ(inName,"ay") ) { return ::hx::Val( ay ); }
		if (HX_FIELD_EQ(inName,"bx") ) { return ::hx::Val( bx ); }
		if (HX_FIELD_EQ(inName,"by") ) { return ::hx::Val( by ); }
		if (HX_FIELD_EQ(inName,"cx") ) { return ::hx::Val( cx ); }
		if (HX_FIELD_EQ(inName,"cy") ) { return ::hx::Val( cy ); }
		if (HX_FIELD_EQ(inName,"dx") ) { return ::hx::Val( dx ); }
		if (HX_FIELD_EQ(inName,"dy") ) { return ::hx::Val( dy ); }
		if (HX_FIELD_EQ(inName,"ex") ) { return ::hx::Val( ex ); }
		if (HX_FIELD_EQ(inName,"ey") ) { return ::hx::Val( ey ); }
		if (HX_FIELD_EQ(inName,"jx") ) { return ::hx::Val( jx ); }
		if (HX_FIELD_EQ(inName,"jy") ) { return ::hx::Val( jy ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { return ::hx::Val( pen ); }
		if (HX_FIELD_EQ(inName,"kax") ) { return ::hx::Val( kax ); }
		if (HX_FIELD_EQ(inName,"kay") ) { return ::hx::Val( kay ); }
		if (HX_FIELD_EQ(inName,"kbx") ) { return ::hx::Val( kbx ); }
		if (HX_FIELD_EQ(inName,"kby") ) { return ::hx::Val( kby ); }
		if (HX_FIELD_EQ(inName,"kcx") ) { return ::hx::Val( kcx ); }
		if (HX_FIELD_EQ(inName,"kcy") ) { return ::hx::Val( kcy ); }
		if (HX_FIELD_EQ(inName,"ncx") ) { return ::hx::Val( ncx ); }
		if (HX_FIELD_EQ(inName,"ncy") ) { return ::hx::Val( ncy ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"beta") ) { return ::hx::Val( beta ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dxOld") ) { return ::hx::Val( dxOld ); }
		if (HX_FIELD_EQ(inName,"dyOld") ) { return ::hx::Val( dyOld ); }
		if (HX_FIELD_EQ(inName,"exOld") ) { return ::hx::Val( exOld ); }
		if (HX_FIELD_EQ(inName,"eyOld") ) { return ::hx::Val( eyOld ); }
		if (HX_FIELD_EQ(inName,"jxOld") ) { return ::hx::Val( jxOld ); }
		if (HX_FIELD_EQ(inName,"jyOld") ) { return ::hx::Val( jyOld ); }
		if (HX_FIELD_EQ(inName,"halfA") ) { return ::hx::Val( halfA ); }
		if (HX_FIELD_EQ(inName,"theta") ) { return ::hx::Val( theta ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"count") ) { return ::hx::Val( count ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dxPrev") ) { return ::hx::Val( dxPrev ); }
		if (HX_FIELD_EQ(inName,"dyPrev") ) { return ::hx::Val( dyPrev ); }
		if (HX_FIELD_EQ(inName,"exPrev") ) { return ::hx::Val( exPrev ); }
		if (HX_FIELD_EQ(inName,"eyPrev") ) { return ::hx::Val( eyPrev ); }
		if (HX_FIELD_EQ(inName,"angleA") ) { return ::hx::Val( angleA ); }
		if (HX_FIELD_EQ(inName,"angle1") ) { return ::hx::Val( angle1 ); }
		if (HX_FIELD_EQ(inName,"angle2") ) { return ::hx::Val( angle2 ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endLine") ) { return ::hx::Val( endLine ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"endEdges") ) { return ::hx::Val( endEdges_dyn() ); }
		if (HX_FIELD_EQ(inName,"addQuads") ) { return ::hx::Val( addQuads_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastAntiX") ) { return ::hx::Val( lastAntiX ); }
		if (HX_FIELD_EQ(inName,"lastAntiY") ) { return ::hx::Val( lastAntiY ); }
		if (HX_FIELD_EQ(inName,"lastClock") ) { return ::hx::Val( lastClock ); }
		if (HX_FIELD_EQ(inName,"quadIndex") ) { return ::hx::Val( quadIndex ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pointsAnti") ) { return ::hx::Val( pointsAnti ); }
		if (HX_FIELD_EQ(inName,"lastClockX") ) { return ::hx::Val( lastClockX ); }
		if (HX_FIELD_EQ(inName,"lastClockY") ) { return ::hx::Val( lastClockY ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pointsClock") ) { return ::hx::Val( pointsClock ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"penultimateCX") ) { return ::hx::Val( penultimateCX ); }
		if (HX_FIELD_EQ(inName,"penultimateCY") ) { return ::hx::Val( penultimateCY ); }
		if (HX_FIELD_EQ(inName,"penultimateAX") ) { return ::hx::Val( penultimateAX ); }
		if (HX_FIELD_EQ(inName,"penultimateAY") ) { return ::hx::Val( penultimateAY ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Contour_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ax") ) { ax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ay") ) { ay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bx") ) { bx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"by") ) { by=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx") ) { cx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cy") ) { cy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dx") ) { dx=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dy") ) { dy=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ex") ) { ex=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ey") ) { ey=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jx") ) { jx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jy") ) { jy=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { pen=inValue.Cast<  ::trilateral3::drawing::Pen >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kax") ) { kax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kay") ) { kay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kbx") ) { kbx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kby") ) { kby=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kcx") ) { kcx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kcy") ) { kcy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ncx") ) { ncx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ncy") ) { ncy=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"beta") ) { beta=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dxOld") ) { dxOld=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dyOld") ) { dyOld=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"exOld") ) { exOld=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eyOld") ) { eyOld=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jxOld") ) { jxOld=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jyOld") ) { jyOld=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"halfA") ) { halfA=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"theta") ) { theta=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dxPrev") ) { dxPrev=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dyPrev") ) { dyPrev=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"exPrev") ) { exPrev=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eyPrev") ) { eyPrev=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angleA") ) { angleA=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle1") ) { angle1=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle2") ) { angle2=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endLine") ) { endLine=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastAntiX") ) { lastAntiX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastAntiY") ) { lastAntiY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastClock") ) { lastClock=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quadIndex") ) { quadIndex=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pointsAnti") ) { pointsAnti=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastClockX") ) { lastClockX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastClockY") ) { lastClockY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pointsClock") ) { pointsClock=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"penultimateCX") ) { penultimateCX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"penultimateCY") ) { penultimateCY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"penultimateAX") ) { penultimateAX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"penultimateAY") ) { penultimateAY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Contour_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pointsClock",ab,c8,9e,88));
	outFields->push(HX_("pointsAnti",65,1b,f0,ae));
	outFields->push(HX_("penultimateCX",5f,f6,17,69));
	outFields->push(HX_("penultimateCY",60,f6,17,69));
	outFields->push(HX_("lastClockX",c0,6d,20,d9));
	outFields->push(HX_("lastClockY",c1,6d,20,d9));
	outFields->push(HX_("penultimateAX",a1,f4,17,69));
	outFields->push(HX_("penultimateAY",a2,f4,17,69));
	outFields->push(HX_("lastAntiX",40,4c,99,6f));
	outFields->push(HX_("lastAntiY",41,4c,99,6f));
	outFields->push(HX_("pen",d9,54,55,00));
	outFields->push(HX_("endLine",6f,d1,d7,29));
	outFields->push(HX_("ax",f7,54,00,00));
	outFields->push(HX_("ay",f8,54,00,00));
	outFields->push(HX_("bx",d6,55,00,00));
	outFields->push(HX_("by",d7,55,00,00));
	outFields->push(HX_("cx",b5,56,00,00));
	outFields->push(HX_("cy",b6,56,00,00));
	outFields->push(HX_("dx",94,57,00,00));
	outFields->push(HX_("dy",95,57,00,00));
	outFields->push(HX_("ex",73,58,00,00));
	outFields->push(HX_("ey",74,58,00,00));
	outFields->push(HX_("dxPrev",a7,9c,fd,48));
	outFields->push(HX_("dyPrev",28,31,64,dc));
	outFields->push(HX_("exPrev",06,f9,58,af));
	outFields->push(HX_("eyPrev",87,8d,bf,42));
	outFields->push(HX_("dxOld",73,ed,9f,e3));
	outFields->push(HX_("dyOld",12,24,49,e4));
	outFields->push(HX_("exOld",f4,81,06,77));
	outFields->push(HX_("eyOld",93,b8,af,77));
	outFields->push(HX_("jx",ce,5c,00,00));
	outFields->push(HX_("jy",cf,5c,00,00));
	outFields->push(HX_("lastClock",98,37,10,95));
	outFields->push(HX_("jxOld",79,68,07,58));
	outFields->push(HX_("jyOld",18,9f,b0,58));
	outFields->push(HX_("kax",22,86,51,00));
	outFields->push(HX_("kay",23,86,51,00));
	outFields->push(HX_("kbx",01,87,51,00));
	outFields->push(HX_("kby",02,87,51,00));
	outFields->push(HX_("kcx",e0,87,51,00));
	outFields->push(HX_("kcy",e1,87,51,00));
	outFields->push(HX_("ncx",a3,ce,53,00));
	outFields->push(HX_("ncy",a4,ce,53,00));
	outFields->push(HX_("quadIndex",cb,a0,31,4f));
	outFields->push(HX_("angleA",0e,15,19,63));
	outFields->push(HX_("halfA",2e,53,1c,22));
	outFields->push(HX_("beta",f0,f1,13,41));
	outFields->push(HX_("r",72,00,00,00));
	outFields->push(HX_("theta",1e,84,86,0f));
	outFields->push(HX_("angle1",fe,14,19,63));
	outFields->push(HX_("angle2",ff,14,19,63));
	outFields->push(HX_("count",cf,44,63,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Contour_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Contour_obj,pointsClock),HX_("pointsClock",ab,c8,9e,88)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Contour_obj,pointsAnti),HX_("pointsAnti",65,1b,f0,ae)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,penultimateCX),HX_("penultimateCX",5f,f6,17,69)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,penultimateCY),HX_("penultimateCY",60,f6,17,69)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,lastClockX),HX_("lastClockX",c0,6d,20,d9)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,lastClockY),HX_("lastClockY",c1,6d,20,d9)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,penultimateAX),HX_("penultimateAX",a1,f4,17,69)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,penultimateAY),HX_("penultimateAY",a2,f4,17,69)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,lastAntiX),HX_("lastAntiX",40,4c,99,6f)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,lastAntiY),HX_("lastAntiY",41,4c,99,6f)},
	{::hx::fsObject /*  ::trilateral3::drawing::Pen */ ,(int)offsetof(Contour_obj,pen),HX_("pen",d9,54,55,00)},
	{::hx::fsInt,(int)offsetof(Contour_obj,endLine),HX_("endLine",6f,d1,d7,29)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,ax),HX_("ax",f7,54,00,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,ay),HX_("ay",f8,54,00,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,bx),HX_("bx",d6,55,00,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,by),HX_("by",d7,55,00,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,cx),HX_("cx",b5,56,00,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,cy),HX_("cy",b6,56,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,dx),HX_("dx",94,57,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,dy),HX_("dy",95,57,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,ex),HX_("ex",73,58,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,ey),HX_("ey",74,58,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,dxPrev),HX_("dxPrev",a7,9c,fd,48)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,dyPrev),HX_("dyPrev",28,31,64,dc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,exPrev),HX_("exPrev",06,f9,58,af)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,eyPrev),HX_("eyPrev",87,8d,bf,42)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,dxOld),HX_("dxOld",73,ed,9f,e3)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,dyOld),HX_("dyOld",12,24,49,e4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,exOld),HX_("exOld",f4,81,06,77)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,eyOld),HX_("eyOld",93,b8,af,77)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,jx),HX_("jx",ce,5c,00,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,jy),HX_("jy",cf,5c,00,00)},
	{::hx::fsBool,(int)offsetof(Contour_obj,lastClock),HX_("lastClock",98,37,10,95)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,jxOld),HX_("jxOld",79,68,07,58)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,jyOld),HX_("jyOld",18,9f,b0,58)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,kax),HX_("kax",22,86,51,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,kay),HX_("kay",23,86,51,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,kbx),HX_("kbx",01,87,51,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,kby),HX_("kby",02,87,51,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,kcx),HX_("kcx",e0,87,51,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,kcy),HX_("kcy",e1,87,51,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,ncx),HX_("ncx",a3,ce,53,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,ncy),HX_("ncy",a4,ce,53,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,quadIndex),HX_("quadIndex",cb,a0,31,4f)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,angleA),HX_("angleA",0e,15,19,63)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,halfA),HX_("halfA",2e,53,1c,22)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,beta),HX_("beta",f0,f1,13,41)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,r),HX_("r",72,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,theta),HX_("theta",1e,84,86,0f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Contour_obj,angle1),HX_("angle1",fe,14,19,63)},
	{::hx::fsFloat,(int)offsetof(Contour_obj,angle2),HX_("angle2",ff,14,19,63)},
	{::hx::fsInt,(int)offsetof(Contour_obj,count),HX_("count",cf,44,63,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Contour_obj_sStaticStorageInfo = 0;
#endif

static ::String Contour_obj_sMemberFields[] = {
	HX_("pointsClock",ab,c8,9e,88),
	HX_("pointsAnti",65,1b,f0,ae),
	HX_("penultimateCX",5f,f6,17,69),
	HX_("penultimateCY",60,f6,17,69),
	HX_("lastClockX",c0,6d,20,d9),
	HX_("lastClockY",c1,6d,20,d9),
	HX_("penultimateAX",a1,f4,17,69),
	HX_("penultimateAY",a2,f4,17,69),
	HX_("lastAntiX",40,4c,99,6f),
	HX_("lastAntiY",41,4c,99,6f),
	HX_("pen",d9,54,55,00),
	HX_("endLine",6f,d1,d7,29),
	HX_("ax",f7,54,00,00),
	HX_("ay",f8,54,00,00),
	HX_("bx",d6,55,00,00),
	HX_("by",d7,55,00,00),
	HX_("cx",b5,56,00,00),
	HX_("cy",b6,56,00,00),
	HX_("dx",94,57,00,00),
	HX_("dy",95,57,00,00),
	HX_("ex",73,58,00,00),
	HX_("ey",74,58,00,00),
	HX_("dxPrev",a7,9c,fd,48),
	HX_("dyPrev",28,31,64,dc),
	HX_("exPrev",06,f9,58,af),
	HX_("eyPrev",87,8d,bf,42),
	HX_("dxOld",73,ed,9f,e3),
	HX_("dyOld",12,24,49,e4),
	HX_("exOld",f4,81,06,77),
	HX_("eyOld",93,b8,af,77),
	HX_("jx",ce,5c,00,00),
	HX_("jy",cf,5c,00,00),
	HX_("lastClock",98,37,10,95),
	HX_("jxOld",79,68,07,58),
	HX_("jyOld",18,9f,b0,58),
	HX_("kax",22,86,51,00),
	HX_("kay",23,86,51,00),
	HX_("kbx",01,87,51,00),
	HX_("kby",02,87,51,00),
	HX_("kcx",e0,87,51,00),
	HX_("kcy",e1,87,51,00),
	HX_("ncx",a3,ce,53,00),
	HX_("ncy",a4,ce,53,00),
	HX_("quadIndex",cb,a0,31,4f),
	HX_("angleA",0e,15,19,63),
	HX_("halfA",2e,53,1c,22),
	HX_("beta",f0,f1,13,41),
	HX_("r",72,00,00,00),
	HX_("theta",1e,84,86,0f),
	HX_("angle1",fe,14,19,63),
	HX_("angle2",ff,14,19,63),
	HX_("reset",cf,49,c8,e6),
	HX_("count",cf,44,63,4a),
	HX_("endEdges",bb,ff,dd,67),
	HX_("addQuads",eb,9b,44,d7),
	::String(null()) };

::hx::Class Contour_obj::__mClass;

void Contour_obj::__register()
{
	Contour_obj _hx_dummy;
	Contour_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.drawing.Contour",43,ac,91,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Contour_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Contour_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Contour_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Contour_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace drawing
