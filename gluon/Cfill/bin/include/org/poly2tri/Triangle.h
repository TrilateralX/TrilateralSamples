// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_org_poly2tri_Triangle
#define INCLUDED_org_poly2tri_Triangle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(org,poly2tri,Point)
HX_DECLARE_CLASS2(org,poly2tri,Triangle)

namespace org{
namespace poly2tri{


class HXCPP_CLASS_ATTRIBUTES Triangle_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Triangle_obj OBJ_;
		Triangle_obj();

	public:
		enum { _hx_ClassId = 0x334f3e51 };

		void __construct( ::org::poly2tri::Point p1, ::org::poly2tri::Point p2, ::org::poly2tri::Point p3,::hx::Null< bool >  __o_fixOrientation,::hx::Null< bool >  __o_checkOrientation);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="org.poly2tri.Triangle")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"org.poly2tri.Triangle"); }
		static ::hx::ObjectPtr< Triangle_obj > __new( ::org::poly2tri::Point p1, ::org::poly2tri::Point p2, ::org::poly2tri::Point p3,::hx::Null< bool >  __o_fixOrientation,::hx::Null< bool >  __o_checkOrientation);
		static ::hx::ObjectPtr< Triangle_obj > __alloc(::hx::Ctx *_hx_ctx, ::org::poly2tri::Point p1, ::org::poly2tri::Point p2, ::org::poly2tri::Point p3,::hx::Null< bool >  __o_fixOrientation,::hx::Null< bool >  __o_checkOrientation);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Triangle_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Triangle",e8,7a,77,67); }

		static void rotateTrianglePair( ::org::poly2tri::Triangle t, ::org::poly2tri::Point p, ::org::poly2tri::Triangle ot, ::org::poly2tri::Point op);
		static ::Dynamic rotateTrianglePair_dyn();

		::Array< ::Dynamic> points;
		::Array< ::Dynamic> neighbors;
		bool interior;
		::Array< bool > constrained_edge;
		::Array< bool > delaunay_edge;
		bool containsPoint( ::org::poly2tri::Point point);
		::Dynamic containsPoint_dyn();

		bool containsEdgePoints( ::org::poly2tri::Point p1, ::org::poly2tri::Point p2);
		::Dynamic containsEdgePoints_dyn();

		void markNeighbor( ::org::poly2tri::Triangle t, ::org::poly2tri::Point p1, ::org::poly2tri::Point p2);
		::Dynamic markNeighbor_dyn();

		void markNeighborTriangle( ::org::poly2tri::Triangle that);
		::Dynamic markNeighborTriangle_dyn();

		int getPointIndexOffset( ::org::poly2tri::Point p,::hx::Null< int >  offset);
		::Dynamic getPointIndexOffset_dyn();

		 ::org::poly2tri::Point pointCW( ::org::poly2tri::Point p);
		::Dynamic pointCW_dyn();

		 ::org::poly2tri::Point pointCCW( ::org::poly2tri::Point p);
		::Dynamic pointCCW_dyn();

		 ::org::poly2tri::Triangle neighborCW( ::org::poly2tri::Point p);
		::Dynamic neighborCW_dyn();

		 ::org::poly2tri::Triangle neighborCCW( ::org::poly2tri::Point p);
		::Dynamic neighborCCW_dyn();

		bool getConstrainedEdgeCW( ::org::poly2tri::Point p);
		::Dynamic getConstrainedEdgeCW_dyn();

		bool setConstrainedEdgeCW( ::org::poly2tri::Point p,bool ce);
		::Dynamic setConstrainedEdgeCW_dyn();

		bool getConstrainedEdgeCCW( ::org::poly2tri::Point p);
		::Dynamic getConstrainedEdgeCCW_dyn();

		bool setConstrainedEdgeCCW( ::org::poly2tri::Point p,bool ce);
		::Dynamic setConstrainedEdgeCCW_dyn();

		bool getDelaunayEdgeCW( ::org::poly2tri::Point p);
		::Dynamic getDelaunayEdgeCW_dyn();

		bool setDelaunayEdgeCW( ::org::poly2tri::Point p,bool e);
		::Dynamic setDelaunayEdgeCW_dyn();

		bool getDelaunayEdgeCCW( ::org::poly2tri::Point p);
		::Dynamic getDelaunayEdgeCCW_dyn();

		bool setDelaunayEdgeCCW( ::org::poly2tri::Point p,bool e);
		::Dynamic setDelaunayEdgeCCW_dyn();

		 ::org::poly2tri::Triangle neighborAcross( ::org::poly2tri::Point p);
		::Dynamic neighborAcross_dyn();

		 ::org::poly2tri::Point oppositePoint( ::org::poly2tri::Triangle t, ::org::poly2tri::Point p);
		::Dynamic oppositePoint_dyn();

		void legalize( ::org::poly2tri::Point opoint, ::org::poly2tri::Point npoint);
		::Dynamic legalize_dyn();

		int index( ::org::poly2tri::Point p);
		::Dynamic index_dyn();

		int edgeIndex( ::org::poly2tri::Point p1, ::org::poly2tri::Point p2);
		::Dynamic edgeIndex_dyn();

		void markConstrainedEdgeByIndex(int index);
		::Dynamic markConstrainedEdgeByIndex_dyn();

		void markConstrainedEdgeByPoints( ::org::poly2tri::Point p, ::org::poly2tri::Point q);
		::Dynamic markConstrainedEdgeByPoints_dyn();

		bool isEdgeSide( ::org::poly2tri::Point ep, ::org::poly2tri::Point eq);
		::Dynamic isEdgeSide_dyn();

		void clearNeigbors();
		::Dynamic clearNeigbors_dyn();

		void clearDelunayEdges();
		::Dynamic clearDelunayEdges_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace org
} // end namespace poly2tri

#endif /* INCLUDED_org_poly2tri_Triangle */ 
