// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_justPath_EllipseArc
#include <justPath/EllipseArc.h>
#endif
#ifndef INCLUDED_justPath_IPathContext
#include <justPath/IPathContext.h>
#endif
#ifndef INCLUDED_justPath_StoreF6
#include <justPath/StoreF6.h>
#endif
#ifndef INCLUDED_justPath_SvgPath
#include <justPath/SvgPath.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0b1b2dc758b14196_6_new,"justPath.SvgPath","new",0xaa51797e,"justPath.SvgPath.new","justPath/SvgPath.hx",6,0x4df92af3)
HX_LOCAL_STACK_FRAME(_hx_pos_0b1b2dc758b14196_27_parse,"justPath.SvgPath","parse",0x20e63cd1,"justPath.SvgPath.parse","justPath/SvgPath.hx",27,0x4df92af3)
namespace justPath{

void SvgPath_obj::__construct(::Dynamic pathContext_){
            	HX_STACKFRAME(&_hx_pos_0b1b2dc758b14196_6_new)
HXLINE(  14)		this->l = 0;
HXLINE(  13)		this->c = 0;
HXLINE(  12)		this->controlY = ((Float)0.);
HXLINE(  11)		this->controlX = ((Float)0.);
HXLINE(  10)		this->lastY = ((Float)0.);
HXLINE(   9)		this->lastX = ((Float)0.);
HXLINE(   8)		this->pos = 0;
HXLINE(   7)		this->str = HX_("",00,00,00,00);
HXLINE(  18)		this->pathContext = pathContext_;
            	}

Dynamic SvgPath_obj::__CreateEmpty() { return new SvgPath_obj; }

void *SvgPath_obj::_hx_vtable = 0;

Dynamic SvgPath_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SvgPath_obj > _hx_result = new SvgPath_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SvgPath_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fb92d04;
}

::String SvgPath_obj::parse(::String str_){
            	HX_GC_STACKFRAME(&_hx_pos_0b1b2dc758b14196_27_parse)
HXLINE(  28)		this->str = str_;
HXLINE(  29)		this->pos = 0;
HXLINE(  30)		this->l = this->str.length;
HXLINE(  31)		this->c = this->str.cca(this->pos++);
HXLINE(  32)		int count = 0;
HXLINE(  33)		this->store =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
HXLINE(  34)		while((this->pos < this->l)){
HXLINE(  35)			switch((int)(this->c)){
            				case (int)65: {
HXLINE( 310)					{
HXLINE( 310)						{
HXLINE( 310)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 310)							_this->l = 0;
HXDLIN( 310)							_this->s0 = null();
HXDLIN( 310)							_this->s1 = null();
HXDLIN( 310)							_this->s2 = null();
HXDLIN( 310)							_this->s3 = null();
HXDLIN( 310)							_this->s4 = null();
HXDLIN( 310)							_this->s5 = null();
HXDLIN( 310)							_this->s6 = null();
            						}
HXDLIN( 310)						this->c = this->str.cca(this->pos++);
HXDLIN( 310)						::String temp = HX_("",00,00,00,00);
HXDLIN( 310)						bool exit = false;
HXDLIN( 310)						while(true){
HXLINE( 310)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 310)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 310)										if (((this->store->l & 1) == 0)) {
HXLINE( 310)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 310)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 310)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 310)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 310)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 310)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 310)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 310)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 310)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 310)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 310)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 310)													{
HXLINE( 310)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 310)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 310)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 310)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 310)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 310)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 310)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 310)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 310)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 310)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 310)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 310)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 310)											_this->l++;
            										}
            										else {
HXLINE( 310)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 310)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 310)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 310)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 310)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 310)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 310)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 310)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 310)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 310)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 310)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 310)													{
HXLINE( 310)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 310)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 310)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 310)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 310)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 310)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 310)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 310)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 310)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 310)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 310)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 310)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 310)											_this->l++;
            										}
HXDLIN( 310)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 310)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 310)										if (((this->store->l & 1) == 0)) {
HXLINE( 310)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 310)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 310)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 310)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 310)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 310)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 310)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 310)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 310)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 310)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 310)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 310)													{
HXLINE( 310)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 310)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 310)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 310)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 310)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 310)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 310)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 310)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 310)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 310)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 310)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 310)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 310)											_this->l++;
            										}
            										else {
HXLINE( 310)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 310)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 310)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 310)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 310)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 310)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 310)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 310)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 310)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 310)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 310)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 310)													{
HXLINE( 310)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 310)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 310)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 310)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 310)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 310)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 310)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 310)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 310)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 310)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 310)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 310)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 310)											_this->l++;
            										}
            									}
HXDLIN( 310)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 310)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 310)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 310)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 310)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 310)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 310)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 310)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 310)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 310)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 310)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 310)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 310)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 310)										if (((this->store->l & 1) == 0)) {
HXLINE( 310)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 310)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 310)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 310)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 310)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 310)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 310)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 310)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 310)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 310)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 310)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 310)													{
HXLINE( 310)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 310)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 310)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 310)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 310)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 310)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 310)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 310)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 310)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 310)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 310)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 310)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 310)											_this->l++;
            										}
            										else {
HXLINE( 310)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 310)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 310)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 310)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 310)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 310)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 310)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 310)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 310)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 310)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 310)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 310)													{
HXLINE( 310)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 310)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 310)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 310)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 310)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 310)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 310)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 310)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 310)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 310)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 310)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 310)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 310)											_this->l++;
            										}
HXDLIN( 310)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 310)									this->pos--;
HXDLIN( 310)									exit = true;
            								}
            							}
HXDLIN( 310)							if (exit) {
HXLINE( 310)								goto _hx_goto_2;
            							}
HXDLIN( 310)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_2:;
            					}
HXLINE( 311)					if ((this->store->l == 7)) {
HXLINE( 312)						Float sx = this->lastX;
HXLINE( 313)						Float sy = this->lastY;
HXLINE( 314)						 ::justPath::StoreF6 _this = this->store;
HXDLIN( 314)						 ::Dynamic out = _this->s0;
HXDLIN( 314)						if ((_this->l != 0)) {
HXLINE( 314)							_this->s0 = _this->s1;
HXDLIN( 314)							_this->s1 = _this->s2;
HXDLIN( 314)							_this->s2 = _this->s3;
HXDLIN( 314)							_this->s3 = _this->s4;
HXDLIN( 314)							_this->s4 = _this->s5;
HXDLIN( 314)							_this->s5 = null();
HXDLIN( 314)							if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 314)								 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 314)								 ::Dynamic out = _this1->s0;
HXDLIN( 314)								if ((_this1->l != 0)) {
HXLINE( 314)									_this1->s0 = _this1->s1;
HXDLIN( 314)									_this1->s1 = _this1->s2;
HXDLIN( 314)									_this1->s2 = _this1->s3;
HXDLIN( 314)									_this1->s3 = _this1->s4;
HXDLIN( 314)									_this1->s4 = _this1->s5;
HXDLIN( 314)									_this1->s5 = null();
HXDLIN( 314)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 314)										_this1->s5 = _this1->s6->shift();
            									}
HXDLIN( 314)									_this1->l--;
            								}
HXDLIN( 314)								_this->s5 = out;
            							}
HXDLIN( 314)							_this->l--;
            						}
HXDLIN( 314)						 ::Dynamic xr = out;
HXLINE( 315)						 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 315)						 ::Dynamic out1 = _this1->s0;
HXDLIN( 315)						if ((_this1->l != 0)) {
HXLINE( 315)							_this1->s0 = _this1->s1;
HXDLIN( 315)							_this1->s1 = _this1->s2;
HXDLIN( 315)							_this1->s2 = _this1->s3;
HXDLIN( 315)							_this1->s3 = _this1->s4;
HXDLIN( 315)							_this1->s4 = _this1->s5;
HXDLIN( 315)							_this1->s5 = null();
HXDLIN( 315)							if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 315)								 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 315)								 ::Dynamic out = _this->s0;
HXDLIN( 315)								if ((_this->l != 0)) {
HXLINE( 315)									_this->s0 = _this->s1;
HXDLIN( 315)									_this->s1 = _this->s2;
HXDLIN( 315)									_this->s2 = _this->s3;
HXDLIN( 315)									_this->s3 = _this->s4;
HXDLIN( 315)									_this->s4 = _this->s5;
HXDLIN( 315)									_this->s5 = null();
HXDLIN( 315)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 315)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 315)									_this->l--;
            								}
HXDLIN( 315)								_this1->s5 = out;
            							}
HXDLIN( 315)							_this1->l--;
            						}
HXDLIN( 315)						 ::Dynamic yr = out1;
HXLINE( 316)						 ::justPath::StoreF6 _this2 = this->store;
HXDLIN( 316)						 ::Dynamic out2 = _this2->s0;
HXDLIN( 316)						if ((_this2->l != 0)) {
HXLINE( 316)							_this2->s0 = _this2->s1;
HXDLIN( 316)							_this2->s1 = _this2->s2;
HXDLIN( 316)							_this2->s2 = _this2->s3;
HXDLIN( 316)							_this2->s3 = _this2->s4;
HXDLIN( 316)							_this2->s4 = _this2->s5;
HXDLIN( 316)							_this2->s5 = null();
HXDLIN( 316)							if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 316)								 ::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 316)								 ::Dynamic out = _this->s0;
HXDLIN( 316)								if ((_this->l != 0)) {
HXLINE( 316)									_this->s0 = _this->s1;
HXDLIN( 316)									_this->s1 = _this->s2;
HXDLIN( 316)									_this->s2 = _this->s3;
HXDLIN( 316)									_this->s3 = _this->s4;
HXDLIN( 316)									_this->s4 = _this->s5;
HXDLIN( 316)									_this->s5 = null();
HXDLIN( 316)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 316)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 316)									_this->l--;
            								}
HXDLIN( 316)								_this2->s5 = out;
            							}
HXDLIN( 316)							_this2->l--;
            						}
HXDLIN( 316)						 ::Dynamic phi = out2;
HXLINE( 317)						 ::justPath::StoreF6 _this3 = this->store;
HXDLIN( 317)						 ::Dynamic out3 = _this3->s0;
HXDLIN( 317)						if ((_this3->l != 0)) {
HXLINE( 317)							_this3->s0 = _this3->s1;
HXDLIN( 317)							_this3->s1 = _this3->s2;
HXDLIN( 317)							_this3->s2 = _this3->s3;
HXDLIN( 317)							_this3->s3 = _this3->s4;
HXDLIN( 317)							_this3->s4 = _this3->s5;
HXDLIN( 317)							_this3->s5 = null();
HXDLIN( 317)							if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 317)								 ::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 317)								 ::Dynamic out = _this->s0;
HXDLIN( 317)								if ((_this->l != 0)) {
HXLINE( 317)									_this->s0 = _this->s1;
HXDLIN( 317)									_this->s1 = _this->s2;
HXDLIN( 317)									_this->s2 = _this->s3;
HXDLIN( 317)									_this->s3 = _this->s4;
HXDLIN( 317)									_this->s4 = _this->s5;
HXDLIN( 317)									_this->s5 = null();
HXDLIN( 317)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 317)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 317)									_this->l--;
            								}
HXDLIN( 317)								_this3->s5 = out;
            							}
HXDLIN( 317)							_this3->l--;
            						}
HXDLIN( 317)						int large = ::Std_obj::_hx_int(( (Float)(out3) ));
HXLINE( 318)						 ::justPath::StoreF6 _this4 = this->store;
HXDLIN( 318)						 ::Dynamic out4 = _this4->s0;
HXDLIN( 318)						if ((_this4->l != 0)) {
HXLINE( 318)							_this4->s0 = _this4->s1;
HXDLIN( 318)							_this4->s1 = _this4->s2;
HXDLIN( 318)							_this4->s2 = _this4->s3;
HXDLIN( 318)							_this4->s3 = _this4->s4;
HXDLIN( 318)							_this4->s4 = _this4->s5;
HXDLIN( 318)							_this4->s5 = null();
HXDLIN( 318)							if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 318)								 ::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 318)								 ::Dynamic out = _this->s0;
HXDLIN( 318)								if ((_this->l != 0)) {
HXLINE( 318)									_this->s0 = _this->s1;
HXDLIN( 318)									_this->s1 = _this->s2;
HXDLIN( 318)									_this->s2 = _this->s3;
HXDLIN( 318)									_this->s3 = _this->s4;
HXDLIN( 318)									_this->s4 = _this->s5;
HXDLIN( 318)									_this->s5 = null();
HXDLIN( 318)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 318)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 318)									_this->l--;
            								}
HXDLIN( 318)								_this4->s5 = out;
            							}
HXDLIN( 318)							_this4->l--;
            						}
HXDLIN( 318)						int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
HXLINE( 319)						 ::justPath::StoreF6 _this5 = this->store;
HXDLIN( 319)						 ::Dynamic out5 = _this5->s0;
HXDLIN( 319)						if ((_this5->l != 0)) {
HXLINE( 319)							_this5->s0 = _this5->s1;
HXDLIN( 319)							_this5->s1 = _this5->s2;
HXDLIN( 319)							_this5->s2 = _this5->s3;
HXDLIN( 319)							_this5->s3 = _this5->s4;
HXDLIN( 319)							_this5->s4 = _this5->s5;
HXDLIN( 319)							_this5->s5 = null();
HXDLIN( 319)							if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 319)								 ::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 319)								 ::Dynamic out = _this->s0;
HXDLIN( 319)								if ((_this->l != 0)) {
HXLINE( 319)									_this->s0 = _this->s1;
HXDLIN( 319)									_this->s1 = _this->s2;
HXDLIN( 319)									_this->s2 = _this->s3;
HXDLIN( 319)									_this->s3 = _this->s4;
HXDLIN( 319)									_this->s4 = _this->s5;
HXDLIN( 319)									_this->s5 = null();
HXDLIN( 319)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 319)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 319)									_this->l--;
            								}
HXDLIN( 319)								_this5->s5 = out;
            							}
HXDLIN( 319)							_this5->l--;
            						}
HXDLIN( 319)						this->lastX = ( (Float)(out5) );
HXLINE( 320)						 ::justPath::StoreF6 _this6 = this->store;
HXDLIN( 320)						 ::Dynamic out6 = _this6->s0;
HXDLIN( 320)						if ((_this6->l != 0)) {
HXLINE( 320)							_this6->s0 = _this6->s1;
HXDLIN( 320)							_this6->s1 = _this6->s2;
HXDLIN( 320)							_this6->s2 = _this6->s3;
HXDLIN( 320)							_this6->s3 = _this6->s4;
HXDLIN( 320)							_this6->s4 = _this6->s5;
HXDLIN( 320)							_this6->s5 = null();
HXDLIN( 320)							if (::hx::IsNotNull( _this6->s6 )) {
HXLINE( 320)								 ::justPath::StoreF6 _this = _this6->s6;
HXDLIN( 320)								 ::Dynamic out = _this->s0;
HXDLIN( 320)								if ((_this->l != 0)) {
HXLINE( 320)									_this->s0 = _this->s1;
HXDLIN( 320)									_this->s1 = _this->s2;
HXDLIN( 320)									_this->s2 = _this->s3;
HXDLIN( 320)									_this->s3 = _this->s4;
HXDLIN( 320)									_this->s4 = _this->s5;
HXDLIN( 320)									_this->s5 = null();
HXDLIN( 320)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 320)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 320)									_this->l--;
            								}
HXDLIN( 320)								_this6->s5 = out;
            							}
HXDLIN( 320)							_this6->l--;
            						}
HXDLIN( 320)						this->lastY = ( (Float)(out6) );
HXLINE( 321)						Float sx1 = sx;
HXDLIN( 321)						Float sy1 = sy;
HXDLIN( 321)						Float phi1 = ( (Float)(phi) );
HXDLIN( 321)						Float ex = this->lastX;
HXDLIN( 321)						Float ey = this->lastY;
HXDLIN( 321)						Float mx = ((sx1 - ex) / ( (Float)(2) ));
HXDLIN( 321)						Float my = ((sy1 - ey) / ( (Float)(2) ));
HXDLIN( 321)						Float ax = ((sx1 + ex) / ( (Float)(2) ));
HXDLIN( 321)						Float ay = ((sy1 + ey) / ( (Float)(2) ));
HXDLIN( 321)						phi1 = ::hx::Mod(phi1,360);
HXDLIN( 321)						phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN( 321)						Float sin = ::Math_obj::sin(phi1);
HXDLIN( 321)						Float cos = ::Math_obj::cos(phi1);
HXDLIN( 321)						Float x1 = ((mx * cos) + (my * sin));
HXDLIN( 321)						Float y1 = ((-(mx) * sin) + (my * cos));
HXDLIN( 321)						Float rx = ::Math_obj::abs(( (Float)(xr) ));
HXDLIN( 321)						Float ry = ::Math_obj::abs(( (Float)(yr) ));
HXDLIN( 321)						Float rxx = (rx * rx);
HXDLIN( 321)						Float ryy = (ry * ry);
HXDLIN( 321)						Float xx1 = (x1 * x1);
HXDLIN( 321)						Float yy1 = (y1 * y1);
HXDLIN( 321)						Float check = ((xx1 / rxx) + (yy1 / ryy));
HXDLIN( 321)						if ((check > 1)) {
HXLINE( 321)							rx = (rx * ::Math_obj::sqrt(check));
HXDLIN( 321)							ry = (ry * ::Math_obj::sqrt(check));
HXDLIN( 321)							rxx = (rx * rx);
HXDLIN( 321)							ryy = (ry * ry);
            						}
HXDLIN( 321)						int sign;
HXDLIN( 321)						if ((large == sweep)) {
HXLINE( 321)							sign = -1;
            						}
            						else {
HXLINE( 321)							sign = 1;
            						}
HXDLIN( 321)						Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
HXDLIN( 321)						if ((sq < 0)) {
HXLINE( 321)							sq = ( (Float)(0) );
            						}
HXDLIN( 321)						Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
HXDLIN( 321)						Float cx1 = (((coef * rx) * y1) / ry);
HXDLIN( 321)						Float cy1 = (((-(coef) * ry) * x1) / rx);
HXDLIN( 321)						Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
HXDLIN( 321)						Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
HXDLIN( 321)						Float phiSin = ::Math_obj::sin(-(phi1));
HXDLIN( 321)						Float phiCos = ::Math_obj::cos(-(phi1));
HXDLIN( 321)						sx1 = (sx1 - cx);
HXDLIN( 321)						sy1 = (sy1 - cy);
HXDLIN( 321)						Float dx = sx1;
HXDLIN( 321)						Float dy = sy1;
HXDLIN( 321)						sx1 = ((dx * phiCos) - (dy * phiSin));
HXDLIN( 321)						sy1 = ((dx * phiSin) + (dy * phiCos));
HXDLIN( 321)						sx1 = (sx1 + cx);
HXDLIN( 321)						sy1 = (sy1 + cy);
HXDLIN( 321)						ex = (ex - cx);
HXDLIN( 321)						ey = (ey - cy);
HXDLIN( 321)						Float dx1 = ex;
HXDLIN( 321)						Float dy1 = ey;
HXDLIN( 321)						ex = ((dx1 * phiCos) - (dy1 * phiSin));
HXDLIN( 321)						ey = ((dx1 * phiSin) + (dy1 * phiCos));
HXDLIN( 321)						ex = (ex + cx);
HXDLIN( 321)						ey = (ey + cy);
HXDLIN( 321)						Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
HXDLIN( 321)						Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
HXDLIN( 321)						Float delta = (alpha - omega);
HXDLIN( 321)						bool _hx_tmp;
HXDLIN( 321)						if ((sweep == 1)) {
HXLINE( 321)							_hx_tmp = (delta > 0);
            						}
            						else {
HXLINE( 321)							_hx_tmp = false;
            						}
HXDLIN( 321)						if (_hx_tmp) {
HXLINE( 321)							delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
            						}
            						else {
HXLINE( 321)							bool _hx_tmp;
HXDLIN( 321)							if ((sweep == 0)) {
HXLINE( 321)								_hx_tmp = (delta < 0);
            							}
            							else {
HXLINE( 321)								_hx_tmp = false;
            							}
HXDLIN( 321)							if (_hx_tmp) {
HXLINE( 321)								delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
            							}
            						}
HXDLIN( 321)						 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
            							->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
            							->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
            							->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
            							->setFixed(3,HX_("cx",b5,56,00,00),cx)
            							->setFixed(4,HX_("cy",b6,56,00,00),cy)
            							->setFixed(5,HX_("rx",c6,63,00,00),rx)
            							->setFixed(6,HX_("ry",c7,63,00,00),ry)
            							->setFixed(7,HX_("phi",71,57,55,00),phi1)
            							->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
            							->setFixed(9,HX_("omega",61,a3,d3,31),omega));
HXDLIN( 321)						 ::Dynamic ellipseData = this1;
HXLINE( 322)						 ::justPath::EllipseArc ellipse =  ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
HXLINE( 323)						ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
            					}
            					else {
HXLINE( 324)						if ((this->store->l > 7)) {
HXLINE( 325)							while((this->store->l > 6)){
HXLINE( 326)								Float sx = this->lastX;
HXLINE( 327)								Float sy = this->lastY;
HXLINE( 328)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 328)								 ::Dynamic out = _this->s0;
HXDLIN( 328)								if ((_this->l != 0)) {
HXLINE( 328)									_this->s0 = _this->s1;
HXDLIN( 328)									_this->s1 = _this->s2;
HXDLIN( 328)									_this->s2 = _this->s3;
HXDLIN( 328)									_this->s3 = _this->s4;
HXDLIN( 328)									_this->s4 = _this->s5;
HXDLIN( 328)									_this->s5 = null();
HXDLIN( 328)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 328)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 328)										 ::Dynamic out = _this1->s0;
HXDLIN( 328)										if ((_this1->l != 0)) {
HXLINE( 328)											_this1->s0 = _this1->s1;
HXDLIN( 328)											_this1->s1 = _this1->s2;
HXDLIN( 328)											_this1->s2 = _this1->s3;
HXDLIN( 328)											_this1->s3 = _this1->s4;
HXDLIN( 328)											_this1->s4 = _this1->s5;
HXDLIN( 328)											_this1->s5 = null();
HXDLIN( 328)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 328)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 328)											_this1->l--;
            										}
HXDLIN( 328)										_this->s5 = out;
            									}
HXDLIN( 328)									_this->l--;
            								}
HXDLIN( 328)								 ::Dynamic xr = out;
HXLINE( 329)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 329)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 329)								if ((_this1->l != 0)) {
HXLINE( 329)									_this1->s0 = _this1->s1;
HXDLIN( 329)									_this1->s1 = _this1->s2;
HXDLIN( 329)									_this1->s2 = _this1->s3;
HXDLIN( 329)									_this1->s3 = _this1->s4;
HXDLIN( 329)									_this1->s4 = _this1->s5;
HXDLIN( 329)									_this1->s5 = null();
HXDLIN( 329)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 329)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 329)										 ::Dynamic out = _this->s0;
HXDLIN( 329)										if ((_this->l != 0)) {
HXLINE( 329)											_this->s0 = _this->s1;
HXDLIN( 329)											_this->s1 = _this->s2;
HXDLIN( 329)											_this->s2 = _this->s3;
HXDLIN( 329)											_this->s3 = _this->s4;
HXDLIN( 329)											_this->s4 = _this->s5;
HXDLIN( 329)											_this->s5 = null();
HXDLIN( 329)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 329)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 329)											_this->l--;
            										}
HXDLIN( 329)										_this1->s5 = out;
            									}
HXDLIN( 329)									_this1->l--;
            								}
HXDLIN( 329)								 ::Dynamic yr = out1;
HXLINE( 330)								 ::justPath::StoreF6 _this2 = this->store;
HXDLIN( 330)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 330)								if ((_this2->l != 0)) {
HXLINE( 330)									_this2->s0 = _this2->s1;
HXDLIN( 330)									_this2->s1 = _this2->s2;
HXDLIN( 330)									_this2->s2 = _this2->s3;
HXDLIN( 330)									_this2->s3 = _this2->s4;
HXDLIN( 330)									_this2->s4 = _this2->s5;
HXDLIN( 330)									_this2->s5 = null();
HXDLIN( 330)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 330)										 ::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 330)										 ::Dynamic out = _this->s0;
HXDLIN( 330)										if ((_this->l != 0)) {
HXLINE( 330)											_this->s0 = _this->s1;
HXDLIN( 330)											_this->s1 = _this->s2;
HXDLIN( 330)											_this->s2 = _this->s3;
HXDLIN( 330)											_this->s3 = _this->s4;
HXDLIN( 330)											_this->s4 = _this->s5;
HXDLIN( 330)											_this->s5 = null();
HXDLIN( 330)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 330)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 330)											_this->l--;
            										}
HXDLIN( 330)										_this2->s5 = out;
            									}
HXDLIN( 330)									_this2->l--;
            								}
HXDLIN( 330)								 ::Dynamic phi = out2;
HXLINE( 331)								 ::justPath::StoreF6 _this3 = this->store;
HXDLIN( 331)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 331)								if ((_this3->l != 0)) {
HXLINE( 331)									_this3->s0 = _this3->s1;
HXDLIN( 331)									_this3->s1 = _this3->s2;
HXDLIN( 331)									_this3->s2 = _this3->s3;
HXDLIN( 331)									_this3->s3 = _this3->s4;
HXDLIN( 331)									_this3->s4 = _this3->s5;
HXDLIN( 331)									_this3->s5 = null();
HXDLIN( 331)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 331)										 ::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 331)										 ::Dynamic out = _this->s0;
HXDLIN( 331)										if ((_this->l != 0)) {
HXLINE( 331)											_this->s0 = _this->s1;
HXDLIN( 331)											_this->s1 = _this->s2;
HXDLIN( 331)											_this->s2 = _this->s3;
HXDLIN( 331)											_this->s3 = _this->s4;
HXDLIN( 331)											_this->s4 = _this->s5;
HXDLIN( 331)											_this->s5 = null();
HXDLIN( 331)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 331)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 331)											_this->l--;
            										}
HXDLIN( 331)										_this3->s5 = out;
            									}
HXDLIN( 331)									_this3->l--;
            								}
HXDLIN( 331)								int large = ::Std_obj::_hx_int(( (Float)(out3) ));
HXLINE( 332)								 ::justPath::StoreF6 _this4 = this->store;
HXDLIN( 332)								 ::Dynamic out4 = _this4->s0;
HXDLIN( 332)								if ((_this4->l != 0)) {
HXLINE( 332)									_this4->s0 = _this4->s1;
HXDLIN( 332)									_this4->s1 = _this4->s2;
HXDLIN( 332)									_this4->s2 = _this4->s3;
HXDLIN( 332)									_this4->s3 = _this4->s4;
HXDLIN( 332)									_this4->s4 = _this4->s5;
HXDLIN( 332)									_this4->s5 = null();
HXDLIN( 332)									if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 332)										 ::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 332)										 ::Dynamic out = _this->s0;
HXDLIN( 332)										if ((_this->l != 0)) {
HXLINE( 332)											_this->s0 = _this->s1;
HXDLIN( 332)											_this->s1 = _this->s2;
HXDLIN( 332)											_this->s2 = _this->s3;
HXDLIN( 332)											_this->s3 = _this->s4;
HXDLIN( 332)											_this->s4 = _this->s5;
HXDLIN( 332)											_this->s5 = null();
HXDLIN( 332)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 332)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 332)											_this->l--;
            										}
HXDLIN( 332)										_this4->s5 = out;
            									}
HXDLIN( 332)									_this4->l--;
            								}
HXDLIN( 332)								int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
HXLINE( 333)								 ::justPath::StoreF6 _this5 = this->store;
HXDLIN( 333)								 ::Dynamic out5 = _this5->s0;
HXDLIN( 333)								if ((_this5->l != 0)) {
HXLINE( 333)									_this5->s0 = _this5->s1;
HXDLIN( 333)									_this5->s1 = _this5->s2;
HXDLIN( 333)									_this5->s2 = _this5->s3;
HXDLIN( 333)									_this5->s3 = _this5->s4;
HXDLIN( 333)									_this5->s4 = _this5->s5;
HXDLIN( 333)									_this5->s5 = null();
HXDLIN( 333)									if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 333)										 ::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 333)										 ::Dynamic out = _this->s0;
HXDLIN( 333)										if ((_this->l != 0)) {
HXLINE( 333)											_this->s0 = _this->s1;
HXDLIN( 333)											_this->s1 = _this->s2;
HXDLIN( 333)											_this->s2 = _this->s3;
HXDLIN( 333)											_this->s3 = _this->s4;
HXDLIN( 333)											_this->s4 = _this->s5;
HXDLIN( 333)											_this->s5 = null();
HXDLIN( 333)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 333)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 333)											_this->l--;
            										}
HXDLIN( 333)										_this5->s5 = out;
            									}
HXDLIN( 333)									_this5->l--;
            								}
HXDLIN( 333)								this->lastX = ( (Float)(out5) );
HXLINE( 334)								 ::justPath::StoreF6 _this6 = this->store;
HXDLIN( 334)								 ::Dynamic out6 = _this6->s0;
HXDLIN( 334)								if ((_this6->l != 0)) {
HXLINE( 334)									_this6->s0 = _this6->s1;
HXDLIN( 334)									_this6->s1 = _this6->s2;
HXDLIN( 334)									_this6->s2 = _this6->s3;
HXDLIN( 334)									_this6->s3 = _this6->s4;
HXDLIN( 334)									_this6->s4 = _this6->s5;
HXDLIN( 334)									_this6->s5 = null();
HXDLIN( 334)									if (::hx::IsNotNull( _this6->s6 )) {
HXLINE( 334)										 ::justPath::StoreF6 _this = _this6->s6;
HXDLIN( 334)										 ::Dynamic out = _this->s0;
HXDLIN( 334)										if ((_this->l != 0)) {
HXLINE( 334)											_this->s0 = _this->s1;
HXDLIN( 334)											_this->s1 = _this->s2;
HXDLIN( 334)											_this->s2 = _this->s3;
HXDLIN( 334)											_this->s3 = _this->s4;
HXDLIN( 334)											_this->s4 = _this->s5;
HXDLIN( 334)											_this->s5 = null();
HXDLIN( 334)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 334)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 334)											_this->l--;
            										}
HXDLIN( 334)										_this6->s5 = out;
            									}
HXDLIN( 334)									_this6->l--;
            								}
HXDLIN( 334)								this->lastY = ( (Float)(out6) );
HXLINE( 335)								Float sx1 = sx;
HXDLIN( 335)								Float sy1 = sy;
HXDLIN( 335)								Float phi1 = ( (Float)(phi) );
HXDLIN( 335)								Float ex = this->lastX;
HXDLIN( 335)								Float ey = this->lastY;
HXDLIN( 335)								Float mx = ((sx1 - ex) / ( (Float)(2) ));
HXDLIN( 335)								Float my = ((sy1 - ey) / ( (Float)(2) ));
HXDLIN( 335)								Float ax = ((sx1 + ex) / ( (Float)(2) ));
HXDLIN( 335)								Float ay = ((sy1 + ey) / ( (Float)(2) ));
HXDLIN( 335)								phi1 = ::hx::Mod(phi1,360);
HXDLIN( 335)								phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN( 335)								Float sin = ::Math_obj::sin(phi1);
HXDLIN( 335)								Float cos = ::Math_obj::cos(phi1);
HXDLIN( 335)								Float x1 = ((mx * cos) + (my * sin));
HXDLIN( 335)								Float y1 = ((-(mx) * sin) + (my * cos));
HXDLIN( 335)								Float rx = ::Math_obj::abs(( (Float)(xr) ));
HXDLIN( 335)								Float ry = ::Math_obj::abs(( (Float)(yr) ));
HXDLIN( 335)								Float rxx = (rx * rx);
HXDLIN( 335)								Float ryy = (ry * ry);
HXDLIN( 335)								Float xx1 = (x1 * x1);
HXDLIN( 335)								Float yy1 = (y1 * y1);
HXDLIN( 335)								Float check = ((xx1 / rxx) + (yy1 / ryy));
HXDLIN( 335)								if ((check > 1)) {
HXLINE( 335)									rx = (rx * ::Math_obj::sqrt(check));
HXDLIN( 335)									ry = (ry * ::Math_obj::sqrt(check));
HXDLIN( 335)									rxx = (rx * rx);
HXDLIN( 335)									ryy = (ry * ry);
            								}
HXDLIN( 335)								int sign;
HXDLIN( 335)								if ((large == sweep)) {
HXLINE( 335)									sign = -1;
            								}
            								else {
HXLINE( 335)									sign = 1;
            								}
HXDLIN( 335)								Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
HXDLIN( 335)								if ((sq < 0)) {
HXLINE( 335)									sq = ( (Float)(0) );
            								}
HXDLIN( 335)								Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
HXDLIN( 335)								Float cx1 = (((coef * rx) * y1) / ry);
HXDLIN( 335)								Float cy1 = (((-(coef) * ry) * x1) / rx);
HXDLIN( 335)								Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
HXDLIN( 335)								Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
HXDLIN( 335)								Float phiSin = ::Math_obj::sin(-(phi1));
HXDLIN( 335)								Float phiCos = ::Math_obj::cos(-(phi1));
HXDLIN( 335)								sx1 = (sx1 - cx);
HXDLIN( 335)								sy1 = (sy1 - cy);
HXDLIN( 335)								Float dx = sx1;
HXDLIN( 335)								Float dy = sy1;
HXDLIN( 335)								sx1 = ((dx * phiCos) - (dy * phiSin));
HXDLIN( 335)								sy1 = ((dx * phiSin) + (dy * phiCos));
HXDLIN( 335)								sx1 = (sx1 + cx);
HXDLIN( 335)								sy1 = (sy1 + cy);
HXDLIN( 335)								ex = (ex - cx);
HXDLIN( 335)								ey = (ey - cy);
HXDLIN( 335)								Float dx1 = ex;
HXDLIN( 335)								Float dy1 = ey;
HXDLIN( 335)								ex = ((dx1 * phiCos) - (dy1 * phiSin));
HXDLIN( 335)								ey = ((dx1 * phiSin) + (dy1 * phiCos));
HXDLIN( 335)								ex = (ex + cx);
HXDLIN( 335)								ey = (ey + cy);
HXDLIN( 335)								Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
HXDLIN( 335)								Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
HXDLIN( 335)								Float delta = (alpha - omega);
HXDLIN( 335)								bool _hx_tmp;
HXDLIN( 335)								if ((sweep == 1)) {
HXLINE( 335)									_hx_tmp = (delta > 0);
            								}
            								else {
HXLINE( 335)									_hx_tmp = false;
            								}
HXDLIN( 335)								if (_hx_tmp) {
HXLINE( 335)									delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
            								}
            								else {
HXLINE( 335)									bool _hx_tmp;
HXDLIN( 335)									if ((sweep == 0)) {
HXLINE( 335)										_hx_tmp = (delta < 0);
            									}
            									else {
HXLINE( 335)										_hx_tmp = false;
            									}
HXDLIN( 335)									if (_hx_tmp) {
HXLINE( 335)										delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
            									}
            								}
HXDLIN( 335)								 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
            									->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
            									->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
            									->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
            									->setFixed(3,HX_("cx",b5,56,00,00),cx)
            									->setFixed(4,HX_("cy",b6,56,00,00),cy)
            									->setFixed(5,HX_("rx",c6,63,00,00),rx)
            									->setFixed(6,HX_("ry",c7,63,00,00),ry)
            									->setFixed(7,HX_("phi",71,57,55,00),phi1)
            									->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
            									->setFixed(9,HX_("omega",61,a3,d3,31),omega));
HXDLIN( 335)								 ::Dynamic ellipseData = this1;
HXLINE( 336)								 ::justPath::EllipseArc ellipse =  ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
HXLINE( 337)								ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
            							}
            						}
            					}
            				}
            				break;
            				case (int)66: {
HXLINE( 377)					::haxe::Log_obj::trace(HX_("bearing - not implemented",90,1f,b8,d8),::hx::SourceInfo(HX_("justPath/SvgPath.hx",f3,2a,f9,4d),377,HX_("justPath.SvgPath",8c,a2,03,48),HX_("parse",33,90,55,bd)));
HXLINE( 378)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("bearing not supported please remove",09,97,54,2d)));
            				}
            				break;
            				case (int)67: {
HXLINE( 139)					{
HXLINE( 139)						{
HXLINE( 139)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 139)							_this->l = 0;
HXDLIN( 139)							_this->s0 = null();
HXDLIN( 139)							_this->s1 = null();
HXDLIN( 139)							_this->s2 = null();
HXDLIN( 139)							_this->s3 = null();
HXDLIN( 139)							_this->s4 = null();
HXDLIN( 139)							_this->s5 = null();
HXDLIN( 139)							_this->s6 = null();
            						}
HXDLIN( 139)						this->c = this->str.cca(this->pos++);
HXDLIN( 139)						::String temp = HX_("",00,00,00,00);
HXDLIN( 139)						bool exit = false;
HXDLIN( 139)						while(true){
HXLINE( 139)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 139)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 139)										if (((this->store->l & 1) == 0)) {
HXLINE( 139)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 139)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 139)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 139)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 139)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 139)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 139)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 139)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 139)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 139)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 139)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 139)													{
HXLINE( 139)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 139)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 139)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 139)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 139)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 139)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 139)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 139)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 139)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 139)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 139)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 139)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 139)											_this->l++;
            										}
            										else {
HXLINE( 139)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 139)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 139)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 139)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 139)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 139)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 139)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 139)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 139)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 139)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 139)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 139)													{
HXLINE( 139)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 139)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 139)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 139)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 139)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 139)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 139)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 139)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 139)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 139)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 139)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 139)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 139)											_this->l++;
            										}
HXDLIN( 139)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 139)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 139)										if (((this->store->l & 1) == 0)) {
HXLINE( 139)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 139)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 139)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 139)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 139)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 139)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 139)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 139)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 139)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 139)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 139)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 139)													{
HXLINE( 139)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 139)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 139)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 139)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 139)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 139)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 139)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 139)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 139)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 139)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 139)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 139)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 139)											_this->l++;
            										}
            										else {
HXLINE( 139)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 139)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 139)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 139)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 139)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 139)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 139)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 139)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 139)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 139)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 139)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 139)													{
HXLINE( 139)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 139)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 139)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 139)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 139)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 139)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 139)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 139)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 139)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 139)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 139)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 139)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 139)											_this->l++;
            										}
            									}
HXDLIN( 139)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 139)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 139)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 139)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 139)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 139)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 139)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 139)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 139)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 139)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 139)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 139)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 139)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 139)										if (((this->store->l & 1) == 0)) {
HXLINE( 139)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 139)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 139)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 139)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 139)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 139)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 139)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 139)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 139)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 139)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 139)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 139)													{
HXLINE( 139)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 139)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 139)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 139)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 139)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 139)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 139)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 139)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 139)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 139)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 139)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 139)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 139)											_this->l++;
            										}
            										else {
HXLINE( 139)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 139)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 139)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 139)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 139)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 139)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 139)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 139)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 139)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 139)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 139)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 139)													{
HXLINE( 139)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 139)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 139)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 139)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 139)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 139)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 139)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 139)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 139)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 139)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 139)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 139)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 139)											_this->l++;
            										}
HXDLIN( 139)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 139)									this->pos--;
HXDLIN( 139)									exit = true;
            								}
            							}
HXDLIN( 139)							if (exit) {
HXLINE( 139)								goto _hx_goto_4;
            							}
HXDLIN( 139)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_4:;
            					}
HXLINE( 140)					if ((this->store->l == 4)) {
HXLINE( 141)						this->controlX = ( (Float)(this->store->s2) );
HXLINE( 142)						this->controlY = ( (Float)(this->store->s3) );
HXLINE( 143)						this->lastX = ( (Float)(this->store->s4) );
HXLINE( 144)						this->lastY = ( (Float)(this->store->s5) );
HXLINE( 145)						::justPath::IPathContext_obj::curveTo(this->pathContext,this->store->s0,this->store->s1,this->controlX,this->controlY,this->lastX,this->lastY);
            					}
            					else {
HXLINE( 148)						if ((this->store->l > 4)) {
HXLINE( 149)							while((this->store->l > 3)){
HXLINE( 150)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 150)								 ::Dynamic out = _this->s0;
HXDLIN( 150)								if ((_this->l != 0)) {
HXLINE( 150)									_this->s0 = _this->s1;
HXDLIN( 150)									_this->s1 = _this->s2;
HXDLIN( 150)									_this->s2 = _this->s3;
HXDLIN( 150)									_this->s3 = _this->s4;
HXDLIN( 150)									_this->s4 = _this->s5;
HXDLIN( 150)									_this->s5 = null();
HXDLIN( 150)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 150)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 150)										 ::Dynamic out = _this1->s0;
HXDLIN( 150)										if ((_this1->l != 0)) {
HXLINE( 150)											_this1->s0 = _this1->s1;
HXDLIN( 150)											_this1->s1 = _this1->s2;
HXDLIN( 150)											_this1->s2 = _this1->s3;
HXDLIN( 150)											_this1->s3 = _this1->s4;
HXDLIN( 150)											_this1->s4 = _this1->s5;
HXDLIN( 150)											_this1->s5 = null();
HXDLIN( 150)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 150)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 150)											_this1->l--;
            										}
HXDLIN( 150)										_this->s5 = out;
            									}
HXDLIN( 150)									_this->l--;
            								}
HXDLIN( 150)								 ::Dynamic firstX = out;
HXLINE( 151)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 151)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 151)								if ((_this1->l != 0)) {
HXLINE( 151)									_this1->s0 = _this1->s1;
HXDLIN( 151)									_this1->s1 = _this1->s2;
HXDLIN( 151)									_this1->s2 = _this1->s3;
HXDLIN( 151)									_this1->s3 = _this1->s4;
HXDLIN( 151)									_this1->s4 = _this1->s5;
HXDLIN( 151)									_this1->s5 = null();
HXDLIN( 151)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 151)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 151)										 ::Dynamic out = _this->s0;
HXDLIN( 151)										if ((_this->l != 0)) {
HXLINE( 151)											_this->s0 = _this->s1;
HXDLIN( 151)											_this->s1 = _this->s2;
HXDLIN( 151)											_this->s2 = _this->s3;
HXDLIN( 151)											_this->s3 = _this->s4;
HXDLIN( 151)											_this->s4 = _this->s5;
HXDLIN( 151)											_this->s5 = null();
HXDLIN( 151)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 151)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 151)											_this->l--;
            										}
HXDLIN( 151)										_this1->s5 = out;
            									}
HXDLIN( 151)									_this1->l--;
            								}
HXDLIN( 151)								 ::Dynamic firstY = out1;
HXLINE( 152)								 ::justPath::StoreF6 _this2 = this->store;
HXDLIN( 152)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 152)								if ((_this2->l != 0)) {
HXLINE( 152)									_this2->s0 = _this2->s1;
HXDLIN( 152)									_this2->s1 = _this2->s2;
HXDLIN( 152)									_this2->s2 = _this2->s3;
HXDLIN( 152)									_this2->s3 = _this2->s4;
HXDLIN( 152)									_this2->s4 = _this2->s5;
HXDLIN( 152)									_this2->s5 = null();
HXDLIN( 152)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 152)										 ::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 152)										 ::Dynamic out = _this->s0;
HXDLIN( 152)										if ((_this->l != 0)) {
HXLINE( 152)											_this->s0 = _this->s1;
HXDLIN( 152)											_this->s1 = _this->s2;
HXDLIN( 152)											_this->s2 = _this->s3;
HXDLIN( 152)											_this->s3 = _this->s4;
HXDLIN( 152)											_this->s4 = _this->s5;
HXDLIN( 152)											_this->s5 = null();
HXDLIN( 152)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 152)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 152)											_this->l--;
            										}
HXDLIN( 152)										_this2->s5 = out;
            									}
HXDLIN( 152)									_this2->l--;
            								}
HXDLIN( 152)								this->controlX = ( (Float)(out2) );
HXLINE( 153)								 ::justPath::StoreF6 _this3 = this->store;
HXDLIN( 153)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 153)								if ((_this3->l != 0)) {
HXLINE( 153)									_this3->s0 = _this3->s1;
HXDLIN( 153)									_this3->s1 = _this3->s2;
HXDLIN( 153)									_this3->s2 = _this3->s3;
HXDLIN( 153)									_this3->s3 = _this3->s4;
HXDLIN( 153)									_this3->s4 = _this3->s5;
HXDLIN( 153)									_this3->s5 = null();
HXDLIN( 153)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 153)										 ::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 153)										 ::Dynamic out = _this->s0;
HXDLIN( 153)										if ((_this->l != 0)) {
HXLINE( 153)											_this->s0 = _this->s1;
HXDLIN( 153)											_this->s1 = _this->s2;
HXDLIN( 153)											_this->s2 = _this->s3;
HXDLIN( 153)											_this->s3 = _this->s4;
HXDLIN( 153)											_this->s4 = _this->s5;
HXDLIN( 153)											_this->s5 = null();
HXDLIN( 153)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 153)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 153)											_this->l--;
            										}
HXDLIN( 153)										_this3->s5 = out;
            									}
HXDLIN( 153)									_this3->l--;
            								}
HXDLIN( 153)								this->controlY = ( (Float)(out3) );
HXLINE( 154)								 ::justPath::StoreF6 _this4 = this->store;
HXDLIN( 154)								 ::Dynamic out4 = _this4->s0;
HXDLIN( 154)								if ((_this4->l != 0)) {
HXLINE( 154)									_this4->s0 = _this4->s1;
HXDLIN( 154)									_this4->s1 = _this4->s2;
HXDLIN( 154)									_this4->s2 = _this4->s3;
HXDLIN( 154)									_this4->s3 = _this4->s4;
HXDLIN( 154)									_this4->s4 = _this4->s5;
HXDLIN( 154)									_this4->s5 = null();
HXDLIN( 154)									if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 154)										 ::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 154)										 ::Dynamic out = _this->s0;
HXDLIN( 154)										if ((_this->l != 0)) {
HXLINE( 154)											_this->s0 = _this->s1;
HXDLIN( 154)											_this->s1 = _this->s2;
HXDLIN( 154)											_this->s2 = _this->s3;
HXDLIN( 154)											_this->s3 = _this->s4;
HXDLIN( 154)											_this->s4 = _this->s5;
HXDLIN( 154)											_this->s5 = null();
HXDLIN( 154)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 154)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 154)											_this->l--;
            										}
HXDLIN( 154)										_this4->s5 = out;
            									}
HXDLIN( 154)									_this4->l--;
            								}
HXDLIN( 154)								this->lastX = ( (Float)(out4) );
HXLINE( 155)								 ::justPath::StoreF6 _this5 = this->store;
HXDLIN( 155)								 ::Dynamic out5 = _this5->s0;
HXDLIN( 155)								if ((_this5->l != 0)) {
HXLINE( 155)									_this5->s0 = _this5->s1;
HXDLIN( 155)									_this5->s1 = _this5->s2;
HXDLIN( 155)									_this5->s2 = _this5->s3;
HXDLIN( 155)									_this5->s3 = _this5->s4;
HXDLIN( 155)									_this5->s4 = _this5->s5;
HXDLIN( 155)									_this5->s5 = null();
HXDLIN( 155)									if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 155)										 ::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 155)										 ::Dynamic out = _this->s0;
HXDLIN( 155)										if ((_this->l != 0)) {
HXLINE( 155)											_this->s0 = _this->s1;
HXDLIN( 155)											_this->s1 = _this->s2;
HXDLIN( 155)											_this->s2 = _this->s3;
HXDLIN( 155)											_this->s3 = _this->s4;
HXDLIN( 155)											_this->s4 = _this->s5;
HXDLIN( 155)											_this->s5 = null();
HXDLIN( 155)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 155)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 155)											_this->l--;
            										}
HXDLIN( 155)										_this5->s5 = out;
            									}
HXDLIN( 155)									_this5->l--;
            								}
HXDLIN( 155)								this->lastY = ( (Float)(out5) );
HXLINE( 156)								::justPath::IPathContext_obj::curveTo(this->pathContext,firstX,firstY,this->controlX,this->controlY,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)72: {
HXLINE(  95)					{
HXLINE(  95)						 ::Dynamic process = false;
HXDLIN(  95)						if (::hx::IsNull( process )) {
HXLINE(  95)							process = true;
            						}
HXDLIN(  95)						{
HXLINE(  95)							 ::justPath::StoreF6 _this = this->store;
HXDLIN(  95)							_this->l = 0;
HXDLIN(  95)							_this->s0 = null();
HXDLIN(  95)							_this->s1 = null();
HXDLIN(  95)							_this->s2 = null();
HXDLIN(  95)							_this->s3 = null();
HXDLIN(  95)							_this->s4 = null();
HXDLIN(  95)							_this->s5 = null();
HXDLIN(  95)							_this->s6 = null();
            						}
HXDLIN(  95)						this->c = this->str.cca(this->pos++);
HXDLIN(  95)						::String temp = HX_("",00,00,00,00);
HXDLIN(  95)						bool exit = false;
HXDLIN(  95)						while(true){
HXLINE(  95)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE(  95)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  95)										if (( (bool)(process) )) {
HXLINE(  95)											if (((this->store->l & 1) == 0)) {
HXLINE(  95)												 ::justPath::StoreF6 _this = this->store;
HXDLIN(  95)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  95)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  95)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  95)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  95)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  95)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  95)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  95)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  95)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  95)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  95)														{
HXLINE(  95)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  95)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  95)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  95)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  95)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  95)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  95)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  95)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  95)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  95)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  95)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  95)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  95)												_this->l++;
            											}
            											else {
HXLINE(  95)												 ::justPath::StoreF6 _this = this->store;
HXDLIN(  95)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  95)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  95)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  95)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  95)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  95)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  95)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  95)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  95)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  95)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  95)														{
HXLINE(  95)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  95)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  95)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  95)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  95)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  95)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  95)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  95)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  95)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  95)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  95)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  95)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  95)												_this->l++;
            											}
            										}
            										else {
HXLINE(  95)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  95)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  95)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  95)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  95)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  95)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  95)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  95)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  95)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  95)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  95)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  95)													{
HXLINE(  95)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  95)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  95)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  95)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  95)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  95)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  95)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  95)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  95)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  95)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  95)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  95)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  95)											_this->l++;
            										}
HXDLIN(  95)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE(  95)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  95)										if (( (bool)(process) )) {
HXLINE(  95)											if (((this->store->l & 1) == 0)) {
HXLINE(  95)												 ::justPath::StoreF6 _this = this->store;
HXDLIN(  95)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  95)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  95)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  95)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  95)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  95)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  95)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  95)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  95)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  95)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  95)														{
HXLINE(  95)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  95)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  95)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  95)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  95)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  95)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  95)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  95)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  95)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  95)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  95)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  95)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  95)												_this->l++;
            											}
            											else {
HXLINE(  95)												 ::justPath::StoreF6 _this = this->store;
HXDLIN(  95)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  95)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  95)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  95)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  95)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  95)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  95)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  95)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  95)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  95)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  95)														{
HXLINE(  95)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  95)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  95)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  95)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  95)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  95)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  95)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  95)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  95)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  95)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  95)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  95)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  95)												_this->l++;
            											}
            										}
            										else {
HXLINE(  95)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  95)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  95)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  95)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  95)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  95)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  95)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  95)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  95)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  95)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  95)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  95)													{
HXLINE(  95)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  95)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  95)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  95)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  95)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  95)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  95)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  95)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  95)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  95)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  95)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  95)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  95)											_this->l++;
            										}
            									}
HXDLIN(  95)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE(  95)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE(  95)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE(  95)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE(  95)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE(  95)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE(  95)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE(  95)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE(  95)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE(  95)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE(  95)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE(  95)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE(  95)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  95)										if (( (bool)(process) )) {
HXLINE(  95)											if (((this->store->l & 1) == 0)) {
HXLINE(  95)												 ::justPath::StoreF6 _this = this->store;
HXDLIN(  95)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  95)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  95)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  95)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  95)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  95)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  95)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  95)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  95)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  95)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  95)														{
HXLINE(  95)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  95)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  95)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  95)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  95)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  95)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  95)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  95)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  95)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  95)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  95)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  95)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  95)												_this->l++;
            											}
            											else {
HXLINE(  95)												 ::justPath::StoreF6 _this = this->store;
HXDLIN(  95)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  95)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  95)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  95)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  95)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  95)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  95)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  95)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  95)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  95)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  95)														{
HXLINE(  95)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  95)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  95)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  95)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  95)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  95)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  95)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  95)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  95)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  95)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  95)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  95)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  95)												_this->l++;
            											}
            										}
            										else {
HXLINE(  95)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  95)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  95)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  95)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  95)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  95)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  95)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  95)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  95)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  95)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  95)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  95)													{
HXLINE(  95)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  95)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  95)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  95)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  95)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  95)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  95)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  95)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  95)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  95)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  95)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  95)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  95)											_this->l++;
            										}
HXDLIN(  95)										temp = HX_("",00,00,00,00);
            									}
HXDLIN(  95)									this->pos--;
HXDLIN(  95)									exit = true;
            								}
            							}
HXDLIN(  95)							if (exit) {
HXLINE(  95)								goto _hx_goto_6;
            							}
HXDLIN(  95)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_6:;
            					}
HXLINE(  96)					if ((this->store->l == 1)) {
HXLINE(  97)						this->lastX = ( (Float)(this->store->s0) );
HXLINE(  98)						::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE(  99)						if ((this->store->l > 1)) {
HXLINE( 100)							while((this->store->l > 0)){
HXLINE( 101)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 101)								 ::Dynamic out = _this->s0;
HXDLIN( 101)								if ((_this->l != 0)) {
HXLINE( 101)									_this->s0 = _this->s1;
HXDLIN( 101)									_this->s1 = _this->s2;
HXDLIN( 101)									_this->s2 = _this->s3;
HXDLIN( 101)									_this->s3 = _this->s4;
HXDLIN( 101)									_this->s4 = _this->s5;
HXDLIN( 101)									_this->s5 = null();
HXDLIN( 101)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 101)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 101)										 ::Dynamic out = _this1->s0;
HXDLIN( 101)										if ((_this1->l != 0)) {
HXLINE( 101)											_this1->s0 = _this1->s1;
HXDLIN( 101)											_this1->s1 = _this1->s2;
HXDLIN( 101)											_this1->s2 = _this1->s3;
HXDLIN( 101)											_this1->s3 = _this1->s4;
HXDLIN( 101)											_this1->s4 = _this1->s5;
HXDLIN( 101)											_this1->s5 = null();
HXDLIN( 101)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 101)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 101)											_this1->l--;
            										}
HXDLIN( 101)										_this->s5 = out;
            									}
HXDLIN( 101)									_this->l--;
            								}
HXDLIN( 101)								this->lastX = ( (Float)(out) );
HXLINE( 102)								::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)76: {
HXLINE(  69)					{
HXLINE(  69)						{
HXLINE(  69)							 ::justPath::StoreF6 _this = this->store;
HXDLIN(  69)							_this->l = 0;
HXDLIN(  69)							_this->s0 = null();
HXDLIN(  69)							_this->s1 = null();
HXDLIN(  69)							_this->s2 = null();
HXDLIN(  69)							_this->s3 = null();
HXDLIN(  69)							_this->s4 = null();
HXDLIN(  69)							_this->s5 = null();
HXDLIN(  69)							_this->s6 = null();
            						}
HXDLIN(  69)						this->c = this->str.cca(this->pos++);
HXDLIN(  69)						::String temp = HX_("",00,00,00,00);
HXDLIN(  69)						bool exit = false;
HXDLIN(  69)						while(true){
HXLINE(  69)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE(  69)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  69)										if (((this->store->l & 1) == 0)) {
HXLINE(  69)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  69)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  69)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  69)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  69)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  69)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  69)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  69)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  69)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  69)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  69)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  69)													{
HXLINE(  69)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  69)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  69)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  69)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  69)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  69)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  69)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  69)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  69)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  69)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  69)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  69)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  69)											_this->l++;
            										}
            										else {
HXLINE(  69)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  69)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  69)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  69)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  69)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  69)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  69)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  69)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  69)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  69)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  69)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  69)													{
HXLINE(  69)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  69)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  69)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  69)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  69)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  69)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  69)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  69)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  69)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  69)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  69)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  69)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  69)											_this->l++;
            										}
HXDLIN(  69)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE(  69)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  69)										if (((this->store->l & 1) == 0)) {
HXLINE(  69)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  69)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  69)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  69)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  69)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  69)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  69)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  69)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  69)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  69)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  69)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  69)													{
HXLINE(  69)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  69)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  69)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  69)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  69)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  69)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  69)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  69)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  69)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  69)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  69)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  69)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  69)											_this->l++;
            										}
            										else {
HXLINE(  69)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  69)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  69)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  69)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  69)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  69)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  69)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  69)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  69)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  69)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  69)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  69)													{
HXLINE(  69)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  69)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  69)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  69)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  69)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  69)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  69)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  69)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  69)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  69)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  69)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  69)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  69)											_this->l++;
            										}
            									}
HXDLIN(  69)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE(  69)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE(  69)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE(  69)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE(  69)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE(  69)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE(  69)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE(  69)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE(  69)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE(  69)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE(  69)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE(  69)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE(  69)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  69)										if (((this->store->l & 1) == 0)) {
HXLINE(  69)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  69)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  69)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  69)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  69)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  69)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  69)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  69)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  69)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  69)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  69)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  69)													{
HXLINE(  69)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  69)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  69)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  69)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  69)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  69)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  69)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  69)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  69)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  69)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  69)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  69)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  69)											_this->l++;
            										}
            										else {
HXLINE(  69)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  69)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  69)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  69)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  69)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  69)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  69)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  69)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  69)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  69)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  69)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  69)													{
HXLINE(  69)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  69)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  69)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  69)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  69)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  69)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  69)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  69)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  69)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  69)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  69)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  69)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  69)											_this->l++;
            										}
HXDLIN(  69)										temp = HX_("",00,00,00,00);
            									}
HXDLIN(  69)									this->pos--;
HXDLIN(  69)									exit = true;
            								}
            							}
HXDLIN(  69)							if (exit) {
HXLINE(  69)								goto _hx_goto_8;
            							}
HXDLIN(  69)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_8:;
            					}
HXLINE(  70)					if ((this->store->l == 2)) {
HXLINE(  71)						this->lastX = ( (Float)(this->store->s0) );
HXLINE(  72)						this->lastY = ( (Float)(this->store->s1) );
HXLINE(  73)						::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE(  74)						if ((this->store->l > 2)) {
HXLINE(  75)							while((this->store->l > 1)){
HXLINE(  76)								 ::justPath::StoreF6 _this = this->store;
HXDLIN(  76)								 ::Dynamic out = _this->s0;
HXDLIN(  76)								if ((_this->l != 0)) {
HXLINE(  76)									_this->s0 = _this->s1;
HXDLIN(  76)									_this->s1 = _this->s2;
HXDLIN(  76)									_this->s2 = _this->s3;
HXDLIN(  76)									_this->s3 = _this->s4;
HXDLIN(  76)									_this->s4 = _this->s5;
HXDLIN(  76)									_this->s5 = null();
HXDLIN(  76)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  76)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  76)										 ::Dynamic out = _this1->s0;
HXDLIN(  76)										if ((_this1->l != 0)) {
HXLINE(  76)											_this1->s0 = _this1->s1;
HXDLIN(  76)											_this1->s1 = _this1->s2;
HXDLIN(  76)											_this1->s2 = _this1->s3;
HXDLIN(  76)											_this1->s3 = _this1->s4;
HXDLIN(  76)											_this1->s4 = _this1->s5;
HXDLIN(  76)											_this1->s5 = null();
HXDLIN(  76)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  76)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN(  76)											_this1->l--;
            										}
HXDLIN(  76)										_this->s5 = out;
            									}
HXDLIN(  76)									_this->l--;
            								}
HXDLIN(  76)								this->lastX = ( (Float)(out) );
HXLINE(  77)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN(  77)								 ::Dynamic out1 = _this1->s0;
HXDLIN(  77)								if ((_this1->l != 0)) {
HXLINE(  77)									_this1->s0 = _this1->s1;
HXDLIN(  77)									_this1->s1 = _this1->s2;
HXDLIN(  77)									_this1->s2 = _this1->s3;
HXDLIN(  77)									_this1->s3 = _this1->s4;
HXDLIN(  77)									_this1->s4 = _this1->s5;
HXDLIN(  77)									_this1->s5 = null();
HXDLIN(  77)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  77)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  77)										 ::Dynamic out = _this->s0;
HXDLIN(  77)										if ((_this->l != 0)) {
HXLINE(  77)											_this->s0 = _this->s1;
HXDLIN(  77)											_this->s1 = _this->s2;
HXDLIN(  77)											_this->s2 = _this->s3;
HXDLIN(  77)											_this->s3 = _this->s4;
HXDLIN(  77)											_this->s4 = _this->s5;
HXDLIN(  77)											_this->s5 = null();
HXDLIN(  77)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  77)												_this->s5 = _this->s6->shift();
            											}
HXDLIN(  77)											_this->l--;
            										}
HXDLIN(  77)										_this1->s5 = out;
            									}
HXDLIN(  77)									_this1->l--;
            								}
HXDLIN(  77)								this->lastY = ( (Float)(out1) );
HXLINE(  78)								::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)77: {
HXLINE(  37)					{
HXLINE(  37)						{
HXLINE(  37)							 ::justPath::StoreF6 _this = this->store;
HXDLIN(  37)							_this->l = 0;
HXDLIN(  37)							_this->s0 = null();
HXDLIN(  37)							_this->s1 = null();
HXDLIN(  37)							_this->s2 = null();
HXDLIN(  37)							_this->s3 = null();
HXDLIN(  37)							_this->s4 = null();
HXDLIN(  37)							_this->s5 = null();
HXDLIN(  37)							_this->s6 = null();
            						}
HXDLIN(  37)						this->c = this->str.cca(this->pos++);
HXDLIN(  37)						::String temp = HX_("",00,00,00,00);
HXDLIN(  37)						bool exit = false;
HXDLIN(  37)						while(true){
HXLINE(  37)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE(  37)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  37)										if (((this->store->l & 1) == 0)) {
HXLINE(  37)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  37)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  37)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  37)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  37)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  37)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  37)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  37)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  37)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  37)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  37)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  37)													{
HXLINE(  37)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  37)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  37)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  37)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  37)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  37)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  37)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  37)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  37)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  37)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  37)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  37)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  37)											_this->l++;
            										}
            										else {
HXLINE(  37)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  37)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  37)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  37)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  37)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  37)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  37)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  37)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  37)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  37)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  37)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  37)													{
HXLINE(  37)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  37)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  37)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  37)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  37)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  37)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  37)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  37)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  37)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  37)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  37)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  37)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  37)											_this->l++;
            										}
HXDLIN(  37)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE(  37)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  37)										if (((this->store->l & 1) == 0)) {
HXLINE(  37)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  37)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  37)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  37)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  37)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  37)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  37)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  37)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  37)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  37)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  37)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  37)													{
HXLINE(  37)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  37)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  37)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  37)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  37)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  37)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  37)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  37)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  37)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  37)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  37)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  37)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  37)											_this->l++;
            										}
            										else {
HXLINE(  37)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  37)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  37)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  37)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  37)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  37)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  37)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  37)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  37)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  37)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  37)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  37)													{
HXLINE(  37)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  37)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  37)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  37)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  37)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  37)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  37)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  37)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  37)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  37)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  37)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  37)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  37)											_this->l++;
            										}
            									}
HXDLIN(  37)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE(  37)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE(  37)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE(  37)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE(  37)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE(  37)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE(  37)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE(  37)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE(  37)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE(  37)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE(  37)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE(  37)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE(  37)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  37)										if (((this->store->l & 1) == 0)) {
HXLINE(  37)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  37)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  37)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  37)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  37)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  37)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  37)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  37)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  37)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  37)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  37)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  37)													{
HXLINE(  37)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  37)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  37)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  37)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  37)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  37)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  37)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  37)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  37)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  37)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  37)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  37)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  37)											_this->l++;
            										}
            										else {
HXLINE(  37)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  37)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  37)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  37)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  37)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  37)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  37)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  37)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  37)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  37)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  37)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  37)													{
HXLINE(  37)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  37)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  37)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  37)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  37)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  37)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  37)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  37)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  37)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  37)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  37)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  37)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  37)											_this->l++;
            										}
HXDLIN(  37)										temp = HX_("",00,00,00,00);
            									}
HXDLIN(  37)									this->pos--;
HXDLIN(  37)									exit = true;
            								}
            							}
HXDLIN(  37)							if (exit) {
HXLINE(  37)								goto _hx_goto_10;
            							}
HXDLIN(  37)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_10:;
            					}
HXLINE(  38)					if ((this->store->l == 2)) {
HXLINE(  39)						this->lastX = ( (Float)(this->store->s0) );
HXLINE(  40)						this->lastY = ( (Float)(this->store->s1) );
HXLINE(  41)						::justPath::IPathContext_obj::moveTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE(  42)						if ((this->store->l > 2)) {
HXLINE(  43)							 ::justPath::StoreF6 _this = this->store;
HXDLIN(  43)							 ::Dynamic out = _this->s0;
HXDLIN(  43)							if ((_this->l != 0)) {
HXLINE(  43)								_this->s0 = _this->s1;
HXDLIN(  43)								_this->s1 = _this->s2;
HXDLIN(  43)								_this->s2 = _this->s3;
HXDLIN(  43)								_this->s3 = _this->s4;
HXDLIN(  43)								_this->s4 = _this->s5;
HXDLIN(  43)								_this->s5 = null();
HXDLIN(  43)								if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  43)									 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  43)									 ::Dynamic out = _this1->s0;
HXDLIN(  43)									if ((_this1->l != 0)) {
HXLINE(  43)										_this1->s0 = _this1->s1;
HXDLIN(  43)										_this1->s1 = _this1->s2;
HXDLIN(  43)										_this1->s2 = _this1->s3;
HXDLIN(  43)										_this1->s3 = _this1->s4;
HXDLIN(  43)										_this1->s4 = _this1->s5;
HXDLIN(  43)										_this1->s5 = null();
HXDLIN(  43)										if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  43)											_this1->s5 = _this1->s6->shift();
            										}
HXDLIN(  43)										_this1->l--;
            									}
HXDLIN(  43)									_this->s5 = out;
            								}
HXDLIN(  43)								_this->l--;
            							}
HXDLIN(  43)							this->lastX = ( (Float)(out) );
HXLINE(  44)							 ::justPath::StoreF6 _this1 = this->store;
HXDLIN(  44)							 ::Dynamic out1 = _this1->s0;
HXDLIN(  44)							if ((_this1->l != 0)) {
HXLINE(  44)								_this1->s0 = _this1->s1;
HXDLIN(  44)								_this1->s1 = _this1->s2;
HXDLIN(  44)								_this1->s2 = _this1->s3;
HXDLIN(  44)								_this1->s3 = _this1->s4;
HXDLIN(  44)								_this1->s4 = _this1->s5;
HXDLIN(  44)								_this1->s5 = null();
HXDLIN(  44)								if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  44)									 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  44)									 ::Dynamic out = _this->s0;
HXDLIN(  44)									if ((_this->l != 0)) {
HXLINE(  44)										_this->s0 = _this->s1;
HXDLIN(  44)										_this->s1 = _this->s2;
HXDLIN(  44)										_this->s2 = _this->s3;
HXDLIN(  44)										_this->s3 = _this->s4;
HXDLIN(  44)										_this->s4 = _this->s5;
HXDLIN(  44)										_this->s5 = null();
HXDLIN(  44)										if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  44)											_this->s5 = _this->s6->shift();
            										}
HXDLIN(  44)										_this->l--;
            									}
HXDLIN(  44)									_this1->s5 = out;
            								}
HXDLIN(  44)								_this1->l--;
            							}
HXDLIN(  44)							this->lastY = ( (Float)(out1) );
HXLINE(  45)							::justPath::IPathContext_obj::moveTo(this->pathContext,this->lastX,this->lastY);
HXLINE(  46)							while((this->store->l > 1)){
HXLINE(  47)								 ::justPath::StoreF6 _this = this->store;
HXDLIN(  47)								 ::Dynamic out = _this->s0;
HXDLIN(  47)								if ((_this->l != 0)) {
HXLINE(  47)									_this->s0 = _this->s1;
HXDLIN(  47)									_this->s1 = _this->s2;
HXDLIN(  47)									_this->s2 = _this->s3;
HXDLIN(  47)									_this->s3 = _this->s4;
HXDLIN(  47)									_this->s4 = _this->s5;
HXDLIN(  47)									_this->s5 = null();
HXDLIN(  47)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  47)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  47)										 ::Dynamic out = _this1->s0;
HXDLIN(  47)										if ((_this1->l != 0)) {
HXLINE(  47)											_this1->s0 = _this1->s1;
HXDLIN(  47)											_this1->s1 = _this1->s2;
HXDLIN(  47)											_this1->s2 = _this1->s3;
HXDLIN(  47)											_this1->s3 = _this1->s4;
HXDLIN(  47)											_this1->s4 = _this1->s5;
HXDLIN(  47)											_this1->s5 = null();
HXDLIN(  47)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  47)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN(  47)											_this1->l--;
            										}
HXDLIN(  47)										_this->s5 = out;
            									}
HXDLIN(  47)									_this->l--;
            								}
HXDLIN(  47)								this->lastX = ( (Float)(out) );
HXLINE(  48)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN(  48)								 ::Dynamic out1 = _this1->s0;
HXDLIN(  48)								if ((_this1->l != 0)) {
HXLINE(  48)									_this1->s0 = _this1->s1;
HXDLIN(  48)									_this1->s1 = _this1->s2;
HXDLIN(  48)									_this1->s2 = _this1->s3;
HXDLIN(  48)									_this1->s3 = _this1->s4;
HXDLIN(  48)									_this1->s4 = _this1->s5;
HXDLIN(  48)									_this1->s5 = null();
HXDLIN(  48)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  48)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  48)										 ::Dynamic out = _this->s0;
HXDLIN(  48)										if ((_this->l != 0)) {
HXLINE(  48)											_this->s0 = _this->s1;
HXDLIN(  48)											_this->s1 = _this->s2;
HXDLIN(  48)											_this->s2 = _this->s3;
HXDLIN(  48)											_this->s3 = _this->s4;
HXDLIN(  48)											_this->s4 = _this->s5;
HXDLIN(  48)											_this->s5 = null();
HXDLIN(  48)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  48)												_this->s5 = _this->s6->shift();
            											}
HXDLIN(  48)											_this->l--;
            										}
HXDLIN(  48)										_this1->s5 = out;
            									}
HXDLIN(  48)									_this1->l--;
            								}
HXDLIN(  48)								this->lastY = ( (Float)(out1) );
HXLINE(  49)								::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)81: {
HXLINE( 237)					{
HXLINE( 237)						{
HXLINE( 237)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 237)							_this->l = 0;
HXDLIN( 237)							_this->s0 = null();
HXDLIN( 237)							_this->s1 = null();
HXDLIN( 237)							_this->s2 = null();
HXDLIN( 237)							_this->s3 = null();
HXDLIN( 237)							_this->s4 = null();
HXDLIN( 237)							_this->s5 = null();
HXDLIN( 237)							_this->s6 = null();
            						}
HXDLIN( 237)						this->c = this->str.cca(this->pos++);
HXDLIN( 237)						::String temp = HX_("",00,00,00,00);
HXDLIN( 237)						bool exit = false;
HXDLIN( 237)						while(true){
HXLINE( 237)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 237)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 237)										if (((this->store->l & 1) == 0)) {
HXLINE( 237)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 237)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 237)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 237)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 237)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 237)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 237)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 237)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 237)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 237)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 237)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 237)													{
HXLINE( 237)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 237)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 237)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 237)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 237)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 237)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 237)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 237)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 237)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 237)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 237)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 237)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 237)											_this->l++;
            										}
            										else {
HXLINE( 237)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 237)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 237)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 237)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 237)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 237)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 237)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 237)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 237)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 237)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 237)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 237)													{
HXLINE( 237)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 237)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 237)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 237)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 237)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 237)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 237)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 237)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 237)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 237)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 237)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 237)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 237)											_this->l++;
            										}
HXDLIN( 237)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 237)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 237)										if (((this->store->l & 1) == 0)) {
HXLINE( 237)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 237)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 237)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 237)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 237)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 237)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 237)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 237)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 237)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 237)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 237)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 237)													{
HXLINE( 237)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 237)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 237)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 237)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 237)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 237)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 237)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 237)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 237)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 237)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 237)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 237)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 237)											_this->l++;
            										}
            										else {
HXLINE( 237)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 237)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 237)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 237)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 237)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 237)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 237)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 237)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 237)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 237)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 237)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 237)													{
HXLINE( 237)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 237)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 237)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 237)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 237)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 237)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 237)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 237)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 237)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 237)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 237)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 237)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 237)											_this->l++;
            										}
            									}
HXDLIN( 237)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 237)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 237)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 237)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 237)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 237)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 237)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 237)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 237)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 237)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 237)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 237)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 237)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 237)										if (((this->store->l & 1) == 0)) {
HXLINE( 237)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 237)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 237)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 237)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 237)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 237)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 237)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 237)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 237)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 237)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 237)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 237)													{
HXLINE( 237)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 237)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 237)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 237)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 237)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 237)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 237)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 237)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 237)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 237)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 237)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 237)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 237)											_this->l++;
            										}
            										else {
HXLINE( 237)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 237)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 237)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 237)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 237)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 237)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 237)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 237)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 237)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 237)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 237)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 237)													{
HXLINE( 237)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 237)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 237)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 237)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 237)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 237)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 237)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 237)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 237)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 237)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 237)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 237)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 237)											_this->l++;
            										}
HXDLIN( 237)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 237)									this->pos--;
HXDLIN( 237)									exit = true;
            								}
            							}
HXDLIN( 237)							if (exit) {
HXLINE( 237)								goto _hx_goto_12;
            							}
HXDLIN( 237)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_12:;
            					}
HXLINE( 238)					if ((this->store->l == 4)) {
HXLINE( 239)						this->controlX = ( (Float)(this->store->s0) );
HXLINE( 240)						this->controlY = ( (Float)(this->store->s1) );
HXLINE( 241)						this->lastX = ( (Float)(this->store->s2) );
HXLINE( 242)						this->lastY = ( (Float)(this->store->s3) );
HXLINE( 243)						::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
            					}
            					else {
HXLINE( 245)						if ((this->store->l > 4)) {
HXLINE( 246)							while((this->store->l > 3)){
HXLINE( 247)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 247)								 ::Dynamic out = _this->s0;
HXDLIN( 247)								if ((_this->l != 0)) {
HXLINE( 247)									_this->s0 = _this->s1;
HXDLIN( 247)									_this->s1 = _this->s2;
HXDLIN( 247)									_this->s2 = _this->s3;
HXDLIN( 247)									_this->s3 = _this->s4;
HXDLIN( 247)									_this->s4 = _this->s5;
HXDLIN( 247)									_this->s5 = null();
HXDLIN( 247)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 247)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 247)										 ::Dynamic out = _this1->s0;
HXDLIN( 247)										if ((_this1->l != 0)) {
HXLINE( 247)											_this1->s0 = _this1->s1;
HXDLIN( 247)											_this1->s1 = _this1->s2;
HXDLIN( 247)											_this1->s2 = _this1->s3;
HXDLIN( 247)											_this1->s3 = _this1->s4;
HXDLIN( 247)											_this1->s4 = _this1->s5;
HXDLIN( 247)											_this1->s5 = null();
HXDLIN( 247)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 247)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 247)											_this1->l--;
            										}
HXDLIN( 247)										_this->s5 = out;
            									}
HXDLIN( 247)									_this->l--;
            								}
HXDLIN( 247)								this->controlX = ( (Float)(out) );
HXLINE( 248)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 248)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 248)								if ((_this1->l != 0)) {
HXLINE( 248)									_this1->s0 = _this1->s1;
HXDLIN( 248)									_this1->s1 = _this1->s2;
HXDLIN( 248)									_this1->s2 = _this1->s3;
HXDLIN( 248)									_this1->s3 = _this1->s4;
HXDLIN( 248)									_this1->s4 = _this1->s5;
HXDLIN( 248)									_this1->s5 = null();
HXDLIN( 248)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 248)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 248)										 ::Dynamic out = _this->s0;
HXDLIN( 248)										if ((_this->l != 0)) {
HXLINE( 248)											_this->s0 = _this->s1;
HXDLIN( 248)											_this->s1 = _this->s2;
HXDLIN( 248)											_this->s2 = _this->s3;
HXDLIN( 248)											_this->s3 = _this->s4;
HXDLIN( 248)											_this->s4 = _this->s5;
HXDLIN( 248)											_this->s5 = null();
HXDLIN( 248)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 248)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 248)											_this->l--;
            										}
HXDLIN( 248)										_this1->s5 = out;
            									}
HXDLIN( 248)									_this1->l--;
            								}
HXDLIN( 248)								this->controlY = ( (Float)(out1) );
HXLINE( 249)								 ::justPath::StoreF6 _this2 = this->store;
HXDLIN( 249)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 249)								if ((_this2->l != 0)) {
HXLINE( 249)									_this2->s0 = _this2->s1;
HXDLIN( 249)									_this2->s1 = _this2->s2;
HXDLIN( 249)									_this2->s2 = _this2->s3;
HXDLIN( 249)									_this2->s3 = _this2->s4;
HXDLIN( 249)									_this2->s4 = _this2->s5;
HXDLIN( 249)									_this2->s5 = null();
HXDLIN( 249)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 249)										 ::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 249)										 ::Dynamic out = _this->s0;
HXDLIN( 249)										if ((_this->l != 0)) {
HXLINE( 249)											_this->s0 = _this->s1;
HXDLIN( 249)											_this->s1 = _this->s2;
HXDLIN( 249)											_this->s2 = _this->s3;
HXDLIN( 249)											_this->s3 = _this->s4;
HXDLIN( 249)											_this->s4 = _this->s5;
HXDLIN( 249)											_this->s5 = null();
HXDLIN( 249)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 249)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 249)											_this->l--;
            										}
HXDLIN( 249)										_this2->s5 = out;
            									}
HXDLIN( 249)									_this2->l--;
            								}
HXDLIN( 249)								this->lastX = ( (Float)(out2) );
HXLINE( 250)								 ::justPath::StoreF6 _this3 = this->store;
HXDLIN( 250)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 250)								if ((_this3->l != 0)) {
HXLINE( 250)									_this3->s0 = _this3->s1;
HXDLIN( 250)									_this3->s1 = _this3->s2;
HXDLIN( 250)									_this3->s2 = _this3->s3;
HXDLIN( 250)									_this3->s3 = _this3->s4;
HXDLIN( 250)									_this3->s4 = _this3->s5;
HXDLIN( 250)									_this3->s5 = null();
HXDLIN( 250)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 250)										 ::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 250)										 ::Dynamic out = _this->s0;
HXDLIN( 250)										if ((_this->l != 0)) {
HXLINE( 250)											_this->s0 = _this->s1;
HXDLIN( 250)											_this->s1 = _this->s2;
HXDLIN( 250)											_this->s2 = _this->s3;
HXDLIN( 250)											_this->s3 = _this->s4;
HXDLIN( 250)											_this->s4 = _this->s5;
HXDLIN( 250)											_this->s5 = null();
HXDLIN( 250)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 250)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 250)											_this->l--;
            										}
HXDLIN( 250)										_this3->s5 = out;
            									}
HXDLIN( 250)									_this3->l--;
            								}
HXDLIN( 250)								this->lastY = ( (Float)(out3) );
HXLINE( 251)								::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)83: {
HXLINE( 182)					{
HXLINE( 182)						{
HXLINE( 182)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 182)							_this->l = 0;
HXDLIN( 182)							_this->s0 = null();
HXDLIN( 182)							_this->s1 = null();
HXDLIN( 182)							_this->s2 = null();
HXDLIN( 182)							_this->s3 = null();
HXDLIN( 182)							_this->s4 = null();
HXDLIN( 182)							_this->s5 = null();
HXDLIN( 182)							_this->s6 = null();
            						}
HXDLIN( 182)						this->c = this->str.cca(this->pos++);
HXDLIN( 182)						::String temp = HX_("",00,00,00,00);
HXDLIN( 182)						bool exit = false;
HXDLIN( 182)						while(true){
HXLINE( 182)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 182)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 182)										if (((this->store->l & 1) == 0)) {
HXLINE( 182)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 182)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 182)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 182)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 182)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 182)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 182)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 182)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 182)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 182)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 182)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 182)													{
HXLINE( 182)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 182)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 182)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 182)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 182)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 182)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 182)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 182)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 182)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 182)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 182)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 182)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 182)											_this->l++;
            										}
            										else {
HXLINE( 182)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 182)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 182)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 182)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 182)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 182)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 182)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 182)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 182)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 182)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 182)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 182)													{
HXLINE( 182)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 182)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 182)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 182)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 182)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 182)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 182)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 182)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 182)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 182)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 182)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 182)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 182)											_this->l++;
            										}
HXDLIN( 182)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 182)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 182)										if (((this->store->l & 1) == 0)) {
HXLINE( 182)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 182)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 182)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 182)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 182)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 182)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 182)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 182)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 182)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 182)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 182)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 182)													{
HXLINE( 182)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 182)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 182)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 182)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 182)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 182)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 182)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 182)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 182)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 182)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 182)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 182)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 182)											_this->l++;
            										}
            										else {
HXLINE( 182)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 182)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 182)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 182)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 182)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 182)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 182)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 182)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 182)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 182)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 182)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 182)													{
HXLINE( 182)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 182)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 182)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 182)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 182)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 182)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 182)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 182)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 182)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 182)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 182)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 182)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 182)											_this->l++;
            										}
            									}
HXDLIN( 182)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 182)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 182)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 182)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 182)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 182)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 182)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 182)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 182)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 182)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 182)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 182)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 182)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 182)										if (((this->store->l & 1) == 0)) {
HXLINE( 182)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 182)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 182)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 182)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 182)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 182)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 182)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 182)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 182)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 182)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 182)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 182)													{
HXLINE( 182)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 182)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 182)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 182)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 182)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 182)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 182)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 182)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 182)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 182)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 182)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 182)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 182)											_this->l++;
            										}
            										else {
HXLINE( 182)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 182)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 182)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 182)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 182)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 182)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 182)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 182)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 182)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 182)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 182)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 182)													{
HXLINE( 182)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 182)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 182)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 182)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 182)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 182)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 182)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 182)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 182)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 182)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 182)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 182)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 182)											_this->l++;
            										}
HXDLIN( 182)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 182)									this->pos--;
HXDLIN( 182)									exit = true;
            								}
            							}
HXDLIN( 182)							if (exit) {
HXLINE( 182)								goto _hx_goto_14;
            							}
HXDLIN( 182)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_14:;
            					}
HXLINE( 184)					if ((this->store->l == 4)) {
HXLINE( 185)						 ::Dynamic firstX = this->store->s0;
HXLINE( 186)						 ::Dynamic firstY = this->store->s1;
HXLINE( 187)						this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 188)						this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 189)						 ::Dynamic endX = this->store->s2;
HXLINE( 190)						 ::Dynamic endY = this->store->s3;
HXLINE( 191)						::justPath::IPathContext_obj::curveTo(this->pathContext,this->controlX,this->controlY,firstX,firstY,endX,endY);
HXLINE( 192)						this->controlX = ( (Float)(this->store->s0) );
HXLINE( 193)						this->controlY = ( (Float)(this->store->s1) );
HXLINE( 194)						this->lastX = ( (Float)(endX) );
HXLINE( 195)						this->lastY = ( (Float)(endY) );
            					}
            					else {
HXLINE( 196)						if ((this->store->l > 4)) {
HXLINE( 197)							while((this->store->l > 3)){
HXLINE( 198)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 198)								 ::Dynamic out = _this->s0;
HXDLIN( 198)								if ((_this->l != 0)) {
HXLINE( 198)									_this->s0 = _this->s1;
HXDLIN( 198)									_this->s1 = _this->s2;
HXDLIN( 198)									_this->s2 = _this->s3;
HXDLIN( 198)									_this->s3 = _this->s4;
HXDLIN( 198)									_this->s4 = _this->s5;
HXDLIN( 198)									_this->s5 = null();
HXDLIN( 198)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 198)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 198)										 ::Dynamic out = _this1->s0;
HXDLIN( 198)										if ((_this1->l != 0)) {
HXLINE( 198)											_this1->s0 = _this1->s1;
HXDLIN( 198)											_this1->s1 = _this1->s2;
HXDLIN( 198)											_this1->s2 = _this1->s3;
HXDLIN( 198)											_this1->s3 = _this1->s4;
HXDLIN( 198)											_this1->s4 = _this1->s5;
HXDLIN( 198)											_this1->s5 = null();
HXDLIN( 198)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 198)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 198)											_this1->l--;
            										}
HXDLIN( 198)										_this->s5 = out;
            									}
HXDLIN( 198)									_this->l--;
            								}
HXDLIN( 198)								 ::Dynamic firstX = out;
HXLINE( 199)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 199)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 199)								if ((_this1->l != 0)) {
HXLINE( 199)									_this1->s0 = _this1->s1;
HXDLIN( 199)									_this1->s1 = _this1->s2;
HXDLIN( 199)									_this1->s2 = _this1->s3;
HXDLIN( 199)									_this1->s3 = _this1->s4;
HXDLIN( 199)									_this1->s4 = _this1->s5;
HXDLIN( 199)									_this1->s5 = null();
HXDLIN( 199)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 199)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 199)										 ::Dynamic out = _this->s0;
HXDLIN( 199)										if ((_this->l != 0)) {
HXLINE( 199)											_this->s0 = _this->s1;
HXDLIN( 199)											_this->s1 = _this->s2;
HXDLIN( 199)											_this->s2 = _this->s3;
HXDLIN( 199)											_this->s3 = _this->s4;
HXDLIN( 199)											_this->s4 = _this->s5;
HXDLIN( 199)											_this->s5 = null();
HXDLIN( 199)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 199)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 199)											_this->l--;
            										}
HXDLIN( 199)										_this1->s5 = out;
            									}
HXDLIN( 199)									_this1->l--;
            								}
HXDLIN( 199)								 ::Dynamic firstY = out1;
HXLINE( 200)								this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 201)								this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 202)								 ::justPath::StoreF6 _this2 = this->store;
HXDLIN( 202)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 202)								if ((_this2->l != 0)) {
HXLINE( 202)									_this2->s0 = _this2->s1;
HXDLIN( 202)									_this2->s1 = _this2->s2;
HXDLIN( 202)									_this2->s2 = _this2->s3;
HXDLIN( 202)									_this2->s3 = _this2->s4;
HXDLIN( 202)									_this2->s4 = _this2->s5;
HXDLIN( 202)									_this2->s5 = null();
HXDLIN( 202)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 202)										 ::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 202)										 ::Dynamic out = _this->s0;
HXDLIN( 202)										if ((_this->l != 0)) {
HXLINE( 202)											_this->s0 = _this->s1;
HXDLIN( 202)											_this->s1 = _this->s2;
HXDLIN( 202)											_this->s2 = _this->s3;
HXDLIN( 202)											_this->s3 = _this->s4;
HXDLIN( 202)											_this->s4 = _this->s5;
HXDLIN( 202)											_this->s5 = null();
HXDLIN( 202)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 202)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 202)											_this->l--;
            										}
HXDLIN( 202)										_this2->s5 = out;
            									}
HXDLIN( 202)									_this2->l--;
            								}
HXDLIN( 202)								this->lastX = ( (Float)(out2) );
HXLINE( 203)								 ::justPath::StoreF6 _this3 = this->store;
HXDLIN( 203)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 203)								if ((_this3->l != 0)) {
HXLINE( 203)									_this3->s0 = _this3->s1;
HXDLIN( 203)									_this3->s1 = _this3->s2;
HXDLIN( 203)									_this3->s2 = _this3->s3;
HXDLIN( 203)									_this3->s3 = _this3->s4;
HXDLIN( 203)									_this3->s4 = _this3->s5;
HXDLIN( 203)									_this3->s5 = null();
HXDLIN( 203)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 203)										 ::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 203)										 ::Dynamic out = _this->s0;
HXDLIN( 203)										if ((_this->l != 0)) {
HXLINE( 203)											_this->s0 = _this->s1;
HXDLIN( 203)											_this->s1 = _this->s2;
HXDLIN( 203)											_this->s2 = _this->s3;
HXDLIN( 203)											_this->s3 = _this->s4;
HXDLIN( 203)											_this->s4 = _this->s5;
HXDLIN( 203)											_this->s5 = null();
HXDLIN( 203)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 203)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 203)											_this->l--;
            										}
HXDLIN( 203)										_this3->s5 = out;
            									}
HXDLIN( 203)									_this3->l--;
            								}
HXDLIN( 203)								this->lastY = ( (Float)(out3) );
HXLINE( 204)								::justPath::IPathContext_obj::curveTo(this->pathContext,this->controlX,this->controlY,firstX,firstY,this->lastX,this->lastY);
HXLINE( 205)								this->controlX = ( (Float)(firstX) );
HXLINE( 206)								this->controlY = ( (Float)(firstY) );
            							}
            						}
            					}
            				}
            				break;
            				case (int)84: {
HXLINE( 273)					{
HXLINE( 273)						{
HXLINE( 273)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 273)							_this->l = 0;
HXDLIN( 273)							_this->s0 = null();
HXDLIN( 273)							_this->s1 = null();
HXDLIN( 273)							_this->s2 = null();
HXDLIN( 273)							_this->s3 = null();
HXDLIN( 273)							_this->s4 = null();
HXDLIN( 273)							_this->s5 = null();
HXDLIN( 273)							_this->s6 = null();
            						}
HXDLIN( 273)						this->c = this->str.cca(this->pos++);
HXDLIN( 273)						::String temp = HX_("",00,00,00,00);
HXDLIN( 273)						bool exit = false;
HXDLIN( 273)						while(true){
HXLINE( 273)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 273)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 273)										if (((this->store->l & 1) == 0)) {
HXLINE( 273)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 273)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 273)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 273)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 273)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 273)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 273)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 273)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 273)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 273)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 273)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 273)													{
HXLINE( 273)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 273)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 273)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 273)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 273)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 273)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 273)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 273)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 273)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 273)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 273)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 273)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 273)											_this->l++;
            										}
            										else {
HXLINE( 273)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 273)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 273)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 273)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 273)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 273)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 273)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 273)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 273)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 273)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 273)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 273)													{
HXLINE( 273)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 273)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 273)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 273)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 273)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 273)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 273)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 273)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 273)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 273)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 273)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 273)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 273)											_this->l++;
            										}
HXDLIN( 273)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 273)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 273)										if (((this->store->l & 1) == 0)) {
HXLINE( 273)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 273)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 273)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 273)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 273)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 273)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 273)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 273)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 273)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 273)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 273)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 273)													{
HXLINE( 273)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 273)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 273)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 273)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 273)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 273)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 273)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 273)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 273)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 273)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 273)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 273)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 273)											_this->l++;
            										}
            										else {
HXLINE( 273)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 273)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 273)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 273)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 273)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 273)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 273)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 273)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 273)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 273)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 273)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 273)													{
HXLINE( 273)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 273)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 273)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 273)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 273)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 273)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 273)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 273)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 273)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 273)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 273)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 273)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 273)											_this->l++;
            										}
            									}
HXDLIN( 273)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 273)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 273)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 273)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 273)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 273)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 273)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 273)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 273)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 273)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 273)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 273)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 273)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 273)										if (((this->store->l & 1) == 0)) {
HXLINE( 273)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 273)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 273)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 273)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 273)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 273)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 273)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 273)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 273)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 273)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 273)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 273)													{
HXLINE( 273)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 273)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 273)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 273)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 273)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 273)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 273)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 273)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 273)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 273)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 273)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 273)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 273)											_this->l++;
            										}
            										else {
HXLINE( 273)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 273)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 273)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 273)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 273)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 273)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 273)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 273)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 273)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 273)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 273)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 273)													{
HXLINE( 273)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 273)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 273)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 273)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 273)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 273)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 273)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 273)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 273)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 273)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 273)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 273)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 273)											_this->l++;
            										}
HXDLIN( 273)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 273)									this->pos--;
HXDLIN( 273)									exit = true;
            								}
            							}
HXDLIN( 273)							if (exit) {
HXLINE( 273)								goto _hx_goto_16;
            							}
HXDLIN( 273)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_16:;
            					}
HXLINE( 275)					if ((this->store->l == 2)) {
HXLINE( 276)						this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 277)						this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 278)						this->lastX = ( (Float)(this->store->s0) );
HXLINE( 279)						this->lastY = ( (Float)(this->store->s1) );
HXLINE( 280)						::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
            					}
            					else {
HXLINE( 281)						if ((this->store->l > 2)) {
HXLINE( 282)							while((this->store->l > 1)){
HXLINE( 283)								this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 284)								this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 285)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 285)								 ::Dynamic out = _this->s0;
HXDLIN( 285)								if ((_this->l != 0)) {
HXLINE( 285)									_this->s0 = _this->s1;
HXDLIN( 285)									_this->s1 = _this->s2;
HXDLIN( 285)									_this->s2 = _this->s3;
HXDLIN( 285)									_this->s3 = _this->s4;
HXDLIN( 285)									_this->s4 = _this->s5;
HXDLIN( 285)									_this->s5 = null();
HXDLIN( 285)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 285)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 285)										 ::Dynamic out = _this1->s0;
HXDLIN( 285)										if ((_this1->l != 0)) {
HXLINE( 285)											_this1->s0 = _this1->s1;
HXDLIN( 285)											_this1->s1 = _this1->s2;
HXDLIN( 285)											_this1->s2 = _this1->s3;
HXDLIN( 285)											_this1->s3 = _this1->s4;
HXDLIN( 285)											_this1->s4 = _this1->s5;
HXDLIN( 285)											_this1->s5 = null();
HXDLIN( 285)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 285)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 285)											_this1->l--;
            										}
HXDLIN( 285)										_this->s5 = out;
            									}
HXDLIN( 285)									_this->l--;
            								}
HXDLIN( 285)								this->lastX = ( (Float)(out) );
HXLINE( 286)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 286)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 286)								if ((_this1->l != 0)) {
HXLINE( 286)									_this1->s0 = _this1->s1;
HXDLIN( 286)									_this1->s1 = _this1->s2;
HXDLIN( 286)									_this1->s2 = _this1->s3;
HXDLIN( 286)									_this1->s3 = _this1->s4;
HXDLIN( 286)									_this1->s4 = _this1->s5;
HXDLIN( 286)									_this1->s5 = null();
HXDLIN( 286)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 286)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 286)										 ::Dynamic out = _this->s0;
HXDLIN( 286)										if ((_this->l != 0)) {
HXLINE( 286)											_this->s0 = _this->s1;
HXDLIN( 286)											_this->s1 = _this->s2;
HXDLIN( 286)											_this->s2 = _this->s3;
HXDLIN( 286)											_this->s3 = _this->s4;
HXDLIN( 286)											_this->s4 = _this->s5;
HXDLIN( 286)											_this->s5 = null();
HXDLIN( 286)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 286)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 286)											_this->l--;
            										}
HXDLIN( 286)										_this1->s5 = out;
            									}
HXDLIN( 286)									_this1->l--;
            								}
HXDLIN( 286)								this->lastY = ( (Float)(out1) );
HXLINE( 287)								::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)86: {
HXLINE( 117)					{
HXLINE( 117)						 ::Dynamic process = false;
HXDLIN( 117)						if (::hx::IsNull( process )) {
HXLINE( 117)							process = true;
            						}
HXDLIN( 117)						{
HXLINE( 117)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 117)							_this->l = 0;
HXDLIN( 117)							_this->s0 = null();
HXDLIN( 117)							_this->s1 = null();
HXDLIN( 117)							_this->s2 = null();
HXDLIN( 117)							_this->s3 = null();
HXDLIN( 117)							_this->s4 = null();
HXDLIN( 117)							_this->s5 = null();
HXDLIN( 117)							_this->s6 = null();
            						}
HXDLIN( 117)						this->c = this->str.cca(this->pos++);
HXDLIN( 117)						::String temp = HX_("",00,00,00,00);
HXDLIN( 117)						bool exit = false;
HXDLIN( 117)						while(true){
HXLINE( 117)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 117)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 117)										if (( (bool)(process) )) {
HXLINE( 117)											if (((this->store->l & 1) == 0)) {
HXLINE( 117)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 117)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 117)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 117)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 117)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 117)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 117)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 117)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 117)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 117)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 117)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 117)														{
HXLINE( 117)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 117)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 117)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 117)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 117)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 117)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 117)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 117)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 117)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 117)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 117)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 117)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 117)												_this->l++;
            											}
            											else {
HXLINE( 117)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 117)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 117)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 117)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 117)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 117)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 117)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 117)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 117)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 117)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 117)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 117)														{
HXLINE( 117)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 117)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 117)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 117)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 117)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 117)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 117)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 117)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 117)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 117)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 117)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 117)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 117)												_this->l++;
            											}
            										}
            										else {
HXLINE( 117)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 117)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 117)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 117)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 117)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 117)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 117)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 117)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 117)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 117)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 117)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 117)													{
HXLINE( 117)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 117)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 117)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 117)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 117)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 117)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 117)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 117)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 117)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 117)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 117)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 117)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 117)											_this->l++;
            										}
HXDLIN( 117)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 117)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 117)										if (( (bool)(process) )) {
HXLINE( 117)											if (((this->store->l & 1) == 0)) {
HXLINE( 117)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 117)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 117)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 117)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 117)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 117)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 117)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 117)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 117)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 117)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 117)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 117)														{
HXLINE( 117)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 117)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 117)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 117)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 117)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 117)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 117)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 117)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 117)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 117)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 117)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 117)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 117)												_this->l++;
            											}
            											else {
HXLINE( 117)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 117)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 117)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 117)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 117)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 117)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 117)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 117)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 117)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 117)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 117)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 117)														{
HXLINE( 117)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 117)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 117)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 117)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 117)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 117)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 117)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 117)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 117)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 117)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 117)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 117)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 117)												_this->l++;
            											}
            										}
            										else {
HXLINE( 117)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 117)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 117)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 117)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 117)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 117)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 117)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 117)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 117)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 117)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 117)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 117)													{
HXLINE( 117)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 117)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 117)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 117)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 117)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 117)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 117)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 117)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 117)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 117)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 117)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 117)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 117)											_this->l++;
            										}
            									}
HXDLIN( 117)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 117)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 117)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 117)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 117)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 117)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 117)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 117)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 117)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 117)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 117)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 117)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 117)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 117)										if (( (bool)(process) )) {
HXLINE( 117)											if (((this->store->l & 1) == 0)) {
HXLINE( 117)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 117)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 117)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 117)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 117)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 117)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 117)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 117)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 117)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 117)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 117)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 117)														{
HXLINE( 117)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 117)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 117)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 117)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 117)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 117)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 117)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 117)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 117)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 117)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 117)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 117)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 117)												_this->l++;
            											}
            											else {
HXLINE( 117)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 117)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 117)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 117)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 117)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 117)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 117)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 117)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 117)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 117)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 117)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 117)														{
HXLINE( 117)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 117)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 117)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 117)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 117)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 117)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 117)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 117)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 117)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 117)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 117)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 117)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 117)												_this->l++;
            											}
            										}
            										else {
HXLINE( 117)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 117)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 117)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 117)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 117)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 117)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 117)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 117)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 117)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 117)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 117)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 117)													{
HXLINE( 117)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 117)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 117)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 117)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 117)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 117)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 117)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 117)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 117)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 117)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 117)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 117)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 117)											_this->l++;
            										}
HXDLIN( 117)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 117)									this->pos--;
HXDLIN( 117)									exit = true;
            								}
            							}
HXDLIN( 117)							if (exit) {
HXLINE( 117)								goto _hx_goto_18;
            							}
HXDLIN( 117)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_18:;
            					}
HXLINE( 118)					if ((this->store->l == 1)) {
HXLINE( 119)						 ::justPath::StoreF6 _this = this->store;
HXDLIN( 119)						 ::Dynamic out = _this->s0;
HXDLIN( 119)						if ((_this->l != 0)) {
HXLINE( 119)							_this->s0 = _this->s1;
HXDLIN( 119)							_this->s1 = _this->s2;
HXDLIN( 119)							_this->s2 = _this->s3;
HXDLIN( 119)							_this->s3 = _this->s4;
HXDLIN( 119)							_this->s4 = _this->s5;
HXDLIN( 119)							_this->s5 = null();
HXDLIN( 119)							if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 119)								 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 119)								 ::Dynamic out = _this1->s0;
HXDLIN( 119)								if ((_this1->l != 0)) {
HXLINE( 119)									_this1->s0 = _this1->s1;
HXDLIN( 119)									_this1->s1 = _this1->s2;
HXDLIN( 119)									_this1->s2 = _this1->s3;
HXDLIN( 119)									_this1->s3 = _this1->s4;
HXDLIN( 119)									_this1->s4 = _this1->s5;
HXDLIN( 119)									_this1->s5 = null();
HXDLIN( 119)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 119)										_this1->s5 = _this1->s6->shift();
            									}
HXDLIN( 119)									_this1->l--;
            								}
HXDLIN( 119)								_this->s5 = out;
            							}
HXDLIN( 119)							_this->l--;
            						}
HXDLIN( 119)						this->lastY = ( (Float)(out) );
HXLINE( 120)						::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE( 121)						if ((this->store->l > 1)) {
HXLINE( 122)							while((this->store->l > 0)){
HXLINE( 123)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 123)								 ::Dynamic out = _this->s0;
HXDLIN( 123)								if ((_this->l != 0)) {
HXLINE( 123)									_this->s0 = _this->s1;
HXDLIN( 123)									_this->s1 = _this->s2;
HXDLIN( 123)									_this->s2 = _this->s3;
HXDLIN( 123)									_this->s3 = _this->s4;
HXDLIN( 123)									_this->s4 = _this->s5;
HXDLIN( 123)									_this->s5 = null();
HXDLIN( 123)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 123)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 123)										 ::Dynamic out = _this1->s0;
HXDLIN( 123)										if ((_this1->l != 0)) {
HXLINE( 123)											_this1->s0 = _this1->s1;
HXDLIN( 123)											_this1->s1 = _this1->s2;
HXDLIN( 123)											_this1->s2 = _this1->s3;
HXDLIN( 123)											_this1->s3 = _this1->s4;
HXDLIN( 123)											_this1->s4 = _this1->s5;
HXDLIN( 123)											_this1->s5 = null();
HXDLIN( 123)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 123)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 123)											_this1->l--;
            										}
HXDLIN( 123)										_this->s5 = out;
            									}
HXDLIN( 123)									_this->l--;
            								}
HXDLIN( 123)								this->lastY = ( (Float)(out) );
HXLINE( 124)								::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)90: case (int)122: {
HXLINE( 372)					this->lastX = ( (Float)(0) );
HXLINE( 373)					this->lastY = ( (Float)(0) );
            				}
            				break;
            				case (int)97: {
HXLINE( 341)					{
HXLINE( 341)						{
HXLINE( 341)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 341)							_this->l = 0;
HXDLIN( 341)							_this->s0 = null();
HXDLIN( 341)							_this->s1 = null();
HXDLIN( 341)							_this->s2 = null();
HXDLIN( 341)							_this->s3 = null();
HXDLIN( 341)							_this->s4 = null();
HXDLIN( 341)							_this->s5 = null();
HXDLIN( 341)							_this->s6 = null();
            						}
HXDLIN( 341)						this->c = this->str.cca(this->pos++);
HXDLIN( 341)						::String temp = HX_("",00,00,00,00);
HXDLIN( 341)						bool exit = false;
HXDLIN( 341)						while(true){
HXLINE( 341)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 341)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 341)										if (((this->store->l & 1) == 0)) {
HXLINE( 341)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 341)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 341)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 341)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 341)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 341)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 341)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 341)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 341)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 341)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 341)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 341)													{
HXLINE( 341)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 341)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 341)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 341)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 341)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 341)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 341)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 341)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 341)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 341)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 341)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 341)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 341)											_this->l++;
            										}
            										else {
HXLINE( 341)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 341)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 341)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 341)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 341)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 341)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 341)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 341)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 341)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 341)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 341)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 341)													{
HXLINE( 341)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 341)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 341)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 341)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 341)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 341)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 341)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 341)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 341)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 341)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 341)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 341)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 341)											_this->l++;
            										}
HXDLIN( 341)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 341)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 341)										if (((this->store->l & 1) == 0)) {
HXLINE( 341)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 341)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 341)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 341)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 341)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 341)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 341)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 341)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 341)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 341)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 341)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 341)													{
HXLINE( 341)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 341)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 341)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 341)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 341)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 341)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 341)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 341)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 341)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 341)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 341)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 341)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 341)											_this->l++;
            										}
            										else {
HXLINE( 341)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 341)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 341)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 341)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 341)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 341)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 341)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 341)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 341)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 341)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 341)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 341)													{
HXLINE( 341)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 341)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 341)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 341)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 341)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 341)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 341)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 341)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 341)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 341)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 341)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 341)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 341)											_this->l++;
            										}
            									}
HXDLIN( 341)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 341)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 341)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 341)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 341)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 341)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 341)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 341)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 341)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 341)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 341)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 341)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 341)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 341)										if (((this->store->l & 1) == 0)) {
HXLINE( 341)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 341)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 341)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 341)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 341)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 341)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 341)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 341)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 341)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 341)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 341)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 341)													{
HXLINE( 341)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 341)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 341)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 341)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 341)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 341)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 341)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 341)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 341)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 341)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 341)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 341)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 341)											_this->l++;
            										}
            										else {
HXLINE( 341)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 341)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 341)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 341)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 341)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 341)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 341)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 341)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 341)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 341)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 341)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 341)													{
HXLINE( 341)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 341)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 341)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 341)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 341)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 341)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 341)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 341)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 341)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 341)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 341)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 341)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 341)											_this->l++;
            										}
HXDLIN( 341)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 341)									this->pos--;
HXDLIN( 341)									exit = true;
            								}
            							}
HXDLIN( 341)							if (exit) {
HXLINE( 341)								goto _hx_goto_20;
            							}
HXDLIN( 341)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_20:;
            					}
HXLINE( 342)					if ((this->store->l == 7)) {
HXLINE( 343)						Float sx = this->lastX;
HXLINE( 344)						Float sy = this->lastY;
HXLINE( 345)						 ::justPath::StoreF6 _this = this->store;
HXDLIN( 345)						 ::Dynamic out = _this->s0;
HXDLIN( 345)						if ((_this->l != 0)) {
HXLINE( 345)							_this->s0 = _this->s1;
HXDLIN( 345)							_this->s1 = _this->s2;
HXDLIN( 345)							_this->s2 = _this->s3;
HXDLIN( 345)							_this->s3 = _this->s4;
HXDLIN( 345)							_this->s4 = _this->s5;
HXDLIN( 345)							_this->s5 = null();
HXDLIN( 345)							if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 345)								 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 345)								 ::Dynamic out = _this1->s0;
HXDLIN( 345)								if ((_this1->l != 0)) {
HXLINE( 345)									_this1->s0 = _this1->s1;
HXDLIN( 345)									_this1->s1 = _this1->s2;
HXDLIN( 345)									_this1->s2 = _this1->s3;
HXDLIN( 345)									_this1->s3 = _this1->s4;
HXDLIN( 345)									_this1->s4 = _this1->s5;
HXDLIN( 345)									_this1->s5 = null();
HXDLIN( 345)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 345)										_this1->s5 = _this1->s6->shift();
            									}
HXDLIN( 345)									_this1->l--;
            								}
HXDLIN( 345)								_this->s5 = out;
            							}
HXDLIN( 345)							_this->l--;
            						}
HXDLIN( 345)						 ::Dynamic xr = out;
HXLINE( 346)						 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 346)						 ::Dynamic out1 = _this1->s0;
HXDLIN( 346)						if ((_this1->l != 0)) {
HXLINE( 346)							_this1->s0 = _this1->s1;
HXDLIN( 346)							_this1->s1 = _this1->s2;
HXDLIN( 346)							_this1->s2 = _this1->s3;
HXDLIN( 346)							_this1->s3 = _this1->s4;
HXDLIN( 346)							_this1->s4 = _this1->s5;
HXDLIN( 346)							_this1->s5 = null();
HXDLIN( 346)							if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 346)								 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 346)								 ::Dynamic out = _this->s0;
HXDLIN( 346)								if ((_this->l != 0)) {
HXLINE( 346)									_this->s0 = _this->s1;
HXDLIN( 346)									_this->s1 = _this->s2;
HXDLIN( 346)									_this->s2 = _this->s3;
HXDLIN( 346)									_this->s3 = _this->s4;
HXDLIN( 346)									_this->s4 = _this->s5;
HXDLIN( 346)									_this->s5 = null();
HXDLIN( 346)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 346)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 346)									_this->l--;
            								}
HXDLIN( 346)								_this1->s5 = out;
            							}
HXDLIN( 346)							_this1->l--;
            						}
HXDLIN( 346)						 ::Dynamic yr = out1;
HXLINE( 347)						 ::justPath::StoreF6 _this2 = this->store;
HXDLIN( 347)						 ::Dynamic out2 = _this2->s0;
HXDLIN( 347)						if ((_this2->l != 0)) {
HXLINE( 347)							_this2->s0 = _this2->s1;
HXDLIN( 347)							_this2->s1 = _this2->s2;
HXDLIN( 347)							_this2->s2 = _this2->s3;
HXDLIN( 347)							_this2->s3 = _this2->s4;
HXDLIN( 347)							_this2->s4 = _this2->s5;
HXDLIN( 347)							_this2->s5 = null();
HXDLIN( 347)							if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 347)								 ::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 347)								 ::Dynamic out = _this->s0;
HXDLIN( 347)								if ((_this->l != 0)) {
HXLINE( 347)									_this->s0 = _this->s1;
HXDLIN( 347)									_this->s1 = _this->s2;
HXDLIN( 347)									_this->s2 = _this->s3;
HXDLIN( 347)									_this->s3 = _this->s4;
HXDLIN( 347)									_this->s4 = _this->s5;
HXDLIN( 347)									_this->s5 = null();
HXDLIN( 347)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 347)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 347)									_this->l--;
            								}
HXDLIN( 347)								_this2->s5 = out;
            							}
HXDLIN( 347)							_this2->l--;
            						}
HXDLIN( 347)						 ::Dynamic phi = out2;
HXLINE( 348)						 ::justPath::StoreF6 _this3 = this->store;
HXDLIN( 348)						 ::Dynamic out3 = _this3->s0;
HXDLIN( 348)						if ((_this3->l != 0)) {
HXLINE( 348)							_this3->s0 = _this3->s1;
HXDLIN( 348)							_this3->s1 = _this3->s2;
HXDLIN( 348)							_this3->s2 = _this3->s3;
HXDLIN( 348)							_this3->s3 = _this3->s4;
HXDLIN( 348)							_this3->s4 = _this3->s5;
HXDLIN( 348)							_this3->s5 = null();
HXDLIN( 348)							if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 348)								 ::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 348)								 ::Dynamic out = _this->s0;
HXDLIN( 348)								if ((_this->l != 0)) {
HXLINE( 348)									_this->s0 = _this->s1;
HXDLIN( 348)									_this->s1 = _this->s2;
HXDLIN( 348)									_this->s2 = _this->s3;
HXDLIN( 348)									_this->s3 = _this->s4;
HXDLIN( 348)									_this->s4 = _this->s5;
HXDLIN( 348)									_this->s5 = null();
HXDLIN( 348)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 348)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 348)									_this->l--;
            								}
HXDLIN( 348)								_this3->s5 = out;
            							}
HXDLIN( 348)							_this3->l--;
            						}
HXDLIN( 348)						int large = ::Std_obj::_hx_int(( (Float)(out3) ));
HXLINE( 349)						 ::justPath::StoreF6 _this4 = this->store;
HXDLIN( 349)						 ::Dynamic out4 = _this4->s0;
HXDLIN( 349)						if ((_this4->l != 0)) {
HXLINE( 349)							_this4->s0 = _this4->s1;
HXDLIN( 349)							_this4->s1 = _this4->s2;
HXDLIN( 349)							_this4->s2 = _this4->s3;
HXDLIN( 349)							_this4->s3 = _this4->s4;
HXDLIN( 349)							_this4->s4 = _this4->s5;
HXDLIN( 349)							_this4->s5 = null();
HXDLIN( 349)							if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 349)								 ::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 349)								 ::Dynamic out = _this->s0;
HXDLIN( 349)								if ((_this->l != 0)) {
HXLINE( 349)									_this->s0 = _this->s1;
HXDLIN( 349)									_this->s1 = _this->s2;
HXDLIN( 349)									_this->s2 = _this->s3;
HXDLIN( 349)									_this->s3 = _this->s4;
HXDLIN( 349)									_this->s4 = _this->s5;
HXDLIN( 349)									_this->s5 = null();
HXDLIN( 349)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 349)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 349)									_this->l--;
            								}
HXDLIN( 349)								_this4->s5 = out;
            							}
HXDLIN( 349)							_this4->l--;
            						}
HXDLIN( 349)						int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
HXLINE( 350)						 ::justPath::StoreF6 _this5 = this->store;
HXDLIN( 350)						 ::Dynamic out5 = _this5->s0;
HXDLIN( 350)						if ((_this5->l != 0)) {
HXLINE( 350)							_this5->s0 = _this5->s1;
HXDLIN( 350)							_this5->s1 = _this5->s2;
HXDLIN( 350)							_this5->s2 = _this5->s3;
HXDLIN( 350)							_this5->s3 = _this5->s4;
HXDLIN( 350)							_this5->s4 = _this5->s5;
HXDLIN( 350)							_this5->s5 = null();
HXDLIN( 350)							if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 350)								 ::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 350)								 ::Dynamic out = _this->s0;
HXDLIN( 350)								if ((_this->l != 0)) {
HXLINE( 350)									_this->s0 = _this->s1;
HXDLIN( 350)									_this->s1 = _this->s2;
HXDLIN( 350)									_this->s2 = _this->s3;
HXDLIN( 350)									_this->s3 = _this->s4;
HXDLIN( 350)									_this->s4 = _this->s5;
HXDLIN( 350)									_this->s5 = null();
HXDLIN( 350)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 350)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 350)									_this->l--;
            								}
HXDLIN( 350)								_this5->s5 = out;
            							}
HXDLIN( 350)							_this5->l--;
            						}
HXDLIN( 350)						this->lastX = (out5 + this->lastX);
HXLINE( 351)						 ::justPath::StoreF6 _this6 = this->store;
HXDLIN( 351)						 ::Dynamic out6 = _this6->s0;
HXDLIN( 351)						if ((_this6->l != 0)) {
HXLINE( 351)							_this6->s0 = _this6->s1;
HXDLIN( 351)							_this6->s1 = _this6->s2;
HXDLIN( 351)							_this6->s2 = _this6->s3;
HXDLIN( 351)							_this6->s3 = _this6->s4;
HXDLIN( 351)							_this6->s4 = _this6->s5;
HXDLIN( 351)							_this6->s5 = null();
HXDLIN( 351)							if (::hx::IsNotNull( _this6->s6 )) {
HXLINE( 351)								 ::justPath::StoreF6 _this = _this6->s6;
HXDLIN( 351)								 ::Dynamic out = _this->s0;
HXDLIN( 351)								if ((_this->l != 0)) {
HXLINE( 351)									_this->s0 = _this->s1;
HXDLIN( 351)									_this->s1 = _this->s2;
HXDLIN( 351)									_this->s2 = _this->s3;
HXDLIN( 351)									_this->s3 = _this->s4;
HXDLIN( 351)									_this->s4 = _this->s5;
HXDLIN( 351)									_this->s5 = null();
HXDLIN( 351)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 351)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 351)									_this->l--;
            								}
HXDLIN( 351)								_this6->s5 = out;
            							}
HXDLIN( 351)							_this6->l--;
            						}
HXDLIN( 351)						this->lastY = (out6 + this->lastY);
HXLINE( 352)						Float sx1 = sx;
HXDLIN( 352)						Float sy1 = sy;
HXDLIN( 352)						Float phi1 = ( (Float)(phi) );
HXDLIN( 352)						Float ex = this->lastX;
HXDLIN( 352)						Float ey = this->lastY;
HXDLIN( 352)						Float mx = ((sx1 - ex) / ( (Float)(2) ));
HXDLIN( 352)						Float my = ((sy1 - ey) / ( (Float)(2) ));
HXDLIN( 352)						Float ax = ((sx1 + ex) / ( (Float)(2) ));
HXDLIN( 352)						Float ay = ((sy1 + ey) / ( (Float)(2) ));
HXDLIN( 352)						phi1 = ::hx::Mod(phi1,360);
HXDLIN( 352)						phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN( 352)						Float sin = ::Math_obj::sin(phi1);
HXDLIN( 352)						Float cos = ::Math_obj::cos(phi1);
HXDLIN( 352)						Float x1 = ((mx * cos) + (my * sin));
HXDLIN( 352)						Float y1 = ((-(mx) * sin) + (my * cos));
HXDLIN( 352)						Float rx = ::Math_obj::abs(( (Float)(xr) ));
HXDLIN( 352)						Float ry = ::Math_obj::abs(( (Float)(yr) ));
HXDLIN( 352)						Float rxx = (rx * rx);
HXDLIN( 352)						Float ryy = (ry * ry);
HXDLIN( 352)						Float xx1 = (x1 * x1);
HXDLIN( 352)						Float yy1 = (y1 * y1);
HXDLIN( 352)						Float check = ((xx1 / rxx) + (yy1 / ryy));
HXDLIN( 352)						if ((check > 1)) {
HXLINE( 352)							rx = (rx * ::Math_obj::sqrt(check));
HXDLIN( 352)							ry = (ry * ::Math_obj::sqrt(check));
HXDLIN( 352)							rxx = (rx * rx);
HXDLIN( 352)							ryy = (ry * ry);
            						}
HXDLIN( 352)						int sign;
HXDLIN( 352)						if ((large == sweep)) {
HXLINE( 352)							sign = -1;
            						}
            						else {
HXLINE( 352)							sign = 1;
            						}
HXDLIN( 352)						Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
HXDLIN( 352)						if ((sq < 0)) {
HXLINE( 352)							sq = ( (Float)(0) );
            						}
HXDLIN( 352)						Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
HXDLIN( 352)						Float cx1 = (((coef * rx) * y1) / ry);
HXDLIN( 352)						Float cy1 = (((-(coef) * ry) * x1) / rx);
HXDLIN( 352)						Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
HXDLIN( 352)						Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
HXDLIN( 352)						Float phiSin = ::Math_obj::sin(-(phi1));
HXDLIN( 352)						Float phiCos = ::Math_obj::cos(-(phi1));
HXDLIN( 352)						sx1 = (sx1 - cx);
HXDLIN( 352)						sy1 = (sy1 - cy);
HXDLIN( 352)						Float dx = sx1;
HXDLIN( 352)						Float dy = sy1;
HXDLIN( 352)						sx1 = ((dx * phiCos) - (dy * phiSin));
HXDLIN( 352)						sy1 = ((dx * phiSin) + (dy * phiCos));
HXDLIN( 352)						sx1 = (sx1 + cx);
HXDLIN( 352)						sy1 = (sy1 + cy);
HXDLIN( 352)						ex = (ex - cx);
HXDLIN( 352)						ey = (ey - cy);
HXDLIN( 352)						Float dx1 = ex;
HXDLIN( 352)						Float dy1 = ey;
HXDLIN( 352)						ex = ((dx1 * phiCos) - (dy1 * phiSin));
HXDLIN( 352)						ey = ((dx1 * phiSin) + (dy1 * phiCos));
HXDLIN( 352)						ex = (ex + cx);
HXDLIN( 352)						ey = (ey + cy);
HXDLIN( 352)						Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
HXDLIN( 352)						Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
HXDLIN( 352)						Float delta = (alpha - omega);
HXDLIN( 352)						bool _hx_tmp;
HXDLIN( 352)						if ((sweep == 1)) {
HXLINE( 352)							_hx_tmp = (delta > 0);
            						}
            						else {
HXLINE( 352)							_hx_tmp = false;
            						}
HXDLIN( 352)						if (_hx_tmp) {
HXLINE( 352)							delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
            						}
            						else {
HXLINE( 352)							bool _hx_tmp;
HXDLIN( 352)							if ((sweep == 0)) {
HXLINE( 352)								_hx_tmp = (delta < 0);
            							}
            							else {
HXLINE( 352)								_hx_tmp = false;
            							}
HXDLIN( 352)							if (_hx_tmp) {
HXLINE( 352)								delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
            							}
            						}
HXDLIN( 352)						 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
            							->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
            							->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
            							->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
            							->setFixed(3,HX_("cx",b5,56,00,00),cx)
            							->setFixed(4,HX_("cy",b6,56,00,00),cy)
            							->setFixed(5,HX_("rx",c6,63,00,00),rx)
            							->setFixed(6,HX_("ry",c7,63,00,00),ry)
            							->setFixed(7,HX_("phi",71,57,55,00),phi1)
            							->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
            							->setFixed(9,HX_("omega",61,a3,d3,31),omega));
HXDLIN( 352)						 ::Dynamic ellipseData = this1;
HXLINE( 353)						 ::justPath::EllipseArc ellipse =  ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
HXLINE( 354)						ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
            					}
            					else {
HXLINE( 355)						if ((this->store->l > 7)) {
HXLINE( 356)							while((this->store->l > 6)){
HXLINE( 357)								Float sx = this->lastX;
HXLINE( 358)								Float sy = this->lastY;
HXLINE( 359)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 359)								 ::Dynamic out = _this->s0;
HXDLIN( 359)								if ((_this->l != 0)) {
HXLINE( 359)									_this->s0 = _this->s1;
HXDLIN( 359)									_this->s1 = _this->s2;
HXDLIN( 359)									_this->s2 = _this->s3;
HXDLIN( 359)									_this->s3 = _this->s4;
HXDLIN( 359)									_this->s4 = _this->s5;
HXDLIN( 359)									_this->s5 = null();
HXDLIN( 359)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 359)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 359)										 ::Dynamic out = _this1->s0;
HXDLIN( 359)										if ((_this1->l != 0)) {
HXLINE( 359)											_this1->s0 = _this1->s1;
HXDLIN( 359)											_this1->s1 = _this1->s2;
HXDLIN( 359)											_this1->s2 = _this1->s3;
HXDLIN( 359)											_this1->s3 = _this1->s4;
HXDLIN( 359)											_this1->s4 = _this1->s5;
HXDLIN( 359)											_this1->s5 = null();
HXDLIN( 359)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 359)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 359)											_this1->l--;
            										}
HXDLIN( 359)										_this->s5 = out;
            									}
HXDLIN( 359)									_this->l--;
            								}
HXDLIN( 359)								 ::Dynamic xr = out;
HXLINE( 360)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 360)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 360)								if ((_this1->l != 0)) {
HXLINE( 360)									_this1->s0 = _this1->s1;
HXDLIN( 360)									_this1->s1 = _this1->s2;
HXDLIN( 360)									_this1->s2 = _this1->s3;
HXDLIN( 360)									_this1->s3 = _this1->s4;
HXDLIN( 360)									_this1->s4 = _this1->s5;
HXDLIN( 360)									_this1->s5 = null();
HXDLIN( 360)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 360)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 360)										 ::Dynamic out = _this->s0;
HXDLIN( 360)										if ((_this->l != 0)) {
HXLINE( 360)											_this->s0 = _this->s1;
HXDLIN( 360)											_this->s1 = _this->s2;
HXDLIN( 360)											_this->s2 = _this->s3;
HXDLIN( 360)											_this->s3 = _this->s4;
HXDLIN( 360)											_this->s4 = _this->s5;
HXDLIN( 360)											_this->s5 = null();
HXDLIN( 360)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 360)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 360)											_this->l--;
            										}
HXDLIN( 360)										_this1->s5 = out;
            									}
HXDLIN( 360)									_this1->l--;
            								}
HXDLIN( 360)								 ::Dynamic yr = out1;
HXLINE( 361)								 ::justPath::StoreF6 _this2 = this->store;
HXDLIN( 361)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 361)								if ((_this2->l != 0)) {
HXLINE( 361)									_this2->s0 = _this2->s1;
HXDLIN( 361)									_this2->s1 = _this2->s2;
HXDLIN( 361)									_this2->s2 = _this2->s3;
HXDLIN( 361)									_this2->s3 = _this2->s4;
HXDLIN( 361)									_this2->s4 = _this2->s5;
HXDLIN( 361)									_this2->s5 = null();
HXDLIN( 361)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 361)										 ::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 361)										 ::Dynamic out = _this->s0;
HXDLIN( 361)										if ((_this->l != 0)) {
HXLINE( 361)											_this->s0 = _this->s1;
HXDLIN( 361)											_this->s1 = _this->s2;
HXDLIN( 361)											_this->s2 = _this->s3;
HXDLIN( 361)											_this->s3 = _this->s4;
HXDLIN( 361)											_this->s4 = _this->s5;
HXDLIN( 361)											_this->s5 = null();
HXDLIN( 361)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 361)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 361)											_this->l--;
            										}
HXDLIN( 361)										_this2->s5 = out;
            									}
HXDLIN( 361)									_this2->l--;
            								}
HXDLIN( 361)								 ::Dynamic phi = out2;
HXLINE( 362)								 ::justPath::StoreF6 _this3 = this->store;
HXDLIN( 362)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 362)								if ((_this3->l != 0)) {
HXLINE( 362)									_this3->s0 = _this3->s1;
HXDLIN( 362)									_this3->s1 = _this3->s2;
HXDLIN( 362)									_this3->s2 = _this3->s3;
HXDLIN( 362)									_this3->s3 = _this3->s4;
HXDLIN( 362)									_this3->s4 = _this3->s5;
HXDLIN( 362)									_this3->s5 = null();
HXDLIN( 362)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 362)										 ::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 362)										 ::Dynamic out = _this->s0;
HXDLIN( 362)										if ((_this->l != 0)) {
HXLINE( 362)											_this->s0 = _this->s1;
HXDLIN( 362)											_this->s1 = _this->s2;
HXDLIN( 362)											_this->s2 = _this->s3;
HXDLIN( 362)											_this->s3 = _this->s4;
HXDLIN( 362)											_this->s4 = _this->s5;
HXDLIN( 362)											_this->s5 = null();
HXDLIN( 362)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 362)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 362)											_this->l--;
            										}
HXDLIN( 362)										_this3->s5 = out;
            									}
HXDLIN( 362)									_this3->l--;
            								}
HXDLIN( 362)								int large = ::Std_obj::_hx_int(( (Float)(out3) ));
HXLINE( 363)								 ::justPath::StoreF6 _this4 = this->store;
HXDLIN( 363)								 ::Dynamic out4 = _this4->s0;
HXDLIN( 363)								if ((_this4->l != 0)) {
HXLINE( 363)									_this4->s0 = _this4->s1;
HXDLIN( 363)									_this4->s1 = _this4->s2;
HXDLIN( 363)									_this4->s2 = _this4->s3;
HXDLIN( 363)									_this4->s3 = _this4->s4;
HXDLIN( 363)									_this4->s4 = _this4->s5;
HXDLIN( 363)									_this4->s5 = null();
HXDLIN( 363)									if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 363)										 ::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 363)										 ::Dynamic out = _this->s0;
HXDLIN( 363)										if ((_this->l != 0)) {
HXLINE( 363)											_this->s0 = _this->s1;
HXDLIN( 363)											_this->s1 = _this->s2;
HXDLIN( 363)											_this->s2 = _this->s3;
HXDLIN( 363)											_this->s3 = _this->s4;
HXDLIN( 363)											_this->s4 = _this->s5;
HXDLIN( 363)											_this->s5 = null();
HXDLIN( 363)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 363)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 363)											_this->l--;
            										}
HXDLIN( 363)										_this4->s5 = out;
            									}
HXDLIN( 363)									_this4->l--;
            								}
HXDLIN( 363)								int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
HXLINE( 364)								 ::justPath::StoreF6 _this5 = this->store;
HXDLIN( 364)								 ::Dynamic out5 = _this5->s0;
HXDLIN( 364)								if ((_this5->l != 0)) {
HXLINE( 364)									_this5->s0 = _this5->s1;
HXDLIN( 364)									_this5->s1 = _this5->s2;
HXDLIN( 364)									_this5->s2 = _this5->s3;
HXDLIN( 364)									_this5->s3 = _this5->s4;
HXDLIN( 364)									_this5->s4 = _this5->s5;
HXDLIN( 364)									_this5->s5 = null();
HXDLIN( 364)									if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 364)										 ::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 364)										 ::Dynamic out = _this->s0;
HXDLIN( 364)										if ((_this->l != 0)) {
HXLINE( 364)											_this->s0 = _this->s1;
HXDLIN( 364)											_this->s1 = _this->s2;
HXDLIN( 364)											_this->s2 = _this->s3;
HXDLIN( 364)											_this->s3 = _this->s4;
HXDLIN( 364)											_this->s4 = _this->s5;
HXDLIN( 364)											_this->s5 = null();
HXDLIN( 364)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 364)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 364)											_this->l--;
            										}
HXDLIN( 364)										_this5->s5 = out;
            									}
HXDLIN( 364)									_this5->l--;
            								}
HXDLIN( 364)								this->lastX = (out5 + this->lastX);
HXLINE( 365)								 ::justPath::StoreF6 _this6 = this->store;
HXDLIN( 365)								 ::Dynamic out6 = _this6->s0;
HXDLIN( 365)								if ((_this6->l != 0)) {
HXLINE( 365)									_this6->s0 = _this6->s1;
HXDLIN( 365)									_this6->s1 = _this6->s2;
HXDLIN( 365)									_this6->s2 = _this6->s3;
HXDLIN( 365)									_this6->s3 = _this6->s4;
HXDLIN( 365)									_this6->s4 = _this6->s5;
HXDLIN( 365)									_this6->s5 = null();
HXDLIN( 365)									if (::hx::IsNotNull( _this6->s6 )) {
HXLINE( 365)										 ::justPath::StoreF6 _this = _this6->s6;
HXDLIN( 365)										 ::Dynamic out = _this->s0;
HXDLIN( 365)										if ((_this->l != 0)) {
HXLINE( 365)											_this->s0 = _this->s1;
HXDLIN( 365)											_this->s1 = _this->s2;
HXDLIN( 365)											_this->s2 = _this->s3;
HXDLIN( 365)											_this->s3 = _this->s4;
HXDLIN( 365)											_this->s4 = _this->s5;
HXDLIN( 365)											_this->s5 = null();
HXDLIN( 365)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 365)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 365)											_this->l--;
            										}
HXDLIN( 365)										_this6->s5 = out;
            									}
HXDLIN( 365)									_this6->l--;
            								}
HXDLIN( 365)								this->lastY = (out6 + this->lastY);
HXLINE( 366)								Float sx1 = sx;
HXDLIN( 366)								Float sy1 = sy;
HXDLIN( 366)								Float phi1 = ( (Float)(phi) );
HXDLIN( 366)								Float ex = this->lastX;
HXDLIN( 366)								Float ey = this->lastY;
HXDLIN( 366)								Float mx = ((sx1 - ex) / ( (Float)(2) ));
HXDLIN( 366)								Float my = ((sy1 - ey) / ( (Float)(2) ));
HXDLIN( 366)								Float ax = ((sx1 + ex) / ( (Float)(2) ));
HXDLIN( 366)								Float ay = ((sy1 + ey) / ( (Float)(2) ));
HXDLIN( 366)								phi1 = ::hx::Mod(phi1,360);
HXDLIN( 366)								phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN( 366)								Float sin = ::Math_obj::sin(phi1);
HXDLIN( 366)								Float cos = ::Math_obj::cos(phi1);
HXDLIN( 366)								Float x1 = ((mx * cos) + (my * sin));
HXDLIN( 366)								Float y1 = ((-(mx) * sin) + (my * cos));
HXDLIN( 366)								Float rx = ::Math_obj::abs(( (Float)(xr) ));
HXDLIN( 366)								Float ry = ::Math_obj::abs(( (Float)(yr) ));
HXDLIN( 366)								Float rxx = (rx * rx);
HXDLIN( 366)								Float ryy = (ry * ry);
HXDLIN( 366)								Float xx1 = (x1 * x1);
HXDLIN( 366)								Float yy1 = (y1 * y1);
HXDLIN( 366)								Float check = ((xx1 / rxx) + (yy1 / ryy));
HXDLIN( 366)								if ((check > 1)) {
HXLINE( 366)									rx = (rx * ::Math_obj::sqrt(check));
HXDLIN( 366)									ry = (ry * ::Math_obj::sqrt(check));
HXDLIN( 366)									rxx = (rx * rx);
HXDLIN( 366)									ryy = (ry * ry);
            								}
HXDLIN( 366)								int sign;
HXDLIN( 366)								if ((large == sweep)) {
HXLINE( 366)									sign = -1;
            								}
            								else {
HXLINE( 366)									sign = 1;
            								}
HXDLIN( 366)								Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
HXDLIN( 366)								if ((sq < 0)) {
HXLINE( 366)									sq = ( (Float)(0) );
            								}
HXDLIN( 366)								Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
HXDLIN( 366)								Float cx1 = (((coef * rx) * y1) / ry);
HXDLIN( 366)								Float cy1 = (((-(coef) * ry) * x1) / rx);
HXDLIN( 366)								Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
HXDLIN( 366)								Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
HXDLIN( 366)								Float phiSin = ::Math_obj::sin(-(phi1));
HXDLIN( 366)								Float phiCos = ::Math_obj::cos(-(phi1));
HXDLIN( 366)								sx1 = (sx1 - cx);
HXDLIN( 366)								sy1 = (sy1 - cy);
HXDLIN( 366)								Float dx = sx1;
HXDLIN( 366)								Float dy = sy1;
HXDLIN( 366)								sx1 = ((dx * phiCos) - (dy * phiSin));
HXDLIN( 366)								sy1 = ((dx * phiSin) + (dy * phiCos));
HXDLIN( 366)								sx1 = (sx1 + cx);
HXDLIN( 366)								sy1 = (sy1 + cy);
HXDLIN( 366)								ex = (ex - cx);
HXDLIN( 366)								ey = (ey - cy);
HXDLIN( 366)								Float dx1 = ex;
HXDLIN( 366)								Float dy1 = ey;
HXDLIN( 366)								ex = ((dx1 * phiCos) - (dy1 * phiSin));
HXDLIN( 366)								ey = ((dx1 * phiSin) + (dy1 * phiCos));
HXDLIN( 366)								ex = (ex + cx);
HXDLIN( 366)								ey = (ey + cy);
HXDLIN( 366)								Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
HXDLIN( 366)								Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
HXDLIN( 366)								Float delta = (alpha - omega);
HXDLIN( 366)								bool _hx_tmp;
HXDLIN( 366)								if ((sweep == 1)) {
HXLINE( 366)									_hx_tmp = (delta > 0);
            								}
            								else {
HXLINE( 366)									_hx_tmp = false;
            								}
HXDLIN( 366)								if (_hx_tmp) {
HXLINE( 366)									delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
            								}
            								else {
HXLINE( 366)									bool _hx_tmp;
HXDLIN( 366)									if ((sweep == 0)) {
HXLINE( 366)										_hx_tmp = (delta < 0);
            									}
            									else {
HXLINE( 366)										_hx_tmp = false;
            									}
HXDLIN( 366)									if (_hx_tmp) {
HXLINE( 366)										delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
            									}
            								}
HXDLIN( 366)								 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
            									->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
            									->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
            									->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
            									->setFixed(3,HX_("cx",b5,56,00,00),cx)
            									->setFixed(4,HX_("cy",b6,56,00,00),cy)
            									->setFixed(5,HX_("rx",c6,63,00,00),rx)
            									->setFixed(6,HX_("ry",c7,63,00,00),ry)
            									->setFixed(7,HX_("phi",71,57,55,00),phi1)
            									->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
            									->setFixed(9,HX_("omega",61,a3,d3,31),omega));
HXDLIN( 366)								 ::Dynamic ellipseData = this1;
HXLINE( 367)								 ::justPath::EllipseArc ellipse =  ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
HXLINE( 368)								ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
            							}
            						}
            					}
            				}
            				break;
            				case (int)99: {
HXLINE( 160)					{
HXLINE( 160)						{
HXLINE( 160)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 160)							_this->l = 0;
HXDLIN( 160)							_this->s0 = null();
HXDLIN( 160)							_this->s1 = null();
HXDLIN( 160)							_this->s2 = null();
HXDLIN( 160)							_this->s3 = null();
HXDLIN( 160)							_this->s4 = null();
HXDLIN( 160)							_this->s5 = null();
HXDLIN( 160)							_this->s6 = null();
            						}
HXDLIN( 160)						this->c = this->str.cca(this->pos++);
HXDLIN( 160)						::String temp = HX_("",00,00,00,00);
HXDLIN( 160)						bool exit = false;
HXDLIN( 160)						while(true){
HXLINE( 160)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 160)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 160)										if (((this->store->l & 1) == 0)) {
HXLINE( 160)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 160)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 160)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 160)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 160)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 160)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 160)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 160)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 160)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 160)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 160)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 160)													{
HXLINE( 160)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 160)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 160)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 160)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 160)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 160)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 160)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 160)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 160)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 160)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 160)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 160)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 160)											_this->l++;
            										}
            										else {
HXLINE( 160)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 160)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 160)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 160)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 160)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 160)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 160)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 160)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 160)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 160)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 160)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 160)													{
HXLINE( 160)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 160)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 160)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 160)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 160)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 160)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 160)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 160)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 160)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 160)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 160)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 160)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 160)											_this->l++;
            										}
HXDLIN( 160)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 160)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 160)										if (((this->store->l & 1) == 0)) {
HXLINE( 160)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 160)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 160)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 160)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 160)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 160)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 160)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 160)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 160)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 160)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 160)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 160)													{
HXLINE( 160)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 160)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 160)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 160)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 160)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 160)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 160)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 160)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 160)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 160)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 160)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 160)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 160)											_this->l++;
            										}
            										else {
HXLINE( 160)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 160)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 160)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 160)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 160)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 160)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 160)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 160)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 160)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 160)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 160)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 160)													{
HXLINE( 160)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 160)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 160)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 160)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 160)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 160)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 160)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 160)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 160)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 160)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 160)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 160)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 160)											_this->l++;
            										}
            									}
HXDLIN( 160)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 160)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 160)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 160)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 160)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 160)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 160)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 160)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 160)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 160)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 160)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 160)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 160)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 160)										if (((this->store->l & 1) == 0)) {
HXLINE( 160)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 160)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 160)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 160)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 160)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 160)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 160)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 160)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 160)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 160)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 160)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 160)													{
HXLINE( 160)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 160)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 160)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 160)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 160)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 160)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 160)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 160)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 160)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 160)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 160)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 160)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 160)											_this->l++;
            										}
            										else {
HXLINE( 160)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 160)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 160)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 160)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 160)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 160)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 160)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 160)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 160)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 160)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 160)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 160)													{
HXLINE( 160)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 160)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 160)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 160)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 160)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 160)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 160)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 160)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 160)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 160)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 160)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 160)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 160)											_this->l++;
            										}
HXDLIN( 160)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 160)									this->pos--;
HXDLIN( 160)									exit = true;
            								}
            							}
HXDLIN( 160)							if (exit) {
HXLINE( 160)								goto _hx_goto_22;
            							}
HXDLIN( 160)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_22:;
            					}
HXLINE( 161)					if ((this->store->l == 4)) {
HXLINE( 162)						Float firstX = (this->store->s0 + this->lastX);
HXLINE( 163)						Float firstY = (this->store->s1 + this->lastY);
HXLINE( 164)						this->controlX = (this->store->s2 + this->lastX);
HXLINE( 165)						this->controlY = (this->store->s3 + this->lastY);
HXLINE( 166)						this->lastX = (this->store->s4 + this->lastX);
HXLINE( 167)						this->lastY = (this->store->s5 + this->lastY);
HXLINE( 168)						::justPath::IPathContext_obj::curveTo(this->pathContext,firstX,firstY,this->controlX,this->controlY,this->lastX,this->lastY);
            					}
            					else {
HXLINE( 169)						if ((this->store->l > 4)) {
HXLINE( 170)							while((this->store->l > 3)){
HXLINE( 171)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 171)								 ::Dynamic out = _this->s0;
HXDLIN( 171)								if ((_this->l != 0)) {
HXLINE( 171)									_this->s0 = _this->s1;
HXDLIN( 171)									_this->s1 = _this->s2;
HXDLIN( 171)									_this->s2 = _this->s3;
HXDLIN( 171)									_this->s3 = _this->s4;
HXDLIN( 171)									_this->s4 = _this->s5;
HXDLIN( 171)									_this->s5 = null();
HXDLIN( 171)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 171)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 171)										 ::Dynamic out = _this1->s0;
HXDLIN( 171)										if ((_this1->l != 0)) {
HXLINE( 171)											_this1->s0 = _this1->s1;
HXDLIN( 171)											_this1->s1 = _this1->s2;
HXDLIN( 171)											_this1->s2 = _this1->s3;
HXDLIN( 171)											_this1->s3 = _this1->s4;
HXDLIN( 171)											_this1->s4 = _this1->s5;
HXDLIN( 171)											_this1->s5 = null();
HXDLIN( 171)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 171)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 171)											_this1->l--;
            										}
HXDLIN( 171)										_this->s5 = out;
            									}
HXDLIN( 171)									_this->l--;
            								}
HXDLIN( 171)								Float firstX = (out + this->lastX);
HXLINE( 172)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 172)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 172)								if ((_this1->l != 0)) {
HXLINE( 172)									_this1->s0 = _this1->s1;
HXDLIN( 172)									_this1->s1 = _this1->s2;
HXDLIN( 172)									_this1->s2 = _this1->s3;
HXDLIN( 172)									_this1->s3 = _this1->s4;
HXDLIN( 172)									_this1->s4 = _this1->s5;
HXDLIN( 172)									_this1->s5 = null();
HXDLIN( 172)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 172)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 172)										 ::Dynamic out = _this->s0;
HXDLIN( 172)										if ((_this->l != 0)) {
HXLINE( 172)											_this->s0 = _this->s1;
HXDLIN( 172)											_this->s1 = _this->s2;
HXDLIN( 172)											_this->s2 = _this->s3;
HXDLIN( 172)											_this->s3 = _this->s4;
HXDLIN( 172)											_this->s4 = _this->s5;
HXDLIN( 172)											_this->s5 = null();
HXDLIN( 172)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 172)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 172)											_this->l--;
            										}
HXDLIN( 172)										_this1->s5 = out;
            									}
HXDLIN( 172)									_this1->l--;
            								}
HXDLIN( 172)								Float firstY = (out1 + this->lastY);
HXLINE( 173)								 ::justPath::StoreF6 _this2 = this->store;
HXDLIN( 173)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 173)								if ((_this2->l != 0)) {
HXLINE( 173)									_this2->s0 = _this2->s1;
HXDLIN( 173)									_this2->s1 = _this2->s2;
HXDLIN( 173)									_this2->s2 = _this2->s3;
HXDLIN( 173)									_this2->s3 = _this2->s4;
HXDLIN( 173)									_this2->s4 = _this2->s5;
HXDLIN( 173)									_this2->s5 = null();
HXDLIN( 173)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 173)										 ::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 173)										 ::Dynamic out = _this->s0;
HXDLIN( 173)										if ((_this->l != 0)) {
HXLINE( 173)											_this->s0 = _this->s1;
HXDLIN( 173)											_this->s1 = _this->s2;
HXDLIN( 173)											_this->s2 = _this->s3;
HXDLIN( 173)											_this->s3 = _this->s4;
HXDLIN( 173)											_this->s4 = _this->s5;
HXDLIN( 173)											_this->s5 = null();
HXDLIN( 173)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 173)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 173)											_this->l--;
            										}
HXDLIN( 173)										_this2->s5 = out;
            									}
HXDLIN( 173)									_this2->l--;
            								}
HXDLIN( 173)								this->controlX = (out2 + this->lastX);
HXLINE( 174)								 ::justPath::StoreF6 _this3 = this->store;
HXDLIN( 174)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 174)								if ((_this3->l != 0)) {
HXLINE( 174)									_this3->s0 = _this3->s1;
HXDLIN( 174)									_this3->s1 = _this3->s2;
HXDLIN( 174)									_this3->s2 = _this3->s3;
HXDLIN( 174)									_this3->s3 = _this3->s4;
HXDLIN( 174)									_this3->s4 = _this3->s5;
HXDLIN( 174)									_this3->s5 = null();
HXDLIN( 174)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 174)										 ::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 174)										 ::Dynamic out = _this->s0;
HXDLIN( 174)										if ((_this->l != 0)) {
HXLINE( 174)											_this->s0 = _this->s1;
HXDLIN( 174)											_this->s1 = _this->s2;
HXDLIN( 174)											_this->s2 = _this->s3;
HXDLIN( 174)											_this->s3 = _this->s4;
HXDLIN( 174)											_this->s4 = _this->s5;
HXDLIN( 174)											_this->s5 = null();
HXDLIN( 174)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 174)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 174)											_this->l--;
            										}
HXDLIN( 174)										_this3->s5 = out;
            									}
HXDLIN( 174)									_this3->l--;
            								}
HXDLIN( 174)								this->controlY = (out3 + this->lastY);
HXLINE( 175)								 ::justPath::StoreF6 _this4 = this->store;
HXDLIN( 175)								 ::Dynamic out4 = _this4->s0;
HXDLIN( 175)								if ((_this4->l != 0)) {
HXLINE( 175)									_this4->s0 = _this4->s1;
HXDLIN( 175)									_this4->s1 = _this4->s2;
HXDLIN( 175)									_this4->s2 = _this4->s3;
HXDLIN( 175)									_this4->s3 = _this4->s4;
HXDLIN( 175)									_this4->s4 = _this4->s5;
HXDLIN( 175)									_this4->s5 = null();
HXDLIN( 175)									if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 175)										 ::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 175)										 ::Dynamic out = _this->s0;
HXDLIN( 175)										if ((_this->l != 0)) {
HXLINE( 175)											_this->s0 = _this->s1;
HXDLIN( 175)											_this->s1 = _this->s2;
HXDLIN( 175)											_this->s2 = _this->s3;
HXDLIN( 175)											_this->s3 = _this->s4;
HXDLIN( 175)											_this->s4 = _this->s5;
HXDLIN( 175)											_this->s5 = null();
HXDLIN( 175)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 175)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 175)											_this->l--;
            										}
HXDLIN( 175)										_this4->s5 = out;
            									}
HXDLIN( 175)									_this4->l--;
            								}
HXDLIN( 175)								this->lastX = (out4 + this->lastX);
HXLINE( 176)								 ::justPath::StoreF6 _this5 = this->store;
HXDLIN( 176)								 ::Dynamic out5 = _this5->s0;
HXDLIN( 176)								if ((_this5->l != 0)) {
HXLINE( 176)									_this5->s0 = _this5->s1;
HXDLIN( 176)									_this5->s1 = _this5->s2;
HXDLIN( 176)									_this5->s2 = _this5->s3;
HXDLIN( 176)									_this5->s3 = _this5->s4;
HXDLIN( 176)									_this5->s4 = _this5->s5;
HXDLIN( 176)									_this5->s5 = null();
HXDLIN( 176)									if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 176)										 ::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 176)										 ::Dynamic out = _this->s0;
HXDLIN( 176)										if ((_this->l != 0)) {
HXLINE( 176)											_this->s0 = _this->s1;
HXDLIN( 176)											_this->s1 = _this->s2;
HXDLIN( 176)											_this->s2 = _this->s3;
HXDLIN( 176)											_this->s3 = _this->s4;
HXDLIN( 176)											_this->s4 = _this->s5;
HXDLIN( 176)											_this->s5 = null();
HXDLIN( 176)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 176)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 176)											_this->l--;
            										}
HXDLIN( 176)										_this5->s5 = out;
            									}
HXDLIN( 176)									_this5->l--;
            								}
HXDLIN( 176)								this->lastY = (out5 + this->lastY);
HXLINE( 177)								::justPath::IPathContext_obj::curveTo(this->pathContext,firstX,firstY,this->controlX,this->controlY,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)104: {
HXLINE( 106)					{
HXLINE( 106)						 ::Dynamic process = false;
HXDLIN( 106)						if (::hx::IsNull( process )) {
HXLINE( 106)							process = true;
            						}
HXDLIN( 106)						{
HXLINE( 106)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 106)							_this->l = 0;
HXDLIN( 106)							_this->s0 = null();
HXDLIN( 106)							_this->s1 = null();
HXDLIN( 106)							_this->s2 = null();
HXDLIN( 106)							_this->s3 = null();
HXDLIN( 106)							_this->s4 = null();
HXDLIN( 106)							_this->s5 = null();
HXDLIN( 106)							_this->s6 = null();
            						}
HXDLIN( 106)						this->c = this->str.cca(this->pos++);
HXDLIN( 106)						::String temp = HX_("",00,00,00,00);
HXDLIN( 106)						bool exit = false;
HXDLIN( 106)						while(true){
HXLINE( 106)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 106)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 106)										if (( (bool)(process) )) {
HXLINE( 106)											if (((this->store->l & 1) == 0)) {
HXLINE( 106)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 106)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 106)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 106)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 106)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 106)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 106)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 106)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 106)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 106)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 106)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 106)														{
HXLINE( 106)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 106)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 106)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 106)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 106)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 106)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 106)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 106)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 106)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 106)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 106)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 106)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 106)												_this->l++;
            											}
            											else {
HXLINE( 106)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 106)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 106)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 106)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 106)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 106)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 106)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 106)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 106)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 106)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 106)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 106)														{
HXLINE( 106)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 106)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 106)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 106)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 106)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 106)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 106)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 106)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 106)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 106)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 106)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 106)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 106)												_this->l++;
            											}
            										}
            										else {
HXLINE( 106)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 106)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 106)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 106)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 106)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 106)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 106)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 106)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 106)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 106)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 106)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 106)													{
HXLINE( 106)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 106)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 106)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 106)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 106)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 106)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 106)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 106)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 106)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 106)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 106)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 106)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 106)											_this->l++;
            										}
HXDLIN( 106)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 106)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 106)										if (( (bool)(process) )) {
HXLINE( 106)											if (((this->store->l & 1) == 0)) {
HXLINE( 106)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 106)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 106)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 106)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 106)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 106)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 106)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 106)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 106)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 106)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 106)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 106)														{
HXLINE( 106)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 106)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 106)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 106)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 106)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 106)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 106)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 106)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 106)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 106)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 106)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 106)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 106)												_this->l++;
            											}
            											else {
HXLINE( 106)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 106)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 106)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 106)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 106)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 106)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 106)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 106)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 106)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 106)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 106)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 106)														{
HXLINE( 106)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 106)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 106)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 106)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 106)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 106)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 106)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 106)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 106)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 106)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 106)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 106)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 106)												_this->l++;
            											}
            										}
            										else {
HXLINE( 106)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 106)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 106)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 106)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 106)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 106)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 106)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 106)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 106)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 106)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 106)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 106)													{
HXLINE( 106)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 106)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 106)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 106)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 106)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 106)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 106)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 106)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 106)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 106)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 106)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 106)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 106)											_this->l++;
            										}
            									}
HXDLIN( 106)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 106)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 106)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 106)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 106)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 106)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 106)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 106)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 106)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 106)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 106)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 106)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 106)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 106)										if (( (bool)(process) )) {
HXLINE( 106)											if (((this->store->l & 1) == 0)) {
HXLINE( 106)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 106)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 106)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 106)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 106)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 106)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 106)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 106)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 106)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 106)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 106)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 106)														{
HXLINE( 106)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 106)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 106)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 106)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 106)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 106)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 106)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 106)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 106)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 106)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 106)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 106)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 106)												_this->l++;
            											}
            											else {
HXLINE( 106)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 106)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 106)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 106)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 106)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 106)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 106)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 106)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 106)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 106)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 106)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 106)														{
HXLINE( 106)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 106)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 106)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 106)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 106)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 106)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 106)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 106)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 106)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 106)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 106)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 106)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 106)												_this->l++;
            											}
            										}
            										else {
HXLINE( 106)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 106)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 106)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 106)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 106)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 106)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 106)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 106)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 106)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 106)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 106)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 106)													{
HXLINE( 106)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 106)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 106)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 106)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 106)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 106)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 106)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 106)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 106)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 106)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 106)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 106)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 106)											_this->l++;
            										}
HXDLIN( 106)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 106)									this->pos--;
HXDLIN( 106)									exit = true;
            								}
            							}
HXDLIN( 106)							if (exit) {
HXLINE( 106)								goto _hx_goto_24;
            							}
HXDLIN( 106)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_24:;
            					}
HXLINE( 107)					if ((this->store->l == 1)) {
HXLINE( 108)						this->lastX = (this->lastX + this->store->s0);
HXLINE( 109)						::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE( 110)						if ((this->store->l > 1)) {
HXLINE( 111)							while((this->store->l > 0)){
HXLINE( 112)								Float _hx_tmp = this->lastX;
HXDLIN( 112)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 112)								 ::Dynamic out = _this->s0;
HXDLIN( 112)								if ((_this->l != 0)) {
HXLINE( 112)									_this->s0 = _this->s1;
HXDLIN( 112)									_this->s1 = _this->s2;
HXDLIN( 112)									_this->s2 = _this->s3;
HXDLIN( 112)									_this->s3 = _this->s4;
HXDLIN( 112)									_this->s4 = _this->s5;
HXDLIN( 112)									_this->s5 = null();
HXDLIN( 112)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 112)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 112)										 ::Dynamic out = _this1->s0;
HXDLIN( 112)										if ((_this1->l != 0)) {
HXLINE( 112)											_this1->s0 = _this1->s1;
HXDLIN( 112)											_this1->s1 = _this1->s2;
HXDLIN( 112)											_this1->s2 = _this1->s3;
HXDLIN( 112)											_this1->s3 = _this1->s4;
HXDLIN( 112)											_this1->s4 = _this1->s5;
HXDLIN( 112)											_this1->s5 = null();
HXDLIN( 112)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 112)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 112)											_this1->l--;
            										}
HXDLIN( 112)										_this->s5 = out;
            									}
HXDLIN( 112)									_this->l--;
            								}
HXDLIN( 112)								this->lastX = (_hx_tmp + out);
HXLINE( 113)								::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)108: {
HXLINE(  82)					{
HXLINE(  82)						{
HXLINE(  82)							 ::justPath::StoreF6 _this = this->store;
HXDLIN(  82)							_this->l = 0;
HXDLIN(  82)							_this->s0 = null();
HXDLIN(  82)							_this->s1 = null();
HXDLIN(  82)							_this->s2 = null();
HXDLIN(  82)							_this->s3 = null();
HXDLIN(  82)							_this->s4 = null();
HXDLIN(  82)							_this->s5 = null();
HXDLIN(  82)							_this->s6 = null();
            						}
HXDLIN(  82)						this->c = this->str.cca(this->pos++);
HXDLIN(  82)						::String temp = HX_("",00,00,00,00);
HXDLIN(  82)						bool exit = false;
HXDLIN(  82)						while(true){
HXLINE(  82)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE(  82)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  82)										if (((this->store->l & 1) == 0)) {
HXLINE(  82)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  82)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  82)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  82)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  82)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  82)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  82)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  82)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  82)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  82)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  82)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  82)													{
HXLINE(  82)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  82)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  82)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  82)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  82)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  82)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  82)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  82)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  82)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  82)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  82)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  82)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  82)											_this->l++;
            										}
            										else {
HXLINE(  82)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  82)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  82)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  82)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  82)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  82)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  82)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  82)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  82)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  82)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  82)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  82)													{
HXLINE(  82)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  82)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  82)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  82)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  82)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  82)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  82)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  82)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  82)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  82)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  82)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  82)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  82)											_this->l++;
            										}
HXDLIN(  82)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE(  82)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  82)										if (((this->store->l & 1) == 0)) {
HXLINE(  82)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  82)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  82)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  82)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  82)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  82)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  82)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  82)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  82)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  82)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  82)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  82)													{
HXLINE(  82)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  82)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  82)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  82)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  82)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  82)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  82)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  82)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  82)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  82)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  82)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  82)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  82)											_this->l++;
            										}
            										else {
HXLINE(  82)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  82)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  82)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  82)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  82)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  82)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  82)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  82)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  82)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  82)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  82)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  82)													{
HXLINE(  82)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  82)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  82)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  82)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  82)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  82)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  82)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  82)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  82)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  82)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  82)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  82)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  82)											_this->l++;
            										}
            									}
HXDLIN(  82)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE(  82)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE(  82)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE(  82)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE(  82)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE(  82)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE(  82)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE(  82)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE(  82)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE(  82)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE(  82)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE(  82)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE(  82)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  82)										if (((this->store->l & 1) == 0)) {
HXLINE(  82)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  82)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  82)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  82)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  82)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  82)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  82)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  82)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  82)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  82)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  82)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  82)													{
HXLINE(  82)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  82)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  82)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  82)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  82)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  82)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  82)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  82)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  82)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  82)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  82)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  82)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  82)											_this->l++;
            										}
            										else {
HXLINE(  82)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  82)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  82)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  82)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  82)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  82)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  82)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  82)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  82)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  82)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  82)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  82)													{
HXLINE(  82)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  82)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  82)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  82)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  82)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  82)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  82)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  82)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  82)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  82)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  82)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  82)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  82)											_this->l++;
            										}
HXDLIN(  82)										temp = HX_("",00,00,00,00);
            									}
HXDLIN(  82)									this->pos--;
HXDLIN(  82)									exit = true;
            								}
            							}
HXDLIN(  82)							if (exit) {
HXLINE(  82)								goto _hx_goto_26;
            							}
HXDLIN(  82)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_26:;
            					}
HXLINE(  83)					if ((this->store->l == 2)) {
HXLINE(  84)						this->lastX = (this->store->s0 + this->lastX);
HXLINE(  85)						this->lastY = (this->store->s1 + this->lastY);
HXLINE(  86)						::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE(  87)						if ((this->store->l > 2)) {
HXLINE(  88)							while((this->store->l > 2)){
HXLINE(  89)								 ::justPath::StoreF6 _this = this->store;
HXDLIN(  89)								 ::Dynamic out = _this->s0;
HXDLIN(  89)								if ((_this->l != 0)) {
HXLINE(  89)									_this->s0 = _this->s1;
HXDLIN(  89)									_this->s1 = _this->s2;
HXDLIN(  89)									_this->s2 = _this->s3;
HXDLIN(  89)									_this->s3 = _this->s4;
HXDLIN(  89)									_this->s4 = _this->s5;
HXDLIN(  89)									_this->s5 = null();
HXDLIN(  89)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  89)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  89)										 ::Dynamic out = _this1->s0;
HXDLIN(  89)										if ((_this1->l != 0)) {
HXLINE(  89)											_this1->s0 = _this1->s1;
HXDLIN(  89)											_this1->s1 = _this1->s2;
HXDLIN(  89)											_this1->s2 = _this1->s3;
HXDLIN(  89)											_this1->s3 = _this1->s4;
HXDLIN(  89)											_this1->s4 = _this1->s5;
HXDLIN(  89)											_this1->s5 = null();
HXDLIN(  89)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  89)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN(  89)											_this1->l--;
            										}
HXDLIN(  89)										_this->s5 = out;
            									}
HXDLIN(  89)									_this->l--;
            								}
HXDLIN(  89)								this->lastX = (out + this->lastX);
HXLINE(  90)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN(  90)								 ::Dynamic out1 = _this1->s0;
HXDLIN(  90)								if ((_this1->l != 0)) {
HXLINE(  90)									_this1->s0 = _this1->s1;
HXDLIN(  90)									_this1->s1 = _this1->s2;
HXDLIN(  90)									_this1->s2 = _this1->s3;
HXDLIN(  90)									_this1->s3 = _this1->s4;
HXDLIN(  90)									_this1->s4 = _this1->s5;
HXDLIN(  90)									_this1->s5 = null();
HXDLIN(  90)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  90)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  90)										 ::Dynamic out = _this->s0;
HXDLIN(  90)										if ((_this->l != 0)) {
HXLINE(  90)											_this->s0 = _this->s1;
HXDLIN(  90)											_this->s1 = _this->s2;
HXDLIN(  90)											_this->s2 = _this->s3;
HXDLIN(  90)											_this->s3 = _this->s4;
HXDLIN(  90)											_this->s4 = _this->s5;
HXDLIN(  90)											_this->s5 = null();
HXDLIN(  90)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  90)												_this->s5 = _this->s6->shift();
            											}
HXDLIN(  90)											_this->l--;
            										}
HXDLIN(  90)										_this1->s5 = out;
            									}
HXDLIN(  90)									_this1->l--;
            								}
HXDLIN(  90)								this->lastY = (out1 + this->lastY);
HXLINE(  91)								::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)109: {
HXLINE(  53)					{
HXLINE(  53)						{
HXLINE(  53)							 ::justPath::StoreF6 _this = this->store;
HXDLIN(  53)							_this->l = 0;
HXDLIN(  53)							_this->s0 = null();
HXDLIN(  53)							_this->s1 = null();
HXDLIN(  53)							_this->s2 = null();
HXDLIN(  53)							_this->s3 = null();
HXDLIN(  53)							_this->s4 = null();
HXDLIN(  53)							_this->s5 = null();
HXDLIN(  53)							_this->s6 = null();
            						}
HXDLIN(  53)						this->c = this->str.cca(this->pos++);
HXDLIN(  53)						::String temp = HX_("",00,00,00,00);
HXDLIN(  53)						bool exit = false;
HXDLIN(  53)						while(true){
HXLINE(  53)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE(  53)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  53)										if (((this->store->l & 1) == 0)) {
HXLINE(  53)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  53)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  53)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  53)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  53)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  53)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  53)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  53)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  53)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  53)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  53)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  53)													{
HXLINE(  53)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  53)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  53)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  53)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  53)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  53)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  53)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  53)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  53)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  53)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  53)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  53)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  53)											_this->l++;
            										}
            										else {
HXLINE(  53)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  53)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  53)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  53)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  53)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  53)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  53)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  53)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  53)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  53)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  53)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  53)													{
HXLINE(  53)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  53)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  53)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  53)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  53)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  53)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  53)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  53)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  53)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  53)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  53)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  53)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  53)											_this->l++;
            										}
HXDLIN(  53)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE(  53)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  53)										if (((this->store->l & 1) == 0)) {
HXLINE(  53)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  53)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  53)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  53)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  53)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  53)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  53)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  53)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  53)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  53)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  53)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  53)													{
HXLINE(  53)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  53)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  53)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  53)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  53)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  53)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  53)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  53)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  53)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  53)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  53)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  53)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  53)											_this->l++;
            										}
            										else {
HXLINE(  53)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  53)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  53)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  53)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  53)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  53)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  53)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  53)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  53)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  53)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  53)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  53)													{
HXLINE(  53)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  53)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  53)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  53)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  53)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  53)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  53)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  53)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  53)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  53)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  53)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  53)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  53)											_this->l++;
            										}
            									}
HXDLIN(  53)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE(  53)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE(  53)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE(  53)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE(  53)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE(  53)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE(  53)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE(  53)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE(  53)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE(  53)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE(  53)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE(  53)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE(  53)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  53)										if (((this->store->l & 1) == 0)) {
HXLINE(  53)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  53)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  53)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  53)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  53)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  53)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  53)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  53)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  53)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  53)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  53)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  53)													{
HXLINE(  53)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  53)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  53)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  53)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  53)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  53)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  53)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  53)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  53)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  53)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  53)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  53)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  53)											_this->l++;
            										}
            										else {
HXLINE(  53)											 ::justPath::StoreF6 _this = this->store;
HXDLIN(  53)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  53)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  53)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  53)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  53)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  53)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  53)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  53)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  53)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  53)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  53)													{
HXLINE(  53)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  53)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  53)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  53)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  53)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  53)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  53)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  53)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  53)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  53)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  53)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  53)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  53)											_this->l++;
            										}
HXDLIN(  53)										temp = HX_("",00,00,00,00);
            									}
HXDLIN(  53)									this->pos--;
HXDLIN(  53)									exit = true;
            								}
            							}
HXDLIN(  53)							if (exit) {
HXLINE(  53)								goto _hx_goto_28;
            							}
HXDLIN(  53)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_28:;
            					}
HXLINE(  54)					if ((this->store->l == 2)) {
HXLINE(  55)						this->lastX = (this->store->s0 + this->lastX);
HXLINE(  56)						this->lastY = (this->store->s1 + this->lastY);
HXLINE(  57)						::justPath::IPathContext_obj::moveTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE(  58)						if ((this->store->l > 2)) {
HXLINE(  59)							 ::justPath::StoreF6 _this = this->store;
HXDLIN(  59)							 ::Dynamic out = _this->s0;
HXDLIN(  59)							if ((_this->l != 0)) {
HXLINE(  59)								_this->s0 = _this->s1;
HXDLIN(  59)								_this->s1 = _this->s2;
HXDLIN(  59)								_this->s2 = _this->s3;
HXDLIN(  59)								_this->s3 = _this->s4;
HXDLIN(  59)								_this->s4 = _this->s5;
HXDLIN(  59)								_this->s5 = null();
HXDLIN(  59)								if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  59)									 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  59)									 ::Dynamic out = _this1->s0;
HXDLIN(  59)									if ((_this1->l != 0)) {
HXLINE(  59)										_this1->s0 = _this1->s1;
HXDLIN(  59)										_this1->s1 = _this1->s2;
HXDLIN(  59)										_this1->s2 = _this1->s3;
HXDLIN(  59)										_this1->s3 = _this1->s4;
HXDLIN(  59)										_this1->s4 = _this1->s5;
HXDLIN(  59)										_this1->s5 = null();
HXDLIN(  59)										if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  59)											_this1->s5 = _this1->s6->shift();
            										}
HXDLIN(  59)										_this1->l--;
            									}
HXDLIN(  59)									_this->s5 = out;
            								}
HXDLIN(  59)								_this->l--;
            							}
HXDLIN(  59)							this->lastX = (out + this->lastX);
HXLINE(  60)							 ::justPath::StoreF6 _this1 = this->store;
HXDLIN(  60)							 ::Dynamic out1 = _this1->s0;
HXDLIN(  60)							if ((_this1->l != 0)) {
HXLINE(  60)								_this1->s0 = _this1->s1;
HXDLIN(  60)								_this1->s1 = _this1->s2;
HXDLIN(  60)								_this1->s2 = _this1->s3;
HXDLIN(  60)								_this1->s3 = _this1->s4;
HXDLIN(  60)								_this1->s4 = _this1->s5;
HXDLIN(  60)								_this1->s5 = null();
HXDLIN(  60)								if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  60)									 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  60)									 ::Dynamic out = _this->s0;
HXDLIN(  60)									if ((_this->l != 0)) {
HXLINE(  60)										_this->s0 = _this->s1;
HXDLIN(  60)										_this->s1 = _this->s2;
HXDLIN(  60)										_this->s2 = _this->s3;
HXDLIN(  60)										_this->s3 = _this->s4;
HXDLIN(  60)										_this->s4 = _this->s5;
HXDLIN(  60)										_this->s5 = null();
HXDLIN(  60)										if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  60)											_this->s5 = _this->s6->shift();
            										}
HXDLIN(  60)										_this->l--;
            									}
HXDLIN(  60)									_this1->s5 = out;
            								}
HXDLIN(  60)								_this1->l--;
            							}
HXDLIN(  60)							this->lastY = (out1 + this->lastY);
HXLINE(  61)							::justPath::IPathContext_obj::moveTo(this->pathContext,this->lastX,this->lastY);
HXLINE(  62)							while((this->store->l > 1)){
HXLINE(  63)								 ::justPath::StoreF6 _this = this->store;
HXDLIN(  63)								 ::Dynamic out = _this->s0;
HXDLIN(  63)								if ((_this->l != 0)) {
HXLINE(  63)									_this->s0 = _this->s1;
HXDLIN(  63)									_this->s1 = _this->s2;
HXDLIN(  63)									_this->s2 = _this->s3;
HXDLIN(  63)									_this->s3 = _this->s4;
HXDLIN(  63)									_this->s4 = _this->s5;
HXDLIN(  63)									_this->s5 = null();
HXDLIN(  63)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  63)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  63)										 ::Dynamic out = _this1->s0;
HXDLIN(  63)										if ((_this1->l != 0)) {
HXLINE(  63)											_this1->s0 = _this1->s1;
HXDLIN(  63)											_this1->s1 = _this1->s2;
HXDLIN(  63)											_this1->s2 = _this1->s3;
HXDLIN(  63)											_this1->s3 = _this1->s4;
HXDLIN(  63)											_this1->s4 = _this1->s5;
HXDLIN(  63)											_this1->s5 = null();
HXDLIN(  63)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  63)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN(  63)											_this1->l--;
            										}
HXDLIN(  63)										_this->s5 = out;
            									}
HXDLIN(  63)									_this->l--;
            								}
HXDLIN(  63)								this->lastX = (out + this->lastX);
HXLINE(  64)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN(  64)								 ::Dynamic out1 = _this1->s0;
HXDLIN(  64)								if ((_this1->l != 0)) {
HXLINE(  64)									_this1->s0 = _this1->s1;
HXDLIN(  64)									_this1->s1 = _this1->s2;
HXDLIN(  64)									_this1->s2 = _this1->s3;
HXDLIN(  64)									_this1->s3 = _this1->s4;
HXDLIN(  64)									_this1->s4 = _this1->s5;
HXDLIN(  64)									_this1->s5 = null();
HXDLIN(  64)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  64)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  64)										 ::Dynamic out = _this->s0;
HXDLIN(  64)										if ((_this->l != 0)) {
HXLINE(  64)											_this->s0 = _this->s1;
HXDLIN(  64)											_this->s1 = _this->s2;
HXDLIN(  64)											_this->s2 = _this->s3;
HXDLIN(  64)											_this->s3 = _this->s4;
HXDLIN(  64)											_this->s4 = _this->s5;
HXDLIN(  64)											_this->s5 = null();
HXDLIN(  64)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  64)												_this->s5 = _this->s6->shift();
            											}
HXDLIN(  64)											_this->l--;
            										}
HXDLIN(  64)										_this1->s5 = out;
            									}
HXDLIN(  64)									_this1->l--;
            								}
HXDLIN(  64)								this->lastY = (out1 + this->lastY);
HXLINE(  65)								::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)113: {
HXLINE( 255)					{
HXLINE( 255)						{
HXLINE( 255)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 255)							_this->l = 0;
HXDLIN( 255)							_this->s0 = null();
HXDLIN( 255)							_this->s1 = null();
HXDLIN( 255)							_this->s2 = null();
HXDLIN( 255)							_this->s3 = null();
HXDLIN( 255)							_this->s4 = null();
HXDLIN( 255)							_this->s5 = null();
HXDLIN( 255)							_this->s6 = null();
            						}
HXDLIN( 255)						this->c = this->str.cca(this->pos++);
HXDLIN( 255)						::String temp = HX_("",00,00,00,00);
HXDLIN( 255)						bool exit = false;
HXDLIN( 255)						while(true){
HXLINE( 255)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 255)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 255)										if (((this->store->l & 1) == 0)) {
HXLINE( 255)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 255)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 255)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 255)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 255)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 255)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 255)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 255)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 255)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 255)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 255)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 255)													{
HXLINE( 255)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 255)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 255)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 255)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 255)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 255)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 255)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 255)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 255)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 255)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 255)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 255)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 255)											_this->l++;
            										}
            										else {
HXLINE( 255)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 255)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 255)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 255)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 255)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 255)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 255)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 255)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 255)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 255)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 255)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 255)													{
HXLINE( 255)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 255)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 255)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 255)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 255)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 255)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 255)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 255)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 255)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 255)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 255)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 255)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 255)											_this->l++;
            										}
HXDLIN( 255)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 255)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 255)										if (((this->store->l & 1) == 0)) {
HXLINE( 255)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 255)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 255)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 255)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 255)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 255)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 255)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 255)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 255)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 255)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 255)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 255)													{
HXLINE( 255)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 255)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 255)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 255)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 255)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 255)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 255)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 255)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 255)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 255)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 255)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 255)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 255)											_this->l++;
            										}
            										else {
HXLINE( 255)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 255)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 255)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 255)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 255)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 255)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 255)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 255)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 255)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 255)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 255)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 255)													{
HXLINE( 255)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 255)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 255)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 255)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 255)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 255)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 255)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 255)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 255)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 255)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 255)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 255)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 255)											_this->l++;
            										}
            									}
HXDLIN( 255)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 255)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 255)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 255)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 255)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 255)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 255)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 255)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 255)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 255)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 255)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 255)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 255)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 255)										if (((this->store->l & 1) == 0)) {
HXLINE( 255)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 255)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 255)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 255)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 255)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 255)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 255)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 255)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 255)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 255)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 255)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 255)													{
HXLINE( 255)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 255)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 255)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 255)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 255)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 255)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 255)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 255)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 255)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 255)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 255)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 255)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 255)											_this->l++;
            										}
            										else {
HXLINE( 255)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 255)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 255)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 255)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 255)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 255)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 255)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 255)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 255)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 255)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 255)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 255)													{
HXLINE( 255)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 255)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 255)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 255)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 255)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 255)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 255)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 255)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 255)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 255)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 255)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 255)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 255)											_this->l++;
            										}
HXDLIN( 255)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 255)									this->pos--;
HXDLIN( 255)									exit = true;
            								}
            							}
HXDLIN( 255)							if (exit) {
HXLINE( 255)								goto _hx_goto_30;
            							}
HXDLIN( 255)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_30:;
            					}
HXLINE( 256)					if ((this->store->l == 4)) {
HXLINE( 257)						this->controlX = (this->lastX + this->store->s0);
HXLINE( 258)						this->controlY = (this->lastY + this->store->s1);
HXLINE( 259)						this->lastX = (this->store->s0 + this->lastX);
HXLINE( 260)						this->lastY = (this->store->s1 + this->lastY);
HXLINE( 261)						::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
            					}
            					else {
HXLINE( 262)						if ((this->store->l > 4)) {
HXLINE( 263)							while((this->store->l > 3)){
HXLINE( 264)								Float _hx_tmp = this->lastX;
HXDLIN( 264)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 264)								 ::Dynamic out = _this->s0;
HXDLIN( 264)								if ((_this->l != 0)) {
HXLINE( 264)									_this->s0 = _this->s1;
HXDLIN( 264)									_this->s1 = _this->s2;
HXDLIN( 264)									_this->s2 = _this->s3;
HXDLIN( 264)									_this->s3 = _this->s4;
HXDLIN( 264)									_this->s4 = _this->s5;
HXDLIN( 264)									_this->s5 = null();
HXDLIN( 264)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 264)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 264)										 ::Dynamic out = _this1->s0;
HXDLIN( 264)										if ((_this1->l != 0)) {
HXLINE( 264)											_this1->s0 = _this1->s1;
HXDLIN( 264)											_this1->s1 = _this1->s2;
HXDLIN( 264)											_this1->s2 = _this1->s3;
HXDLIN( 264)											_this1->s3 = _this1->s4;
HXDLIN( 264)											_this1->s4 = _this1->s5;
HXDLIN( 264)											_this1->s5 = null();
HXDLIN( 264)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 264)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 264)											_this1->l--;
            										}
HXDLIN( 264)										_this->s5 = out;
            									}
HXDLIN( 264)									_this->l--;
            								}
HXDLIN( 264)								this->controlX = (_hx_tmp + out);
HXLINE( 265)								Float _hx_tmp1 = this->lastY;
HXDLIN( 265)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 265)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 265)								if ((_this1->l != 0)) {
HXLINE( 265)									_this1->s0 = _this1->s1;
HXDLIN( 265)									_this1->s1 = _this1->s2;
HXDLIN( 265)									_this1->s2 = _this1->s3;
HXDLIN( 265)									_this1->s3 = _this1->s4;
HXDLIN( 265)									_this1->s4 = _this1->s5;
HXDLIN( 265)									_this1->s5 = null();
HXDLIN( 265)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 265)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 265)										 ::Dynamic out = _this->s0;
HXDLIN( 265)										if ((_this->l != 0)) {
HXLINE( 265)											_this->s0 = _this->s1;
HXDLIN( 265)											_this->s1 = _this->s2;
HXDLIN( 265)											_this->s2 = _this->s3;
HXDLIN( 265)											_this->s3 = _this->s4;
HXDLIN( 265)											_this->s4 = _this->s5;
HXDLIN( 265)											_this->s5 = null();
HXDLIN( 265)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 265)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 265)											_this->l--;
            										}
HXDLIN( 265)										_this1->s5 = out;
            									}
HXDLIN( 265)									_this1->l--;
            								}
HXDLIN( 265)								this->controlY = (_hx_tmp1 + out1);
HXLINE( 266)								 ::justPath::StoreF6 _this2 = this->store;
HXDLIN( 266)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 266)								if ((_this2->l != 0)) {
HXLINE( 266)									_this2->s0 = _this2->s1;
HXDLIN( 266)									_this2->s1 = _this2->s2;
HXDLIN( 266)									_this2->s2 = _this2->s3;
HXDLIN( 266)									_this2->s3 = _this2->s4;
HXDLIN( 266)									_this2->s4 = _this2->s5;
HXDLIN( 266)									_this2->s5 = null();
HXDLIN( 266)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 266)										 ::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 266)										 ::Dynamic out = _this->s0;
HXDLIN( 266)										if ((_this->l != 0)) {
HXLINE( 266)											_this->s0 = _this->s1;
HXDLIN( 266)											_this->s1 = _this->s2;
HXDLIN( 266)											_this->s2 = _this->s3;
HXDLIN( 266)											_this->s3 = _this->s4;
HXDLIN( 266)											_this->s4 = _this->s5;
HXDLIN( 266)											_this->s5 = null();
HXDLIN( 266)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 266)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 266)											_this->l--;
            										}
HXDLIN( 266)										_this2->s5 = out;
            									}
HXDLIN( 266)									_this2->l--;
            								}
HXDLIN( 266)								this->lastX = (out2 + this->lastX);
HXLINE( 267)								 ::justPath::StoreF6 _this3 = this->store;
HXDLIN( 267)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 267)								if ((_this3->l != 0)) {
HXLINE( 267)									_this3->s0 = _this3->s1;
HXDLIN( 267)									_this3->s1 = _this3->s2;
HXDLIN( 267)									_this3->s2 = _this3->s3;
HXDLIN( 267)									_this3->s3 = _this3->s4;
HXDLIN( 267)									_this3->s4 = _this3->s5;
HXDLIN( 267)									_this3->s5 = null();
HXDLIN( 267)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 267)										 ::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 267)										 ::Dynamic out = _this->s0;
HXDLIN( 267)										if ((_this->l != 0)) {
HXLINE( 267)											_this->s0 = _this->s1;
HXDLIN( 267)											_this->s1 = _this->s2;
HXDLIN( 267)											_this->s2 = _this->s3;
HXDLIN( 267)											_this->s3 = _this->s4;
HXDLIN( 267)											_this->s4 = _this->s5;
HXDLIN( 267)											_this->s5 = null();
HXDLIN( 267)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 267)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 267)											_this->l--;
            										}
HXDLIN( 267)										_this3->s5 = out;
            									}
HXDLIN( 267)									_this3->l--;
            								}
HXDLIN( 267)								this->lastY = (out3 + this->lastY);
HXLINE( 268)								::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)115: {
HXLINE( 211)					{
HXLINE( 211)						{
HXLINE( 211)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 211)							_this->l = 0;
HXDLIN( 211)							_this->s0 = null();
HXDLIN( 211)							_this->s1 = null();
HXDLIN( 211)							_this->s2 = null();
HXDLIN( 211)							_this->s3 = null();
HXDLIN( 211)							_this->s4 = null();
HXDLIN( 211)							_this->s5 = null();
HXDLIN( 211)							_this->s6 = null();
            						}
HXDLIN( 211)						this->c = this->str.cca(this->pos++);
HXDLIN( 211)						::String temp = HX_("",00,00,00,00);
HXDLIN( 211)						bool exit = false;
HXDLIN( 211)						while(true){
HXLINE( 211)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 211)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 211)										if (((this->store->l & 1) == 0)) {
HXLINE( 211)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 211)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 211)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 211)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 211)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 211)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 211)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 211)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 211)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 211)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 211)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 211)													{
HXLINE( 211)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 211)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 211)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 211)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 211)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 211)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 211)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 211)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 211)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 211)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 211)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 211)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 211)											_this->l++;
            										}
            										else {
HXLINE( 211)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 211)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 211)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 211)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 211)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 211)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 211)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 211)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 211)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 211)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 211)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 211)													{
HXLINE( 211)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 211)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 211)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 211)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 211)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 211)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 211)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 211)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 211)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 211)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 211)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 211)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 211)											_this->l++;
            										}
HXDLIN( 211)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 211)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 211)										if (((this->store->l & 1) == 0)) {
HXLINE( 211)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 211)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 211)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 211)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 211)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 211)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 211)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 211)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 211)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 211)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 211)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 211)													{
HXLINE( 211)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 211)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 211)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 211)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 211)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 211)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 211)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 211)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 211)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 211)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 211)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 211)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 211)											_this->l++;
            										}
            										else {
HXLINE( 211)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 211)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 211)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 211)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 211)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 211)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 211)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 211)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 211)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 211)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 211)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 211)													{
HXLINE( 211)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 211)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 211)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 211)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 211)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 211)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 211)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 211)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 211)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 211)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 211)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 211)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 211)											_this->l++;
            										}
            									}
HXDLIN( 211)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 211)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 211)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 211)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 211)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 211)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 211)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 211)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 211)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 211)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 211)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 211)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 211)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 211)										if (((this->store->l & 1) == 0)) {
HXLINE( 211)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 211)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 211)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 211)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 211)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 211)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 211)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 211)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 211)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 211)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 211)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 211)													{
HXLINE( 211)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 211)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 211)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 211)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 211)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 211)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 211)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 211)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 211)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 211)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 211)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 211)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 211)											_this->l++;
            										}
            										else {
HXLINE( 211)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 211)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 211)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 211)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 211)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 211)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 211)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 211)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 211)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 211)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 211)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 211)													{
HXLINE( 211)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 211)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 211)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 211)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 211)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 211)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 211)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 211)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 211)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 211)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 211)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 211)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 211)											_this->l++;
            										}
HXDLIN( 211)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 211)									this->pos--;
HXDLIN( 211)									exit = true;
            								}
            							}
HXDLIN( 211)							if (exit) {
HXLINE( 211)								goto _hx_goto_32;
            							}
HXDLIN( 211)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_32:;
            					}
HXLINE( 213)					if ((this->store->l == 4)) {
HXLINE( 214)						Float firstX = (this->store->s0 + this->lastX);
HXLINE( 215)						Float firstY = (this->store->s1 + this->lastY);
HXLINE( 216)						this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 217)						this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 218)						this->lastX = (this->store->s2 + this->lastX);
HXLINE( 219)						this->lastY = (this->store->s3 + this->lastY);
HXLINE( 220)						::justPath::IPathContext_obj::curveTo(this->pathContext,this->controlX,this->controlY,firstX,firstY,this->lastX,this->lastY);
HXLINE( 221)						this->controlX = firstX;
HXLINE( 222)						this->controlY = firstY;
            					}
            					else {
HXLINE( 223)						if ((this->store->l > 4)) {
HXLINE( 224)							while((this->store->l > 3)){
HXLINE( 225)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 225)								 ::Dynamic out = _this->s0;
HXDLIN( 225)								if ((_this->l != 0)) {
HXLINE( 225)									_this->s0 = _this->s1;
HXDLIN( 225)									_this->s1 = _this->s2;
HXDLIN( 225)									_this->s2 = _this->s3;
HXDLIN( 225)									_this->s3 = _this->s4;
HXDLIN( 225)									_this->s4 = _this->s5;
HXDLIN( 225)									_this->s5 = null();
HXDLIN( 225)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 225)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 225)										 ::Dynamic out = _this1->s0;
HXDLIN( 225)										if ((_this1->l != 0)) {
HXLINE( 225)											_this1->s0 = _this1->s1;
HXDLIN( 225)											_this1->s1 = _this1->s2;
HXDLIN( 225)											_this1->s2 = _this1->s3;
HXDLIN( 225)											_this1->s3 = _this1->s4;
HXDLIN( 225)											_this1->s4 = _this1->s5;
HXDLIN( 225)											_this1->s5 = null();
HXDLIN( 225)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 225)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 225)											_this1->l--;
            										}
HXDLIN( 225)										_this->s5 = out;
            									}
HXDLIN( 225)									_this->l--;
            								}
HXDLIN( 225)								Float firstX = (out + this->lastX);
HXLINE( 226)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 226)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 226)								if ((_this1->l != 0)) {
HXLINE( 226)									_this1->s0 = _this1->s1;
HXDLIN( 226)									_this1->s1 = _this1->s2;
HXDLIN( 226)									_this1->s2 = _this1->s3;
HXDLIN( 226)									_this1->s3 = _this1->s4;
HXDLIN( 226)									_this1->s4 = _this1->s5;
HXDLIN( 226)									_this1->s5 = null();
HXDLIN( 226)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 226)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 226)										 ::Dynamic out = _this->s0;
HXDLIN( 226)										if ((_this->l != 0)) {
HXLINE( 226)											_this->s0 = _this->s1;
HXDLIN( 226)											_this->s1 = _this->s2;
HXDLIN( 226)											_this->s2 = _this->s3;
HXDLIN( 226)											_this->s3 = _this->s4;
HXDLIN( 226)											_this->s4 = _this->s5;
HXDLIN( 226)											_this->s5 = null();
HXDLIN( 226)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 226)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 226)											_this->l--;
            										}
HXDLIN( 226)										_this1->s5 = out;
            									}
HXDLIN( 226)									_this1->l--;
            								}
HXDLIN( 226)								Float firstY = (out1 + this->lastY);
HXLINE( 227)								this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 228)								this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 229)								 ::justPath::StoreF6 _this2 = this->store;
HXDLIN( 229)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 229)								if ((_this2->l != 0)) {
HXLINE( 229)									_this2->s0 = _this2->s1;
HXDLIN( 229)									_this2->s1 = _this2->s2;
HXDLIN( 229)									_this2->s2 = _this2->s3;
HXDLIN( 229)									_this2->s3 = _this2->s4;
HXDLIN( 229)									_this2->s4 = _this2->s5;
HXDLIN( 229)									_this2->s5 = null();
HXDLIN( 229)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 229)										 ::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 229)										 ::Dynamic out = _this->s0;
HXDLIN( 229)										if ((_this->l != 0)) {
HXLINE( 229)											_this->s0 = _this->s1;
HXDLIN( 229)											_this->s1 = _this->s2;
HXDLIN( 229)											_this->s2 = _this->s3;
HXDLIN( 229)											_this->s3 = _this->s4;
HXDLIN( 229)											_this->s4 = _this->s5;
HXDLIN( 229)											_this->s5 = null();
HXDLIN( 229)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 229)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 229)											_this->l--;
            										}
HXDLIN( 229)										_this2->s5 = out;
            									}
HXDLIN( 229)									_this2->l--;
            								}
HXDLIN( 229)								this->lastX = (out2 + this->lastX);
HXLINE( 230)								 ::justPath::StoreF6 _this3 = this->store;
HXDLIN( 230)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 230)								if ((_this3->l != 0)) {
HXLINE( 230)									_this3->s0 = _this3->s1;
HXDLIN( 230)									_this3->s1 = _this3->s2;
HXDLIN( 230)									_this3->s2 = _this3->s3;
HXDLIN( 230)									_this3->s3 = _this3->s4;
HXDLIN( 230)									_this3->s4 = _this3->s5;
HXDLIN( 230)									_this3->s5 = null();
HXDLIN( 230)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 230)										 ::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 230)										 ::Dynamic out = _this->s0;
HXDLIN( 230)										if ((_this->l != 0)) {
HXLINE( 230)											_this->s0 = _this->s1;
HXDLIN( 230)											_this->s1 = _this->s2;
HXDLIN( 230)											_this->s2 = _this->s3;
HXDLIN( 230)											_this->s3 = _this->s4;
HXDLIN( 230)											_this->s4 = _this->s5;
HXDLIN( 230)											_this->s5 = null();
HXDLIN( 230)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 230)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 230)											_this->l--;
            										}
HXDLIN( 230)										_this3->s5 = out;
            									}
HXDLIN( 230)									_this3->l--;
            								}
HXDLIN( 230)								this->lastY = (out3 + this->lastY);
HXLINE( 231)								::justPath::IPathContext_obj::curveTo(this->pathContext,this->controlX,this->controlY,firstX,firstY,this->lastX,this->lastY);
HXLINE( 232)								this->controlX = firstX;
HXLINE( 233)								this->controlY = firstY;
            							}
            						}
            					}
            				}
            				break;
            				case (int)116: {
HXLINE( 292)					{
HXLINE( 292)						{
HXLINE( 292)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 292)							_this->l = 0;
HXDLIN( 292)							_this->s0 = null();
HXDLIN( 292)							_this->s1 = null();
HXDLIN( 292)							_this->s2 = null();
HXDLIN( 292)							_this->s3 = null();
HXDLIN( 292)							_this->s4 = null();
HXDLIN( 292)							_this->s5 = null();
HXDLIN( 292)							_this->s6 = null();
            						}
HXDLIN( 292)						this->c = this->str.cca(this->pos++);
HXDLIN( 292)						::String temp = HX_("",00,00,00,00);
HXDLIN( 292)						bool exit = false;
HXDLIN( 292)						while(true){
HXLINE( 292)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 292)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 292)										if (((this->store->l & 1) == 0)) {
HXLINE( 292)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 292)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 292)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 292)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 292)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 292)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 292)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 292)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 292)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 292)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 292)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 292)													{
HXLINE( 292)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 292)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 292)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 292)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 292)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 292)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 292)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 292)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 292)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 292)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 292)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 292)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 292)											_this->l++;
            										}
            										else {
HXLINE( 292)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 292)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 292)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 292)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 292)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 292)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 292)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 292)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 292)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 292)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 292)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 292)													{
HXLINE( 292)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 292)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 292)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 292)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 292)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 292)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 292)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 292)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 292)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 292)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 292)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 292)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 292)											_this->l++;
            										}
HXDLIN( 292)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 292)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 292)										if (((this->store->l & 1) == 0)) {
HXLINE( 292)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 292)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 292)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 292)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 292)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 292)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 292)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 292)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 292)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 292)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 292)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 292)													{
HXLINE( 292)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 292)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 292)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 292)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 292)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 292)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 292)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 292)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 292)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 292)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 292)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 292)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 292)											_this->l++;
            										}
            										else {
HXLINE( 292)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 292)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 292)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 292)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 292)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 292)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 292)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 292)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 292)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 292)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 292)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 292)													{
HXLINE( 292)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 292)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 292)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 292)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 292)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 292)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 292)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 292)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 292)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 292)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 292)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 292)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 292)											_this->l++;
            										}
            									}
HXDLIN( 292)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 292)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 292)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 292)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 292)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 292)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 292)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 292)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 292)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 292)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 292)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 292)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 292)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 292)										if (((this->store->l & 1) == 0)) {
HXLINE( 292)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 292)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 292)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 292)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 292)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 292)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 292)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 292)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 292)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 292)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 292)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 292)													{
HXLINE( 292)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 292)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 292)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 292)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 292)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 292)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 292)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 292)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 292)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 292)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 292)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 292)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 292)											_this->l++;
            										}
            										else {
HXLINE( 292)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 292)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 292)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 292)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 292)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 292)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 292)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 292)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 292)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 292)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 292)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 292)													{
HXLINE( 292)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 292)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 292)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 292)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 292)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 292)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 292)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 292)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 292)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 292)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 292)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 292)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 292)											_this->l++;
            										}
HXDLIN( 292)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 292)									this->pos--;
HXDLIN( 292)									exit = true;
            								}
            							}
HXDLIN( 292)							if (exit) {
HXLINE( 292)								goto _hx_goto_34;
            							}
HXDLIN( 292)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_34:;
            					}
HXLINE( 294)					if ((this->store->l == 2)) {
HXLINE( 295)						this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 296)						this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 297)						this->lastX = (this->store->s0 + this->lastY);
HXLINE( 298)						this->lastY = (this->store->s1 + this->lastX);
HXLINE( 299)						::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
            					}
            					else {
HXLINE( 300)						if ((this->store->l > 2)) {
HXLINE( 301)							while((this->store->l > 1)){
HXLINE( 302)								this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 303)								this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 304)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 304)								 ::Dynamic out = _this->s0;
HXDLIN( 304)								if ((_this->l != 0)) {
HXLINE( 304)									_this->s0 = _this->s1;
HXDLIN( 304)									_this->s1 = _this->s2;
HXDLIN( 304)									_this->s2 = _this->s3;
HXDLIN( 304)									_this->s3 = _this->s4;
HXDLIN( 304)									_this->s4 = _this->s5;
HXDLIN( 304)									_this->s5 = null();
HXDLIN( 304)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 304)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 304)										 ::Dynamic out = _this1->s0;
HXDLIN( 304)										if ((_this1->l != 0)) {
HXLINE( 304)											_this1->s0 = _this1->s1;
HXDLIN( 304)											_this1->s1 = _this1->s2;
HXDLIN( 304)											_this1->s2 = _this1->s3;
HXDLIN( 304)											_this1->s3 = _this1->s4;
HXDLIN( 304)											_this1->s4 = _this1->s5;
HXDLIN( 304)											_this1->s5 = null();
HXDLIN( 304)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 304)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 304)											_this1->l--;
            										}
HXDLIN( 304)										_this->s5 = out;
            									}
HXDLIN( 304)									_this->l--;
            								}
HXDLIN( 304)								this->lastX = (out + this->lastY);
HXLINE( 305)								 ::justPath::StoreF6 _this1 = this->store;
HXDLIN( 305)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 305)								if ((_this1->l != 0)) {
HXLINE( 305)									_this1->s0 = _this1->s1;
HXDLIN( 305)									_this1->s1 = _this1->s2;
HXDLIN( 305)									_this1->s2 = _this1->s3;
HXDLIN( 305)									_this1->s3 = _this1->s4;
HXDLIN( 305)									_this1->s4 = _this1->s5;
HXDLIN( 305)									_this1->s5 = null();
HXDLIN( 305)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 305)										 ::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 305)										 ::Dynamic out = _this->s0;
HXDLIN( 305)										if ((_this->l != 0)) {
HXLINE( 305)											_this->s0 = _this->s1;
HXDLIN( 305)											_this->s1 = _this->s2;
HXDLIN( 305)											_this->s2 = _this->s3;
HXDLIN( 305)											_this->s3 = _this->s4;
HXDLIN( 305)											_this->s4 = _this->s5;
HXDLIN( 305)											_this->s5 = null();
HXDLIN( 305)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 305)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 305)											_this->l--;
            										}
HXDLIN( 305)										_this1->s5 = out;
            									}
HXDLIN( 305)									_this1->l--;
            								}
HXDLIN( 305)								this->lastY = (out1 + this->lastX);
HXLINE( 306)								::justPath::IPathContext_obj::quadTo(this->pathContext,this->controlX,this->controlY,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)118: {
HXLINE( 128)					{
HXLINE( 128)						 ::Dynamic process = false;
HXDLIN( 128)						if (::hx::IsNull( process )) {
HXLINE( 128)							process = true;
            						}
HXDLIN( 128)						{
HXLINE( 128)							 ::justPath::StoreF6 _this = this->store;
HXDLIN( 128)							_this->l = 0;
HXDLIN( 128)							_this->s0 = null();
HXDLIN( 128)							_this->s1 = null();
HXDLIN( 128)							_this->s2 = null();
HXDLIN( 128)							_this->s3 = null();
HXDLIN( 128)							_this->s4 = null();
HXDLIN( 128)							_this->s5 = null();
HXDLIN( 128)							_this->s6 = null();
            						}
HXDLIN( 128)						this->c = this->str.cca(this->pos++);
HXDLIN( 128)						::String temp = HX_("",00,00,00,00);
HXDLIN( 128)						bool exit = false;
HXDLIN( 128)						while(true){
HXLINE( 128)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 128)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 128)										if (( (bool)(process) )) {
HXLINE( 128)											if (((this->store->l & 1) == 0)) {
HXLINE( 128)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 128)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 128)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 128)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 128)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 128)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 128)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 128)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 128)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 128)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 128)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 128)														{
HXLINE( 128)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 128)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 128)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 128)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 128)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 128)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 128)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 128)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 128)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 128)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 128)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 128)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 128)												_this->l++;
            											}
            											else {
HXLINE( 128)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 128)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 128)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 128)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 128)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 128)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 128)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 128)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 128)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 128)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 128)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 128)														{
HXLINE( 128)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 128)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 128)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 128)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 128)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 128)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 128)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 128)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 128)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 128)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 128)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 128)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 128)												_this->l++;
            											}
            										}
            										else {
HXLINE( 128)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 128)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 128)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 128)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 128)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 128)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 128)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 128)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 128)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 128)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 128)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 128)													{
HXLINE( 128)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 128)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 128)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 128)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 128)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 128)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 128)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 128)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 128)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 128)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 128)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 128)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 128)											_this->l++;
            										}
HXDLIN( 128)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 128)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 128)										if (( (bool)(process) )) {
HXLINE( 128)											if (((this->store->l & 1) == 0)) {
HXLINE( 128)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 128)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 128)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 128)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 128)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 128)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 128)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 128)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 128)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 128)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 128)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 128)														{
HXLINE( 128)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 128)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 128)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 128)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 128)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 128)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 128)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 128)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 128)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 128)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 128)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 128)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 128)												_this->l++;
            											}
            											else {
HXLINE( 128)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 128)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 128)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 128)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 128)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 128)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 128)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 128)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 128)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 128)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 128)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 128)														{
HXLINE( 128)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 128)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 128)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 128)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 128)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 128)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 128)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 128)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 128)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 128)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 128)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 128)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 128)												_this->l++;
            											}
            										}
            										else {
HXLINE( 128)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 128)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 128)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 128)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 128)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 128)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 128)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 128)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 128)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 128)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 128)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 128)													{
HXLINE( 128)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 128)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 128)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 128)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 128)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 128)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 128)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 128)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 128)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 128)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 128)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 128)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 128)											_this->l++;
            										}
            									}
HXDLIN( 128)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 128)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 128)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 128)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 128)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 128)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 128)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 128)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 128)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 128)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 128)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 128)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 128)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 128)										if (( (bool)(process) )) {
HXLINE( 128)											if (((this->store->l & 1) == 0)) {
HXLINE( 128)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 128)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 128)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 128)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 128)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 128)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 128)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 128)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 128)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 128)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 128)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 128)														{
HXLINE( 128)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 128)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 128)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 128)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 128)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 128)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 128)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 128)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 128)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 128)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 128)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 128)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 128)												_this->l++;
            											}
            											else {
HXLINE( 128)												 ::justPath::StoreF6 _this = this->store;
HXDLIN( 128)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 128)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 128)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 128)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 128)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 128)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 128)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 128)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 128)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 128)															_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 128)														{
HXLINE( 128)															 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 128)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 128)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 128)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 128)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 128)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 128)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 128)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 128)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 128)																		_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 128)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 128)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 128)												_this->l++;
            											}
            										}
            										else {
HXLINE( 128)											 ::justPath::StoreF6 _this = this->store;
HXDLIN( 128)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 128)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 128)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 128)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 128)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 128)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 128)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 128)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 128)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 128)														_this->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 128)													{
HXLINE( 128)														 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 128)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 128)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 128)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 128)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 128)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 128)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 128)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 128)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 128)																	_this1->s6 =  ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 128)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 128)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 128)											_this->l++;
            										}
HXDLIN( 128)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 128)									this->pos--;
HXDLIN( 128)									exit = true;
            								}
            							}
HXDLIN( 128)							if (exit) {
HXLINE( 128)								goto _hx_goto_36;
            							}
HXDLIN( 128)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_36:;
            					}
HXLINE( 129)					if ((this->store->l == 1)) {
HXLINE( 130)						this->lastY = (this->lastY + this->store->s0);
HXLINE( 131)						::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE( 132)						if ((this->store->l > 1)) {
HXLINE( 133)							while((this->store->l > 0)){
HXLINE( 134)								Float _hx_tmp = this->lastY;
HXDLIN( 134)								 ::justPath::StoreF6 _this = this->store;
HXDLIN( 134)								 ::Dynamic out = _this->s0;
HXDLIN( 134)								if ((_this->l != 0)) {
HXLINE( 134)									_this->s0 = _this->s1;
HXDLIN( 134)									_this->s1 = _this->s2;
HXDLIN( 134)									_this->s2 = _this->s3;
HXDLIN( 134)									_this->s3 = _this->s4;
HXDLIN( 134)									_this->s4 = _this->s5;
HXDLIN( 134)									_this->s5 = null();
HXDLIN( 134)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 134)										 ::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 134)										 ::Dynamic out = _this1->s0;
HXDLIN( 134)										if ((_this1->l != 0)) {
HXLINE( 134)											_this1->s0 = _this1->s1;
HXDLIN( 134)											_this1->s1 = _this1->s2;
HXDLIN( 134)											_this1->s2 = _this1->s3;
HXDLIN( 134)											_this1->s3 = _this1->s4;
HXDLIN( 134)											_this1->s4 = _this1->s5;
HXDLIN( 134)											_this1->s5 = null();
HXDLIN( 134)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 134)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 134)											_this1->l--;
            										}
HXDLIN( 134)										_this->s5 = out;
            									}
HXDLIN( 134)									_this->l--;
            								}
HXDLIN( 134)								this->lastY = (_hx_tmp + out);
HXLINE( 135)								::justPath::IPathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				default:{
HXLINE( 380)					count = (count + 1);
            				}
            			}
HXLINE( 382)			this->c = this->str.cca(this->pos++);
            		}
HXLINE( 384)		return str_;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SvgPath_obj,parse,return )


::hx::ObjectPtr< SvgPath_obj > SvgPath_obj::__new(::Dynamic pathContext_) {
	::hx::ObjectPtr< SvgPath_obj > __this = new SvgPath_obj();
	__this->__construct(pathContext_);
	return __this;
}

::hx::ObjectPtr< SvgPath_obj > SvgPath_obj::__alloc(::hx::Ctx *_hx_ctx,::Dynamic pathContext_) {
	SvgPath_obj *__this = (SvgPath_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SvgPath_obj), true, "justPath.SvgPath"));
	*(void **)__this = SvgPath_obj::_hx_vtable;
	__this->__construct(pathContext_);
	return __this;
}

SvgPath_obj::SvgPath_obj()
{
}

void SvgPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SvgPath);
	HX_MARK_MEMBER_NAME(str,"str");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(lastX,"lastX");
	HX_MARK_MEMBER_NAME(lastY,"lastY");
	HX_MARK_MEMBER_NAME(controlX,"controlX");
	HX_MARK_MEMBER_NAME(controlY,"controlY");
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_MEMBER_NAME(l,"l");
	HX_MARK_MEMBER_NAME(pathContext,"pathContext");
	HX_MARK_MEMBER_NAME(store,"store");
	HX_MARK_END_CLASS();
}

void SvgPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(str,"str");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(lastX,"lastX");
	HX_VISIT_MEMBER_NAME(lastY,"lastY");
	HX_VISIT_MEMBER_NAME(controlX,"controlX");
	HX_VISIT_MEMBER_NAME(controlY,"controlY");
	HX_VISIT_MEMBER_NAME(c,"c");
	HX_VISIT_MEMBER_NAME(l,"l");
	HX_VISIT_MEMBER_NAME(pathContext,"pathContext");
	HX_VISIT_MEMBER_NAME(store,"store");
}

::hx::Val SvgPath_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { return ::hx::Val( c ); }
		if (HX_FIELD_EQ(inName,"l") ) { return ::hx::Val( l ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { return ::hx::Val( str ); }
		if (HX_FIELD_EQ(inName,"pos") ) { return ::hx::Val( pos ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastX") ) { return ::hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return ::hx::Val( lastY ); }
		if (HX_FIELD_EQ(inName,"store") ) { return ::hx::Val( store ); }
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controlX") ) { return ::hx::Val( controlX ); }
		if (HX_FIELD_EQ(inName,"controlY") ) { return ::hx::Val( controlY ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pathContext") ) { return ::hx::Val( pathContext ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SvgPath_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l") ) { l=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { str=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"store") ) { store=inValue.Cast<  ::justPath::StoreF6 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controlX") ) { controlX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"controlY") ) { controlY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pathContext") ) { pathContext=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SvgPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("str",b1,a8,57,00));
	outFields->push(HX_("pos",94,5d,55,00));
	outFields->push(HX_("lastX",42,01,bc,6f));
	outFields->push(HX_("lastY",43,01,bc,6f));
	outFields->push(HX_("controlX",5b,86,bc,37));
	outFields->push(HX_("controlY",5c,86,bc,37));
	outFields->push(HX_("c",63,00,00,00));
	outFields->push(HX_("l",6c,00,00,00));
	outFields->push(HX_("pathContext",ca,06,31,f6));
	outFields->push(HX_("store",e1,13,16,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SvgPath_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(SvgPath_obj,str),HX_("str",b1,a8,57,00)},
	{::hx::fsInt,(int)offsetof(SvgPath_obj,pos),HX_("pos",94,5d,55,00)},
	{::hx::fsFloat,(int)offsetof(SvgPath_obj,lastX),HX_("lastX",42,01,bc,6f)},
	{::hx::fsFloat,(int)offsetof(SvgPath_obj,lastY),HX_("lastY",43,01,bc,6f)},
	{::hx::fsFloat,(int)offsetof(SvgPath_obj,controlX),HX_("controlX",5b,86,bc,37)},
	{::hx::fsFloat,(int)offsetof(SvgPath_obj,controlY),HX_("controlY",5c,86,bc,37)},
	{::hx::fsInt,(int)offsetof(SvgPath_obj,c),HX_("c",63,00,00,00)},
	{::hx::fsInt,(int)offsetof(SvgPath_obj,l),HX_("l",6c,00,00,00)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(SvgPath_obj,pathContext),HX_("pathContext",ca,06,31,f6)},
	{::hx::fsObject /*  ::justPath::StoreF6 */ ,(int)offsetof(SvgPath_obj,store),HX_("store",e1,13,16,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SvgPath_obj_sStaticStorageInfo = 0;
#endif

static ::String SvgPath_obj_sMemberFields[] = {
	HX_("str",b1,a8,57,00),
	HX_("pos",94,5d,55,00),
	HX_("lastX",42,01,bc,6f),
	HX_("lastY",43,01,bc,6f),
	HX_("controlX",5b,86,bc,37),
	HX_("controlY",5c,86,bc,37),
	HX_("c",63,00,00,00),
	HX_("l",6c,00,00,00),
	HX_("pathContext",ca,06,31,f6),
	HX_("store",e1,13,16,84),
	HX_("parse",33,90,55,bd),
	::String(null()) };

::hx::Class SvgPath_obj::__mClass;

void SvgPath_obj::__register()
{
	SvgPath_obj _hx_dummy;
	SvgPath_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("justPath.SvgPath",8c,a2,03,48);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SvgPath_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SvgPath_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SvgPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SvgPath_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace justPath
