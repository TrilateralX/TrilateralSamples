// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_org_poly2tri_Basin
#include <org/poly2tri/Basin.h>
#endif
#ifndef INCLUDED_org_poly2tri_Node
#include <org/poly2tri/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_93e061bb8319ab07_14_new,"org.poly2tri.Basin","new",0x9b82ab2c,"org.poly2tri.Basin.new","org/poly2tri/Basin.hx",14,0xb13935a4)
namespace org{
namespace poly2tri{

void Basin_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_93e061bb8319ab07_14_new)
HXDLIN(  14)		this->width = ( (Float)(0) );
            	}

Dynamic Basin_obj::__CreateEmpty() { return new Basin_obj; }

void *Basin_obj::_hx_vtable = 0;

Dynamic Basin_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Basin_obj > _hx_result = new Basin_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Basin_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3a298b90;
}


Basin_obj::Basin_obj()
{
}

void Basin_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Basin);
	HX_MARK_MEMBER_NAME(left_node,"left_node");
	HX_MARK_MEMBER_NAME(bottom_node,"bottom_node");
	HX_MARK_MEMBER_NAME(right_node,"right_node");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(left_highest,"left_highest");
	HX_MARK_END_CLASS();
}

void Basin_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left_node,"left_node");
	HX_VISIT_MEMBER_NAME(bottom_node,"bottom_node");
	HX_VISIT_MEMBER_NAME(right_node,"right_node");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(left_highest,"left_highest");
}

::hx::Val Basin_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"left_node") ) { return ::hx::Val( left_node ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"right_node") ) { return ::hx::Val( right_node ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottom_node") ) { return ::hx::Val( bottom_node ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"left_highest") ) { return ::hx::Val( left_highest ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Basin_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"left_node") ) { left_node=inValue.Cast<  ::org::poly2tri::Node >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"right_node") ) { right_node=inValue.Cast<  ::org::poly2tri::Node >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottom_node") ) { bottom_node=inValue.Cast<  ::org::poly2tri::Node >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"left_highest") ) { left_highest=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Basin_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left_node",7a,a4,cd,7d));
	outFields->push(HX_("bottom_node",16,4b,7e,ce));
	outFields->push(HX_("right_node",85,9c,b2,6b));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("left_highest",ac,5a,cc,74));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Basin_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::org::poly2tri::Node */ ,(int)offsetof(Basin_obj,left_node),HX_("left_node",7a,a4,cd,7d)},
	{::hx::fsObject /*  ::org::poly2tri::Node */ ,(int)offsetof(Basin_obj,bottom_node),HX_("bottom_node",16,4b,7e,ce)},
	{::hx::fsObject /*  ::org::poly2tri::Node */ ,(int)offsetof(Basin_obj,right_node),HX_("right_node",85,9c,b2,6b)},
	{::hx::fsFloat,(int)offsetof(Basin_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsBool,(int)offsetof(Basin_obj,left_highest),HX_("left_highest",ac,5a,cc,74)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Basin_obj_sStaticStorageInfo = 0;
#endif

static ::String Basin_obj_sMemberFields[] = {
	HX_("left_node",7a,a4,cd,7d),
	HX_("bottom_node",16,4b,7e,ce),
	HX_("right_node",85,9c,b2,6b),
	HX_("width",06,b6,62,ca),
	HX_("left_highest",ac,5a,cc,74),
	::String(null()) };

::hx::Class Basin_obj::__mClass;

void Basin_obj::__register()
{
	Basin_obj _hx_dummy;
	Basin_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("org.poly2tri.Basin",3a,e5,b2,93);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Basin_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Basin_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Basin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Basin_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace poly2tri
