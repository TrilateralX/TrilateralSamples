// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_org_poly2tri_Constants
#include <org/poly2tri/Constants.h>
#endif
#ifndef INCLUDED_org_poly2tri_Orientation
#include <org/poly2tri/Orientation.h>
#endif
#ifndef INCLUDED_org_poly2tri_Point
#include <org/poly2tri/Point.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e35134c5ce6990fa_10_orient2d,"org.poly2tri.Orientation","orient2d",0x5d3054f4,"org.poly2tri.Orientation.orient2d","org/poly2tri/Orientation.hx",10,0x0c08632d)
namespace org{
namespace poly2tri{

void Orientation_obj::__construct() { }

Dynamic Orientation_obj::__CreateEmpty() { return new Orientation_obj; }

void *Orientation_obj::_hx_vtable = 0;

Dynamic Orientation_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Orientation_obj > _hx_result = new Orientation_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Orientation_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x00bd0ae7;
}

int Orientation_obj::orient2d( ::org::poly2tri::Point pa, ::org::poly2tri::Point pb, ::org::poly2tri::Point pc){
            	HX_STACKFRAME(&_hx_pos_e35134c5ce6990fa_10_orient2d)
HXLINE(  11)		Float detleft = ((pa->x - pc->x) * (pb->y - pc->y));
HXLINE(  12)		Float detright = ((pa->y - pc->y) * (pb->x - pc->x));
HXLINE(  13)		Float val = (detleft - detright);
HXLINE(  15)		bool _hx_tmp;
HXDLIN(  15)		if ((val > -(::org::poly2tri::Constants_obj::EPSILON))) {
HXLINE(  15)			_hx_tmp = (val < ::org::poly2tri::Constants_obj::EPSILON);
            		}
            		else {
HXLINE(  15)			_hx_tmp = false;
            		}
HXDLIN(  15)		if (_hx_tmp) {
HXLINE(  15)			return 0;
            		}
HXLINE(  16)		if ((val > 0)) {
HXLINE(  16)			return -1;
            		}
HXLINE(  17)		return 1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Orientation_obj,orient2d,return )


Orientation_obj::Orientation_obj()
{
}

bool Orientation_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"orient2d") ) { outValue = orient2d_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Orientation_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Orientation_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Orientation_obj::__mClass;

static ::String Orientation_obj_sStaticFields[] = {
	HX_("orient2d",f7,80,6d,bd),
	::String(null())
};

void Orientation_obj::__register()
{
	Orientation_obj _hx_dummy;
	Orientation_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("org.poly2tri.Orientation",11,00,90,3a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Orientation_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Orientation_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Orientation_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Orientation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Orientation_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace poly2tri
