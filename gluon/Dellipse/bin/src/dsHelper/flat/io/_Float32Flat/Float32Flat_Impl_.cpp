// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dsHelper_flat_io__Float32Flat_Float32Flat_Impl_
#include <dsHelper/flat/io/_Float32Flat/Float32Flat_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferView
#include <typedarray/ArrayBufferView.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferViewBase
#include <typedarray/ArrayBufferViewBase.h>
#endif
#ifndef INCLUDED_typedarray_Float32ArrayImpl
#include <typedarray/Float32ArrayImpl.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_45_get_size,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","get_size",0x4b0e4d39,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.get_size","dsHelper/flat/io/Float32Flat.hx",45,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_49_set_size,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","set_size",0xf96ba6ad,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.set_size","dsHelper/flat/io/Float32Flat.hx",49,0x3517e5af)
namespace dsHelper{
namespace flat{
namespace io{
namespace _Float32Flat{

void Float32Flat_Impl__obj::__construct() { }

Dynamic Float32Flat_Impl__obj::__CreateEmpty() { return new Float32Flat_Impl__obj; }

void *Float32Flat_Impl__obj::_hx_vtable = 0;

Dynamic Float32Flat_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Float32Flat_Impl__obj > _hx_result = new Float32Flat_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Float32Flat_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x767b5cc3;
}

int Float32Flat_Impl__obj::get_size( ::typedarray::Float32ArrayImpl this1){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_45_get_size)
HXDLIN(  45)		if ((1 >= this1->length)) {
HXDLIN(  45)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            		}
HXDLIN(  45)		int p = (4 + this1->byteOffset);
HXDLIN(  45)		return ::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,get_size,return )

int Float32Flat_Impl__obj::set_size( ::typedarray::Float32ArrayImpl this1,int id){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_49_set_size)
HXLINE(  50)		{
HXLINE(  50)			Float pos_ = ( (Float)(id) );
HXDLIN(  50)			{
HXLINE(  50)				if ((0 >= this1->length)) {
HXLINE(  50)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  50)				int p = this1->byteOffset;
HXDLIN(  50)				 ::__hxcpp_memory_set_float(this1->buffer->b,p,pos_);
            			}
HXDLIN(  50)			if ((0 >= this1->length)) {
HXLINE(  50)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  50)			int p1 = this1->byteOffset;
HXDLIN(  50)			float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,p1);
HXDLIN(  50)			if ((1 >= this1->length)) {
HXLINE(  50)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  50)			int p2 = (4 + this1->byteOffset);
HXDLIN(  50)			if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,p2) - ( (float)(1) )))) {
HXLINE(  50)				if ((0 >= this1->length)) {
HXLINE(  50)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  50)				int p = this1->byteOffset;
HXDLIN(  50)				float v =  ::__hxcpp_memory_get_float(this1->buffer->b,p);
HXDLIN(  50)				{
HXLINE(  50)					if ((1 >= this1->length)) {
HXLINE(  50)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  50)					int p1 = (4 + this1->byteOffset);
HXDLIN(  50)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  51)		return id;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Float32Flat_Impl__obj,set_size,return )


Float32Flat_Impl__obj::Float32Flat_Impl__obj()
{
}

bool Float32Flat_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"get_size") ) { outValue = get_size_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_size") ) { outValue = set_size_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Float32Flat_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Float32Flat_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Float32Flat_Impl__obj::__mClass;

static ::String Float32Flat_Impl__obj_sStaticFields[] = {
	HX_("get_size",4a,5c,0e,cc),
	HX_("set_size",be,b5,6b,7a),
	::String(null())
};

void Float32Flat_Impl__obj::__register()
{
	Float32Flat_Impl__obj _hx_dummy;
	Float32Flat_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("dsHelper.flat.io._Float32Flat.Float32Flat_Impl_",5f,49,f2,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Float32Flat_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Float32Flat_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Float32Flat_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Float32Flat_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Float32Flat_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace dsHelper
} // end namespace flat
} // end namespace io
} // end namespace _Float32Flat
