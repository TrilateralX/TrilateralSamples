// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_trilateral3_structure_RegularShape
#include <trilateral3/structure/RegularShape.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb83b890896e3f0e_8_new,"trilateral3.structure.RegularShape","new",0x3b9bba59,"trilateral3.structure.RegularShape.new","trilateral3/structure/RegularShape.hx",8,0x99462235)
namespace trilateral3{
namespace structure{

void RegularShape_obj::__construct(Float x,Float y,Float radius,int color){
            	HX_STACKFRAME(&_hx_pos_fb83b890896e3f0e_8_new)
HXLINE(   9)		this->x = x;
HXLINE(  10)		this->y = y;
HXLINE(  11)		this->radius = radius;
HXLINE(  12)		this->color = color;
            	}

Dynamic RegularShape_obj::__CreateEmpty() { return new RegularShape_obj; }

void *RegularShape_obj::_hx_vtable = 0;

Dynamic RegularShape_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RegularShape_obj > _hx_result = new RegularShape_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool RegularShape_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5be2fff5;
}


RegularShape_obj::RegularShape_obj()
{
}

::hx::Val RegularShape_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { return ::hx::Val( radius ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RegularShape_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RegularShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("radius",52,d0,f6,b0));
	outFields->push(HX_("color",63,71,5c,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RegularShape_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(RegularShape_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(RegularShape_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(RegularShape_obj,radius),HX_("radius",52,d0,f6,b0)},
	{::hx::fsInt,(int)offsetof(RegularShape_obj,color),HX_("color",63,71,5c,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RegularShape_obj_sStaticStorageInfo = 0;
#endif

static ::String RegularShape_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("radius",52,d0,f6,b0),
	HX_("color",63,71,5c,4a),
	::String(null()) };

::hx::Class RegularShape_obj::__mClass;

void RegularShape_obj::__register()
{
	RegularShape_obj _hx_dummy;
	RegularShape_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.structure.RegularShape",e7,99,0f,99);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RegularShape_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RegularShape_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RegularShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RegularShape_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace structure
