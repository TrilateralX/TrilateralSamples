// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_drawing_Sketch
#define INCLUDED_trilateral3_drawing_Sketch

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_justPath_IPathContext
#include <justPath/IPathContext.h>
#endif
HX_DECLARE_CLASS1(justPath,IPathContext)
HX_DECLARE_CLASS2(trilateral3,drawing,Contour)
HX_DECLARE_CLASS2(trilateral3,drawing,Pen)
HX_DECLARE_CLASS2(trilateral3,drawing,Sketch)

namespace trilateral3{
namespace drawing{


class HXCPP_CLASS_ATTRIBUTES Sketch_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Sketch_obj OBJ_;
		Sketch_obj();

	public:
		enum { _hx_ClassId = 0x100e59ef };

		void __construct( ::trilateral3::drawing::Pen pen_,int sketchForm_,::hx::Null< int >  __o_endLine_);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="trilateral3.drawing.Sketch")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"trilateral3.drawing.Sketch"); }
		static ::hx::ObjectPtr< Sketch_obj > __new( ::trilateral3::drawing::Pen pen_,int sketchForm_,::hx::Null< int >  __o_endLine_);
		static ::hx::ObjectPtr< Sketch_obj > __alloc(::hx::Ctx *_hx_ctx, ::trilateral3::drawing::Pen pen_,int sketchForm_,::hx::Null< int >  __o_endLine_);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Sketch_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("Sketch",8c,ed,99,0e); }

		Float x;
		Float y;
		Float width;
		 ::Dynamic widthFunction;
		Dynamic widthFunction_dyn() { return widthFunction;}
		 ::Dynamic colourFunction;
		Dynamic colourFunction_dyn() { return colourFunction;}
		 ::trilateral3::drawing::Contour contour;
		 ::trilateral3::drawing::Pen pen;
		int endLine;
		int sketchForm;
		::Array< ::Dynamic> points;
		::Array< ::Dynamic> pointsClock;
		::Array< ::Dynamic> pointsAnti;
		::Array< ::Dynamic> dim;
		void tracerLine(Float x_,Float y_);
		::Dynamic tracerLine_dyn();

		void fillOnlyLine(Float x_,Float y_);
		::Dynamic fillOnlyLine_dyn();

		void baseLine(Float x_,Float y_);
		::Dynamic baseLine_dyn();

		void crudeLine(Float x_,Float y_);
		::Dynamic crudeLine_dyn();

		void roundEndLine(Float x_,Float y_);
		::Dynamic roundEndLine_dyn();

		void mediumLine(Float x_,Float y_);
		::Dynamic mediumLine_dyn();

		void mediumOverlapLine(Float x_,Float y_);
		::Dynamic mediumOverlapLine_dyn();

		void fineLine(Float x_,Float y_);
		::Dynamic fineLine_dyn();

		void fineOverlapLine(Float x_,Float y_);
		::Dynamic fineOverlapLine_dyn();

		 ::Dynamic line;
		Dynamic line_dyn() { return line;}
		void moveTo(Float x_,Float y_);
		::Dynamic moveTo_dyn();

};

} // end namespace trilateral3
} // end namespace drawing

#endif /* INCLUDED_trilateral3_drawing_Sketch */ 
