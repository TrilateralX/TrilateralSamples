// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_6a37b2496ecd24d2
#define INCLUDED_6a37b2496ecd24d2
#include "/usr/local/lib/haxeLibrary/gluon/git/gluon/webgl/native/ES2Context.h"
#endif
#ifndef INCLUDED_2710e462964f946c
#define INCLUDED_2710e462964f946c
#include "stdlib.h"
#endif
#ifndef INCLUDED_TrilateralLines
#include <TrilateralLines.h>
#endif
#ifndef INCLUDED__Main_Main_Fields_
#include <_Main/Main_Fields_.h>
#endif
#ifndef INCLUDED_gluon_webgl__GLContext_GLContext_Impl_
#include <gluon/webgl/_GLContext/GLContext_Impl_.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLBuffer
#include <gluon/webgl/native/GLBuffer.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLContext
#include <gluon/webgl/native/GLContext.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLObject
#include <gluon/webgl/native/GLObject.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLProgram
#include <gluon/webgl/native/GLProgram.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLShader
#include <gluon/webgl/native/GLShader.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kitGL_gluon_Animate
#include <kitGL/gluon/Animate.h>
#endif
#ifndef INCLUDED_kitGL_gluon_Glwrapper
#include <kitGL/gluon/Glwrapper.h>
#endif
#ifndef INCLUDED_kitGL_gluon_InterleaveAlterGL
#include <kitGL/gluon/InterleaveAlterGL.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferView
#include <typedarray/ArrayBufferView.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferViewBase
#include <typedarray/ArrayBufferViewBase.h>
#endif
#ifndef INCLUDED_typedarray_Float32ArrayImpl
#include <typedarray/Float32ArrayImpl.h>
#endif
#ifndef INCLUDED_typedarray__BufferSource_BufferSourceType
#include <typedarray/_BufferSource/BufferSourceType.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_195033e4c87195a0_4_main,"_Main.Main_Fields_","main",0x61352f31,"_Main.Main_Fields_.main","Main.hx",4,0x087e5c05)
namespace _Main{

void Main_Fields__obj::__construct() { }

Dynamic Main_Fields__obj::__CreateEmpty() { return new Main_Fields__obj; }

void *Main_Fields__obj::_hx_vtable = 0;

Dynamic Main_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_Fields__obj > _hx_result = new Main_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3a07ccb8;
}

void Main_Fields__obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_195033e4c87195a0_4_main)
HXLINE(   5)		 ::kitGL::gluon::Animate animate =  ::kitGL::gluon::Animate_obj::__alloc( HX_CTX );
HXLINE(   6)		 ::kitGL::gluon::Glwrapper glWrapper =  ::kitGL::gluon::Glwrapper_obj::__alloc( HX_CTX );
HXLINE(   7)		 ::TrilateralLines trilateralTri =  ::TrilateralLines_obj::__alloc( HX_CTX ,glWrapper->gl);
HXLINE(   8)		{
HXLINE(   8)			::haxe::Log_obj::trace(HX_("MinimalGL created",6e,7c,ab,19),::hx::SourceInfo(HX_("kitGL/gluon/InterleaveAlterGL.hx",12,e6,0f,2c),28,HX_("kitGL.gluon.InterleaveAlterGL",2e,f1,7f,af),HX_("setup",7d,ae,2f,7a)));
HXDLIN(   8)			 ::gluon::webgl::native::GLContext gl = trilateralTri->gl;
HXDLIN(   8)			 ::gluon::webgl::native::GLContext this1 = gl;
HXDLIN(   8)			unsigned int ref = glCreateProgram();
HXDLIN(   8)			 ::gluon::webgl::native::GLProgram v;
HXDLIN(   8)			if ((ref != 0)) {
HXLINE(   8)				v =  ::gluon::webgl::native::GLProgram_obj::__alloc( HX_CTX ,this1,ref);
            			}
            			else {
HXLINE(   8)				v = null();
            			}
HXDLIN(   8)			::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this1,HX_("createProgram",e8,22,3c,dc));
HXDLIN(   8)			 ::gluon::webgl::native::GLProgram program = v;
HXDLIN(   8)			{
HXLINE(   8)				 ::gluon::webgl::native::GLContext this2 = gl;
HXDLIN(   8)				unsigned int ref1 = glCreateShader(( (unsigned int)(35633) ));
HXDLIN(   8)				 ::gluon::webgl::native::GLShader v1;
HXDLIN(   8)				if ((ref1 != 0)) {
HXLINE(   8)					v1 =  ::gluon::webgl::native::GLShader_obj::__alloc( HX_CTX ,this2,ref1);
            				}
            				else {
HXLINE(   8)					v1 = null();
            				}
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this2,HX_("createShader",41,ff,75,3f));
HXDLIN(   8)				 ::gluon::webgl::native::GLShader shader = v1;
HXDLIN(   8)				{
HXLINE(   8)					gl->shaderSource(shader,((((((HX_("attribute vec3 vertexPosition;",31,27,01,79) + HX_("attribute vec4 vertexColor;",b8,a7,4a,43)) + HX_("varying vec4 vcol;",61,c8,5b,03)) + HX_("void main() {",a1,5c,71,87)) + HX_(" gl_Position = vec4(vertexPosition, 1.0);",1c,0c,87,98)) + HX_(" vcol = vertexColor;",75,ef,b6,2e)) + HX_("}",7d,00,00,00)));
HXDLIN(   8)					::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl,HX_("shaderSource",e0,4d,1a,a2));
            				}
HXDLIN(   8)				{
HXLINE(   8)					glCompileShader(shader->handle);
HXDLIN(   8)					::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl,HX_("compileShader",f8,70,b2,da));
            				}
HXDLIN(   8)				 ::gluon::webgl::native::GLShader shader1;
HXDLIN(   8)				 ::gluon::webgl::native::GLContext this3 = gl;
HXDLIN(   8)				bool v2 = ( (bool)(this3->getShaderParameter(shader,( (unsigned int)(35713) ))) );
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this3,HX_("getShaderParameter",ce,69,5b,36));
HXDLIN(   8)				if (!(v2)) {
HXLINE(   8)					 ::gluon::webgl::native::GLContext this1 = gl;
HXDLIN(   8)					::String v = this1->getShaderInfoLog(shader);
HXDLIN(   8)					::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this1,HX_("getShaderInfoLog",9b,bd,c8,f3));
HXDLIN(   8)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Error compiling shader. ",bf,50,4d,23) + v)));
            				}
            				else {
HXLINE(   8)					shader1 = shader;
            				}
HXDLIN(   8)				glAttachShader(program->handle,shader1->handle);
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl,HX_("attachShader",ca,d0,77,b2));
            			}
HXDLIN(   8)			{
HXLINE(   8)				 ::gluon::webgl::native::GLContext this4 = gl;
HXDLIN(   8)				unsigned int ref2 = glCreateShader(( (unsigned int)(35632) ));
HXDLIN(   8)				 ::gluon::webgl::native::GLShader v3;
HXDLIN(   8)				if ((ref2 != 0)) {
HXLINE(   8)					v3 =  ::gluon::webgl::native::GLShader_obj::__alloc( HX_CTX ,this4,ref2);
            				}
            				else {
HXLINE(   8)					v3 = null();
            				}
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this4,HX_("createShader",41,ff,75,3f));
HXDLIN(   8)				 ::gluon::webgl::native::GLShader shader2 = v3;
HXDLIN(   8)				{
HXLINE(   8)					gl->shaderSource(shader2,(((HX_("varying vec4 vcol;",61,c8,5b,03) + HX_("void main() {",a1,5c,71,87)) + HX_(" gl_FragColor = vcol;",25,af,1c,24)) + HX_("}",7d,00,00,00)));
HXDLIN(   8)					::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl,HX_("shaderSource",e0,4d,1a,a2));
            				}
HXDLIN(   8)				{
HXLINE(   8)					glCompileShader(shader2->handle);
HXDLIN(   8)					::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl,HX_("compileShader",f8,70,b2,da));
            				}
HXDLIN(   8)				 ::gluon::webgl::native::GLShader shader3;
HXDLIN(   8)				 ::gluon::webgl::native::GLContext this5 = gl;
HXDLIN(   8)				bool v4 = ( (bool)(this5->getShaderParameter(shader2,( (unsigned int)(35713) ))) );
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this5,HX_("getShaderParameter",ce,69,5b,36));
HXDLIN(   8)				if (!(v4)) {
HXLINE(   8)					 ::gluon::webgl::native::GLContext this1 = gl;
HXDLIN(   8)					::String v = this1->getShaderInfoLog(shader2);
HXDLIN(   8)					::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this1,HX_("getShaderInfoLog",9b,bd,c8,f3));
HXDLIN(   8)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Error compiling shader. ",bf,50,4d,23) + v)));
            				}
            				else {
HXLINE(   8)					shader3 = shader2;
            				}
HXDLIN(   8)				glAttachShader(program->handle,shader3->handle);
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl,HX_("attachShader",ca,d0,77,b2));
            			}
HXDLIN(   8)			{
HXLINE(   8)				glLinkProgram(program->handle);
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl,HX_("linkProgram",aa,ad,7b,89));
            			}
HXDLIN(   8)			{
HXLINE(   8)				{
HXLINE(   8)					unsigned int ref3;
HXDLIN(   8)					if (::hx::IsNotNull( program )) {
HXLINE(   8)						ref3 = program->handle;
            					}
            					else {
HXLINE(   8)						ref3 = ( (unsigned int)(0) );
            					}
HXDLIN(   8)					glUseProgram(ref3);
            				}
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl,HX_("useProgram",fd,6c,ac,f6));
            			}
HXDLIN(   8)			trilateralTri->program = program;
HXDLIN(   8)			trilateralTri->draw();
HXDLIN(   8)			 ::gluon::webgl::native::GLContext gl1 = trilateralTri->gl;
HXDLIN(   8)			 ::gluon::webgl::native::GLProgram program1 = trilateralTri->program;
HXDLIN(   8)			 ::typedarray::Float32ArrayImpl data = ( ( ::typedarray::Float32ArrayImpl)(trilateralTri->interleaveDataGL->__Field(HX_("get_data",b3,11,1e,c2),::hx::paccDynamic)()) );
HXDLIN(   8)			 ::Dynamic isDynamic = true;
HXDLIN(   8)			if (::hx::IsNull( isDynamic )) {
HXLINE(   8)				isDynamic = false;
            			}
HXDLIN(   8)			 ::Dynamic isDynamic1 = isDynamic;
HXDLIN(   8)			if (::hx::IsNull( isDynamic1 )) {
HXLINE(   8)				isDynamic1 = false;
            			}
HXDLIN(   8)			 ::gluon::webgl::native::GLContext this6 = gl1;
HXDLIN(   8)			unsigned int ref4 = ( (unsigned int)(0) );
HXDLIN(   8)			glGenBuffers(1,&(ref4));
HXDLIN(   8)			 ::gluon::webgl::native::GLBuffer v5;
HXDLIN(   8)			if ((ref4 != 0)) {
HXLINE(   8)				v5 =  ::gluon::webgl::native::GLBuffer_obj::__alloc( HX_CTX ,this6,ref4);
            			}
            			else {
HXLINE(   8)				v5 = null();
            			}
HXDLIN(   8)			::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this6,HX_("createBuffer",1c,fd,e9,f2));
HXDLIN(   8)			 ::gluon::webgl::native::GLBuffer buf = v5;
HXDLIN(   8)			{
HXLINE(   8)				{
HXLINE(   8)					unsigned int ref5;
HXDLIN(   8)					if (::hx::IsNotNull( buf )) {
HXLINE(   8)						ref5 = buf->handle;
            					}
            					else {
HXLINE(   8)						ref5 = ( (unsigned int)(0) );
            					}
HXDLIN(   8)					glBindBuffer(( (unsigned int)(34962) ),ref5);
            				}
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl1,HX_("bindBuffer",9d,92,be,f8));
            			}
HXDLIN(   8)			if (( (bool)(isDynamic1) )) {
HXLINE(   8)				 ::typedarray::_BufferSource::BufferSourceType data1 = ::typedarray::_BufferSource::BufferSourceType_obj::BufferView(data);
HXDLIN(   8)				int _hx_tmp;
HXDLIN(   8)				switch((int)(data1->_hx_getIndex())){
            					case (int)0: {
HXLINE(   8)						 ::haxe::io::Bytes buffer = data1->_hx_getObject(0).StaticCast<  ::haxe::io::Bytes >();
HXDLIN(   8)						_hx_tmp = buffer->length;
            					}
            					break;
            					case (int)1: {
HXLINE(   8)						::Dynamic bufferView = data1->_hx_getObject(0);
HXDLIN(   8)						_hx_tmp = ( (int)(bufferView->__Field(HX_("byteLength",0e,1e,0c,77),::hx::paccDynamic)) );
            					}
            					break;
            				}
HXDLIN(   8)				unsigned char * _hx_tmp1;
HXDLIN(   8)				switch((int)(data1->_hx_getIndex())){
            					case (int)0: {
HXLINE(   8)						 ::haxe::io::Bytes buffer = data1->_hx_getObject(0).StaticCast<  ::haxe::io::Bytes >();
HXDLIN(   8)						::cpp::Pointer< unsigned char > _hx_tmp = ( (::cpp::Pointer< unsigned char >)(::cpp::Pointer_obj::arrayElem(buffer->b,0)) );
HXDLIN(   8)						_hx_tmp1 = ( (unsigned char *)(_hx_tmp->get_raw()) );
            					}
            					break;
            					case (int)1: {
HXLINE(   8)						::Dynamic bufferView = data1->_hx_getObject(0);
HXDLIN(   8)						_hx_tmp1 = ::typedarray::ArrayBufferView_obj::toCPointer(bufferView);
            					}
            					break;
            				}
HXDLIN(   8)				glBufferData(( (unsigned int)(34962) ),( (::cpp::Int64)(_hx_tmp) ),( (const void *)(_hx_tmp1) ),( (unsigned int)(35048) ));
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl1,HX_("bufferData",4a,bf,73,93));
            			}
            			else {
HXLINE(   8)				 ::typedarray::_BufferSource::BufferSourceType data1 = ::typedarray::_BufferSource::BufferSourceType_obj::BufferView(data);
HXDLIN(   8)				int _hx_tmp;
HXDLIN(   8)				switch((int)(data1->_hx_getIndex())){
            					case (int)0: {
HXLINE(   8)						 ::haxe::io::Bytes buffer = data1->_hx_getObject(0).StaticCast<  ::haxe::io::Bytes >();
HXDLIN(   8)						_hx_tmp = buffer->length;
            					}
            					break;
            					case (int)1: {
HXLINE(   8)						::Dynamic bufferView = data1->_hx_getObject(0);
HXDLIN(   8)						_hx_tmp = ( (int)(bufferView->__Field(HX_("byteLength",0e,1e,0c,77),::hx::paccDynamic)) );
            					}
            					break;
            				}
HXDLIN(   8)				unsigned char * _hx_tmp1;
HXDLIN(   8)				switch((int)(data1->_hx_getIndex())){
            					case (int)0: {
HXLINE(   8)						 ::haxe::io::Bytes buffer = data1->_hx_getObject(0).StaticCast<  ::haxe::io::Bytes >();
HXDLIN(   8)						::cpp::Pointer< unsigned char > _hx_tmp = ( (::cpp::Pointer< unsigned char >)(::cpp::Pointer_obj::arrayElem(buffer->b,0)) );
HXDLIN(   8)						_hx_tmp1 = ( (unsigned char *)(_hx_tmp->get_raw()) );
            					}
            					break;
            					case (int)1: {
HXLINE(   8)						::Dynamic bufferView = data1->_hx_getObject(0);
HXDLIN(   8)						_hx_tmp1 = ::typedarray::ArrayBufferView_obj::toCPointer(bufferView);
            					}
            					break;
            				}
HXDLIN(   8)				glBufferData(( (unsigned int)(34962) ),( (::cpp::Int64)(_hx_tmp) ),( (const void *)(_hx_tmp1) ),( (unsigned int)(35044) ));
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl1,HX_("bufferData",4a,bf,73,93));
            			}
HXDLIN(   8)			 ::gluon::webgl::native::GLBuffer vbo = buf;
HXDLIN(   8)			const char* this7 = HX_("vertexPosition",2d,3c,14,50).utf8_str();
HXDLIN(   8)			const char* nameCharStar = this7;
HXDLIN(   8)			int v6 = glGetAttribLocation(program1->handle,nameCharStar);
HXDLIN(   8)			::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl1,HX_("getAttribLocation",d5,1a,10,5d));
HXDLIN(   8)			int posLoc = v6;
HXDLIN(   8)			const char* this8 = HX_("vertexColor",5f,3b,98,5e).utf8_str();
HXDLIN(   8)			const char* nameCharStar1 = this8;
HXDLIN(   8)			int v7 = glGetAttribLocation(program1->handle,nameCharStar1);
HXDLIN(   8)			::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl1,HX_("getAttribLocation",d5,1a,10,5d));
HXDLIN(   8)			int colorLoc = v7;
HXDLIN(   8)			{
HXLINE(   8)				{
HXLINE(   8)					const void * offsetAsPointer = reinterpret_cast<void*>(0);
HXDLIN(   8)					glVertexAttribPointer(( (unsigned int)(posLoc) ),3,( (unsigned int)(5126) ),false,28,offsetAsPointer);
            				}
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl1,HX_("vertexAttribPointer",8f,04,b6,3f));
            			}
HXDLIN(   8)			{
HXLINE(   8)				{
HXLINE(   8)					const void * offsetAsPointer1 = reinterpret_cast<void*>(12);
HXDLIN(   8)					glVertexAttribPointer(( (unsigned int)(colorLoc) ),4,( (unsigned int)(5126) ),false,28,offsetAsPointer1);
            				}
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl1,HX_("vertexAttribPointer",8f,04,b6,3f));
            			}
HXDLIN(   8)			{
HXLINE(   8)				glEnableVertexAttribArray(( (unsigned int)(posLoc) ));
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl1,HX_("enableVertexAttribArray",e8,46,5a,ac));
            			}
HXDLIN(   8)			{
HXLINE(   8)				glEnableVertexAttribArray(( (unsigned int)(colorLoc) ));
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(gl1,HX_("enableVertexAttribArray",e8,46,5a,ac));
            			}
HXDLIN(   8)			trilateralTri->buf = vbo;
HXDLIN(   8)			{
HXLINE(   8)				 ::gluon::webgl::native::GLContext this9 = trilateralTri->gl;
HXDLIN(   8)				glDisable(( (unsigned int)(2884) ));
HXDLIN(   8)				::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this9,HX_("disable",e8,69,58,b1));
            			}
HXDLIN(   8)			 ::gluon::webgl::native::GLContext this10 = trilateralTri->gl;
HXDLIN(   8)			const char* this11 = HX_("vertexPosition",2d,3c,14,50).utf8_str();
HXDLIN(   8)			const char* nameCharStar2 = this11;
HXDLIN(   8)			int v8 = glGetAttribLocation(trilateralTri->program->handle,nameCharStar2);
HXDLIN(   8)			::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this10,HX_("getAttribLocation",d5,1a,10,5d));
HXDLIN(   8)			trilateralTri->posLoc = v8;
HXDLIN(   8)			 ::gluon::webgl::native::GLContext this12 = trilateralTri->gl;
HXDLIN(   8)			const char* this13 = HX_("vertexColor",5f,3b,98,5e).utf8_str();
HXDLIN(   8)			const char* nameCharStar3 = this13;
HXDLIN(   8)			int v9 = glGetAttribLocation(trilateralTri->program->handle,nameCharStar3);
HXDLIN(   8)			::gluon::webgl::_GLContext::GLContext_Impl__obj::reportErrors(this12,HX_("getAttribLocation",d5,1a,10,5d));
HXDLIN(   8)			trilateralTri->colorLoc = v9;
            		}
HXLINE(   9)		glWrapper->onFrame = trilateralTri->render_dyn();
HXLINE(  10)		glWrapper->onStop = animate->stop_dyn();
HXLINE(  11)		animate->onEnterFrame = glWrapper->mainLoop_dyn();
HXLINE(  12)		animate->start();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_Fields__obj,main,(void))


Main_Fields__obj::Main_Fields__obj()
{
}

bool Main_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Main_Fields__obj::__mClass;

static ::String Main_Fields__obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Main_Fields__obj::__register()
{
	Main_Fields__obj _hx_dummy;
	Main_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("_Main.Main_Fields_",76,cc,48,1a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace _Main
