// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dsHelper_flat_io__Float32Flat_Float32Flat_Impl_
#include <dsHelper/flat/io/_Float32Flat/Float32Flat_Impl_.h>
#endif
#ifndef INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_
#include <dsHelper/flatInterleave/_FloatColorTriangles/FloatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_trilateral3_Trilateral
#include <trilateral3/Trilateral.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Pen
#include <trilateral3/drawing/Pen.h>
#endif
#ifndef INCLUDED_trilateral3_geom__FlatColorTriangles_FlatColorTriangles_Impl_
#include <trilateral3/geom/_FlatColorTriangles/FlatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_Vertex
#include <trilateral3/matrix/Vertex.h>
#endif
#ifndef INCLUDED_trilateral3_nodule_PenNodule
#include <trilateral3/nodule/PenNodule.h>
#endif
#ifndef INCLUDED_trilateral3_structure_StartEnd
#include <trilateral3/structure/StartEnd.h>
#endif
#ifndef INCLUDED_trilateral3_structure_TriInt
#include <trilateral3/structure/TriInt.h>
#endif
#ifndef INCLUDED_trilateral3_structure_Triangle3D
#include <trilateral3/structure/Triangle3D.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferView
#include <typedarray/ArrayBufferView.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferViewBase
#include <typedarray/ArrayBufferViewBase.h>
#endif
#ifndef INCLUDED_typedarray_Float32ArrayImpl
#include <typedarray/Float32ArrayImpl.h>
#endif
#ifndef INCLUDED_typedarray__Float32Array_Float32Array_Impl_
#include <typedarray/_Float32Array/Float32Array_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b18627d9334a0b0e_11_new,"trilateral3.nodule.PenNodule","new",0x84f194ba,"trilateral3.nodule.PenNodule.new","trilateral3/nodule/PenNodule.hx",11,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_29_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",29,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_30_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",30,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_31_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",31,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_32_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",32,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_33_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",33,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_34_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",34,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_35_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",35,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_36_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",36,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_37_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",37,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_38_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",38,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_39_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",39,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_40_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",40,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_41_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",41,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_42_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",42,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_43_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",43,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_44_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",44,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_45_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",45,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_49_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",49,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_50_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",50,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_51_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",51,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_52_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",52,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_53_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",53,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_54_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",54,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_55_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",55,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_56_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",56,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_57_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",57,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_58_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",58,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_64_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",64,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_65_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",65,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_66_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",66,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_67_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",67,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_68_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",68,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_69_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",69,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_70_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",70,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_73_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",73,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_74_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",74,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_75_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",75,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_76_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",76,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_77_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",77,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_78_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",78,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_79_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",79,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_25_createPen,"trilateral3.nodule.PenNodule","createPen",0xafb7af17,"trilateral3.nodule.PenNodule.createPen","trilateral3/nodule/PenNodule.hx",25,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_87_get_data,"trilateral3.nodule.PenNodule","get_data",0x53384719,"trilateral3.nodule.PenNodule.get_data","trilateral3/nodule/PenNodule.hx",87,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_92_get_size,"trilateral3.nodule.PenNodule","get_size",0x5d2891b0,"trilateral3.nodule.PenNodule.get_size","trilateral3/nodule/PenNodule.hx",92,0x5b3c0216)
HX_LOCAL_STACK_FRAME(_hx_pos_b18627d9334a0b0e_12_boot,"trilateral3.nodule.PenNodule","boot",0xc6898e98,"trilateral3.nodule.PenNodule.boot","trilateral3/nodule/PenNodule.hx",12,0x5b3c0216)
namespace trilateral3{
namespace nodule{

void PenNodule_obj::__construct(::hx::Null< bool >  __o_useGLScale){
            		bool useGLScale = __o_useGLScale.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_b18627d9334a0b0e_11_new)
HXLINE(  13)		 ::typedarray::Float32ArrayImpl this1 = ::typedarray::_Float32Array::Float32Array_Impl__obj::_new((::trilateral3::nodule::PenNodule_obj::largeEnough + 2),null(),null(),null(),null());
HXDLIN(  13)		{
HXLINE(  13)			if ((0 >= this1->length)) {
HXLINE(  13)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  13)			 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,((Float)0.));
            		}
HXDLIN(  13)		{
HXLINE(  13)			if ((1 >= this1->length)) {
HXLINE(  13)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  13)			 ::__hxcpp_memory_set_float(this1->buffer->b,(4 + this1->byteOffset),((Float)0.));
            		}
HXDLIN(  13)		this->colorTriangles = this1;
HXLINE(  16)		if (useGLScale) {
HXLINE(  18)			 ::trilateral3::matrix::MatrixDozen transform1000 =  ::trilateral3::matrix::MatrixDozen_obj::__alloc( HX_CTX ,((Float)0.001),( (Float)(0) ),( (Float)(0) ),( (Float)(-1) ),( (Float)(0) ),((Float)-0.001),( (Float)(0) ),( (Float)(1) ),( (Float)(0) ),( (Float)(0) ),((Float)0.001),( (Float)(0) ));
HXLINE(  21)			::trilateral3::Trilateral_obj::transformMatrix = transform1000;
            		}
HXLINE(  23)		this->createPen();
            	}

Dynamic PenNodule_obj::__CreateEmpty() { return new PenNodule_obj; }

void *PenNodule_obj::_hx_vtable = 0;

Dynamic PenNodule_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PenNodule_obj > _hx_result = new PenNodule_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PenNodule_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x052c2712;
}

void PenNodule_obj::createPen(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::typedarray::Float32ArrayImpl,_e) HXARGC(3)
            		void _hx_run(Float x,Float y,Float theta){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_29_createPen)
HXLINE(  29)			Float cos = ::Math_obj::cos(theta);
HXDLIN(  29)			Float sin = ::Math_obj::sin(theta);
HXDLIN(  29)			{
HXLINE(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_g,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_g) - x));
            				}
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g1 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_g1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_g1) - y));
            				}
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g2 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_g2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_g2) - x));
            				}
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g3 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_g3,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_g3) - y));
            				}
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g4 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_g4,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_g4) - x));
            				}
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g5 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_g5,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_g5) - y));
            				}
HXDLIN(  29)				Float dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e);
HXDLIN(  29)				Float dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e);
HXDLIN(  29)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_e,((dx * cos) - (dy * sin)));
HXDLIN(  29)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_e,((dx * sin) + (dy * cos)));
HXDLIN(  29)				dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e);
HXDLIN(  29)				dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e);
HXDLIN(  29)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_e,((dx * cos) - (dy * sin)));
HXDLIN(  29)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_e,((dx * sin) + (dy * cos)));
HXDLIN(  29)				dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e);
HXDLIN(  29)				dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e);
HXDLIN(  29)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_e,((dx * cos) - (dy * sin)));
HXDLIN(  29)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_e,((dx * sin) + (dy * cos)));
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g6 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_g6,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_g6) + x));
            				}
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g7 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_g7,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_g7) + y));
            				}
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g8 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_g8,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_g8) + x));
            				}
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g9 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_g9,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_g9) + y));
            				}
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g10 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_g10,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_g10) + x));
            				}
HXDLIN(  29)				{
HXLINE(  29)					 ::typedarray::Float32ArrayImpl _g11 = _e;
HXDLIN(  29)					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_g11,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_g11) + y));
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::typedarray::Float32ArrayImpl,_e1) HXARGC(2)
            		void _hx_run(Float dx,Float dy){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_30_createPen)
HXLINE(  30)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::moveDelta(_e1,dx,dy);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::typedarray::Float32ArrayImpl,_e2) HXARGC(4)
            		void _hx_run(Float x,Float y,Float cos,Float sin){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_31_createPen)
HXLINE(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_g,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_g) - x));
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g1 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_g1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_g1) - y));
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g2 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_g2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_g2) - x));
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g3 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_g3,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_g3) - y));
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g4 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_g4,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_g4) - x));
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g5 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_g5,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_g5) - y));
            			}
HXDLIN(  31)			Float dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e2);
HXDLIN(  31)			Float dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e2);
HXDLIN(  31)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_e2,((dx * cos) - (dy * sin)));
HXDLIN(  31)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_e2,((dx * sin) + (dy * cos)));
HXDLIN(  31)			dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e2);
HXDLIN(  31)			dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e2);
HXDLIN(  31)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_e2,((dx * cos) - (dy * sin)));
HXDLIN(  31)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_e2,((dx * sin) + (dy * cos)));
HXDLIN(  31)			dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e2);
HXDLIN(  31)			dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e2);
HXDLIN(  31)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_e2,((dx * cos) - (dy * sin)));
HXDLIN(  31)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_e2,((dx * sin) + (dy * cos)));
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g6 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_g6,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_g6) + x));
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g7 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_g7,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_g7) + y));
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g8 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_g8,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_g8) + x));
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g9 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_g9,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_g9) + y));
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g10 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_g10,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_g10) + x));
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::typedarray::Float32ArrayImpl _g11 = _e2;
HXDLIN(  31)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_g11,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_g11) + y));
            			}
            		}
            		HX_END_LOCAL_FUNC4((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::typedarray::Float32ArrayImpl,_e3) HXARGC(2)
            		bool _hx_run(Float px,Float py){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_32_createPen)
HXLINE(  32)			return ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::fullHit(_e3,px,py);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::typedarray::Float32ArrayImpl,_e4) HXARGC(2)
            		bool _hx_run(Float px,Float py){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_33_createPen)
HXLINE(  33)			Float planeAB = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e4) - px);
HXDLIN(  33)			Float planeAB1 = (planeAB * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e4) - py));
HXDLIN(  33)			Float planeAB2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e4) - px);
HXDLIN(  33)			Float planeAB3 = (planeAB1 - (planeAB2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e4) - py)));
HXDLIN(  33)			Float planeBC = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e4) - px);
HXDLIN(  33)			Float planeBC1 = (planeBC * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e4) - py));
HXDLIN(  33)			Float planeBC2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e4) - px);
HXDLIN(  33)			Float planeBC3 = (planeBC1 - (planeBC2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e4) - py)));
HXDLIN(  33)			Float planeCA = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e4) - px);
HXDLIN(  33)			Float planeCA1 = (planeCA * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e4) - py));
HXDLIN(  33)			Float planeCA2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e4) - px);
HXDLIN(  33)			Float planeCA3 = (planeCA1 - (planeCA2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e4) - py)));
HXDLIN(  33)			int triangleAbstract = ::Std_obj::_hx_int((::Math_obj::abs(planeAB3) / planeAB3));
HXDLIN(  33)			if ((triangleAbstract == ::Std_obj::_hx_int((::Math_obj::abs(planeBC3) / planeBC3)))) {
HXLINE(  33)				int triangleAbstract = ::Std_obj::_hx_int((::Math_obj::abs(planeBC3) / planeBC3));
HXDLIN(  33)				return (triangleAbstract == ::Std_obj::_hx_int((::Math_obj::abs(planeCA3) / planeCA3)));
            			}
            			else {
HXLINE(  33)				return false;
            			}
HXDLIN(  33)			return false;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::typedarray::Float32ArrayImpl,_e5) HXARGC(0)
            		Float _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_34_createPen)
HXLINE(  34)			Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e5);
HXDLIN(  34)			Float triangleAbstract1 = ::Math_obj::max(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e5));
HXDLIN(  34)			return ::Math_obj::max(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e5));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::typedarray::Float32ArrayImpl,_e6) HXARGC(0)
            		Float _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_35_createPen)
HXLINE(  35)			Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e6);
HXDLIN(  35)			Float triangleAbstract1 = ::Math_obj::max(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e6));
HXDLIN(  35)			return ::Math_obj::max(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e6));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::typedarray::Float32ArrayImpl,_e7) HXARGC(0)
            		Float _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_36_createPen)
HXLINE(  36)			Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e7);
HXDLIN(  36)			Float triangleAbstract1 = ::Math_obj::max(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e7));
HXDLIN(  36)			return ::Math_obj::max(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e7));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::typedarray::Float32ArrayImpl,_e8) HXARGC(0)
            		Float _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_37_createPen)
HXLINE(  37)			Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e8);
HXDLIN(  37)			Float triangleAbstract1 = ::Math_obj::min(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e8));
HXDLIN(  37)			return ::Math_obj::min(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e8));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::typedarray::Float32ArrayImpl,_e9) HXARGC(1)
            		Float _hx_run(Float x){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_38_createPen)
HXLINE(  38)			Float dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e9);
HXDLIN(  38)			Float dx1 = ::Math_obj::min(dx,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e9));
HXDLIN(  38)			Float dx2 = (x - ::Math_obj::min(dx1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e9)));
HXDLIN(  38)			 ::typedarray::Float32ArrayImpl _e = _e9;
HXDLIN(  38)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_e,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e9) + dx2));
HXDLIN(  38)			 ::typedarray::Float32ArrayImpl _e1 = _e9;
HXDLIN(  38)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_e1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e9) + dx2));
HXDLIN(  38)			 ::typedarray::Float32ArrayImpl _e2 = _e9;
HXDLIN(  38)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_e2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e9) + dx2));
HXDLIN(  38)			return x;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::typedarray::Float32ArrayImpl,_e10) HXARGC(0)
            		Float _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_39_createPen)
HXLINE(  39)			Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e10);
HXDLIN(  39)			Float triangleAbstract1 = ::Math_obj::min(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e10));
HXDLIN(  39)			return ::Math_obj::min(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e10));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::typedarray::Float32ArrayImpl,_e11) HXARGC(1)
            		Float _hx_run(Float y){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_40_createPen)
HXLINE(  40)			Float dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e11);
HXDLIN(  40)			Float dy1 = ::Math_obj::min(dy,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e11));
HXDLIN(  40)			Float dy2 = (y - ::Math_obj::min(dy1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e11)));
HXDLIN(  40)			 ::typedarray::Float32ArrayImpl _e = _e11;
HXDLIN(  40)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_e,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e11) + dy2));
HXDLIN(  40)			 ::typedarray::Float32ArrayImpl _e1 = _e11;
HXDLIN(  40)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_e1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e11) + dy2));
HXDLIN(  40)			 ::typedarray::Float32ArrayImpl _e2 = _e11;
HXDLIN(  40)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_e2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e11) + dy2));
HXDLIN(  40)			return y;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::typedarray::Float32ArrayImpl,_e12) HXARGC(0)
            		Float _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_41_createPen)
HXLINE(  41)			Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e12);
HXDLIN(  41)			Float triangleAbstract1 = ::Math_obj::min(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e12));
HXDLIN(  41)			return ::Math_obj::min(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e12));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::typedarray::Float32ArrayImpl,_e13) HXARGC(1)
            		Float _hx_run(Float z){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_42_createPen)
HXLINE(  42)			Float dz = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e13);
HXDLIN(  42)			Float dz1 = ::Math_obj::min(dz,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e13));
HXDLIN(  42)			Float dz2 = (z - ::Math_obj::min(dz1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e13)));
HXDLIN(  42)			 ::typedarray::Float32ArrayImpl _e = _e13;
HXDLIN(  42)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_az(_e,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e13) + dz2));
HXDLIN(  42)			 ::typedarray::Float32ArrayImpl _e1 = _e13;
HXDLIN(  42)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bz(_e1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e13) + dz2));
HXDLIN(  42)			 ::typedarray::Float32ArrayImpl _e2 = _e13;
HXDLIN(  42)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cz(_e2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e13) + dz2));
HXDLIN(  42)			return z;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::typedarray::Float32ArrayImpl,_e14) HXARGC(9)
            		bool _hx_run(Float ax_,Float ay_,Float az_,Float bx_,Float by_,Float bz_,Float cx_,Float cy_,Float cz_){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_43_createPen)
HXLINE(  43)			return ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::triangle(_e14,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
            		}
            		HX_END_LOCAL_FUNC9(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_15, ::typedarray::Float32ArrayImpl,_e15) HXARGC(0)
            		 ::trilateral3::structure::Triangle3D _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b18627d9334a0b0e_44_createPen)
HXLINE(  44)			Float _g = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e15);
HXDLIN(  44)			Float _g1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e15);
HXDLIN(  44)			 ::trilateral3::matrix::Vertex pa =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g,_g1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e15),((Float)1.));
HXDLIN(  44)			Float _g2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e15);
HXDLIN(  44)			Float _g3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e15);
HXDLIN(  44)			 ::trilateral3::matrix::Vertex pb =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g2,_g3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e15),((Float)1.));
HXDLIN(  44)			Float _g4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e15);
HXDLIN(  44)			Float _g5 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e15);
HXDLIN(  44)			 ::trilateral3::matrix::Vertex pc =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g4,_g5,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e15),((Float)1.));
HXDLIN(  44)			return  ::trilateral3::structure::Triangle3D_obj::__alloc( HX_CTX ,pa,pb,pc);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::typedarray::Float32ArrayImpl,_e16) HXARGC(1)
            		void _hx_run( ::trilateral3::matrix::MatrixDozen m){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_45_createPen)
HXLINE(  45)			::trilateral3::geom::_FlatColorTriangles::FlatColorTriangles_Impl__obj::transform(_e16,m);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_17, ::typedarray::Float32ArrayImpl,_e17) HXARGC(9)
            		bool _hx_run(Float ax_,Float ay_,Float az_,Float bx_,Float by_,Float bz_,Float cx_,Float cy_,Float cz_){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_49_createPen)
HXLINE(  49)			return ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::triangle(_e17,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
            		}
            		HX_END_LOCAL_FUNC9(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_18, ::typedarray::Float32ArrayImpl,_e18) HXARGC(1)
            		void _hx_run( ::trilateral3::matrix::MatrixDozen m){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_50_createPen)
HXLINE(  50)			::trilateral3::geom::_FlatColorTriangles::FlatColorTriangles_Impl__obj::transform(_e18,m);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_19, ::typedarray::Float32ArrayImpl,_e19) HXARGC(2)
            		void _hx_run( ::trilateral3::matrix::MatrixDozen m, ::trilateral3::structure::StartEnd startEnd){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_51_createPen)
HXLINE(  51)			::trilateral3::geom::_FlatColorTriangles::FlatColorTriangles_Impl__obj::transformRange(_e19,m,startEnd);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::typedarray::Float32ArrayImpl,_e20) HXARGC(0)
            		 ::trilateral3::structure::Triangle3D _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b18627d9334a0b0e_52_createPen)
HXLINE(  52)			Float _g = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e20);
HXDLIN(  52)			Float _g1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e20);
HXDLIN(  52)			 ::trilateral3::matrix::Vertex pa =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g,_g1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e20),((Float)1.));
HXDLIN(  52)			Float _g2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e20);
HXDLIN(  52)			Float _g3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e20);
HXDLIN(  52)			 ::trilateral3::matrix::Vertex pb =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g2,_g3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e20),((Float)1.));
HXDLIN(  52)			Float _g4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e20);
HXDLIN(  52)			Float _g5 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e20);
HXDLIN(  52)			 ::trilateral3::matrix::Vertex pc =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g4,_g5,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e20),((Float)1.));
HXDLIN(  52)			return  ::trilateral3::structure::Triangle3D_obj::__alloc( HX_CTX ,pa,pb,pc);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_21, ::typedarray::Float32ArrayImpl,_e21) HXARGC(0)
            		Float _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_53_createPen)
HXLINE(  53)			{
HXLINE(  53)				if ((0 >= _e21->length)) {
HXLINE(  53)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  53)				int p = _e21->byteOffset;
HXDLIN(  53)				Float pos_ = (( (Float)( ::__hxcpp_memory_get_float(_e21->buffer->b,p)) ) + ((Float)1.));
HXDLIN(  53)				{
HXLINE(  53)					if ((0 >= _e21->length)) {
HXLINE(  53)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  53)					int p1 = _e21->byteOffset;
HXDLIN(  53)					 ::__hxcpp_memory_set_float(_e21->buffer->b,p1,pos_);
            				}
HXDLIN(  53)				if ((0 >= _e21->length)) {
HXLINE(  53)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  53)				int p2 = _e21->byteOffset;
HXDLIN(  53)				float drawAbstract =  ::__hxcpp_memory_get_float(_e21->buffer->b,p2);
HXDLIN(  53)				if ((1 >= _e21->length)) {
HXLINE(  53)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  53)				int p3 = (4 + _e21->byteOffset);
HXDLIN(  53)				if ((drawAbstract > ( ::__hxcpp_memory_get_float(_e21->buffer->b,p3) - ( (float)(1) )))) {
HXLINE(  53)					if ((0 >= _e21->length)) {
HXLINE(  53)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  53)					int p = _e21->byteOffset;
HXDLIN(  53)					float v =  ::__hxcpp_memory_get_float(_e21->buffer->b,p);
HXDLIN(  53)					{
HXLINE(  53)						if ((1 >= _e21->length)) {
HXLINE(  53)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  53)						int p1 = (4 + _e21->byteOffset);
HXDLIN(  53)						 ::__hxcpp_memory_set_float(_e21->buffer->b,p1,v);
            					}
            				}
            			}
HXDLIN(  53)			if ((0 >= _e21->length)) {
HXLINE(  53)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  53)			int p4 = _e21->byteOffset;
HXDLIN(  53)			return ( (Float)( ::__hxcpp_memory_get_float(_e21->buffer->b,p4)) );
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_22, ::typedarray::Float32ArrayImpl,_e22) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_54_createPen)
HXLINE(  54)			if ((0 >= _e22->length)) {
HXLINE(  54)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  54)			int p = _e22->byteOffset;
HXDLIN(  54)			Float drawAbstract = ( (Float)( ::__hxcpp_memory_get_float(_e22->buffer->b,p)) );
HXDLIN(  54)			return (drawAbstract < ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(_e22));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_23, ::typedarray::Float32ArrayImpl,_e23) HXARGC(0)
            		Float _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_55_createPen)
HXLINE(  55)			if ((0 >= _e23->length)) {
HXLINE(  55)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  55)			int p = _e23->byteOffset;
HXDLIN(  55)			return ( (Float)( ::__hxcpp_memory_get_float(_e23->buffer->b,p)) );
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_24, ::typedarray::Float32ArrayImpl,_e24) HXARGC(1)
            		Float _hx_run(Float pos_){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_56_createPen)
HXLINE(  56)			{
HXLINE(  56)				if ((0 >= _e24->length)) {
HXLINE(  56)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  56)				int p = _e24->byteOffset;
HXDLIN(  56)				 ::__hxcpp_memory_set_float(_e24->buffer->b,p,pos_);
            			}
HXDLIN(  56)			if ((0 >= _e24->length)) {
HXLINE(  56)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  56)			int p1 = _e24->byteOffset;
HXDLIN(  56)			float drawAbstract =  ::__hxcpp_memory_get_float(_e24->buffer->b,p1);
HXDLIN(  56)			if ((1 >= _e24->length)) {
HXLINE(  56)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  56)			int p2 = (4 + _e24->byteOffset);
HXDLIN(  56)			if ((drawAbstract > ( ::__hxcpp_memory_get_float(_e24->buffer->b,p2) - ( (float)(1) )))) {
HXLINE(  56)				if ((0 >= _e24->length)) {
HXLINE(  56)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  56)				int p = _e24->byteOffset;
HXDLIN(  56)				float v =  ::__hxcpp_memory_get_float(_e24->buffer->b,p);
HXDLIN(  56)				{
HXLINE(  56)					if ((1 >= _e24->length)) {
HXLINE(  56)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  56)					int p1 = (4 + _e24->byteOffset);
HXDLIN(  56)					 ::__hxcpp_memory_set_float(_e24->buffer->b,p1,v);
            				}
            			}
HXDLIN(  56)			return pos_;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_25, ::typedarray::Float32ArrayImpl,_e25) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_57_createPen)
HXLINE(  57)			return ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(_e25);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_26, ::typedarray::Float32ArrayImpl,_e26) HXARGC(1)
            		int _hx_run(int id){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_58_createPen)
HXLINE(  58)			return ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::set_size(_e26,id);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_27, ::typedarray::Float32ArrayImpl,_e27) HXARGC(1)
            		int _hx_run(int col){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_64_createPen)
HXLINE(  64)			{
HXLINE(  64)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redA(_e27,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  64)				{
HXLINE(  64)					Float v = (( (Float)((col & 255)) ) / ( (Float)(255) ));
HXDLIN(  64)					{
HXLINE(  64)						if ((0 >= _e27->length)) {
HXLINE(  64)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  64)						int p = _e27->byteOffset;
HXDLIN(  64)						{
HXLINE(  64)							int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e27->buffer->b,p)) )) * 21) + 5) + 2);
HXDLIN(  64)							{
HXLINE(  64)								bool color3Abstract;
HXDLIN(  64)								if ((i >= 0)) {
HXLINE(  64)									color3Abstract = (i >= _e27->length);
            								}
            								else {
HXLINE(  64)									color3Abstract = true;
            								}
HXDLIN(  64)								if (color3Abstract) {
HXLINE(  64)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  64)								int p1 = ((i * 4) + _e27->byteOffset);
HXDLIN(  64)								 ::__hxcpp_memory_set_float(_e27->buffer->b,p1,v);
            							}
            						}
            					}
            				}
HXDLIN(  64)				{
HXLINE(  64)					Float v1 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  64)					{
HXLINE(  64)						if ((0 >= _e27->length)) {
HXLINE(  64)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  64)						int p2 = _e27->byteOffset;
HXDLIN(  64)						{
HXLINE(  64)							int i1 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e27->buffer->b,p2)) )) * 21) + 4) + 2);
HXDLIN(  64)							{
HXLINE(  64)								bool color3Abstract1;
HXDLIN(  64)								if ((i1 >= 0)) {
HXLINE(  64)									color3Abstract1 = (i1 >= _e27->length);
            								}
            								else {
HXLINE(  64)									color3Abstract1 = true;
            								}
HXDLIN(  64)								if (color3Abstract1) {
HXLINE(  64)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  64)								int p3 = ((i1 * 4) + _e27->byteOffset);
HXDLIN(  64)								 ::__hxcpp_memory_set_float(_e27->buffer->b,p3,v1);
            							}
            						}
            					}
            				}
HXDLIN(  64)				{
HXLINE(  64)					Float v2 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  64)					{
HXLINE(  64)						if ((0 >= _e27->length)) {
HXLINE(  64)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  64)						int p4 = _e27->byteOffset;
HXDLIN(  64)						{
HXLINE(  64)							int i2 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e27->buffer->b,p4)) )) * 21) + 6) + 2);
HXDLIN(  64)							{
HXLINE(  64)								bool color3Abstract2;
HXDLIN(  64)								if ((i2 >= 0)) {
HXLINE(  64)									color3Abstract2 = (i2 >= _e27->length);
            								}
            								else {
HXLINE(  64)									color3Abstract2 = true;
            								}
HXDLIN(  64)								if (color3Abstract2) {
HXLINE(  64)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  64)								int p5 = ((i2 * 4) + _e27->byteOffset);
HXDLIN(  64)								 ::__hxcpp_memory_set_float(_e27->buffer->b,p5,v2);
            							}
            						}
            					}
            				}
            			}
HXDLIN(  64)			{
HXLINE(  64)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redB(_e27,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  64)				{
HXLINE(  64)					Float v3 = (( (Float)((col & 255)) ) / ( (Float)(255) ));
HXDLIN(  64)					{
HXLINE(  64)						if ((0 >= _e27->length)) {
HXLINE(  64)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  64)						int p6 = _e27->byteOffset;
HXDLIN(  64)						{
HXLINE(  64)							int i3 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e27->buffer->b,p6)) )) * 21) + 12) + 2);
HXDLIN(  64)							{
HXLINE(  64)								bool color3Abstract3;
HXDLIN(  64)								if ((i3 >= 0)) {
HXLINE(  64)									color3Abstract3 = (i3 >= _e27->length);
            								}
            								else {
HXLINE(  64)									color3Abstract3 = true;
            								}
HXDLIN(  64)								if (color3Abstract3) {
HXLINE(  64)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  64)								int p7 = ((i3 * 4) + _e27->byteOffset);
HXDLIN(  64)								 ::__hxcpp_memory_set_float(_e27->buffer->b,p7,v3);
            							}
            						}
            					}
            				}
HXDLIN(  64)				{
HXLINE(  64)					Float v4 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  64)					{
HXLINE(  64)						if ((0 >= _e27->length)) {
HXLINE(  64)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  64)						int p8 = _e27->byteOffset;
HXDLIN(  64)						{
HXLINE(  64)							int i4 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e27->buffer->b,p8)) )) * 21) + 11) + 2);
HXDLIN(  64)							{
HXLINE(  64)								bool color3Abstract4;
HXDLIN(  64)								if ((i4 >= 0)) {
HXLINE(  64)									color3Abstract4 = (i4 >= _e27->length);
            								}
            								else {
HXLINE(  64)									color3Abstract4 = true;
            								}
HXDLIN(  64)								if (color3Abstract4) {
HXLINE(  64)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  64)								int p9 = ((i4 * 4) + _e27->byteOffset);
HXDLIN(  64)								 ::__hxcpp_memory_set_float(_e27->buffer->b,p9,v4);
            							}
            						}
            					}
            				}
HXDLIN(  64)				{
HXLINE(  64)					Float v5 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  64)					{
HXLINE(  64)						if ((0 >= _e27->length)) {
HXLINE(  64)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  64)						int p10 = _e27->byteOffset;
HXDLIN(  64)						{
HXLINE(  64)							int i5 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e27->buffer->b,p10)) )) * 21) + 13) + 2);
HXDLIN(  64)							{
HXLINE(  64)								bool color3Abstract5;
HXDLIN(  64)								if ((i5 >= 0)) {
HXLINE(  64)									color3Abstract5 = (i5 >= _e27->length);
            								}
            								else {
HXLINE(  64)									color3Abstract5 = true;
            								}
HXDLIN(  64)								if (color3Abstract5) {
HXLINE(  64)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  64)								int p11 = ((i5 * 4) + _e27->byteOffset);
HXDLIN(  64)								 ::__hxcpp_memory_set_float(_e27->buffer->b,p11,v5);
            							}
            						}
            					}
            				}
            			}
HXDLIN(  64)			{
HXLINE(  64)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redC(_e27,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  64)				{
HXLINE(  64)					Float v6 = (( (Float)((col & 255)) ) / ( (Float)(255) ));
HXDLIN(  64)					{
HXLINE(  64)						if ((0 >= _e27->length)) {
HXLINE(  64)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  64)						int p12 = _e27->byteOffset;
HXDLIN(  64)						{
HXLINE(  64)							int i6 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e27->buffer->b,p12)) )) * 21) + 19) + 2);
HXDLIN(  64)							{
HXLINE(  64)								bool color3Abstract6;
HXDLIN(  64)								if ((i6 >= 0)) {
HXLINE(  64)									color3Abstract6 = (i6 >= _e27->length);
            								}
            								else {
HXLINE(  64)									color3Abstract6 = true;
            								}
HXDLIN(  64)								if (color3Abstract6) {
HXLINE(  64)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  64)								int p13 = ((i6 * 4) + _e27->byteOffset);
HXDLIN(  64)								 ::__hxcpp_memory_set_float(_e27->buffer->b,p13,v6);
            							}
            						}
            					}
            				}
HXDLIN(  64)				{
HXLINE(  64)					Float v7 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  64)					{
HXLINE(  64)						if ((0 >= _e27->length)) {
HXLINE(  64)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  64)						int p14 = _e27->byteOffset;
HXDLIN(  64)						{
HXLINE(  64)							int i7 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e27->buffer->b,p14)) )) * 21) + 18) + 2);
HXDLIN(  64)							{
HXLINE(  64)								bool color3Abstract7;
HXDLIN(  64)								if ((i7 >= 0)) {
HXLINE(  64)									color3Abstract7 = (i7 >= _e27->length);
            								}
            								else {
HXLINE(  64)									color3Abstract7 = true;
            								}
HXDLIN(  64)								if (color3Abstract7) {
HXLINE(  64)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  64)								int p15 = ((i7 * 4) + _e27->byteOffset);
HXDLIN(  64)								 ::__hxcpp_memory_set_float(_e27->buffer->b,p15,v7);
            							}
            						}
            					}
            				}
HXDLIN(  64)				{
HXLINE(  64)					Float v8 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  64)					{
HXLINE(  64)						if ((0 >= _e27->length)) {
HXLINE(  64)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  64)						int p16 = _e27->byteOffset;
HXDLIN(  64)						{
HXLINE(  64)							int i8 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e27->buffer->b,p16)) )) * 21) + 20) + 2);
HXDLIN(  64)							{
HXLINE(  64)								bool color3Abstract8;
HXDLIN(  64)								if ((i8 >= 0)) {
HXLINE(  64)									color3Abstract8 = (i8 >= _e27->length);
            								}
            								else {
HXLINE(  64)									color3Abstract8 = true;
            								}
HXDLIN(  64)								if (color3Abstract8) {
HXLINE(  64)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  64)								int p17 = ((i8 * 4) + _e27->byteOffset);
HXDLIN(  64)								 ::__hxcpp_memory_set_float(_e27->buffer->b,p17,v8);
            							}
            						}
            					}
            				}
            			}
HXDLIN(  64)			return col;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_28, ::typedarray::Float32ArrayImpl,_e28) HXARGC(1)
            		int _hx_run(int col){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_65_createPen)
HXLINE(  65)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redA(_e28,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  65)			{
HXLINE(  65)				Float v = (( (Float)((col & 255)) ) / ( (Float)(255) ));
HXDLIN(  65)				{
HXLINE(  65)					if ((0 >= _e28->length)) {
HXLINE(  65)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  65)					int p = _e28->byteOffset;
HXDLIN(  65)					{
HXLINE(  65)						int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e28->buffer->b,p)) )) * 21) + 5) + 2);
HXDLIN(  65)						{
HXLINE(  65)							bool color3Abstract;
HXDLIN(  65)							if ((i >= 0)) {
HXLINE(  65)								color3Abstract = (i >= _e28->length);
            							}
            							else {
HXLINE(  65)								color3Abstract = true;
            							}
HXDLIN(  65)							if (color3Abstract) {
HXLINE(  65)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  65)							int p1 = ((i * 4) + _e28->byteOffset);
HXDLIN(  65)							 ::__hxcpp_memory_set_float(_e28->buffer->b,p1,v);
            						}
            					}
            				}
            			}
HXDLIN(  65)			{
HXLINE(  65)				Float v1 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  65)				{
HXLINE(  65)					if ((0 >= _e28->length)) {
HXLINE(  65)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  65)					int p2 = _e28->byteOffset;
HXDLIN(  65)					{
HXLINE(  65)						int i1 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e28->buffer->b,p2)) )) * 21) + 4) + 2);
HXDLIN(  65)						{
HXLINE(  65)							bool color3Abstract1;
HXDLIN(  65)							if ((i1 >= 0)) {
HXLINE(  65)								color3Abstract1 = (i1 >= _e28->length);
            							}
            							else {
HXLINE(  65)								color3Abstract1 = true;
            							}
HXDLIN(  65)							if (color3Abstract1) {
HXLINE(  65)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  65)							int p3 = ((i1 * 4) + _e28->byteOffset);
HXDLIN(  65)							 ::__hxcpp_memory_set_float(_e28->buffer->b,p3,v1);
            						}
            					}
            				}
            			}
HXDLIN(  65)			{
HXLINE(  65)				Float v2 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  65)				{
HXLINE(  65)					if ((0 >= _e28->length)) {
HXLINE(  65)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  65)					int p4 = _e28->byteOffset;
HXDLIN(  65)					{
HXLINE(  65)						int i2 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e28->buffer->b,p4)) )) * 21) + 6) + 2);
HXDLIN(  65)						{
HXLINE(  65)							bool color3Abstract2;
HXDLIN(  65)							if ((i2 >= 0)) {
HXLINE(  65)								color3Abstract2 = (i2 >= _e28->length);
            							}
            							else {
HXLINE(  65)								color3Abstract2 = true;
            							}
HXDLIN(  65)							if (color3Abstract2) {
HXLINE(  65)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  65)							int p5 = ((i2 * 4) + _e28->byteOffset);
HXDLIN(  65)							 ::__hxcpp_memory_set_float(_e28->buffer->b,p5,v2);
            						}
            					}
            				}
            			}
HXDLIN(  65)			return col;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_29, ::typedarray::Float32ArrayImpl,_e29) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_66_createPen)
HXLINE(  66)			if ((0 >= _e29->length)) {
HXLINE(  66)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  66)			int p = _e29->byteOffset;
HXDLIN(  66)			int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e29->buffer->b,p)) )) * 21) + 6) + 2);
HXDLIN(  66)			bool color3Abstract;
HXDLIN(  66)			if ((i >= 0)) {
HXLINE(  66)				color3Abstract = (i >= _e29->length);
            			}
            			else {
HXLINE(  66)				color3Abstract = true;
            			}
HXDLIN(  66)			if (color3Abstract) {
HXLINE(  66)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  66)			int p1 = ((i * 4) + _e29->byteOffset);
HXDLIN(  66)			int color3Abstract1 = (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e29->buffer->b,p1)) ) * ( (Float)(255) ))) << 24);
HXDLIN(  66)			int color3Abstract2 = (color3Abstract1 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e29) * ( (Float)(255) ))) << 16));
HXDLIN(  66)			if ((0 >= _e29->length)) {
HXLINE(  66)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  66)			int p2 = _e29->byteOffset;
HXDLIN(  66)			int i1 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e29->buffer->b,p2)) )) * 21) + 4) + 2);
HXDLIN(  66)			bool color3Abstract3;
HXDLIN(  66)			if ((i1 >= 0)) {
HXLINE(  66)				color3Abstract3 = (i1 >= _e29->length);
            			}
            			else {
HXLINE(  66)				color3Abstract3 = true;
            			}
HXDLIN(  66)			if (color3Abstract3) {
HXLINE(  66)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  66)			int p3 = ((i1 * 4) + _e29->byteOffset);
HXDLIN(  66)			int color3Abstract4 = (color3Abstract2 | (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e29->buffer->b,p3)) ) * ( (Float)(255) ))) << 8));
HXDLIN(  66)			if ((0 >= _e29->length)) {
HXLINE(  66)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  66)			int p4 = _e29->byteOffset;
HXDLIN(  66)			int i2 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e29->buffer->b,p4)) )) * 21) + 5) + 2);
HXDLIN(  66)			bool color3Abstract5;
HXDLIN(  66)			if ((i2 >= 0)) {
HXLINE(  66)				color3Abstract5 = (i2 >= _e29->length);
            			}
            			else {
HXLINE(  66)				color3Abstract5 = true;
            			}
HXDLIN(  66)			if (color3Abstract5) {
HXLINE(  66)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  66)			int p5 = ((i2 * 4) + _e29->byteOffset);
HXDLIN(  66)			return (color3Abstract4 | ::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e29->buffer->b,p5)) ) * ( (Float)(255) ))));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_30, ::typedarray::Float32ArrayImpl,_e30) HXARGC(1)
            		int _hx_run(int col){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_67_createPen)
HXLINE(  67)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redB(_e30,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  67)			{
HXLINE(  67)				Float v = (( (Float)((col & 255)) ) / ( (Float)(255) ));
HXDLIN(  67)				{
HXLINE(  67)					if ((0 >= _e30->length)) {
HXLINE(  67)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  67)					int p = _e30->byteOffset;
HXDLIN(  67)					{
HXLINE(  67)						int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e30->buffer->b,p)) )) * 21) + 12) + 2);
HXDLIN(  67)						{
HXLINE(  67)							bool color3Abstract;
HXDLIN(  67)							if ((i >= 0)) {
HXLINE(  67)								color3Abstract = (i >= _e30->length);
            							}
            							else {
HXLINE(  67)								color3Abstract = true;
            							}
HXDLIN(  67)							if (color3Abstract) {
HXLINE(  67)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  67)							int p1 = ((i * 4) + _e30->byteOffset);
HXDLIN(  67)							 ::__hxcpp_memory_set_float(_e30->buffer->b,p1,v);
            						}
            					}
            				}
            			}
HXDLIN(  67)			{
HXLINE(  67)				Float v1 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  67)				{
HXLINE(  67)					if ((0 >= _e30->length)) {
HXLINE(  67)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  67)					int p2 = _e30->byteOffset;
HXDLIN(  67)					{
HXLINE(  67)						int i1 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e30->buffer->b,p2)) )) * 21) + 11) + 2);
HXDLIN(  67)						{
HXLINE(  67)							bool color3Abstract1;
HXDLIN(  67)							if ((i1 >= 0)) {
HXLINE(  67)								color3Abstract1 = (i1 >= _e30->length);
            							}
            							else {
HXLINE(  67)								color3Abstract1 = true;
            							}
HXDLIN(  67)							if (color3Abstract1) {
HXLINE(  67)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  67)							int p3 = ((i1 * 4) + _e30->byteOffset);
HXDLIN(  67)							 ::__hxcpp_memory_set_float(_e30->buffer->b,p3,v1);
            						}
            					}
            				}
            			}
HXDLIN(  67)			{
HXLINE(  67)				Float v2 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  67)				{
HXLINE(  67)					if ((0 >= _e30->length)) {
HXLINE(  67)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  67)					int p4 = _e30->byteOffset;
HXDLIN(  67)					{
HXLINE(  67)						int i2 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e30->buffer->b,p4)) )) * 21) + 13) + 2);
HXDLIN(  67)						{
HXLINE(  67)							bool color3Abstract2;
HXDLIN(  67)							if ((i2 >= 0)) {
HXLINE(  67)								color3Abstract2 = (i2 >= _e30->length);
            							}
            							else {
HXLINE(  67)								color3Abstract2 = true;
            							}
HXDLIN(  67)							if (color3Abstract2) {
HXLINE(  67)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  67)							int p5 = ((i2 * 4) + _e30->byteOffset);
HXDLIN(  67)							 ::__hxcpp_memory_set_float(_e30->buffer->b,p5,v2);
            						}
            					}
            				}
            			}
HXDLIN(  67)			return col;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_31, ::typedarray::Float32ArrayImpl,_e31) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_68_createPen)
HXLINE(  68)			if ((0 >= _e31->length)) {
HXLINE(  68)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  68)			int p = _e31->byteOffset;
HXDLIN(  68)			int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e31->buffer->b,p)) )) * 21) + 6) + 2);
HXDLIN(  68)			bool color3Abstract;
HXDLIN(  68)			if ((i >= 0)) {
HXLINE(  68)				color3Abstract = (i >= _e31->length);
            			}
            			else {
HXLINE(  68)				color3Abstract = true;
            			}
HXDLIN(  68)			if (color3Abstract) {
HXLINE(  68)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  68)			int p1 = ((i * 4) + _e31->byteOffset);
HXDLIN(  68)			int color3Abstract1 = (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e31->buffer->b,p1)) ) * ( (Float)(255) ))) << 24);
HXDLIN(  68)			int color3Abstract2 = (color3Abstract1 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e31) * ( (Float)(255) ))) << 16));
HXDLIN(  68)			if ((0 >= _e31->length)) {
HXLINE(  68)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  68)			int p2 = _e31->byteOffset;
HXDLIN(  68)			int i1 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e31->buffer->b,p2)) )) * 21) + 4) + 2);
HXDLIN(  68)			bool color3Abstract3;
HXDLIN(  68)			if ((i1 >= 0)) {
HXLINE(  68)				color3Abstract3 = (i1 >= _e31->length);
            			}
            			else {
HXLINE(  68)				color3Abstract3 = true;
            			}
HXDLIN(  68)			if (color3Abstract3) {
HXLINE(  68)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  68)			int p3 = ((i1 * 4) + _e31->byteOffset);
HXDLIN(  68)			int color3Abstract4 = (color3Abstract2 | (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e31->buffer->b,p3)) ) * ( (Float)(255) ))) << 8));
HXDLIN(  68)			if ((0 >= _e31->length)) {
HXLINE(  68)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  68)			int p4 = _e31->byteOffset;
HXDLIN(  68)			int i2 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e31->buffer->b,p4)) )) * 21) + 5) + 2);
HXDLIN(  68)			bool color3Abstract5;
HXDLIN(  68)			if ((i2 >= 0)) {
HXLINE(  68)				color3Abstract5 = (i2 >= _e31->length);
            			}
            			else {
HXLINE(  68)				color3Abstract5 = true;
            			}
HXDLIN(  68)			if (color3Abstract5) {
HXLINE(  68)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  68)			int p5 = ((i2 * 4) + _e31->byteOffset);
HXDLIN(  68)			return (color3Abstract4 | ::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e31->buffer->b,p5)) ) * ( (Float)(255) ))));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_32, ::typedarray::Float32ArrayImpl,_e32) HXARGC(1)
            		int _hx_run(int col){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_69_createPen)
HXLINE(  69)			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redC(_e32,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  69)			{
HXLINE(  69)				Float v = (( (Float)((col & 255)) ) / ( (Float)(255) ));
HXDLIN(  69)				{
HXLINE(  69)					if ((0 >= _e32->length)) {
HXLINE(  69)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  69)					int p = _e32->byteOffset;
HXDLIN(  69)					{
HXLINE(  69)						int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e32->buffer->b,p)) )) * 21) + 19) + 2);
HXDLIN(  69)						{
HXLINE(  69)							bool color3Abstract;
HXDLIN(  69)							if ((i >= 0)) {
HXLINE(  69)								color3Abstract = (i >= _e32->length);
            							}
            							else {
HXLINE(  69)								color3Abstract = true;
            							}
HXDLIN(  69)							if (color3Abstract) {
HXLINE(  69)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  69)							int p1 = ((i * 4) + _e32->byteOffset);
HXDLIN(  69)							 ::__hxcpp_memory_set_float(_e32->buffer->b,p1,v);
            						}
            					}
            				}
            			}
HXDLIN(  69)			{
HXLINE(  69)				Float v1 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  69)				{
HXLINE(  69)					if ((0 >= _e32->length)) {
HXLINE(  69)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  69)					int p2 = _e32->byteOffset;
HXDLIN(  69)					{
HXLINE(  69)						int i1 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e32->buffer->b,p2)) )) * 21) + 18) + 2);
HXDLIN(  69)						{
HXLINE(  69)							bool color3Abstract1;
HXDLIN(  69)							if ((i1 >= 0)) {
HXLINE(  69)								color3Abstract1 = (i1 >= _e32->length);
            							}
            							else {
HXLINE(  69)								color3Abstract1 = true;
            							}
HXDLIN(  69)							if (color3Abstract1) {
HXLINE(  69)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  69)							int p3 = ((i1 * 4) + _e32->byteOffset);
HXDLIN(  69)							 ::__hxcpp_memory_set_float(_e32->buffer->b,p3,v1);
            						}
            					}
            				}
            			}
HXDLIN(  69)			{
HXLINE(  69)				Float v2 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  69)				{
HXLINE(  69)					if ((0 >= _e32->length)) {
HXLINE(  69)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  69)					int p4 = _e32->byteOffset;
HXDLIN(  69)					{
HXLINE(  69)						int i2 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e32->buffer->b,p4)) )) * 21) + 20) + 2);
HXDLIN(  69)						{
HXLINE(  69)							bool color3Abstract2;
HXDLIN(  69)							if ((i2 >= 0)) {
HXLINE(  69)								color3Abstract2 = (i2 >= _e32->length);
            							}
            							else {
HXLINE(  69)								color3Abstract2 = true;
            							}
HXDLIN(  69)							if (color3Abstract2) {
HXLINE(  69)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  69)							int p5 = ((i2 * 4) + _e32->byteOffset);
HXDLIN(  69)							 ::__hxcpp_memory_set_float(_e32->buffer->b,p5,v2);
            						}
            					}
            				}
            			}
HXDLIN(  69)			return col;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_33, ::typedarray::Float32ArrayImpl,_e33) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_70_createPen)
HXLINE(  70)			if ((0 >= _e33->length)) {
HXLINE(  70)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  70)			int p = _e33->byteOffset;
HXDLIN(  70)			int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e33->buffer->b,p)) )) * 21) + 6) + 2);
HXDLIN(  70)			bool color3Abstract;
HXDLIN(  70)			if ((i >= 0)) {
HXLINE(  70)				color3Abstract = (i >= _e33->length);
            			}
            			else {
HXLINE(  70)				color3Abstract = true;
            			}
HXDLIN(  70)			if (color3Abstract) {
HXLINE(  70)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  70)			int p1 = ((i * 4) + _e33->byteOffset);
HXDLIN(  70)			int color3Abstract1 = (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e33->buffer->b,p1)) ) * ( (Float)(255) ))) << 24);
HXDLIN(  70)			int color3Abstract2 = (color3Abstract1 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e33) * ( (Float)(255) ))) << 16));
HXDLIN(  70)			if ((0 >= _e33->length)) {
HXLINE(  70)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  70)			int p2 = _e33->byteOffset;
HXDLIN(  70)			int i1 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e33->buffer->b,p2)) )) * 21) + 4) + 2);
HXDLIN(  70)			bool color3Abstract3;
HXDLIN(  70)			if ((i1 >= 0)) {
HXLINE(  70)				color3Abstract3 = (i1 >= _e33->length);
            			}
            			else {
HXLINE(  70)				color3Abstract3 = true;
            			}
HXDLIN(  70)			if (color3Abstract3) {
HXLINE(  70)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  70)			int p3 = ((i1 * 4) + _e33->byteOffset);
HXDLIN(  70)			int color3Abstract4 = (color3Abstract2 | (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e33->buffer->b,p3)) ) * ( (Float)(255) ))) << 8));
HXDLIN(  70)			if ((0 >= _e33->length)) {
HXLINE(  70)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  70)			int p4 = _e33->byteOffset;
HXDLIN(  70)			int i2 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e33->buffer->b,p4)) )) * 21) + 5) + 2);
HXDLIN(  70)			bool color3Abstract5;
HXDLIN(  70)			if ((i2 >= 0)) {
HXLINE(  70)				color3Abstract5 = (i2 >= _e33->length);
            			}
            			else {
HXLINE(  70)				color3Abstract5 = true;
            			}
HXDLIN(  70)			if (color3Abstract5) {
HXLINE(  70)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  70)			int p5 = ((i2 * 4) + _e33->byteOffset);
HXDLIN(  70)			return (color3Abstract4 | ::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e33->buffer->b,p5)) ) * ( (Float)(255) ))));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_34, ::typedarray::Float32ArrayImpl,_e34) HXARGC(3)
            		void _hx_run(int colorA,int colorB,int colorC){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_73_createPen)
HXLINE(  73)			{
HXLINE(  73)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redA(_e34,(( (Float)(((colorA >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  73)				{
HXLINE(  73)					Float v = (( (Float)((colorA & 255)) ) / ( (Float)(255) ));
HXDLIN(  73)					{
HXLINE(  73)						if ((0 >= _e34->length)) {
HXLINE(  73)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  73)						int p = _e34->byteOffset;
HXDLIN(  73)						{
HXLINE(  73)							int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e34->buffer->b,p)) )) * 21) + 5) + 2);
HXDLIN(  73)							{
HXLINE(  73)								bool colorAbstract;
HXDLIN(  73)								if ((i >= 0)) {
HXLINE(  73)									colorAbstract = (i >= _e34->length);
            								}
            								else {
HXLINE(  73)									colorAbstract = true;
            								}
HXDLIN(  73)								if (colorAbstract) {
HXLINE(  73)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  73)								int p1 = ((i * 4) + _e34->byteOffset);
HXDLIN(  73)								 ::__hxcpp_memory_set_float(_e34->buffer->b,p1,v);
            							}
            						}
            					}
            				}
HXDLIN(  73)				{
HXLINE(  73)					Float v1 = (( (Float)(((colorA >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  73)					{
HXLINE(  73)						if ((0 >= _e34->length)) {
HXLINE(  73)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  73)						int p2 = _e34->byteOffset;
HXDLIN(  73)						{
HXLINE(  73)							int i1 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e34->buffer->b,p2)) )) * 21) + 4) + 2);
HXDLIN(  73)							{
HXLINE(  73)								bool colorAbstract1;
HXDLIN(  73)								if ((i1 >= 0)) {
HXLINE(  73)									colorAbstract1 = (i1 >= _e34->length);
            								}
            								else {
HXLINE(  73)									colorAbstract1 = true;
            								}
HXDLIN(  73)								if (colorAbstract1) {
HXLINE(  73)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  73)								int p3 = ((i1 * 4) + _e34->byteOffset);
HXDLIN(  73)								 ::__hxcpp_memory_set_float(_e34->buffer->b,p3,v1);
            							}
            						}
            					}
            				}
HXDLIN(  73)				{
HXLINE(  73)					Float v2 = (( (Float)(((colorA >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  73)					{
HXLINE(  73)						if ((0 >= _e34->length)) {
HXLINE(  73)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  73)						int p4 = _e34->byteOffset;
HXDLIN(  73)						{
HXLINE(  73)							int i2 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e34->buffer->b,p4)) )) * 21) + 6) + 2);
HXDLIN(  73)							{
HXLINE(  73)								bool colorAbstract2;
HXDLIN(  73)								if ((i2 >= 0)) {
HXLINE(  73)									colorAbstract2 = (i2 >= _e34->length);
            								}
            								else {
HXLINE(  73)									colorAbstract2 = true;
            								}
HXDLIN(  73)								if (colorAbstract2) {
HXLINE(  73)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  73)								int p5 = ((i2 * 4) + _e34->byteOffset);
HXDLIN(  73)								 ::__hxcpp_memory_set_float(_e34->buffer->b,p5,v2);
            							}
            						}
            					}
            				}
            			}
HXDLIN(  73)			{
HXLINE(  73)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redB(_e34,(( (Float)(((colorB >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  73)				{
HXLINE(  73)					Float v3 = (( (Float)((colorB & 255)) ) / ( (Float)(255) ));
HXDLIN(  73)					{
HXLINE(  73)						if ((0 >= _e34->length)) {
HXLINE(  73)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  73)						int p6 = _e34->byteOffset;
HXDLIN(  73)						{
HXLINE(  73)							int i3 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e34->buffer->b,p6)) )) * 21) + 12) + 2);
HXDLIN(  73)							{
HXLINE(  73)								bool colorAbstract3;
HXDLIN(  73)								if ((i3 >= 0)) {
HXLINE(  73)									colorAbstract3 = (i3 >= _e34->length);
            								}
            								else {
HXLINE(  73)									colorAbstract3 = true;
            								}
HXDLIN(  73)								if (colorAbstract3) {
HXLINE(  73)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  73)								int p7 = ((i3 * 4) + _e34->byteOffset);
HXDLIN(  73)								 ::__hxcpp_memory_set_float(_e34->buffer->b,p7,v3);
            							}
            						}
            					}
            				}
HXDLIN(  73)				{
HXLINE(  73)					Float v4 = (( (Float)(((colorB >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  73)					{
HXLINE(  73)						if ((0 >= _e34->length)) {
HXLINE(  73)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  73)						int p8 = _e34->byteOffset;
HXDLIN(  73)						{
HXLINE(  73)							int i4 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e34->buffer->b,p8)) )) * 21) + 11) + 2);
HXDLIN(  73)							{
HXLINE(  73)								bool colorAbstract4;
HXDLIN(  73)								if ((i4 >= 0)) {
HXLINE(  73)									colorAbstract4 = (i4 >= _e34->length);
            								}
            								else {
HXLINE(  73)									colorAbstract4 = true;
            								}
HXDLIN(  73)								if (colorAbstract4) {
HXLINE(  73)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  73)								int p9 = ((i4 * 4) + _e34->byteOffset);
HXDLIN(  73)								 ::__hxcpp_memory_set_float(_e34->buffer->b,p9,v4);
            							}
            						}
            					}
            				}
HXDLIN(  73)				{
HXLINE(  73)					Float v5 = (( (Float)(((colorB >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  73)					{
HXLINE(  73)						if ((0 >= _e34->length)) {
HXLINE(  73)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  73)						int p10 = _e34->byteOffset;
HXDLIN(  73)						{
HXLINE(  73)							int i5 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e34->buffer->b,p10)) )) * 21) + 13) + 2);
HXDLIN(  73)							{
HXLINE(  73)								bool colorAbstract5;
HXDLIN(  73)								if ((i5 >= 0)) {
HXLINE(  73)									colorAbstract5 = (i5 >= _e34->length);
            								}
            								else {
HXLINE(  73)									colorAbstract5 = true;
            								}
HXDLIN(  73)								if (colorAbstract5) {
HXLINE(  73)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  73)								int p11 = ((i5 * 4) + _e34->byteOffset);
HXDLIN(  73)								 ::__hxcpp_memory_set_float(_e34->buffer->b,p11,v5);
            							}
            						}
            					}
            				}
            			}
HXDLIN(  73)			{
HXLINE(  73)				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redC(_e34,(( (Float)(((colorC >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  73)				{
HXLINE(  73)					Float v6 = (( (Float)((colorC & 255)) ) / ( (Float)(255) ));
HXDLIN(  73)					{
HXLINE(  73)						if ((0 >= _e34->length)) {
HXLINE(  73)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  73)						int p12 = _e34->byteOffset;
HXDLIN(  73)						{
HXLINE(  73)							int i6 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e34->buffer->b,p12)) )) * 21) + 19) + 2);
HXDLIN(  73)							{
HXLINE(  73)								bool colorAbstract6;
HXDLIN(  73)								if ((i6 >= 0)) {
HXLINE(  73)									colorAbstract6 = (i6 >= _e34->length);
            								}
            								else {
HXLINE(  73)									colorAbstract6 = true;
            								}
HXDLIN(  73)								if (colorAbstract6) {
HXLINE(  73)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  73)								int p13 = ((i6 * 4) + _e34->byteOffset);
HXDLIN(  73)								 ::__hxcpp_memory_set_float(_e34->buffer->b,p13,v6);
            							}
            						}
            					}
            				}
HXDLIN(  73)				{
HXLINE(  73)					Float v7 = (( (Float)(((colorC >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  73)					{
HXLINE(  73)						if ((0 >= _e34->length)) {
HXLINE(  73)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  73)						int p14 = _e34->byteOffset;
HXDLIN(  73)						{
HXLINE(  73)							int i7 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e34->buffer->b,p14)) )) * 21) + 18) + 2);
HXDLIN(  73)							{
HXLINE(  73)								bool colorAbstract7;
HXDLIN(  73)								if ((i7 >= 0)) {
HXLINE(  73)									colorAbstract7 = (i7 >= _e34->length);
            								}
            								else {
HXLINE(  73)									colorAbstract7 = true;
            								}
HXDLIN(  73)								if (colorAbstract7) {
HXLINE(  73)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  73)								int p15 = ((i7 * 4) + _e34->byteOffset);
HXDLIN(  73)								 ::__hxcpp_memory_set_float(_e34->buffer->b,p15,v7);
            							}
            						}
            					}
            				}
HXDLIN(  73)				{
HXLINE(  73)					Float v8 = (( (Float)(((colorC >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  73)					{
HXLINE(  73)						if ((0 >= _e34->length)) {
HXLINE(  73)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  73)						int p16 = _e34->byteOffset;
HXDLIN(  73)						{
HXLINE(  73)							int i8 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e34->buffer->b,p16)) )) * 21) + 20) + 2);
HXDLIN(  73)							{
HXLINE(  73)								bool colorAbstract8;
HXDLIN(  73)								if ((i8 >= 0)) {
HXLINE(  73)									colorAbstract8 = (i8 >= _e34->length);
            								}
            								else {
HXLINE(  73)									colorAbstract8 = true;
            								}
HXDLIN(  73)								if (colorAbstract8) {
HXLINE(  73)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  73)								int p17 = ((i8 * 4) + _e34->byteOffset);
HXDLIN(  73)								 ::__hxcpp_memory_set_float(_e34->buffer->b,p17,v8);
            							}
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_35, ::typedarray::Float32ArrayImpl,_e35) HXARGC(2)
            		void _hx_run(int color,int times){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_74_createPen)
HXLINE(  74)			int _g = 0;
HXDLIN(  74)			int _g1 = times;
HXDLIN(  74)			while((_g < _g1)){
HXLINE(  74)				_g = (_g + 1);
HXDLIN(  74)				int i = (_g - 1);
HXDLIN(  74)				{
HXLINE(  74)					{
HXLINE(  74)						::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redA(_e35,(( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  74)						{
HXLINE(  74)							Float v = (( (Float)((color & 255)) ) / ( (Float)(255) ));
HXDLIN(  74)							{
HXLINE(  74)								if ((0 >= _e35->length)) {
HXLINE(  74)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  74)								int p = _e35->byteOffset;
HXDLIN(  74)								{
HXLINE(  74)									int i1 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e35->buffer->b,p)) )) * 21) + 5) + 2);
HXDLIN(  74)									{
HXLINE(  74)										bool colorAbstract;
HXDLIN(  74)										if ((i1 >= 0)) {
HXLINE(  74)											colorAbstract = (i1 >= _e35->length);
            										}
            										else {
HXLINE(  74)											colorAbstract = true;
            										}
HXDLIN(  74)										if (colorAbstract) {
HXLINE(  74)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            										}
HXDLIN(  74)										int p1 = ((i1 * 4) + _e35->byteOffset);
HXDLIN(  74)										 ::__hxcpp_memory_set_float(_e35->buffer->b,p1,v);
            									}
            								}
            							}
            						}
HXDLIN(  74)						{
HXLINE(  74)							Float v1 = (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  74)							{
HXLINE(  74)								if ((0 >= _e35->length)) {
HXLINE(  74)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  74)								int p2 = _e35->byteOffset;
HXDLIN(  74)								{
HXLINE(  74)									int i2 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e35->buffer->b,p2)) )) * 21) + 4) + 2);
HXDLIN(  74)									{
HXLINE(  74)										bool colorAbstract1;
HXDLIN(  74)										if ((i2 >= 0)) {
HXLINE(  74)											colorAbstract1 = (i2 >= _e35->length);
            										}
            										else {
HXLINE(  74)											colorAbstract1 = true;
            										}
HXDLIN(  74)										if (colorAbstract1) {
HXLINE(  74)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            										}
HXDLIN(  74)										int p3 = ((i2 * 4) + _e35->byteOffset);
HXDLIN(  74)										 ::__hxcpp_memory_set_float(_e35->buffer->b,p3,v1);
            									}
            								}
            							}
            						}
HXDLIN(  74)						{
HXLINE(  74)							Float v2 = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  74)							{
HXLINE(  74)								if ((0 >= _e35->length)) {
HXLINE(  74)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  74)								int p4 = _e35->byteOffset;
HXDLIN(  74)								{
HXLINE(  74)									int i3 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e35->buffer->b,p4)) )) * 21) + 6) + 2);
HXDLIN(  74)									{
HXLINE(  74)										bool colorAbstract2;
HXDLIN(  74)										if ((i3 >= 0)) {
HXLINE(  74)											colorAbstract2 = (i3 >= _e35->length);
            										}
            										else {
HXLINE(  74)											colorAbstract2 = true;
            										}
HXDLIN(  74)										if (colorAbstract2) {
HXLINE(  74)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            										}
HXDLIN(  74)										int p5 = ((i3 * 4) + _e35->byteOffset);
HXDLIN(  74)										 ::__hxcpp_memory_set_float(_e35->buffer->b,p5,v2);
            									}
            								}
            							}
            						}
            					}
HXDLIN(  74)					{
HXLINE(  74)						::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redB(_e35,(( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  74)						{
HXLINE(  74)							Float v3 = (( (Float)((color & 255)) ) / ( (Float)(255) ));
HXDLIN(  74)							{
HXLINE(  74)								if ((0 >= _e35->length)) {
HXLINE(  74)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  74)								int p6 = _e35->byteOffset;
HXDLIN(  74)								{
HXLINE(  74)									int i4 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e35->buffer->b,p6)) )) * 21) + 12) + 2);
HXDLIN(  74)									{
HXLINE(  74)										bool colorAbstract3;
HXDLIN(  74)										if ((i4 >= 0)) {
HXLINE(  74)											colorAbstract3 = (i4 >= _e35->length);
            										}
            										else {
HXLINE(  74)											colorAbstract3 = true;
            										}
HXDLIN(  74)										if (colorAbstract3) {
HXLINE(  74)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            										}
HXDLIN(  74)										int p7 = ((i4 * 4) + _e35->byteOffset);
HXDLIN(  74)										 ::__hxcpp_memory_set_float(_e35->buffer->b,p7,v3);
            									}
            								}
            							}
            						}
HXDLIN(  74)						{
HXLINE(  74)							Float v4 = (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  74)							{
HXLINE(  74)								if ((0 >= _e35->length)) {
HXLINE(  74)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  74)								int p8 = _e35->byteOffset;
HXDLIN(  74)								{
HXLINE(  74)									int i5 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e35->buffer->b,p8)) )) * 21) + 11) + 2);
HXDLIN(  74)									{
HXLINE(  74)										bool colorAbstract4;
HXDLIN(  74)										if ((i5 >= 0)) {
HXLINE(  74)											colorAbstract4 = (i5 >= _e35->length);
            										}
            										else {
HXLINE(  74)											colorAbstract4 = true;
            										}
HXDLIN(  74)										if (colorAbstract4) {
HXLINE(  74)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            										}
HXDLIN(  74)										int p9 = ((i5 * 4) + _e35->byteOffset);
HXDLIN(  74)										 ::__hxcpp_memory_set_float(_e35->buffer->b,p9,v4);
            									}
            								}
            							}
            						}
HXDLIN(  74)						{
HXLINE(  74)							Float v5 = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  74)							{
HXLINE(  74)								if ((0 >= _e35->length)) {
HXLINE(  74)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  74)								int p10 = _e35->byteOffset;
HXDLIN(  74)								{
HXLINE(  74)									int i6 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e35->buffer->b,p10)) )) * 21) + 13) + 2);
HXDLIN(  74)									{
HXLINE(  74)										bool colorAbstract5;
HXDLIN(  74)										if ((i6 >= 0)) {
HXLINE(  74)											colorAbstract5 = (i6 >= _e35->length);
            										}
            										else {
HXLINE(  74)											colorAbstract5 = true;
            										}
HXDLIN(  74)										if (colorAbstract5) {
HXLINE(  74)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            										}
HXDLIN(  74)										int p11 = ((i6 * 4) + _e35->byteOffset);
HXDLIN(  74)										 ::__hxcpp_memory_set_float(_e35->buffer->b,p11,v5);
            									}
            								}
            							}
            						}
            					}
HXDLIN(  74)					{
HXLINE(  74)						::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redC(_e35,(( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )));
HXDLIN(  74)						{
HXLINE(  74)							Float v6 = (( (Float)((color & 255)) ) / ( (Float)(255) ));
HXDLIN(  74)							{
HXLINE(  74)								if ((0 >= _e35->length)) {
HXLINE(  74)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  74)								int p12 = _e35->byteOffset;
HXDLIN(  74)								{
HXLINE(  74)									int i7 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e35->buffer->b,p12)) )) * 21) + 19) + 2);
HXDLIN(  74)									{
HXLINE(  74)										bool colorAbstract6;
HXDLIN(  74)										if ((i7 >= 0)) {
HXLINE(  74)											colorAbstract6 = (i7 >= _e35->length);
            										}
            										else {
HXLINE(  74)											colorAbstract6 = true;
            										}
HXDLIN(  74)										if (colorAbstract6) {
HXLINE(  74)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            										}
HXDLIN(  74)										int p13 = ((i7 * 4) + _e35->byteOffset);
HXDLIN(  74)										 ::__hxcpp_memory_set_float(_e35->buffer->b,p13,v6);
            									}
            								}
            							}
            						}
HXDLIN(  74)						{
HXLINE(  74)							Float v7 = (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN(  74)							{
HXLINE(  74)								if ((0 >= _e35->length)) {
HXLINE(  74)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  74)								int p14 = _e35->byteOffset;
HXDLIN(  74)								{
HXLINE(  74)									int i8 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e35->buffer->b,p14)) )) * 21) + 18) + 2);
HXDLIN(  74)									{
HXLINE(  74)										bool colorAbstract7;
HXDLIN(  74)										if ((i8 >= 0)) {
HXLINE(  74)											colorAbstract7 = (i8 >= _e35->length);
            										}
            										else {
HXLINE(  74)											colorAbstract7 = true;
            										}
HXDLIN(  74)										if (colorAbstract7) {
HXLINE(  74)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            										}
HXDLIN(  74)										int p15 = ((i8 * 4) + _e35->byteOffset);
HXDLIN(  74)										 ::__hxcpp_memory_set_float(_e35->buffer->b,p15,v7);
            									}
            								}
            							}
            						}
HXDLIN(  74)						{
HXLINE(  74)							Float v8 = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(  74)							{
HXLINE(  74)								if ((0 >= _e35->length)) {
HXLINE(  74)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  74)								int p16 = _e35->byteOffset;
HXDLIN(  74)								{
HXLINE(  74)									int i9 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e35->buffer->b,p16)) )) * 21) + 20) + 2);
HXDLIN(  74)									{
HXLINE(  74)										bool colorAbstract8;
HXDLIN(  74)										if ((i9 >= 0)) {
HXLINE(  74)											colorAbstract8 = (i9 >= _e35->length);
            										}
            										else {
HXLINE(  74)											colorAbstract8 = true;
            										}
HXDLIN(  74)										if (colorAbstract8) {
HXLINE(  74)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            										}
HXDLIN(  74)										int p17 = ((i9 * 4) + _e35->byteOffset);
HXDLIN(  74)										 ::__hxcpp_memory_set_float(_e35->buffer->b,p17,v8);
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  74)				{
HXLINE(  74)					if ((0 >= _e35->length)) {
HXLINE(  74)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  74)					int p18 = _e35->byteOffset;
HXDLIN(  74)					{
HXLINE(  74)						Float pos_ = (( (Float)( ::__hxcpp_memory_get_float(_e35->buffer->b,p18)) ) + 1);
HXDLIN(  74)						{
HXLINE(  74)							if ((0 >= _e35->length)) {
HXLINE(  74)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  74)							int p19 = _e35->byteOffset;
HXDLIN(  74)							 ::__hxcpp_memory_set_float(_e35->buffer->b,p19,pos_);
            						}
HXDLIN(  74)						if ((0 >= _e35->length)) {
HXLINE(  74)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  74)						int p20 = _e35->byteOffset;
HXDLIN(  74)						float colorAbstract9 =  ::__hxcpp_memory_get_float(_e35->buffer->b,p20);
HXDLIN(  74)						if ((1 >= _e35->length)) {
HXLINE(  74)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  74)						int p21 = (4 + _e35->byteOffset);
HXDLIN(  74)						if ((colorAbstract9 > ( ::__hxcpp_memory_get_float(_e35->buffer->b,p21) - ( (float)(1) )))) {
HXLINE(  74)							if ((0 >= _e35->length)) {
HXLINE(  74)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  74)							int p = _e35->byteOffset;
HXDLIN(  74)							float v =  ::__hxcpp_memory_get_float(_e35->buffer->b,p);
HXDLIN(  74)							{
HXLINE(  74)								if ((1 >= _e35->length)) {
HXLINE(  74)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  74)								int p1 = (4 + _e35->byteOffset);
HXDLIN(  74)								 ::__hxcpp_memory_set_float(_e35->buffer->b,p1,v);
            							}
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_36, ::typedarray::Float32ArrayImpl,_e36) HXARGC(0)
            		 ::trilateral3::structure::TriInt _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b18627d9334a0b0e_75_createPen)
HXLINE(  75)			if ((0 >= _e36->length)) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p = _e36->byteOffset;
HXDLIN(  75)			int i = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p)) )) * 21) + 6) + 2);
HXDLIN(  75)			bool _g;
HXDLIN(  75)			if ((i >= 0)) {
HXLINE(  75)				_g = (i >= _e36->length);
            			}
            			else {
HXLINE(  75)				_g = true;
            			}
HXDLIN(  75)			if (_g) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p1 = ((i * 4) + _e36->byteOffset);
HXDLIN(  75)			int _g1 = (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p1)) ) * ( (Float)(255) ))) << 24);
HXDLIN(  75)			int _g2 = (_g1 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e36) * ( (Float)(255) ))) << 16));
HXDLIN(  75)			if ((0 >= _e36->length)) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p2 = _e36->byteOffset;
HXDLIN(  75)			int i1 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p2)) )) * 21) + 4) + 2);
HXDLIN(  75)			bool _g3;
HXDLIN(  75)			if ((i1 >= 0)) {
HXLINE(  75)				_g3 = (i1 >= _e36->length);
            			}
            			else {
HXLINE(  75)				_g3 = true;
            			}
HXDLIN(  75)			if (_g3) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p3 = ((i1 * 4) + _e36->byteOffset);
HXDLIN(  75)			int _g4 = (_g2 | (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p3)) ) * ( (Float)(255) ))) << 8));
HXDLIN(  75)			if ((0 >= _e36->length)) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p4 = _e36->byteOffset;
HXDLIN(  75)			int i2 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p4)) )) * 21) + 5) + 2);
HXDLIN(  75)			bool _g5;
HXDLIN(  75)			if ((i2 >= 0)) {
HXLINE(  75)				_g5 = (i2 >= _e36->length);
            			}
            			else {
HXLINE(  75)				_g5 = true;
            			}
HXDLIN(  75)			if (_g5) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p5 = ((i2 * 4) + _e36->byteOffset);
HXDLIN(  75)			int _g6 = (_g4 | ::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p5)) ) * ( (Float)(255) ))));
HXDLIN(  75)			if ((0 >= _e36->length)) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p6 = _e36->byteOffset;
HXDLIN(  75)			int i3 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p6)) )) * 21) + 6) + 2);
HXDLIN(  75)			bool _g7;
HXDLIN(  75)			if ((i3 >= 0)) {
HXLINE(  75)				_g7 = (i3 >= _e36->length);
            			}
            			else {
HXLINE(  75)				_g7 = true;
            			}
HXDLIN(  75)			if (_g7) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p7 = ((i3 * 4) + _e36->byteOffset);
HXDLIN(  75)			int _g8 = (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p7)) ) * ( (Float)(255) ))) << 24);
HXDLIN(  75)			int _g9 = (_g8 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e36) * ( (Float)(255) ))) << 16));
HXDLIN(  75)			if ((0 >= _e36->length)) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p8 = _e36->byteOffset;
HXDLIN(  75)			int i4 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p8)) )) * 21) + 4) + 2);
HXDLIN(  75)			bool _g10;
HXDLIN(  75)			if ((i4 >= 0)) {
HXLINE(  75)				_g10 = (i4 >= _e36->length);
            			}
            			else {
HXLINE(  75)				_g10 = true;
            			}
HXDLIN(  75)			if (_g10) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p9 = ((i4 * 4) + _e36->byteOffset);
HXDLIN(  75)			int _g11 = (_g9 | (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p9)) ) * ( (Float)(255) ))) << 8));
HXDLIN(  75)			if ((0 >= _e36->length)) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p10 = _e36->byteOffset;
HXDLIN(  75)			int i5 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p10)) )) * 21) + 5) + 2);
HXDLIN(  75)			bool _g12;
HXDLIN(  75)			if ((i5 >= 0)) {
HXLINE(  75)				_g12 = (i5 >= _e36->length);
            			}
            			else {
HXLINE(  75)				_g12 = true;
            			}
HXDLIN(  75)			if (_g12) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p11 = ((i5 * 4) + _e36->byteOffset);
HXDLIN(  75)			int _g13 = (_g11 | ::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p11)) ) * ( (Float)(255) ))));
HXDLIN(  75)			if ((0 >= _e36->length)) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p12 = _e36->byteOffset;
HXDLIN(  75)			int i6 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p12)) )) * 21) + 6) + 2);
HXDLIN(  75)			bool colorAbstract;
HXDLIN(  75)			if ((i6 >= 0)) {
HXLINE(  75)				colorAbstract = (i6 >= _e36->length);
            			}
            			else {
HXLINE(  75)				colorAbstract = true;
            			}
HXDLIN(  75)			if (colorAbstract) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p13 = ((i6 * 4) + _e36->byteOffset);
HXDLIN(  75)			int colorAbstract1 = (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p13)) ) * ( (Float)(255) ))) << 24);
HXDLIN(  75)			int colorAbstract2 = (colorAbstract1 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e36) * ( (Float)(255) ))) << 16));
HXDLIN(  75)			if ((0 >= _e36->length)) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p14 = _e36->byteOffset;
HXDLIN(  75)			int i7 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p14)) )) * 21) + 4) + 2);
HXDLIN(  75)			bool colorAbstract3;
HXDLIN(  75)			if ((i7 >= 0)) {
HXLINE(  75)				colorAbstract3 = (i7 >= _e36->length);
            			}
            			else {
HXLINE(  75)				colorAbstract3 = true;
            			}
HXDLIN(  75)			if (colorAbstract3) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p15 = ((i7 * 4) + _e36->byteOffset);
HXDLIN(  75)			int colorAbstract4 = (colorAbstract2 | (::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p15)) ) * ( (Float)(255) ))) << 8));
HXDLIN(  75)			if ((0 >= _e36->length)) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p16 = _e36->byteOffset;
HXDLIN(  75)			int i8 = (((::Std_obj::_hx_int(( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p16)) )) * 21) + 5) + 2);
HXDLIN(  75)			bool colorAbstract5;
HXDLIN(  75)			if ((i8 >= 0)) {
HXLINE(  75)				colorAbstract5 = (i8 >= _e36->length);
            			}
            			else {
HXLINE(  75)				colorAbstract5 = true;
            			}
HXDLIN(  75)			if (colorAbstract5) {
HXLINE(  75)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  75)			int p17 = ((i8 * 4) + _e36->byteOffset);
HXDLIN(  75)			return  ::trilateral3::structure::TriInt_obj::__alloc( HX_CTX ,_g6,_g13,(colorAbstract4 | ::Math_obj::round((( (Float)( ::__hxcpp_memory_get_float(_e36->buffer->b,p17)) ) * ( (Float)(255) )))));
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_37, ::typedarray::Float32ArrayImpl,_e37) HXARGC(0)
            		Float _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_76_createPen)
HXLINE(  76)			if ((0 >= _e37->length)) {
HXLINE(  76)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  76)			int p = _e37->byteOffset;
HXDLIN(  76)			return ( (Float)( ::__hxcpp_memory_get_float(_e37->buffer->b,p)) );
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_38, ::typedarray::Float32ArrayImpl,_e38) HXARGC(1)
            		Float _hx_run(Float pos_){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_77_createPen)
HXLINE(  77)			{
HXLINE(  77)				if ((0 >= _e38->length)) {
HXLINE(  77)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  77)				int p = _e38->byteOffset;
HXDLIN(  77)				 ::__hxcpp_memory_set_float(_e38->buffer->b,p,pos_);
            			}
HXDLIN(  77)			if ((0 >= _e38->length)) {
HXLINE(  77)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  77)			int p1 = _e38->byteOffset;
HXDLIN(  77)			float colorAbstract =  ::__hxcpp_memory_get_float(_e38->buffer->b,p1);
HXDLIN(  77)			if ((1 >= _e38->length)) {
HXLINE(  77)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  77)			int p2 = (4 + _e38->byteOffset);
HXDLIN(  77)			if ((colorAbstract > ( ::__hxcpp_memory_get_float(_e38->buffer->b,p2) - ( (float)(1) )))) {
HXLINE(  77)				if ((0 >= _e38->length)) {
HXLINE(  77)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  77)				int p = _e38->byteOffset;
HXDLIN(  77)				float v =  ::__hxcpp_memory_get_float(_e38->buffer->b,p);
HXDLIN(  77)				{
HXLINE(  77)					if ((1 >= _e38->length)) {
HXLINE(  77)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  77)					int p1 = (4 + _e38->byteOffset);
HXDLIN(  77)					 ::__hxcpp_memory_set_float(_e38->buffer->b,p1,v);
            				}
            			}
HXDLIN(  77)			return pos_;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_39, ::typedarray::Float32ArrayImpl,_e39) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_78_createPen)
HXLINE(  78)			return ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(_e39);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_40, ::typedarray::Float32ArrayImpl,_e40) HXARGC(1)
            		int _hx_run(int id){
            			HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_79_createPen)
HXLINE(  79)			return ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::set_size(_e40,id);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_b18627d9334a0b0e_25_createPen)
HXLINE(  26)		 ::typedarray::Float32ArrayImpl t = this->colorTriangles;
HXLINE(  29)		 ::typedarray::Float32ArrayImpl _e = t;
HXLINE(  30)		 ::typedarray::Float32ArrayImpl _e1 = t;
HXLINE(  31)		 ::typedarray::Float32ArrayImpl _e2 = t;
HXLINE(  32)		 ::typedarray::Float32ArrayImpl _e3 = t;
HXLINE(  33)		 ::typedarray::Float32ArrayImpl _e4 = t;
HXLINE(  34)		 ::typedarray::Float32ArrayImpl _e5 = t;
HXLINE(  35)		 ::typedarray::Float32ArrayImpl _e6 = t;
HXLINE(  36)		 ::typedarray::Float32ArrayImpl _e7 = t;
HXLINE(  37)		 ::typedarray::Float32ArrayImpl _e8 = t;
HXLINE(  38)		 ::typedarray::Float32ArrayImpl _e9 = t;
HXLINE(  39)		 ::typedarray::Float32ArrayImpl _e10 = t;
HXLINE(  40)		 ::typedarray::Float32ArrayImpl _e11 = t;
HXLINE(  41)		 ::typedarray::Float32ArrayImpl _e12 = t;
HXLINE(  42)		 ::typedarray::Float32ArrayImpl _e13 = t;
HXLINE(  43)		 ::typedarray::Float32ArrayImpl _e14 = t;
HXLINE(  44)		 ::typedarray::Float32ArrayImpl _e15 = t;
HXLINE(  45)		 ::typedarray::Float32ArrayImpl _e16 = t;
HXLINE(  28)		 ::Dynamic triangleAbstract =  ::Dynamic(::hx::Anon_obj::Create(17)
            			->setFixed(0,HX_("rotateTrig",d7,d8,0e,85), ::Dynamic(new _hx_Closure_2(_e2)))
            			->setFixed(1,HX_("triangle",c8,be,c5,8d), ::Dynamic(new _hx_Closure_14(_e14)))
            			->setFixed(2,HX_("get_x",4f,a5,60,91), ::Dynamic(new _hx_Closure_8(_e8)))
            			->setFixed(3,HX_("get_y",50,a5,60,91), ::Dynamic(new _hx_Closure_10(_e10)))
            			->setFixed(4,HX_("get_z",51,a5,60,91), ::Dynamic(new _hx_Closure_12(_e12)))
            			->setFixed(5,HX_("liteHit",c5,d1,fb,93), ::Dynamic(new _hx_Closure_4(_e4)))
            			->setFixed(6,HX_("moveDelta",27,b7,ed,94), ::Dynamic(new _hx_Closure_1(_e1)))
            			->setFixed(7,HX_("get_back",b0,95,cb,c0), ::Dynamic(new _hx_Closure_6(_e6)))
            			->setFixed(8,HX_("rotate",5b,46,20,cb), ::Dynamic(new _hx_Closure_0(_e)))
            			->setFixed(9,HX_("fullHit",04,38,2f,d0), ::Dynamic(new _hx_Closure_3(_e3)))
            			->setFixed(10,HX_("get_right",33,68,0d,2d), ::Dynamic(new _hx_Closure_7(_e7)))
            			->setFixed(11,HX_("getTriangle3D",af,89,3b,36), ::Dynamic(new _hx_Closure_15(_e15)))
            			->setFixed(12,HX_("transform",6c,2d,93,45), ::Dynamic(new _hx_Closure_16(_e16)))
            			->setFixed(13,HX_("get_bottom",b4,56,00,56), ::Dynamic(new _hx_Closure_5(_e5)))
            			->setFixed(14,HX_("set_x",5b,9b,2f,7a), ::Dynamic(new _hx_Closure_9(_e9)))
            			->setFixed(15,HX_("set_y",5c,9b,2f,7a), ::Dynamic(new _hx_Closure_11(_e11)))
            			->setFixed(16,HX_("set_z",5d,9b,2f,7a), ::Dynamic(new _hx_Closure_13(_e13))));
HXLINE(  49)		 ::typedarray::Float32ArrayImpl _e17 = t;
HXLINE(  50)		 ::typedarray::Float32ArrayImpl _e18 = t;
HXLINE(  51)		 ::typedarray::Float32ArrayImpl _e19 = t;
HXLINE(  52)		 ::typedarray::Float32ArrayImpl _e20 = t;
HXLINE(  53)		 ::typedarray::Float32ArrayImpl _e21 = t;
HXLINE(  54)		 ::typedarray::Float32ArrayImpl _e22 = t;
HXLINE(  55)		 ::typedarray::Float32ArrayImpl _e23 = t;
HXLINE(  56)		 ::typedarray::Float32ArrayImpl _e24 = t;
HXLINE(  57)		 ::typedarray::Float32ArrayImpl _e25 = t;
HXLINE(  58)		 ::typedarray::Float32ArrayImpl _e26 = t;
HXLINE(  48)		 ::Dynamic drawAbstract =  ::Dynamic(::hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("triangle",c8,be,c5,8d), ::Dynamic(new _hx_Closure_17(_e17)))
            			->setFixed(1,HX_("triangleCurrent",51,ee,2b,9e),triangleAbstract)
            			->setFixed(2,HX_("get_size",4a,5c,0e,cc), ::Dynamic(new _hx_Closure_25(_e25)))
            			->setFixed(3,HX_("hasNext",6d,a5,46,18), ::Dynamic(new _hx_Closure_22(_e22)))
            			->setFixed(4,HX_("set_pos",37,b7,cb,19), ::Dynamic(new _hx_Closure_24(_e24)))
            			->setFixed(5,HX_("get_pos",2b,26,ca,26), ::Dynamic(new _hx_Closure_23(_e23)))
            			->setFixed(6,HX_("getTriangle3D",af,89,3b,36), ::Dynamic(new _hx_Closure_20(_e20)))
            			->setFixed(7,HX_("transform",6c,2d,93,45), ::Dynamic(new _hx_Closure_18(_e18)))
            			->setFixed(8,HX_("next",f3,84,02,49), ::Dynamic(new _hx_Closure_21(_e21)))
            			->setFixed(9,HX_("transformRange",b1,c0,a1,5a), ::Dynamic(new _hx_Closure_19(_e19)))
            			->setFixed(10,HX_("set_size",be,b5,6b,7a), ::Dynamic(new _hx_Closure_26(_e26))));
HXLINE(  64)		 ::typedarray::Float32ArrayImpl _e27 = t;
HXLINE(  65)		 ::typedarray::Float32ArrayImpl _e28 = t;
HXLINE(  66)		 ::typedarray::Float32ArrayImpl _e29 = t;
HXLINE(  67)		 ::typedarray::Float32ArrayImpl _e30 = t;
HXLINE(  68)		 ::typedarray::Float32ArrayImpl _e31 = t;
HXLINE(  69)		 ::typedarray::Float32ArrayImpl _e32 = t;
HXLINE(  70)		 ::typedarray::Float32ArrayImpl _e33 = t;
HXLINE(  63)		 ::Dynamic color3Abstract =  ::Dynamic(::hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("set_argbA",d8,5d,81,4c), ::Dynamic(new _hx_Closure_28(_e28)))
            			->setFixed(1,HX_("set_argbB",d9,5d,81,4c), ::Dynamic(new _hx_Closure_30(_e30)))
            			->setFixed(2,HX_("set_argbC",da,5d,81,4c), ::Dynamic(new _hx_Closure_32(_e32)))
            			->setFixed(3,HX_("get_argbA",cc,71,30,69), ::Dynamic(new _hx_Closure_29(_e29)))
            			->setFixed(4,HX_("get_argbB",cd,71,30,69), ::Dynamic(new _hx_Closure_31(_e31)))
            			->setFixed(5,HX_("get_argbC",ce,71,30,69), ::Dynamic(new _hx_Closure_33(_e33)))
            			->setFixed(6,HX_("set_argb",49,a2,8c,6e), ::Dynamic(new _hx_Closure_27(_e27))));
HXLINE(  73)		 ::typedarray::Float32ArrayImpl _e34 = t;
HXLINE(  74)		 ::typedarray::Float32ArrayImpl _e35 = t;
HXLINE(  75)		 ::typedarray::Float32ArrayImpl _e36 = t;
HXLINE(  76)		 ::typedarray::Float32ArrayImpl _e37 = t;
HXLINE(  77)		 ::typedarray::Float32ArrayImpl _e38 = t;
HXLINE(  78)		 ::typedarray::Float32ArrayImpl _e39 = t;
HXLINE(  79)		 ::typedarray::Float32ArrayImpl _e40 = t;
HXLINE(  73)		 ::Dynamic colorAbstract =  ::Dynamic(::hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("cornerColors",65,87,ed,a2), ::Dynamic(new _hx_Closure_34(_e34)))
            			->setFixed(1,HX_("getTriInt",ba,b1,09,c7), ::Dynamic(new _hx_Closure_36(_e36)))
            			->setFixed(2,HX_("get_size",4a,5c,0e,cc), ::Dynamic(new _hx_Closure_39(_e39)))
            			->setFixed(3,HX_("colorTriangles",c8,da,ed,e6), ::Dynamic(new _hx_Closure_35(_e35)))
            			->setFixed(4,HX_("set_pos",37,b7,cb,19), ::Dynamic(new _hx_Closure_38(_e38)))
            			->setFixed(5,HX_("get_pos",2b,26,ca,26), ::Dynamic(new _hx_Closure_37(_e37)))
            			->setFixed(6,HX_("color3current",c9,64,01,5a),color3Abstract)
            			->setFixed(7,HX_("set_size",be,b5,6b,7a), ::Dynamic(new _hx_Closure_40(_e40))));
HXLINE(  82)		this->pen =  ::trilateral3::drawing::Pen_obj::__alloc( HX_CTX ,drawAbstract,colorAbstract);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PenNodule_obj,createPen,(void))

 ::typedarray::Float32ArrayImpl PenNodule_obj::get_data(){
            	HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_87_get_data)
HXDLIN(  87)		 ::typedarray::Float32ArrayImpl this1 = this->colorTriangles;
HXDLIN(  87)		int start = 2;
HXDLIN(  87)		 ::Dynamic end = ((::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this1) * 21) + 2);
HXDLIN(  87)		if (::hx::IsNull( end )) {
HXDLIN(  87)			end = this1->length;
            		}
HXDLIN(  87)		if ((start < 0)) {
HXDLIN(  87)			start = (this1->length + start);
            		}
HXDLIN(  87)		if (::hx::IsLess( end,0 )) {
HXDLIN(  87)			end = (this1->length + end);
            		}
HXDLIN(  87)		return ::typedarray::_Float32Array::Float32Array_Impl__obj::_new(null(),null(),this1->buffer,((start * 4) + this1->byteOffset),((( (int)(end) ) - start) * 4));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PenNodule_obj,get_data,return )

int PenNodule_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_92_get_size)
HXDLIN(  92)		return ::Std_obj::_hx_int(( (Float)((::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this->colorTriangles) * 3)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PenNodule_obj,get_size,return )

int PenNodule_obj::largeEnough;


::hx::ObjectPtr< PenNodule_obj > PenNodule_obj::__new(::hx::Null< bool >  __o_useGLScale) {
	::hx::ObjectPtr< PenNodule_obj > __this = new PenNodule_obj();
	__this->__construct(__o_useGLScale);
	return __this;
}

::hx::ObjectPtr< PenNodule_obj > PenNodule_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_useGLScale) {
	PenNodule_obj *__this = (PenNodule_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PenNodule_obj), true, "trilateral3.nodule.PenNodule"));
	*(void **)__this = PenNodule_obj::_hx_vtable;
	__this->__construct(__o_useGLScale);
	return __this;
}

PenNodule_obj::PenNodule_obj()
{
}

void PenNodule_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PenNodule);
	HX_MARK_MEMBER_NAME(colorTriangles,"colorTriangles");
	HX_MARK_MEMBER_NAME(pen,"pen");
	HX_MARK_END_CLASS();
}

void PenNodule_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(colorTriangles,"colorTriangles");
	HX_VISIT_MEMBER_NAME(pen,"pen");
}

::hx::Val PenNodule_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { return ::hx::Val( pen ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_data() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_size() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_data") ) { return ::hx::Val( get_data_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return ::hx::Val( get_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"createPen") ) { return ::hx::Val( createPen_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTriangles") ) { return ::hx::Val( colorTriangles ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PenNodule_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"largeEnough") ) { outValue = ( largeEnough ); return true; }
	}
	return false;
}

::hx::Val PenNodule_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { pen=inValue.Cast<  ::trilateral3::drawing::Pen >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTriangles") ) { colorTriangles=inValue.Cast<  ::typedarray::Float32ArrayImpl >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PenNodule_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"largeEnough") ) { largeEnough=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PenNodule_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("colorTriangles",c8,da,ed,e6));
	outFields->push(HX_("pen",d9,54,55,00));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("size",c1,a0,53,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PenNodule_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::typedarray::Float32ArrayImpl */ ,(int)offsetof(PenNodule_obj,colorTriangles),HX_("colorTriangles",c8,da,ed,e6)},
	{::hx::fsObject /*  ::trilateral3::drawing::Pen */ ,(int)offsetof(PenNodule_obj,pen),HX_("pen",d9,54,55,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PenNodule_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &PenNodule_obj::largeEnough,HX_("largeEnough",cb,b7,3c,cb)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PenNodule_obj_sMemberFields[] = {
	HX_("colorTriangles",c8,da,ed,e6),
	HX_("pen",d9,54,55,00),
	HX_("createPen",3d,2b,e3,49),
	HX_("get_data",b3,11,1e,c2),
	HX_("get_size",4a,5c,0e,cc),
	::String(null()) };

static void PenNodule_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PenNodule_obj::largeEnough,"largeEnough");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PenNodule_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PenNodule_obj::largeEnough,"largeEnough");
};

#endif

::hx::Class PenNodule_obj::__mClass;

static ::String PenNodule_obj_sStaticFields[] = {
	HX_("largeEnough",cb,b7,3c,cb),
	::String(null())
};

void PenNodule_obj::__register()
{
	PenNodule_obj _hx_dummy;
	PenNodule_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.nodule.PenNodule",c8,6f,ae,d4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PenNodule_obj::__GetStatic;
	__mClass->mSetStaticField = &PenNodule_obj::__SetStatic;
	__mClass->mMarkFunc = PenNodule_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PenNodule_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PenNodule_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PenNodule_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PenNodule_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PenNodule_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PenNodule_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PenNodule_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b18627d9334a0b0e_12_boot)
HXDLIN(  12)		largeEnough = 20000000;
            	}
}

} // end namespace trilateral3
} // end namespace nodule
