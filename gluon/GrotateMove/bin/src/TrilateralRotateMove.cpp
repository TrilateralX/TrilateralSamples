// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TrilateralRotateMove
#include <TrilateralRotateMove.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLContext
#include <gluon/webgl/native/GLContext.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_kitGL_gluon_InterleaveAlterGL
#include <kitGL/gluon/InterleaveAlterGL.h>
#endif
#ifndef INCLUDED_trilateral3_Trilateral
#include <trilateral3/Trilateral.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Pen
#include <trilateral3/drawing/Pen.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif
#ifndef INCLUDED_trilateral3_nodule_PenNodule
#include <trilateral3/nodule/PenNodule.h>
#endif
#ifndef INCLUDED_trilateral3_structure_StartEnd
#include <trilateral3/structure/StartEnd.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferView
#include <typedarray/ArrayBufferView.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferViewBase
#include <typedarray/ArrayBufferViewBase.h>
#endif
#ifndef INCLUDED_typedarray_Float32ArrayImpl
#include <typedarray/Float32ArrayImpl.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_78e1f4ff0a1f76ee_14_new,"TrilateralRotateMove","new",0xd2c1c3ea,"TrilateralRotateMove.new","TrilateralRotateMove.hx",14,0x9754a6c6)
HX_LOCAL_STACK_FRAME(_hx_pos_78e1f4ff0a1f76ee_27_draw,"TrilateralRotateMove","draw",0x9037513a,"TrilateralRotateMove.draw","TrilateralRotateMove.hx",27,0x9754a6c6)
HX_LOCAL_STACK_FRAME(_hx_pos_78e1f4ff0a1f76ee_67_renderDraw,"TrilateralRotateMove","renderDraw",0x9c321830,"TrilateralRotateMove.renderDraw","TrilateralRotateMove.hx",67,0x9754a6c6)
HX_LOCAL_STACK_FRAME(_hx_pos_78e1f4ff0a1f76ee_93_rotateCentre,"TrilateralRotateMove","rotateCentre",0x1409ed0c,"TrilateralRotateMove.rotateCentre","TrilateralRotateMove.hx",93,0x9754a6c6)
HX_LOCAL_STACK_FRAME(_hx_pos_78e1f4ff0a1f76ee_97_get_x,"TrilateralRotateMove","get_x",0x51da0f59,"TrilateralRotateMove.get_x","TrilateralRotateMove.hx",97,0x9754a6c6)
HX_LOCAL_STACK_FRAME(_hx_pos_78e1f4ff0a1f76ee_99_set_x,"TrilateralRotateMove","set_x",0x3aa90565,"TrilateralRotateMove.set_x","TrilateralRotateMove.hx",99,0x9754a6c6)
HX_LOCAL_STACK_FRAME(_hx_pos_78e1f4ff0a1f76ee_106_get_y,"TrilateralRotateMove","get_y",0x51da0f5a,"TrilateralRotateMove.get_y","TrilateralRotateMove.hx",106,0x9754a6c6)
HX_LOCAL_STACK_FRAME(_hx_pos_78e1f4ff0a1f76ee_108_set_y,"TrilateralRotateMove","set_y",0x3aa90566,"TrilateralRotateMove.set_y","TrilateralRotateMove.hx",108,0x9754a6c6)

void TrilateralRotateMove_obj::__construct( ::gluon::webgl::native::GLContext gl){
            	HX_GC_STACKFRAME(&_hx_pos_78e1f4ff0a1f76ee_14_new)
HXLINE(  22)		this->penNodule =  ::trilateral3::nodule::PenNodule_obj::__alloc( HX_CTX ,null());
HXLINE(  20)		this->dy = ::Array_obj< Float >::__new(0);
HXLINE(  19)		this->dx = ::Array_obj< Float >::__new(0);
HXLINE(  18)		this->theta = ((Float)0.);
HXLINE(  24)		super::__construct(gl);
            	}

Dynamic TrilateralRotateMove_obj::__CreateEmpty() { return new TrilateralRotateMove_obj; }

void *TrilateralRotateMove_obj::_hx_vtable = 0;

Dynamic TrilateralRotateMove_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TrilateralRotateMove_obj > _hx_result = new TrilateralRotateMove_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TrilateralRotateMove_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x08f3c51c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x08f3c51c;
	} else {
		return inClassId==(int)0x1c3f678c;
	}
}

void TrilateralRotateMove_obj::draw(){
            	HX_GC_STACKFRAME(&_hx_pos_78e1f4ff0a1f76ee_27_draw)
HXLINE(  28)		this->interleaveDataGL =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("get_data",b3,11,1e,c2),this->penNodule->get_data_dyn())
            			->setFixed(1,HX_("get_size",4a,5c,0e,cc),this->penNodule->get_size_dyn()));
HXLINE(  29)		this->pen = this->penNodule->pen;
HXLINE(  30)		this->curr = this->pen->drawType->__Field(HX_("triangleCurrent",51,ee,2b,9e),::hx::paccDynamic);
HXLINE(  31)		::haxe::Log_obj::trace(HX_("TrilateralRotateMove example",02,4b,78,45),::hx::SourceInfo(HX_("TrilateralRotateMove.hx",c6,a6,54,97),31,HX_("TrilateralRotateMove",f8,46,8b,3a),HX_("draw",04,2c,70,42)));
HXLINE(  33)		Float start = ( (Float)(this->pen->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) );
HXLINE(  34)		 ::Dynamic drawType = this->pen->drawType;
HXDLIN(  34)		drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(300,100,0,100,300,0,500,300,0);
HXDLIN(  34)		 ::trilateral3::matrix::MatrixDozen m = ::trilateral3::Trilateral_obj::transformMatrix;
HXDLIN(  34)		if (::hx::IsNotNull( m )) {
HXLINE(  34)			drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(m);
            		}
HXDLIN(  34)		drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(  34)		int len = 1;
HXLINE(  35)		Float end = ((start + len) - ( (Float)(1) ));
HXLINE(  36)		 ::Dynamic drawType1 = this->pen->drawType;
HXDLIN(  36)		drawType1->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(300,100,0,100,300,0,500,300,0);
HXDLIN(  36)		 ::trilateral3::matrix::MatrixDozen m1 = ::trilateral3::Trilateral_obj::transformMatrix;
HXDLIN(  36)		if (::hx::IsNotNull( m1 )) {
HXLINE(  36)			drawType1->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(m1);
            		}
HXDLIN(  36)		drawType1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(  36)		int len1 = 1;
HXLINE(  38)		end = (end + len1);
HXLINE(  39)		int _g = ::Std_obj::_hx_int(start);
HXDLIN(  39)		this->triangle =  ::trilateral3::structure::StartEnd_obj::__alloc( HX_CTX ,_g,::Std_obj::_hx_int(end));
HXLINE(  40)		int red = -65536;
HXLINE(  41)		{
HXLINE(  41)			 ::trilateral3::drawing::Pen _this = this->pen;
HXDLIN(  41)			_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(start);
HXDLIN(  41)			_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(start);
            		}
HXLINE(  43)		{
HXLINE(  43)			 ::trilateral3::drawing::Pen _this1 = this->pen;
HXDLIN(  43)			int color = red;
HXDLIN(  43)			 ::trilateral3::structure::StartEnd this1 = this->triangle;
HXDLIN(  43)			if ((color == -1)) {
HXLINE(  43)				color = _this1->currentColor;
            			}
HXDLIN(  43)			_this1->colorType->__Field(HX_("colorTriangles",c8,da,ed,e6),::hx::paccDynamic)(color,((this1->end - this1->start) + 1));
            		}
HXLINE(  46)		int green = -16711936;
HXLINE(  47)		len1 = 0;
HXLINE(  48)		start = ( (Float)(this->pen->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) );
HXLINE(  49)		{
HXLINE(  49)			int _g1 = 0;
HXDLIN(  49)			while((_g1 < 1000)){
HXLINE(  49)				_g1 = (_g1 + 1);
HXDLIN(  49)				int i = (_g1 - 1);
HXLINE(  50)				 ::Dynamic drawType = this->pen->drawType;
HXDLIN(  50)				drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(30,10,0,10,30,0,50,30,0);
HXDLIN(  50)				 ::trilateral3::matrix::MatrixDozen m = ::trilateral3::Trilateral_obj::transformMatrix;
HXDLIN(  50)				if (::hx::IsNotNull( m )) {
HXLINE(  50)					drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(m);
            				}
HXDLIN(  50)				drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(  50)				len1 = (len1 + 1);
HXLINE(  51)				{
HXLINE(  51)					 ::trilateral3::drawing::Pen _g = this->pen;
HXDLIN(  51)					{
HXLINE(  51)						Float v = (( (Float)(_g->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) ) - ( (Float)(1) ));
HXDLIN(  51)						_g->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
HXDLIN(  51)						_g->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
            					}
            				}
HXLINE(  52)				this->set_x((::Math_obj::random() * ( (Float)(1000) )));
HXLINE(  53)				this->set_y((::Math_obj::random() * ( (Float)(1000) )));
HXLINE(  54)				this->dx->push((( (Float)(3) ) * (::Math_obj::random() - ((Float)0.5))));
HXLINE(  55)				this->dy->push((( (Float)(3) ) * (::Math_obj::random() - ((Float)0.5))));
HXLINE(  56)				{
HXLINE(  56)					 ::Dynamic this1 = this->pen->colorType->__Field(HX_("color3current",c9,64,01,5a),::hx::paccDynamic);
HXDLIN(  56)					this1->__Field(HX_("set_argbA",d8,5d,81,4c),::hx::paccDynamic)(::Std_obj::_hx_int((((Float)4294967295) * ::Math_obj::random())));
            				}
HXLINE(  57)				{
HXLINE(  57)					 ::Dynamic this2 = this->pen->colorType->__Field(HX_("color3current",c9,64,01,5a),::hx::paccDynamic);
HXDLIN(  57)					this2->__Field(HX_("set_argbB",d9,5d,81,4c),::hx::paccDynamic)(::Std_obj::_hx_int((((Float)4294967295) * ::Math_obj::random())));
            				}
HXLINE(  58)				{
HXLINE(  58)					 ::Dynamic this3 = this->pen->colorType->__Field(HX_("color3current",c9,64,01,5a),::hx::paccDynamic);
HXDLIN(  58)					this3->__Field(HX_("set_argbC",da,5d,81,4c),::hx::paccDynamic)(::Std_obj::_hx_int((((Float)4294967295) * ::Math_obj::random())));
            				}
HXLINE(  59)				Float _hx_tmp = (this->get_x() + 30);
HXDLIN(  59)				Float _hx_tmp1 = (this->get_y() + 30);
HXDLIN(  59)				this->rotateCentre(_hx_tmp,_hx_tmp1,((::Math_obj::random() * ::Math_obj::PI) * ( (Float)(2) )));
HXLINE(  60)				{
HXLINE(  60)					 ::trilateral3::drawing::Pen _g2 = this->pen;
HXDLIN(  60)					{
HXLINE(  60)						Float v1 = (_g2->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)() + 1);
HXDLIN(  60)						_g2->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
HXDLIN(  60)						_g2->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
            					}
            				}
            			}
            		}
HXLINE(  62)		int _g2 = ::Std_obj::_hx_int(start);
HXDLIN(  62)		this->all =  ::trilateral3::structure::StartEnd_obj::__alloc( HX_CTX ,_g2,::Std_obj::_hx_int((( (Float)(this->pen->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) ) - ( (Float)(1) ))));
HXLINE(  63)		{
HXLINE(  63)			 ::trilateral3::drawing::Pen _this2 = this->pen;
HXDLIN(  63)			int color1 = green;
HXDLIN(  63)			 ::trilateral3::structure::StartEnd this2 = this->triangle;
HXDLIN(  63)			if ((color1 == -1)) {
HXLINE(  63)				color1 = _this2->currentColor;
            			}
HXDLIN(  63)			_this2->colorType->__Field(HX_("colorTriangles",c8,da,ed,e6),::hx::paccDynamic)(color1,((this2->end - this2->start) + 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrilateralRotateMove_obj,draw,(void))

void TrilateralRotateMove_obj::renderDraw(){
            	HX_STACKFRAME(&_hx_pos_78e1f4ff0a1f76ee_67_renderDraw)
HXLINE(  68)		{
HXLINE(  68)			 ::trilateral3::drawing::Pen _this = this->pen;
HXDLIN(  68)			Float v = ( (Float)(this->triangle->start) );
HXDLIN(  68)			_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
HXDLIN(  68)			_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v);
            		}
HXLINE(  69)		this->set_x((( (Float)(500) ) - (( (Float)(100) ) * ::Math_obj::sin(this->theta))));
HXLINE(  70)		this->set_y((500 + (( (Float)(100) ) * ::Math_obj::cos(this->theta))));
HXLINE(  71)		{
HXLINE(  71)			 ::trilateral3::drawing::Pen _this1 = this->pen;
HXDLIN(  71)			Float v1 = ( (Float)((this->triangle->start + 1)) );
HXDLIN(  71)			_this1->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
HXDLIN(  71)			_this1->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(v1);
            		}
HXLINE(  72)		this->rotateCentre(( (Float)(300) ),( (Float)(300) ),(::Math_obj::PI / ( (Float)(100) )));
HXLINE(  73)		 ::TrilateralRotateMove _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  73)		_hx_tmp->theta = (_hx_tmp->theta + (::Math_obj::PI / ( (Float)(100) )));
HXLINE(  75)		int count = 0;
HXLINE(  76)		{
HXLINE(  76)			int _g = this->all->start;
HXDLIN(  76)			int _g1 = this->all->end;
HXDLIN(  76)			while((_g < _g1)){
HXLINE(  76)				_g = (_g + 1);
HXDLIN(  76)				int i = (_g - 1);
HXLINE(  77)				{
HXLINE(  77)					 ::trilateral3::drawing::Pen _this = this->pen;
HXDLIN(  77)					_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(i);
HXDLIN(  77)					_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(i);
            				}
HXLINE(  78)				{
HXLINE(  78)					 ::TrilateralRotateMove _g1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  78)					Float _hx_tmp = _g1->get_x();
HXDLIN(  78)					_g1->set_x((_hx_tmp + this->dx->__get(count)));
            				}
HXLINE(  79)				{
HXLINE(  79)					 ::TrilateralRotateMove _g2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  79)					Float _hx_tmp1 = _g2->get_y();
HXDLIN(  79)					_g2->set_y((_hx_tmp1 + this->dy->__get(count)));
            				}
HXLINE(  80)				bool _hx_tmp2;
HXDLIN(  80)				if (!((this->get_x() > 1000))) {
HXLINE(  80)					_hx_tmp2 = (this->get_x() < 0);
            				}
            				else {
HXLINE(  80)					_hx_tmp2 = true;
            				}
HXDLIN(  80)				if (_hx_tmp2) {
HXLINE(  81)					this->dx[count] = -(this->dx->__get(count));
HXLINE(  82)					{
HXLINE(  82)						 ::TrilateralRotateMove _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  82)						Float _hx_tmp = _g->get_x();
HXDLIN(  82)						_g->set_x((_hx_tmp + this->dx->__get(count)));
            					}
            				}
HXLINE(  84)				bool _hx_tmp3;
HXDLIN(  84)				if (!((this->get_y() > 1000))) {
HXLINE(  84)					_hx_tmp3 = (this->get_y() < 0);
            				}
            				else {
HXLINE(  84)					_hx_tmp3 = true;
            				}
HXDLIN(  84)				if (_hx_tmp3) {
HXLINE(  85)					this->dy[count] = -(this->dy->__get(count));
HXLINE(  86)					{
HXLINE(  86)						 ::TrilateralRotateMove _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  86)						Float _hx_tmp = _g->get_y();
HXDLIN(  86)						_g->set_y((_hx_tmp + this->dy->__get(count)));
            					}
            				}
HXLINE(  88)				count = (count + 1);
            			}
            		}
            	}


void TrilateralRotateMove_obj::rotateCentre(Float vx,Float vy,Float v){
            	HX_STACKFRAME(&_hx_pos_78e1f4ff0a1f76ee_93_rotateCentre)
HXDLIN(  93)		this->curr->__Field(HX_("rotate",5b,46,20,cb),::hx::paccDynamic)(((vx - ( (Float)(1000) )) / ( (Float)(1000) )),(-((vy - ( (Float)(1000) ))) / ( (Float)(1000) )),v);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TrilateralRotateMove_obj,rotateCentre,(void))

Float TrilateralRotateMove_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_78e1f4ff0a1f76ee_97_get_x)
HXDLIN(  97)		return ((( (Float)(this->curr->__Field(HX_("get_x",4f,a5,60,91),::hx::paccDynamic)()) ) * ( (Float)(1000) )) + 1000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrilateralRotateMove_obj,get_x,return )

Float TrilateralRotateMove_obj::set_x(Float v){
            	HX_STACKFRAME(&_hx_pos_78e1f4ff0a1f76ee_99_set_x)
HXLINE( 100)		v = ((v - ( (Float)(1000) )) / ( (Float)(1000) ));
HXLINE( 101)		this->curr->__Field(HX_("set_x",5b,9b,2f,7a),::hx::paccDynamic)(v);
HXLINE( 102)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TrilateralRotateMove_obj,set_x,return )

Float TrilateralRotateMove_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_78e1f4ff0a1f76ee_106_get_y)
HXDLIN( 106)		return -(((( (Float)(this->curr->__Field(HX_("get_y",50,a5,60,91),::hx::paccDynamic)()) ) * ( (Float)(1000) )) - ( (Float)(1000) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrilateralRotateMove_obj,get_y,return )

Float TrilateralRotateMove_obj::set_y(Float v){
            	HX_STACKFRAME(&_hx_pos_78e1f4ff0a1f76ee_108_set_y)
HXLINE( 109)		v = (-((v - ( (Float)(1000) ))) / ( (Float)(1000) ));
HXLINE( 110)		this->curr->__Field(HX_("set_y",5c,9b,2f,7a),::hx::paccDynamic)(v);
HXLINE( 111)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TrilateralRotateMove_obj,set_y,return )


::hx::ObjectPtr< TrilateralRotateMove_obj > TrilateralRotateMove_obj::__new( ::gluon::webgl::native::GLContext gl) {
	::hx::ObjectPtr< TrilateralRotateMove_obj > __this = new TrilateralRotateMove_obj();
	__this->__construct(gl);
	return __this;
}

::hx::ObjectPtr< TrilateralRotateMove_obj > TrilateralRotateMove_obj::__alloc(::hx::Ctx *_hx_ctx, ::gluon::webgl::native::GLContext gl) {
	TrilateralRotateMove_obj *__this = (TrilateralRotateMove_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TrilateralRotateMove_obj), true, "TrilateralRotateMove"));
	*(void **)__this = TrilateralRotateMove_obj::_hx_vtable;
	__this->__construct(gl);
	return __this;
}

TrilateralRotateMove_obj::TrilateralRotateMove_obj()
{
}

void TrilateralRotateMove_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TrilateralRotateMove);
	HX_MARK_MEMBER_NAME(triangle,"triangle");
	HX_MARK_MEMBER_NAME(all,"all");
	HX_MARK_MEMBER_NAME(curr,"curr");
	HX_MARK_MEMBER_NAME(theta,"theta");
	HX_MARK_MEMBER_NAME(dx,"dx");
	HX_MARK_MEMBER_NAME(dy,"dy");
	HX_MARK_MEMBER_NAME(pen,"pen");
	HX_MARK_MEMBER_NAME(penNodule,"penNodule");
	 ::kitGL::gluon::InterleaveAlterGL_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TrilateralRotateMove_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(triangle,"triangle");
	HX_VISIT_MEMBER_NAME(all,"all");
	HX_VISIT_MEMBER_NAME(curr,"curr");
	HX_VISIT_MEMBER_NAME(theta,"theta");
	HX_VISIT_MEMBER_NAME(dx,"dx");
	HX_VISIT_MEMBER_NAME(dy,"dy");
	HX_VISIT_MEMBER_NAME(pen,"pen");
	HX_VISIT_MEMBER_NAME(penNodule,"penNodule");
	 ::kitGL::gluon::InterleaveAlterGL_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TrilateralRotateMove_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_y() ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { return ::hx::Val( dx ); }
		if (HX_FIELD_EQ(inName,"dy") ) { return ::hx::Val( dy ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { return ::hx::Val( all ); }
		if (HX_FIELD_EQ(inName,"pen") ) { return ::hx::Val( pen ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"curr") ) { return ::hx::Val( curr ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"theta") ) { return ::hx::Val( theta ); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return ::hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return ::hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"triangle") ) { return ::hx::Val( triangle ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"penNodule") ) { return ::hx::Val( penNodule ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderDraw") ) { return ::hx::Val( renderDraw_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rotateCentre") ) { return ::hx::Val( rotateCentre_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TrilateralRotateMove_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_y(inValue.Cast< Float >()) ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { dx=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dy") ) { dy=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { all=inValue.Cast<  ::trilateral3::structure::StartEnd >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pen") ) { pen=inValue.Cast<  ::trilateral3::drawing::Pen >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"curr") ) { curr=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"theta") ) { theta=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"triangle") ) { triangle=inValue.Cast<  ::trilateral3::structure::StartEnd >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"penNodule") ) { penNodule=inValue.Cast<  ::trilateral3::nodule::PenNodule >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TrilateralRotateMove_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("triangle",c8,be,c5,8d));
	outFields->push(HX_("all",21,f9,49,00));
	outFields->push(HX_("curr",f2,4a,c9,41));
	outFields->push(HX_("theta",1e,84,86,0f));
	outFields->push(HX_("dx",94,57,00,00));
	outFields->push(HX_("dy",95,57,00,00));
	outFields->push(HX_("pen",d9,54,55,00));
	outFields->push(HX_("penNodule",c4,02,81,14));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TrilateralRotateMove_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::trilateral3::structure::StartEnd */ ,(int)offsetof(TrilateralRotateMove_obj,triangle),HX_("triangle",c8,be,c5,8d)},
	{::hx::fsObject /*  ::trilateral3::structure::StartEnd */ ,(int)offsetof(TrilateralRotateMove_obj,all),HX_("all",21,f9,49,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TrilateralRotateMove_obj,curr),HX_("curr",f2,4a,c9,41)},
	{::hx::fsFloat,(int)offsetof(TrilateralRotateMove_obj,theta),HX_("theta",1e,84,86,0f)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(TrilateralRotateMove_obj,dx),HX_("dx",94,57,00,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(TrilateralRotateMove_obj,dy),HX_("dy",95,57,00,00)},
	{::hx::fsObject /*  ::trilateral3::drawing::Pen */ ,(int)offsetof(TrilateralRotateMove_obj,pen),HX_("pen",d9,54,55,00)},
	{::hx::fsObject /*  ::trilateral3::nodule::PenNodule */ ,(int)offsetof(TrilateralRotateMove_obj,penNodule),HX_("penNodule",c4,02,81,14)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TrilateralRotateMove_obj_sStaticStorageInfo = 0;
#endif

static ::String TrilateralRotateMove_obj_sMemberFields[] = {
	HX_("triangle",c8,be,c5,8d),
	HX_("all",21,f9,49,00),
	HX_("curr",f2,4a,c9,41),
	HX_("theta",1e,84,86,0f),
	HX_("dx",94,57,00,00),
	HX_("dy",95,57,00,00),
	HX_("pen",d9,54,55,00),
	HX_("penNodule",c4,02,81,14),
	HX_("draw",04,2c,70,42),
	HX_("renderDraw",7a,26,7a,df),
	HX_("rotateCentre",d6,a1,29,c4),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	::String(null()) };

::hx::Class TrilateralRotateMove_obj::__mClass;

void TrilateralRotateMove_obj::__register()
{
	TrilateralRotateMove_obj _hx_dummy;
	TrilateralRotateMove_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TrilateralRotateMove",f8,46,8b,3a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TrilateralRotateMove_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TrilateralRotateMove_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TrilateralRotateMove_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TrilateralRotateMove_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

