// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_dsHelper_flat_io__Float32Flat_Float32Flat_Impl_
#include <dsHelper/flat/io/_Float32Flat/Float32Flat_Impl_.h>
#endif
#ifndef INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_
#include <dsHelper/flatInterleave/_FloatColorTriangles/FloatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_trilateral3_geom__FlatColorTriangles_FlatColorTriangles_Impl_
#include <trilateral3/geom/_FlatColorTriangles/FlatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_Vertex
#include <trilateral3/matrix/Vertex.h>
#endif
#ifndef INCLUDED_trilateral3_structure_StartEnd
#include <trilateral3/structure/StartEnd.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferView
#include <typedarray/ArrayBufferView.h>
#endif
#ifndef INCLUDED_typedarray_ArrayBufferViewBase
#include <typedarray/ArrayBufferViewBase.h>
#endif
#ifndef INCLUDED_typedarray_Float32ArrayImpl
#include <typedarray/Float32ArrayImpl.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_427f8a9dc71a6f50_24_transform,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_","transform",0xe8d1d638,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_.transform","trilateral3/geom/FlatColorTriangles.hx",24,0x212e9e52)
HX_LOCAL_STACK_FRAME(_hx_pos_427f8a9dc71a6f50_50_transformRange,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_","transformRange",0xbc0fb465,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_.transformRange","trilateral3/geom/FlatColorTriangles.hx",50,0x212e9e52)
namespace trilateral3{
namespace geom{
namespace _FlatColorTriangles{

void FlatColorTriangles_Impl__obj::__construct() { }

Dynamic FlatColorTriangles_Impl__obj::__CreateEmpty() { return new FlatColorTriangles_Impl__obj; }

void *FlatColorTriangles_Impl__obj::_hx_vtable = 0;

Dynamic FlatColorTriangles_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlatColorTriangles_Impl__obj > _hx_result = new FlatColorTriangles_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlatColorTriangles_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5351a3de;
}

void FlatColorTriangles_Impl__obj::transform( ::typedarray::Float32ArrayImpl this1, ::trilateral3::matrix::MatrixDozen m){
            	HX_GC_STACKFRAME(&_hx_pos_427f8a9dc71a6f50_24_transform)
HXLINE(  25)		Float _g = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN(  25)		Float _g1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1);
HXDLIN(  25)		 ::trilateral3::matrix::Vertex pa =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g,_g1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(this1),((Float)1.));
HXLINE(  26)		Float _g2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1);
HXDLIN(  26)		Float _g3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1);
HXDLIN(  26)		 ::trilateral3::matrix::Vertex pb =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g2,_g3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(this1),((Float)1.));
HXLINE(  27)		Float _g4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1);
HXDLIN(  27)		Float _g5 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1);
HXDLIN(  27)		 ::trilateral3::matrix::Vertex pc =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g4,_g5,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(this1),((Float)1.));
HXLINE(  28)		 ::trilateral3::matrix::Vertex v2 =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,((((m->a * pa->x) + (m->b * pa->y)) + (m->c * pa->z)) + m->d),((((m->e * pa->x) + (m->f * pa->y)) + (m->g * pa->z)) + m->h),((((m->i * pa->x) + (m->j * pa->y)) + (m->k * pa->z)) + m->l),((Float)1.));
HXDLIN(  28)		pa = v2;
HXLINE(  29)		 ::trilateral3::matrix::Vertex v21 =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,((((m->a * pb->x) + (m->b * pb->y)) + (m->c * pb->z)) + m->d),((((m->e * pb->x) + (m->f * pb->y)) + (m->g * pb->z)) + m->h),((((m->i * pb->x) + (m->j * pb->y)) + (m->k * pb->z)) + m->l),((Float)1.));
HXDLIN(  29)		pb = v21;
HXLINE(  30)		 ::trilateral3::matrix::Vertex v22 =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,((((m->a * pc->x) + (m->b * pc->y)) + (m->c * pc->z)) + m->d),((((m->e * pc->x) + (m->f * pc->y)) + (m->g * pc->z)) + m->h),((((m->i * pc->x) + (m->j * pc->y)) + (m->k * pc->z)) + m->l),((Float)1.));
HXDLIN(  30)		pc = v22;
HXLINE(  31)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(this1,pa->x);
HXLINE(  32)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(this1,pa->y);
HXLINE(  33)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_az(this1,pa->z);
HXLINE(  34)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(this1,pb->x);
HXLINE(  35)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(this1,pb->y);
HXLINE(  36)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bz(this1,pb->z);
HXLINE(  37)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(this1,pc->x);
HXLINE(  38)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(this1,pc->y);
HXLINE(  39)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cz(this1,pc->z);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlatColorTriangles_Impl__obj,transform,(void))

void FlatColorTriangles_Impl__obj::transformRange( ::typedarray::Float32ArrayImpl this1, ::trilateral3::matrix::MatrixDozen m, ::trilateral3::structure::StartEnd startEnd){
            	HX_STACKFRAME(&_hx_pos_427f8a9dc71a6f50_50_transformRange)
HXLINE(  51)		int start = startEnd->start;
HXLINE(  52)		int end = startEnd->end;
HXLINE(  53)		{
HXLINE(  53)			{
HXLINE(  53)				if ((0 >= this1->length)) {
HXLINE(  53)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  53)				int p = this1->byteOffset;
HXDLIN(  53)				 ::__hxcpp_memory_set_float(this1->buffer->b,p,start);
            			}
HXDLIN(  53)			if ((0 >= this1->length)) {
HXLINE(  53)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  53)			int p1 = this1->byteOffset;
HXDLIN(  53)			float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,p1);
HXDLIN(  53)			if ((1 >= this1->length)) {
HXLINE(  53)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            			}
HXDLIN(  53)			int p2 = (4 + this1->byteOffset);
HXDLIN(  53)			if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,p2) - ( (float)(1) )))) {
HXLINE(  53)				if ((0 >= this1->length)) {
HXLINE(  53)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN(  53)				int p = this1->byteOffset;
HXDLIN(  53)				float v =  ::__hxcpp_memory_get_float(this1->buffer->b,p);
HXDLIN(  53)				{
HXLINE(  53)					if ((1 >= this1->length)) {
HXLINE(  53)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN(  53)					int p1 = (4 + this1->byteOffset);
HXDLIN(  53)					 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            				}
            			}
            		}
HXLINE(  54)		if ((end > (::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this1) - 1))) {
HXLINE(  54)			::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this1);
            		}
HXLINE(  55)		{
HXLINE(  55)			int _g = start;
HXDLIN(  55)			int _g1 = (end + 1);
HXDLIN(  55)			while((_g < _g1)){
HXLINE(  55)				_g = (_g + 1);
HXDLIN(  55)				int i = (_g - 1);
HXLINE(  56)				::trilateral3::geom::_FlatColorTriangles::FlatColorTriangles_Impl__obj::transform(this1,m);
HXLINE(  57)				{
HXLINE(  57)					{
HXLINE(  57)						if ((0 >= this1->length)) {
HXLINE(  57)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  57)						int p = this1->byteOffset;
HXDLIN(  57)						Float pos_ = (( (Float)( ::__hxcpp_memory_get_float(this1->buffer->b,p)) ) + ((Float)1.));
HXDLIN(  57)						{
HXLINE(  57)							if ((0 >= this1->length)) {
HXLINE(  57)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  57)							int p1 = this1->byteOffset;
HXDLIN(  57)							 ::__hxcpp_memory_set_float(this1->buffer->b,p1,pos_);
            						}
HXDLIN(  57)						if ((0 >= this1->length)) {
HXLINE(  57)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  57)						int p2 = this1->byteOffset;
HXDLIN(  57)						float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,p2);
HXDLIN(  57)						if ((1 >= this1->length)) {
HXLINE(  57)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  57)						int p3 = (4 + this1->byteOffset);
HXDLIN(  57)						if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,p3) - ( (float)(1) )))) {
HXLINE(  57)							if ((0 >= this1->length)) {
HXLINE(  57)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            							}
HXDLIN(  57)							int p = this1->byteOffset;
HXDLIN(  57)							float v =  ::__hxcpp_memory_get_float(this1->buffer->b,p);
HXDLIN(  57)							{
HXLINE(  57)								if ((1 >= this1->length)) {
HXLINE(  57)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            								}
HXDLIN(  57)								int p1 = (4 + this1->byteOffset);
HXDLIN(  57)								 ::__hxcpp_memory_set_float(this1->buffer->b,p1,v);
            							}
            						}
            					}
HXDLIN(  57)					{
HXLINE(  57)						if ((0 >= this1->length)) {
HXLINE(  57)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            						}
HXDLIN(  57)						int p4 = this1->byteOffset;
HXDLIN(  57)						 ::__hxcpp_memory_get_float(this1->buffer->b,p4);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlatColorTriangles_Impl__obj,transformRange,(void))


FlatColorTriangles_Impl__obj::FlatColorTriangles_Impl__obj()
{
}

bool FlatColorTriangles_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { outValue = transform_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformRange") ) { outValue = transformRange_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlatColorTriangles_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlatColorTriangles_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlatColorTriangles_Impl__obj::__mClass;

static ::String FlatColorTriangles_Impl__obj_sStaticFields[] = {
	HX_("transform",6c,2d,93,45),
	HX_("transformRange",b1,c0,a1,5a),
	::String(null())
};

void FlatColorTriangles_Impl__obj::__register()
{
	FlatColorTriangles_Impl__obj _hx_dummy;
	FlatColorTriangles_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_",3a,52,9e,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlatColorTriangles_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlatColorTriangles_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlatColorTriangles_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlatColorTriangles_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlatColorTriangles_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace geom
} // end namespace _FlatColorTriangles
