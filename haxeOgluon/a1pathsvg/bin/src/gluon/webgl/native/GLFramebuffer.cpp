// Generated by Haxe 4.2.0-rc.1+cb30bd580
#include <hxcpp.h>

#ifndef INCLUDED_c8a65390b4b62196
#define INCLUDED_c8a65390b4b62196
#include "/usr/local/lib/haxeLibrary/gluon/git/src/gluon/webgl/native/ES2Context.h"
#endif
#ifndef INCLUDED_2710e462964f946c
#define INCLUDED_2710e462964f946c
#include "stdlib.h"
#endif
#ifndef INCLUDED_gluon_webgl_native_GLContext
#include <gluon/webgl/native/GLContext.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLFramebuffer
#include <gluon/webgl/native/GLFramebuffer.h>
#endif
#ifndef INCLUDED_gluon_webgl_native_GLObject
#include <gluon/webgl/native/GLObject.h>
#endif

namespace gluon{
namespace webgl{
namespace native{

void GLFramebuffer_obj::__construct( ::gluon::webgl::native::GLContext context,unsigned int handle){
	super::__construct(context,handle);
}

Dynamic GLFramebuffer_obj::__CreateEmpty() { return new GLFramebuffer_obj; }

void *GLFramebuffer_obj::_hx_vtable = 0;

Dynamic GLFramebuffer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GLFramebuffer_obj > _hx_result = new GLFramebuffer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GLFramebuffer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6d90cfad) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x6d90cfad;
	} else {
		return inClassId==(int)0x753aa023;
	}
}

void GLFramebuffer_obj::finalize(){
	{
		 ::gluon::webgl::native::GLContext _this = this->context;
		{
			if ((this->handle != 0)) {
				glDeleteFramebuffers(1,&(this->handle));
			}
			this->handle = ( (unsigned int)(0) );
		}
	}
	this->handle = ( (unsigned int)(0) );
}



::hx::ObjectPtr< GLFramebuffer_obj > GLFramebuffer_obj::__new( ::gluon::webgl::native::GLContext context,unsigned int handle) {
	::hx::ObjectPtr< GLFramebuffer_obj > __this = new GLFramebuffer_obj();
	__this->__construct(context,handle);
	return __this;
}

::hx::ObjectPtr< GLFramebuffer_obj > GLFramebuffer_obj::__alloc(::hx::Ctx *_hx_ctx, ::gluon::webgl::native::GLContext context,unsigned int handle) {
	GLFramebuffer_obj *__this = (GLFramebuffer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GLFramebuffer_obj), true, "gluon.webgl.native.GLFramebuffer"));
	*(void **)__this = GLFramebuffer_obj::_hx_vtable;
	__this->__construct(context,handle);
	return __this;
}

GLFramebuffer_obj::GLFramebuffer_obj()
{
}

::hx::Val GLFramebuffer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"finalize") ) { return ::hx::Val( finalize_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GLFramebuffer_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *GLFramebuffer_obj_sStaticStorageInfo = 0;
#endif

static ::String GLFramebuffer_obj_sMemberFields[] = {
	HX_("finalize",9e,45,3a,f5),
	::String(null()) };

::hx::Class GLFramebuffer_obj::__mClass;

void GLFramebuffer_obj::__register()
{
	GLFramebuffer_obj _hx_dummy;
	GLFramebuffer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gluon.webgl.native.GLFramebuffer",c5,48,b5,86);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GLFramebuffer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GLFramebuffer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLFramebuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLFramebuffer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gluon
} // end namespace webgl
} // end namespace native
