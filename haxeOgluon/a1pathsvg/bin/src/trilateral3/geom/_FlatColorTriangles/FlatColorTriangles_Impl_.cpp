// Generated by Haxe 4.2.0-rc.1+cb30bd580
#include <hxcpp.h>

#ifndef INCLUDED_dsHelper_flat_io__Float32Flat_Float32Flat_Impl_
#include <dsHelper/flat/io/_Float32Flat/Float32Flat_Impl_.h>
#endif
#ifndef INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_
#include <dsHelper/flatInterleave/_FloatColorTriangles/FloatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_trilateral3_geom__FlatColorTriangles_FlatColorTriangles_Impl_
#include <trilateral3/geom/_FlatColorTriangles/FlatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_Vertex
#include <trilateral3/matrix/Vertex.h>
#endif
#ifndef INCLUDED_trilateral3_structure_StartEnd
#include <trilateral3/structure/StartEnd.h>
#endif

namespace trilateral3{
namespace geom{
namespace _FlatColorTriangles{

void FlatColorTriangles_Impl__obj::__construct() { }

Dynamic FlatColorTriangles_Impl__obj::__CreateEmpty() { return new FlatColorTriangles_Impl__obj; }

void *FlatColorTriangles_Impl__obj::_hx_vtable = 0;

Dynamic FlatColorTriangles_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlatColorTriangles_Impl__obj > _hx_result = new FlatColorTriangles_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlatColorTriangles_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5351a3de;
}

void FlatColorTriangles_Impl__obj::transform( ::haxe::io::ArrayBufferViewImpl this1, ::trilateral3::matrix::MatrixDozen m){
            	HX_JUST_GC_STACKFRAME
	Float _g = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
	Float _g1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1);
	 ::trilateral3::matrix::Vertex pa =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g,_g1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(this1),((Float)1.));
	Float _g2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1);
	Float _g3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1);
	 ::trilateral3::matrix::Vertex pb =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g2,_g3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(this1),((Float)1.));
	Float _g4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1);
	Float _g5 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1);
	 ::trilateral3::matrix::Vertex pc =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g4,_g5,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(this1),((Float)1.));
	 ::trilateral3::matrix::Vertex v2 = ( ( ::trilateral3::matrix::Vertex)( ::Dynamic(::hx::Anon_obj::Create(4)
		->setFixed(0,HX_("w",77,00,00,00),((Float)1.))
		->setFixed(1,HX_("x",78,00,00,00),((((m->a * pa->x) + (m->b * pa->y)) + (m->c * pa->z)) + m->d))
		->setFixed(2,HX_("y",79,00,00,00),((((m->e * pa->x) + (m->f * pa->y)) + (m->g * pa->z)) + m->h))
		->setFixed(3,HX_("z",7a,00,00,00),((((m->i * pa->x) + (m->j * pa->y)) + (m->k * pa->z)) + m->l)))) );
	pa = v2;
	 ::trilateral3::matrix::Vertex v21 = ( ( ::trilateral3::matrix::Vertex)( ::Dynamic(::hx::Anon_obj::Create(4)
		->setFixed(0,HX_("w",77,00,00,00),((Float)1.))
		->setFixed(1,HX_("x",78,00,00,00),((((m->a * pb->x) + (m->b * pb->y)) + (m->c * pb->z)) + m->d))
		->setFixed(2,HX_("y",79,00,00,00),((((m->e * pb->x) + (m->f * pb->y)) + (m->g * pb->z)) + m->h))
		->setFixed(3,HX_("z",7a,00,00,00),((((m->i * pb->x) + (m->j * pb->y)) + (m->k * pb->z)) + m->l)))) );
	pb = v21;
	 ::trilateral3::matrix::Vertex v22 = ( ( ::trilateral3::matrix::Vertex)( ::Dynamic(::hx::Anon_obj::Create(4)
		->setFixed(0,HX_("w",77,00,00,00),((Float)1.))
		->setFixed(1,HX_("x",78,00,00,00),((((m->a * pc->x) + (m->b * pc->y)) + (m->c * pc->z)) + m->d))
		->setFixed(2,HX_("y",79,00,00,00),((((m->e * pc->x) + (m->f * pc->y)) + (m->g * pc->z)) + m->h))
		->setFixed(3,HX_("z",7a,00,00,00),((((m->i * pc->x) + (m->j * pc->y)) + (m->k * pc->z)) + m->l)))) );
	pc = v22;
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(this1,pa->x);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(this1,pa->y);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_az(this1,pa->z);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(this1,pb->x);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(this1,pb->y);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bz(this1,pb->z);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(this1,pc->x);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(this1,pc->y);
	::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cz(this1,pc->z);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlatColorTriangles_Impl__obj,transform,(void))

void FlatColorTriangles_Impl__obj::transformRange( ::haxe::io::ArrayBufferViewImpl this1, ::trilateral3::matrix::MatrixDozen m, ::trilateral3::structure::StartEnd startEnd){
	int start = startEnd->start;
	int end = startEnd->end;
	{
		if ((0 < (this1->byteLength >> 2))) {
			this1->bytes->setFloat(this1->byteOffset,( (Float)(start) ));
		}
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool _hx_tmp;
		if ((pos >= 0)) {
			_hx_tmp = ((pos + 4) > _this->length);
		}
		else {
			_hx_tmp = true;
		}
		if (_hx_tmp) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		Float _hx_tmp1 =  ::__hxcpp_memory_get_float(_this->b,pos);
		 ::haxe::io::Bytes _this1 = this1->bytes;
		int pos1 = (4 + this1->byteOffset);
		bool _hx_tmp2;
		if ((pos1 >= 0)) {
			_hx_tmp2 = ((pos1 + 4) > _this1->length);
		}
		else {
			_hx_tmp2 = true;
		}
		if (_hx_tmp2) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		if ((_hx_tmp1 > ( ::__hxcpp_memory_get_float(_this1->b,pos1) - ( (Float)(1) )))) {
			 ::haxe::io::Bytes _this = this1->bytes;
			int pos = this1->byteOffset;
			bool _hx_tmp;
			if ((pos >= 0)) {
				_hx_tmp = ((pos + 4) > _this->length);
			}
			else {
				_hx_tmp = true;
			}
			if (_hx_tmp) {
				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
			}
			Float value =  ::__hxcpp_memory_get_float(_this->b,pos);
			if ((1 < (this1->byteLength >> 2))) {
				this1->bytes->setFloat((4 + this1->byteOffset),value);
			}
		}
	}
	if ((end > (::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this1) - 1))) {
		::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this1);
	}
	{
		int _g = start;
		int _g1 = (end + 1);
		while((_g < _g1)){
			_g = (_g + 1);
			int i = (_g - 1);
			::trilateral3::geom::_FlatColorTriangles::FlatColorTriangles_Impl__obj::transform(this1,m);
			{
				{
					 ::haxe::io::Bytes _this = this1->bytes;
					int pos = this1->byteOffset;
					bool pos_;
					if ((pos >= 0)) {
						pos_ = ((pos + 4) > _this->length);
					}
					else {
						pos_ = true;
					}
					if (pos_) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					Float pos_1 = ( ::__hxcpp_memory_get_float(_this->b,pos) + ((Float)1.));
					if ((0 < (this1->byteLength >> 2))) {
						this1->bytes->setFloat(this1->byteOffset,pos_1);
					}
					 ::haxe::io::Bytes _this1 = this1->bytes;
					int pos1 = this1->byteOffset;
					bool _hx_tmp;
					if ((pos1 >= 0)) {
						_hx_tmp = ((pos1 + 4) > _this1->length);
					}
					else {
						_hx_tmp = true;
					}
					if (_hx_tmp) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					Float _hx_tmp1 =  ::__hxcpp_memory_get_float(_this1->b,pos1);
					 ::haxe::io::Bytes _this2 = this1->bytes;
					int pos2 = (4 + this1->byteOffset);
					bool _hx_tmp2;
					if ((pos2 >= 0)) {
						_hx_tmp2 = ((pos2 + 4) > _this2->length);
					}
					else {
						_hx_tmp2 = true;
					}
					if (_hx_tmp2) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					if ((_hx_tmp1 > ( ::__hxcpp_memory_get_float(_this2->b,pos2) - ( (Float)(1) )))) {
						 ::haxe::io::Bytes _this = this1->bytes;
						int pos = this1->byteOffset;
						bool _hx_tmp;
						if ((pos >= 0)) {
							_hx_tmp = ((pos + 4) > _this->length);
						}
						else {
							_hx_tmp = true;
						}
						if (_hx_tmp) {
							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
						}
						Float value =  ::__hxcpp_memory_get_float(_this->b,pos);
						if ((1 < (this1->byteLength >> 2))) {
							this1->bytes->setFloat((4 + this1->byteOffset),value);
						}
					}
				}
				{
					 ::haxe::io::Bytes _this3 = this1->bytes;
					int pos3 = this1->byteOffset;
					bool _hx_tmp3;
					if ((pos3 >= 0)) {
						_hx_tmp3 = ((pos3 + 4) > _this3->length);
					}
					else {
						_hx_tmp3 = true;
					}
					if (_hx_tmp3) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					 ::__hxcpp_memory_get_float(_this3->b,pos3);
				}
			}
		}
	}
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlatColorTriangles_Impl__obj,transformRange,(void))


FlatColorTriangles_Impl__obj::FlatColorTriangles_Impl__obj()
{
}

bool FlatColorTriangles_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { outValue = transform_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformRange") ) { outValue = transformRange_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlatColorTriangles_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlatColorTriangles_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlatColorTriangles_Impl__obj::__mClass;

static ::String FlatColorTriangles_Impl__obj_sStaticFields[] = {
	HX_("transform",6c,2d,93,45),
	HX_("transformRange",b1,c0,a1,5a),
	::String(null())
};

void FlatColorTriangles_Impl__obj::__register()
{
	FlatColorTriangles_Impl__obj _hx_dummy;
	FlatColorTriangles_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_",3a,52,9e,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlatColorTriangles_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlatColorTriangles_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlatColorTriangles_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlatColorTriangles_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlatColorTriangles_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace geom
} // end namespace _FlatColorTriangles
