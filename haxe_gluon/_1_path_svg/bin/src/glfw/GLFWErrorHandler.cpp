// Generated by Haxe 4.2.0-rc.1+cb30bd580
#include <hxcpp.h>

#ifndef INCLUDED_glfw_GLFWErrorHandler
#include <glfw/GLFWErrorHandler.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

namespace glfw{

void GLFWErrorHandler_obj::__construct() { }

Dynamic GLFWErrorHandler_obj::__CreateEmpty() { return new GLFWErrorHandler_obj; }

void *GLFWErrorHandler_obj::_hx_vtable = 0;

Dynamic GLFWErrorHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GLFWErrorHandler_obj > _hx_result = new GLFWErrorHandler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLFWErrorHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2af456d2;
}

 ::Dynamic GLFWErrorHandler_obj::cb;

void GLFWErrorHandler_obj::nativeCallack(int error,const char* message){
	 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
	::String _hx_tmp1;
	if (::hx::IsNull( message )) {
		_hx_tmp1 = HX_("null",87,9e,0e,49);
	}
	else {
		_hx_tmp1 = ::String(message);
	}
	_hx_tmp(((error + HX_(": ",a6,32,00,00)) + _hx_tmp1),::hx::SourceInfo(HX_("glfw/GLFW.hx",2f,aa,45,71),34,HX_("glfw.GLFWErrorHandler",70,b1,db,6d),HX_("nativeCallack",94,5e,6f,13)));
	if (::hx::IsNotNull( ::glfw::GLFWErrorHandler_obj::cb )) {
		::glfw::GLFWErrorHandler_obj::cb(error,::String(message));
	}
}


void GLFWErrorHandler_obj::setCallback( ::Dynamic func){
	::glfw::GLFWErrorHandler_obj::cb = func;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLFWErrorHandler_obj,setCallback,(void))


GLFWErrorHandler_obj::GLFWErrorHandler_obj()
{
}

bool GLFWErrorHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"cb") ) { outValue = ( cb ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setCallback") ) { outValue = setCallback_dyn(); return true; }
	}
	return false;
}

bool GLFWErrorHandler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"cb") ) { cb=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GLFWErrorHandler_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo GLFWErrorHandler_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &GLFWErrorHandler_obj::cb,HX_("cb",9f,56,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void GLFWErrorHandler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLFWErrorHandler_obj::cb,"cb");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLFWErrorHandler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLFWErrorHandler_obj::cb,"cb");
};

#endif

::hx::Class GLFWErrorHandler_obj::__mClass;

static ::String GLFWErrorHandler_obj_sStaticFields[] = {
	HX_("cb",9f,56,00,00),
	HX_("setCallback",87,63,67,af),
	::String(null())
};

void GLFWErrorHandler_obj::__register()
{
	GLFWErrorHandler_obj _hx_dummy;
	GLFWErrorHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("glfw.GLFWErrorHandler",70,b1,db,6d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLFWErrorHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &GLFWErrorHandler_obj::__SetStatic;
	__mClass->mMarkFunc = GLFWErrorHandler_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GLFWErrorHandler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< GLFWErrorHandler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLFWErrorHandler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLFWErrorHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLFWErrorHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace glfw
