// Generated by Haxe 4.2.0-rc.1+cb30bd580
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dsHelper_flat_io__Float32Flat_Float32Flat_Impl_
#include <dsHelper/flat/io/_Float32Flat/Float32Flat_Impl_.h>
#endif
#ifndef INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_
#include <dsHelper/flatInterleave/_FloatColorTriangles/FloatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_trilateral3_Trilateral
#include <trilateral3/Trilateral.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Pen
#include <trilateral3/drawing/Pen.h>
#endif
#ifndef INCLUDED_trilateral3_geom__FlatColorTriangles_FlatColorTriangles_Impl_
#include <trilateral3/geom/_FlatColorTriangles/FlatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_Vertex
#include <trilateral3/matrix/Vertex.h>
#endif
#ifndef INCLUDED_trilateral3_nodule_PenNodule
#include <trilateral3/nodule/PenNodule.h>
#endif
#ifndef INCLUDED_trilateral3_structure_StartEnd
#include <trilateral3/structure/StartEnd.h>
#endif
#ifndef INCLUDED_trilateral3_structure_TriInt
#include <trilateral3/structure/TriInt.h>
#endif
#ifndef INCLUDED_trilateral3_structure_Triangle3D
#include <trilateral3/structure/Triangle3D.h>
#endif

namespace trilateral3{
namespace nodule{

void PenNodule_obj::__construct(){
            	HX_JUST_GC_STACKFRAME
	int size = ((::trilateral3::nodule::PenNodule_obj::largeEnough + 2) * 4);
	 ::haxe::io::ArrayBufferViewImpl this1 =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
	 ::haxe::io::ArrayBufferViewImpl this2 = this1;
	if ((0 < (this2->byteLength >> 2))) {
		this2->bytes->setFloat(this2->byteOffset,((Float)0.));
	}
	if ((1 < (this2->byteLength >> 2))) {
		this2->bytes->setFloat((4 + this2->byteOffset),((Float)0.));
	}
	 ::haxe::io::ArrayBufferViewImpl this3 = this2;
	 ::haxe::io::ArrayBufferViewImpl this4 = this3;
	 ::haxe::io::ArrayBufferViewImpl this5 = this4;
	this->colorTriangles = this5;
	 ::trilateral3::matrix::MatrixDozen transform1000 =  ::trilateral3::matrix::MatrixDozen_obj::__alloc( HX_CTX ,((Float)0.001),( (Float)(0) ),( (Float)(0) ),( (Float)(-1) ),( (Float)(0) ),((Float)-0.001),( (Float)(0) ),( (Float)(1) ),( (Float)(0) ),( (Float)(0) ),((Float)0.001),( (Float)(0) ));
	::trilateral3::Trilateral_obj::transformMatrix = transform1000;
	this->createPen();
}

Dynamic PenNodule_obj::__CreateEmpty() { return new PenNodule_obj; }

void *PenNodule_obj::_hx_vtable = 0;

Dynamic PenNodule_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PenNodule_obj > _hx_result = new PenNodule_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PenNodule_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x052c2712;
}

void PenNodule_obj::createPen(){
	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::haxe::io::ArrayBufferViewImpl,_e) HXARGC(3)
	void _hx_run(Float x,Float y,Float theta){
		Float cos = ::Math_obj::cos(theta);
		Float sin = ::Math_obj::sin(theta);
		{
			{
				 ::haxe::io::ArrayBufferViewImpl _g = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_g,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_g) - x));
			}
			{
				 ::haxe::io::ArrayBufferViewImpl _g1 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_g1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_g1) - y));
			}
			{
				 ::haxe::io::ArrayBufferViewImpl _g2 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_g2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_g2) - x));
			}
			{
				 ::haxe::io::ArrayBufferViewImpl _g3 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_g3,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_g3) - y));
			}
			{
				 ::haxe::io::ArrayBufferViewImpl _g4 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_g4,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_g4) - x));
			}
			{
				 ::haxe::io::ArrayBufferViewImpl _g5 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_g5,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_g5) - y));
			}
			Float dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e);
			Float dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e);
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_e,((dx * cos) - (dy * sin)));
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_e,((dx * sin) + (dy * cos)));
			dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e);
			dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e);
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_e,((dx * cos) - (dy * sin)));
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_e,((dx * sin) + (dy * cos)));
			dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e);
			dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e);
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_e,((dx * cos) - (dy * sin)));
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_e,((dx * sin) + (dy * cos)));
			{
				 ::haxe::io::ArrayBufferViewImpl _g6 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_g6,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_g6) + x));
			}
			{
				 ::haxe::io::ArrayBufferViewImpl _g7 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_g7,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_g7) + y));
			}
			{
				 ::haxe::io::ArrayBufferViewImpl _g8 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_g8,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_g8) + x));
			}
			{
				 ::haxe::io::ArrayBufferViewImpl _g9 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_g9,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_g9) + y));
			}
			{
				 ::haxe::io::ArrayBufferViewImpl _g10 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_g10,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_g10) + x));
			}
			{
				 ::haxe::io::ArrayBufferViewImpl _g11 = _e;
				::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_g11,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_g11) + y));
			}
		}
	}
	HX_END_LOCAL_FUNC3((void))

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::haxe::io::ArrayBufferViewImpl,_e1) HXARGC(2)
	void _hx_run(Float dx,Float dy){
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::moveDelta(_e1,dx,dy);
	}
	HX_END_LOCAL_FUNC2((void))

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::haxe::io::ArrayBufferViewImpl,_e2) HXARGC(4)
	void _hx_run(Float x,Float y,Float cos,Float sin){
		{
			 ::haxe::io::ArrayBufferViewImpl _g = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_g,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_g) - x));
		}
		{
			 ::haxe::io::ArrayBufferViewImpl _g1 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_g1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_g1) - y));
		}
		{
			 ::haxe::io::ArrayBufferViewImpl _g2 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_g2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_g2) - x));
		}
		{
			 ::haxe::io::ArrayBufferViewImpl _g3 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_g3,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_g3) - y));
		}
		{
			 ::haxe::io::ArrayBufferViewImpl _g4 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_g4,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_g4) - x));
		}
		{
			 ::haxe::io::ArrayBufferViewImpl _g5 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_g5,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_g5) - y));
		}
		Float dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e2);
		Float dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e2);
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_e2,((dx * cos) - (dy * sin)));
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_e2,((dx * sin) + (dy * cos)));
		dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e2);
		dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e2);
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_e2,((dx * cos) - (dy * sin)));
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_e2,((dx * sin) + (dy * cos)));
		dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e2);
		dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e2);
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_e2,((dx * cos) - (dy * sin)));
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_e2,((dx * sin) + (dy * cos)));
		{
			 ::haxe::io::ArrayBufferViewImpl _g6 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_g6,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_g6) + x));
		}
		{
			 ::haxe::io::ArrayBufferViewImpl _g7 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_g7,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_g7) + y));
		}
		{
			 ::haxe::io::ArrayBufferViewImpl _g8 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_g8,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_g8) + x));
		}
		{
			 ::haxe::io::ArrayBufferViewImpl _g9 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_g9,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_g9) + y));
		}
		{
			 ::haxe::io::ArrayBufferViewImpl _g10 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_g10,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_g10) + x));
		}
		{
			 ::haxe::io::ArrayBufferViewImpl _g11 = _e2;
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_g11,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_g11) + y));
		}
	}
	HX_END_LOCAL_FUNC4((void))

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::haxe::io::ArrayBufferViewImpl,_e3) HXARGC(2)
	bool _hx_run(Float px,Float py){
		return ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::fullHit(_e3,px,py);
	}
	HX_END_LOCAL_FUNC2(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::haxe::io::ArrayBufferViewImpl,_e4) HXARGC(2)
	bool _hx_run(Float px,Float py){
		Float planeAB = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e4) - px);
		Float planeAB1 = (planeAB * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e4) - py));
		Float planeAB2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e4) - px);
		Float planeAB3 = (planeAB1 - (planeAB2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e4) - py)));
		Float planeBC = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e4) - px);
		Float planeBC1 = (planeBC * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e4) - py));
		Float planeBC2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e4) - px);
		Float planeBC3 = (planeBC1 - (planeBC2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e4) - py)));
		Float planeCA = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e4) - px);
		Float planeCA1 = (planeCA * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e4) - py));
		Float planeCA2 = (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e4) - px);
		Float planeCA3 = (planeCA1 - (planeCA2 * (::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e4) - py)));
		int triangleAbstract = ::Std_obj::_hx_int((::Math_obj::abs(planeAB3) / planeAB3));
		if ((triangleAbstract == ::Std_obj::_hx_int((::Math_obj::abs(planeBC3) / planeBC3)))) {
			int triangleAbstract = ::Std_obj::_hx_int((::Math_obj::abs(planeBC3) / planeBC3));
			return (triangleAbstract == ::Std_obj::_hx_int((::Math_obj::abs(planeCA3) / planeCA3)));
		}
		else {
			return false;
		}
		return false;
	}
	HX_END_LOCAL_FUNC2(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::haxe::io::ArrayBufferViewImpl,_e5) HXARGC(0)
	Float _hx_run(){
		Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e5);
		Float triangleAbstract1 = ::Math_obj::max(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e5));
		return ::Math_obj::max(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e5));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::haxe::io::ArrayBufferViewImpl,_e6) HXARGC(0)
	Float _hx_run(){
		Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e6);
		Float triangleAbstract1 = ::Math_obj::max(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e6));
		return ::Math_obj::max(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e6));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::haxe::io::ArrayBufferViewImpl,_e7) HXARGC(0)
	Float _hx_run(){
		Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e7);
		Float triangleAbstract1 = ::Math_obj::max(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e7));
		return ::Math_obj::max(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e7));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::haxe::io::ArrayBufferViewImpl,_e8) HXARGC(0)
	Float _hx_run(){
		Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e8);
		Float triangleAbstract1 = ::Math_obj::min(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e8));
		return ::Math_obj::min(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e8));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::haxe::io::ArrayBufferViewImpl,_e9) HXARGC(1)
	Float _hx_run(Float x){
		Float dx = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e9);
		Float dx1 = ::Math_obj::min(dx,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e9));
		Float dx2 = (x - ::Math_obj::min(dx1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e9)));
		 ::haxe::io::ArrayBufferViewImpl _e = _e9;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(_e,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e9) + dx2));
		 ::haxe::io::ArrayBufferViewImpl _e1 = _e9;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(_e1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e9) + dx2));
		 ::haxe::io::ArrayBufferViewImpl _e2 = _e9;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(_e2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e9) + dx2));
		return x;
	}
	HX_END_LOCAL_FUNC1(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::haxe::io::ArrayBufferViewImpl,_e10) HXARGC(0)
	Float _hx_run(){
		Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e10);
		Float triangleAbstract1 = ::Math_obj::min(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e10));
		return ::Math_obj::min(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e10));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::haxe::io::ArrayBufferViewImpl,_e11) HXARGC(1)
	Float _hx_run(Float y){
		Float dy = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e11);
		Float dy1 = ::Math_obj::min(dy,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e11));
		Float dy2 = (y - ::Math_obj::min(dy1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e11)));
		 ::haxe::io::ArrayBufferViewImpl _e = _e11;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(_e,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e11) + dy2));
		 ::haxe::io::ArrayBufferViewImpl _e1 = _e11;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(_e1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e11) + dy2));
		 ::haxe::io::ArrayBufferViewImpl _e2 = _e11;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(_e2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e11) + dy2));
		return y;
	}
	HX_END_LOCAL_FUNC1(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::haxe::io::ArrayBufferViewImpl,_e12) HXARGC(0)
	Float _hx_run(){
		Float triangleAbstract = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e12);
		Float triangleAbstract1 = ::Math_obj::min(triangleAbstract,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e12));
		return ::Math_obj::min(triangleAbstract1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e12));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::haxe::io::ArrayBufferViewImpl,_e13) HXARGC(1)
	Float _hx_run(Float z){
		Float dz = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e13);
		Float dz1 = ::Math_obj::min(dz,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e13));
		Float dz2 = (z - ::Math_obj::min(dz1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e13)));
		 ::haxe::io::ArrayBufferViewImpl _e = _e13;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_az(_e,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e13) + dz2));
		 ::haxe::io::ArrayBufferViewImpl _e1 = _e13;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bz(_e1,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e13) + dz2));
		 ::haxe::io::ArrayBufferViewImpl _e2 = _e13;
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cz(_e2,(::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e13) + dz2));
		return z;
	}
	HX_END_LOCAL_FUNC1(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::haxe::io::ArrayBufferViewImpl,_e14) HXARGC(9)
	bool _hx_run(Float ax_,Float ay_,Float az_,Float bx_,Float by_,Float bz_,Float cx_,Float cy_,Float cz_){
		return ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::triangle(_e14,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
	}
	HX_END_LOCAL_FUNC9(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_15, ::haxe::io::ArrayBufferViewImpl,_e15) HXARGC(0)
	 ::trilateral3::structure::Triangle3D _hx_run(){
		HX_JUST_GC_STACKFRAME
		Float _g = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e15);
		Float _g1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e15);
		 ::trilateral3::matrix::Vertex pa =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g,_g1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e15),((Float)1.));
		Float _g2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e15);
		Float _g3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e15);
		 ::trilateral3::matrix::Vertex pb =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g2,_g3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e15),((Float)1.));
		Float _g4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e15);
		Float _g5 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e15);
		 ::trilateral3::matrix::Vertex pc =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g4,_g5,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e15),((Float)1.));
		return  ::trilateral3::structure::Triangle3D_obj::__alloc( HX_CTX ,pa,pb,pc);
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::haxe::io::ArrayBufferViewImpl,_e16) HXARGC(1)
	void _hx_run( ::trilateral3::matrix::MatrixDozen m){
		::trilateral3::geom::_FlatColorTriangles::FlatColorTriangles_Impl__obj::transform(_e16,m);
	}
	HX_END_LOCAL_FUNC1((void))

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_17, ::haxe::io::ArrayBufferViewImpl,_e17) HXARGC(9)
	bool _hx_run(Float ax_,Float ay_,Float az_,Float bx_,Float by_,Float bz_,Float cx_,Float cy_,Float cz_){
		return ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::triangle(_e17,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
	}
	HX_END_LOCAL_FUNC9(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_18, ::haxe::io::ArrayBufferViewImpl,_e18) HXARGC(1)
	void _hx_run( ::trilateral3::matrix::MatrixDozen m){
		::trilateral3::geom::_FlatColorTriangles::FlatColorTriangles_Impl__obj::transform(_e18,m);
	}
	HX_END_LOCAL_FUNC1((void))

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_19, ::haxe::io::ArrayBufferViewImpl,_e19) HXARGC(2)
	void _hx_run( ::trilateral3::matrix::MatrixDozen m, ::trilateral3::structure::StartEnd startEnd){
		::trilateral3::geom::_FlatColorTriangles::FlatColorTriangles_Impl__obj::transformRange(_e19,m,startEnd);
	}
	HX_END_LOCAL_FUNC2((void))

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::haxe::io::ArrayBufferViewImpl,_e20) HXARGC(0)
	 ::trilateral3::structure::Triangle3D _hx_run(){
		HX_JUST_GC_STACKFRAME
		Float _g = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(_e20);
		Float _g1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(_e20);
		 ::trilateral3::matrix::Vertex pa =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g,_g1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(_e20),((Float)1.));
		Float _g2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(_e20);
		Float _g3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(_e20);
		 ::trilateral3::matrix::Vertex pb =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g2,_g3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(_e20),((Float)1.));
		Float _g4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(_e20);
		Float _g5 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(_e20);
		 ::trilateral3::matrix::Vertex pc =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g4,_g5,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(_e20),((Float)1.));
		return  ::trilateral3::structure::Triangle3D_obj::__alloc( HX_CTX ,pa,pb,pc);
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_21, ::haxe::io::ArrayBufferViewImpl,_e21) HXARGC(0)
	Float _hx_run(){
		{
			 ::haxe::io::Bytes _this = _e21->bytes;
			int pos = _e21->byteOffset;
			bool pos_;
			if ((pos >= 0)) {
				pos_ = ((pos + 4) > _this->length);
			}
			else {
				pos_ = true;
			}
			if (pos_) {
				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
			}
			Float pos_1 = ( ::__hxcpp_memory_get_float(_this->b,pos) + ((Float)1.));
			if ((0 < (_e21->byteLength >> 2))) {
				_e21->bytes->setFloat(_e21->byteOffset,pos_1);
			}
			 ::haxe::io::Bytes _this1 = _e21->bytes;
			int pos1 = _e21->byteOffset;
			bool drawAbstract;
			if ((pos1 >= 0)) {
				drawAbstract = ((pos1 + 4) > _this1->length);
			}
			else {
				drawAbstract = true;
			}
			if (drawAbstract) {
				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
			}
			Float drawAbstract1 =  ::__hxcpp_memory_get_float(_this1->b,pos1);
			 ::haxe::io::Bytes _this2 = _e21->bytes;
			int pos2 = (4 + _e21->byteOffset);
			bool drawAbstract2;
			if ((pos2 >= 0)) {
				drawAbstract2 = ((pos2 + 4) > _this2->length);
			}
			else {
				drawAbstract2 = true;
			}
			if (drawAbstract2) {
				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
			}
			if ((drawAbstract1 > ( ::__hxcpp_memory_get_float(_this2->b,pos2) - ( (Float)(1) )))) {
				 ::haxe::io::Bytes _this = _e21->bytes;
				int pos = _e21->byteOffset;
				bool drawAbstract;
				if ((pos >= 0)) {
					drawAbstract = ((pos + 4) > _this->length);
				}
				else {
					drawAbstract = true;
				}
				if (drawAbstract) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				Float value =  ::__hxcpp_memory_get_float(_this->b,pos);
				if ((1 < (_e21->byteLength >> 2))) {
					_e21->bytes->setFloat((4 + _e21->byteOffset),value);
				}
			}
		}
		 ::haxe::io::Bytes _this3 = _e21->bytes;
		int pos3 = _e21->byteOffset;
		bool drawAbstract3;
		if ((pos3 >= 0)) {
			drawAbstract3 = ((pos3 + 4) > _this3->length);
		}
		else {
			drawAbstract3 = true;
		}
		if (drawAbstract3) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		return  ::__hxcpp_memory_get_float(_this3->b,pos3);
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_22, ::haxe::io::ArrayBufferViewImpl,_e22) HXARGC(0)
	bool _hx_run(){
		 ::haxe::io::Bytes _this = _e22->bytes;
		int pos = _e22->byteOffset;
		bool drawAbstract;
		if ((pos >= 0)) {
			drawAbstract = ((pos + 4) > _this->length);
		}
		else {
			drawAbstract = true;
		}
		if (drawAbstract) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		Float drawAbstract1 =  ::__hxcpp_memory_get_float(_this->b,pos);
		return (drawAbstract1 < ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(_e22));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_23, ::haxe::io::ArrayBufferViewImpl,_e23) HXARGC(0)
	Float _hx_run(){
		 ::haxe::io::Bytes _this = _e23->bytes;
		int pos = _e23->byteOffset;
		bool drawAbstract;
		if ((pos >= 0)) {
			drawAbstract = ((pos + 4) > _this->length);
		}
		else {
			drawAbstract = true;
		}
		if (drawAbstract) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		return  ::__hxcpp_memory_get_float(_this->b,pos);
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_24, ::haxe::io::ArrayBufferViewImpl,_e24) HXARGC(1)
	Float _hx_run(Float pos_){
		if ((0 < (_e24->byteLength >> 2))) {
			_e24->bytes->setFloat(_e24->byteOffset,pos_);
		}
		 ::haxe::io::Bytes _this = _e24->bytes;
		int pos = _e24->byteOffset;
		bool drawAbstract;
		if ((pos >= 0)) {
			drawAbstract = ((pos + 4) > _this->length);
		}
		else {
			drawAbstract = true;
		}
		if (drawAbstract) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		Float drawAbstract1 =  ::__hxcpp_memory_get_float(_this->b,pos);
		 ::haxe::io::Bytes _this1 = _e24->bytes;
		int pos1 = (4 + _e24->byteOffset);
		bool drawAbstract2;
		if ((pos1 >= 0)) {
			drawAbstract2 = ((pos1 + 4) > _this1->length);
		}
		else {
			drawAbstract2 = true;
		}
		if (drawAbstract2) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		if ((drawAbstract1 > ( ::__hxcpp_memory_get_float(_this1->b,pos1) - ( (Float)(1) )))) {
			 ::haxe::io::Bytes _this = _e24->bytes;
			int pos = _e24->byteOffset;
			bool drawAbstract;
			if ((pos >= 0)) {
				drawAbstract = ((pos + 4) > _this->length);
			}
			else {
				drawAbstract = true;
			}
			if (drawAbstract) {
				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
			}
			Float value =  ::__hxcpp_memory_get_float(_this->b,pos);
			if ((1 < (_e24->byteLength >> 2))) {
				_e24->bytes->setFloat((4 + _e24->byteOffset),value);
			}
		}
		return pos_;
	}
	HX_END_LOCAL_FUNC1(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_25, ::haxe::io::ArrayBufferViewImpl,_e25) HXARGC(0)
	int _hx_run(){
		return ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(_e25);
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_26, ::haxe::io::ArrayBufferViewImpl,_e26) HXARGC(1)
	int _hx_run(int id){
		return ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::set_size(_e26,id);
	}
	HX_END_LOCAL_FUNC1(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_27, ::haxe::io::ArrayBufferViewImpl,_e27) HXARGC(1)
	int _hx_run(int col){
		{
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redA(_e27,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
			{
				Float v = (( (Float)((col & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this = _e27->bytes;
					int pos = _e27->byteOffset;
					bool k;
					if ((pos >= 0)) {
						k = ((pos + 4) > _this->length);
					}
					else {
						k = true;
					}
					if (k) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 5) + 2);
						bool color3Abstract;
						if ((index >= 0)) {
							color3Abstract = (index < (_e27->byteLength >> 2));
						}
						else {
							color3Abstract = false;
						}
						if (color3Abstract) {
							_e27->bytes->setFloat(((index << 2) + _e27->byteOffset),v);
						}
					}
				}
			}
			{
				Float v1 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this1 = _e27->bytes;
					int pos1 = _e27->byteOffset;
					bool k1;
					if ((pos1 >= 0)) {
						k1 = ((pos1 + 4) > _this1->length);
					}
					else {
						k1 = true;
					}
					if (k1) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index1 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this1->b,pos1)) * 21) + 4) + 2);
						bool color3Abstract1;
						if ((index1 >= 0)) {
							color3Abstract1 = (index1 < (_e27->byteLength >> 2));
						}
						else {
							color3Abstract1 = false;
						}
						if (color3Abstract1) {
							_e27->bytes->setFloat(((index1 << 2) + _e27->byteOffset),v1);
						}
					}
				}
			}
			{
				Float v2 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this2 = _e27->bytes;
					int pos2 = _e27->byteOffset;
					bool k2;
					if ((pos2 >= 0)) {
						k2 = ((pos2 + 4) > _this2->length);
					}
					else {
						k2 = true;
					}
					if (k2) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index2 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this2->b,pos2)) * 21) + 6) + 2);
						bool color3Abstract2;
						if ((index2 >= 0)) {
							color3Abstract2 = (index2 < (_e27->byteLength >> 2));
						}
						else {
							color3Abstract2 = false;
						}
						if (color3Abstract2) {
							_e27->bytes->setFloat(((index2 << 2) + _e27->byteOffset),v2);
						}
					}
				}
			}
		}
		{
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redB(_e27,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
			{
				Float v3 = (( (Float)((col & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this3 = _e27->bytes;
					int pos3 = _e27->byteOffset;
					bool k3;
					if ((pos3 >= 0)) {
						k3 = ((pos3 + 4) > _this3->length);
					}
					else {
						k3 = true;
					}
					if (k3) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index3 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this3->b,pos3)) * 21) + 12) + 2);
						bool color3Abstract3;
						if ((index3 >= 0)) {
							color3Abstract3 = (index3 < (_e27->byteLength >> 2));
						}
						else {
							color3Abstract3 = false;
						}
						if (color3Abstract3) {
							_e27->bytes->setFloat(((index3 << 2) + _e27->byteOffset),v3);
						}
					}
				}
			}
			{
				Float v4 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this4 = _e27->bytes;
					int pos4 = _e27->byteOffset;
					bool k4;
					if ((pos4 >= 0)) {
						k4 = ((pos4 + 4) > _this4->length);
					}
					else {
						k4 = true;
					}
					if (k4) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index4 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this4->b,pos4)) * 21) + 11) + 2);
						bool color3Abstract4;
						if ((index4 >= 0)) {
							color3Abstract4 = (index4 < (_e27->byteLength >> 2));
						}
						else {
							color3Abstract4 = false;
						}
						if (color3Abstract4) {
							_e27->bytes->setFloat(((index4 << 2) + _e27->byteOffset),v4);
						}
					}
				}
			}
			{
				Float v5 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this5 = _e27->bytes;
					int pos5 = _e27->byteOffset;
					bool k5;
					if ((pos5 >= 0)) {
						k5 = ((pos5 + 4) > _this5->length);
					}
					else {
						k5 = true;
					}
					if (k5) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index5 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this5->b,pos5)) * 21) + 13) + 2);
						bool color3Abstract5;
						if ((index5 >= 0)) {
							color3Abstract5 = (index5 < (_e27->byteLength >> 2));
						}
						else {
							color3Abstract5 = false;
						}
						if (color3Abstract5) {
							_e27->bytes->setFloat(((index5 << 2) + _e27->byteOffset),v5);
						}
					}
				}
			}
		}
		{
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redC(_e27,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
			{
				Float v6 = (( (Float)((col & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this6 = _e27->bytes;
					int pos6 = _e27->byteOffset;
					bool k6;
					if ((pos6 >= 0)) {
						k6 = ((pos6 + 4) > _this6->length);
					}
					else {
						k6 = true;
					}
					if (k6) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index6 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this6->b,pos6)) * 21) + 19) + 2);
						bool color3Abstract6;
						if ((index6 >= 0)) {
							color3Abstract6 = (index6 < (_e27->byteLength >> 2));
						}
						else {
							color3Abstract6 = false;
						}
						if (color3Abstract6) {
							_e27->bytes->setFloat(((index6 << 2) + _e27->byteOffset),v6);
						}
					}
				}
			}
			{
				Float v7 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this7 = _e27->bytes;
					int pos7 = _e27->byteOffset;
					bool k7;
					if ((pos7 >= 0)) {
						k7 = ((pos7 + 4) > _this7->length);
					}
					else {
						k7 = true;
					}
					if (k7) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index7 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this7->b,pos7)) * 21) + 18) + 2);
						bool color3Abstract7;
						if ((index7 >= 0)) {
							color3Abstract7 = (index7 < (_e27->byteLength >> 2));
						}
						else {
							color3Abstract7 = false;
						}
						if (color3Abstract7) {
							_e27->bytes->setFloat(((index7 << 2) + _e27->byteOffset),v7);
						}
					}
				}
			}
			{
				Float v8 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this8 = _e27->bytes;
					int pos8 = _e27->byteOffset;
					bool k8;
					if ((pos8 >= 0)) {
						k8 = ((pos8 + 4) > _this8->length);
					}
					else {
						k8 = true;
					}
					if (k8) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index8 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this8->b,pos8)) * 21) + 20) + 2);
						bool color3Abstract8;
						if ((index8 >= 0)) {
							color3Abstract8 = (index8 < (_e27->byteLength >> 2));
						}
						else {
							color3Abstract8 = false;
						}
						if (color3Abstract8) {
							_e27->bytes->setFloat(((index8 << 2) + _e27->byteOffset),v8);
						}
					}
				}
			}
		}
		return col;
	}
	HX_END_LOCAL_FUNC1(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_28, ::haxe::io::ArrayBufferViewImpl,_e28) HXARGC(1)
	int _hx_run(int col){
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redA(_e28,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
		{
			Float v = (( (Float)((col & 255)) ) / ( (Float)(255) ));
			{
				 ::haxe::io::Bytes _this = _e28->bytes;
				int pos = _e28->byteOffset;
				bool k;
				if ((pos >= 0)) {
					k = ((pos + 4) > _this->length);
				}
				else {
					k = true;
				}
				if (k) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				{
					int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 5) + 2);
					bool color3Abstract;
					if ((index >= 0)) {
						color3Abstract = (index < (_e28->byteLength >> 2));
					}
					else {
						color3Abstract = false;
					}
					if (color3Abstract) {
						_e28->bytes->setFloat(((index << 2) + _e28->byteOffset),v);
					}
				}
			}
		}
		{
			Float v1 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
			{
				 ::haxe::io::Bytes _this1 = _e28->bytes;
				int pos1 = _e28->byteOffset;
				bool k1;
				if ((pos1 >= 0)) {
					k1 = ((pos1 + 4) > _this1->length);
				}
				else {
					k1 = true;
				}
				if (k1) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				{
					int index1 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this1->b,pos1)) * 21) + 4) + 2);
					bool color3Abstract1;
					if ((index1 >= 0)) {
						color3Abstract1 = (index1 < (_e28->byteLength >> 2));
					}
					else {
						color3Abstract1 = false;
					}
					if (color3Abstract1) {
						_e28->bytes->setFloat(((index1 << 2) + _e28->byteOffset),v1);
					}
				}
			}
		}
		{
			Float v2 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
			{
				 ::haxe::io::Bytes _this2 = _e28->bytes;
				int pos2 = _e28->byteOffset;
				bool k2;
				if ((pos2 >= 0)) {
					k2 = ((pos2 + 4) > _this2->length);
				}
				else {
					k2 = true;
				}
				if (k2) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				{
					int index2 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this2->b,pos2)) * 21) + 6) + 2);
					bool color3Abstract2;
					if ((index2 >= 0)) {
						color3Abstract2 = (index2 < (_e28->byteLength >> 2));
					}
					else {
						color3Abstract2 = false;
					}
					if (color3Abstract2) {
						_e28->bytes->setFloat(((index2 << 2) + _e28->byteOffset),v2);
					}
				}
			}
		}
		return col;
	}
	HX_END_LOCAL_FUNC1(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_29, ::haxe::io::ArrayBufferViewImpl,_e29) HXARGC(0)
	int _hx_run(){
		 ::haxe::io::Bytes _this = _e29->bytes;
		int pos = _e29->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 6);
		 ::haxe::io::Bytes _this1 = _e29->bytes;
		int pos1 = (((k1 + 2) << 2) + _e29->byteOffset);
		bool color3Abstract;
		if ((pos1 >= 0)) {
			color3Abstract = ((pos1 + 4) > _this1->length);
		}
		else {
			color3Abstract = true;
		}
		if (color3Abstract) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int color3Abstract1 = (::Math_obj::round(( ::__hxcpp_memory_get_float(_this1->b,pos1) * ( (Float)(255) ))) << 24);
		int color3Abstract2 = (color3Abstract1 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e29) * ( (Float)(255) ))) << 16));
		 ::haxe::io::Bytes _this2 = _e29->bytes;
		int pos2 = _e29->byteOffset;
		bool k2;
		if ((pos2 >= 0)) {
			k2 = ((pos2 + 4) > _this2->length);
		}
		else {
			k2 = true;
		}
		if (k2) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k3 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this2->b,pos2)) * 21) + 4);
		 ::haxe::io::Bytes _this3 = _e29->bytes;
		int pos3 = (((k3 + 2) << 2) + _e29->byteOffset);
		bool color3Abstract3;
		if ((pos3 >= 0)) {
			color3Abstract3 = ((pos3 + 4) > _this3->length);
		}
		else {
			color3Abstract3 = true;
		}
		if (color3Abstract3) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int color3Abstract4 = (color3Abstract2 | (::Math_obj::round(( ::__hxcpp_memory_get_float(_this3->b,pos3) * ( (Float)(255) ))) << 8));
		 ::haxe::io::Bytes _this4 = _e29->bytes;
		int pos4 = _e29->byteOffset;
		bool k4;
		if ((pos4 >= 0)) {
			k4 = ((pos4 + 4) > _this4->length);
		}
		else {
			k4 = true;
		}
		if (k4) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k5 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this4->b,pos4)) * 21) + 5);
		 ::haxe::io::Bytes _this5 = _e29->bytes;
		int pos5 = (((k5 + 2) << 2) + _e29->byteOffset);
		bool color3Abstract5;
		if ((pos5 >= 0)) {
			color3Abstract5 = ((pos5 + 4) > _this5->length);
		}
		else {
			color3Abstract5 = true;
		}
		if (color3Abstract5) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		return (color3Abstract4 | ::Math_obj::round(( ::__hxcpp_memory_get_float(_this5->b,pos5) * ( (Float)(255) ))));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_30, ::haxe::io::ArrayBufferViewImpl,_e30) HXARGC(1)
	int _hx_run(int col){
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redB(_e30,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
		{
			Float v = (( (Float)((col & 255)) ) / ( (Float)(255) ));
			{
				 ::haxe::io::Bytes _this = _e30->bytes;
				int pos = _e30->byteOffset;
				bool k;
				if ((pos >= 0)) {
					k = ((pos + 4) > _this->length);
				}
				else {
					k = true;
				}
				if (k) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				{
					int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 12) + 2);
					bool color3Abstract;
					if ((index >= 0)) {
						color3Abstract = (index < (_e30->byteLength >> 2));
					}
					else {
						color3Abstract = false;
					}
					if (color3Abstract) {
						_e30->bytes->setFloat(((index << 2) + _e30->byteOffset),v);
					}
				}
			}
		}
		{
			Float v1 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
			{
				 ::haxe::io::Bytes _this1 = _e30->bytes;
				int pos1 = _e30->byteOffset;
				bool k1;
				if ((pos1 >= 0)) {
					k1 = ((pos1 + 4) > _this1->length);
				}
				else {
					k1 = true;
				}
				if (k1) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				{
					int index1 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this1->b,pos1)) * 21) + 11) + 2);
					bool color3Abstract1;
					if ((index1 >= 0)) {
						color3Abstract1 = (index1 < (_e30->byteLength >> 2));
					}
					else {
						color3Abstract1 = false;
					}
					if (color3Abstract1) {
						_e30->bytes->setFloat(((index1 << 2) + _e30->byteOffset),v1);
					}
				}
			}
		}
		{
			Float v2 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
			{
				 ::haxe::io::Bytes _this2 = _e30->bytes;
				int pos2 = _e30->byteOffset;
				bool k2;
				if ((pos2 >= 0)) {
					k2 = ((pos2 + 4) > _this2->length);
				}
				else {
					k2 = true;
				}
				if (k2) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				{
					int index2 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this2->b,pos2)) * 21) + 13) + 2);
					bool color3Abstract2;
					if ((index2 >= 0)) {
						color3Abstract2 = (index2 < (_e30->byteLength >> 2));
					}
					else {
						color3Abstract2 = false;
					}
					if (color3Abstract2) {
						_e30->bytes->setFloat(((index2 << 2) + _e30->byteOffset),v2);
					}
				}
			}
		}
		return col;
	}
	HX_END_LOCAL_FUNC1(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_31, ::haxe::io::ArrayBufferViewImpl,_e31) HXARGC(0)
	int _hx_run(){
		 ::haxe::io::Bytes _this = _e31->bytes;
		int pos = _e31->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 6);
		 ::haxe::io::Bytes _this1 = _e31->bytes;
		int pos1 = (((k1 + 2) << 2) + _e31->byteOffset);
		bool color3Abstract;
		if ((pos1 >= 0)) {
			color3Abstract = ((pos1 + 4) > _this1->length);
		}
		else {
			color3Abstract = true;
		}
		if (color3Abstract) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int color3Abstract1 = (::Math_obj::round(( ::__hxcpp_memory_get_float(_this1->b,pos1) * ( (Float)(255) ))) << 24);
		int color3Abstract2 = (color3Abstract1 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e31) * ( (Float)(255) ))) << 16));
		 ::haxe::io::Bytes _this2 = _e31->bytes;
		int pos2 = _e31->byteOffset;
		bool k2;
		if ((pos2 >= 0)) {
			k2 = ((pos2 + 4) > _this2->length);
		}
		else {
			k2 = true;
		}
		if (k2) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k3 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this2->b,pos2)) * 21) + 4);
		 ::haxe::io::Bytes _this3 = _e31->bytes;
		int pos3 = (((k3 + 2) << 2) + _e31->byteOffset);
		bool color3Abstract3;
		if ((pos3 >= 0)) {
			color3Abstract3 = ((pos3 + 4) > _this3->length);
		}
		else {
			color3Abstract3 = true;
		}
		if (color3Abstract3) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int color3Abstract4 = (color3Abstract2 | (::Math_obj::round(( ::__hxcpp_memory_get_float(_this3->b,pos3) * ( (Float)(255) ))) << 8));
		 ::haxe::io::Bytes _this4 = _e31->bytes;
		int pos4 = _e31->byteOffset;
		bool k4;
		if ((pos4 >= 0)) {
			k4 = ((pos4 + 4) > _this4->length);
		}
		else {
			k4 = true;
		}
		if (k4) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k5 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this4->b,pos4)) * 21) + 5);
		 ::haxe::io::Bytes _this5 = _e31->bytes;
		int pos5 = (((k5 + 2) << 2) + _e31->byteOffset);
		bool color3Abstract5;
		if ((pos5 >= 0)) {
			color3Abstract5 = ((pos5 + 4) > _this5->length);
		}
		else {
			color3Abstract5 = true;
		}
		if (color3Abstract5) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		return (color3Abstract4 | ::Math_obj::round(( ::__hxcpp_memory_get_float(_this5->b,pos5) * ( (Float)(255) ))));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_32, ::haxe::io::ArrayBufferViewImpl,_e32) HXARGC(1)
	int _hx_run(int col){
		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redC(_e32,(( (Float)(((col >> 16) & 255)) ) / ( (Float)(255) )));
		{
			Float v = (( (Float)((col & 255)) ) / ( (Float)(255) ));
			{
				 ::haxe::io::Bytes _this = _e32->bytes;
				int pos = _e32->byteOffset;
				bool k;
				if ((pos >= 0)) {
					k = ((pos + 4) > _this->length);
				}
				else {
					k = true;
				}
				if (k) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				{
					int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 19) + 2);
					bool color3Abstract;
					if ((index >= 0)) {
						color3Abstract = (index < (_e32->byteLength >> 2));
					}
					else {
						color3Abstract = false;
					}
					if (color3Abstract) {
						_e32->bytes->setFloat(((index << 2) + _e32->byteOffset),v);
					}
				}
			}
		}
		{
			Float v1 = (( (Float)(((col >> 8) & 255)) ) / ( (Float)(255) ));
			{
				 ::haxe::io::Bytes _this1 = _e32->bytes;
				int pos1 = _e32->byteOffset;
				bool k1;
				if ((pos1 >= 0)) {
					k1 = ((pos1 + 4) > _this1->length);
				}
				else {
					k1 = true;
				}
				if (k1) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				{
					int index1 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this1->b,pos1)) * 21) + 18) + 2);
					bool color3Abstract1;
					if ((index1 >= 0)) {
						color3Abstract1 = (index1 < (_e32->byteLength >> 2));
					}
					else {
						color3Abstract1 = false;
					}
					if (color3Abstract1) {
						_e32->bytes->setFloat(((index1 << 2) + _e32->byteOffset),v1);
					}
				}
			}
		}
		{
			Float v2 = (( (Float)(((col >> 24) & 255)) ) / ( (Float)(255) ));
			{
				 ::haxe::io::Bytes _this2 = _e32->bytes;
				int pos2 = _e32->byteOffset;
				bool k2;
				if ((pos2 >= 0)) {
					k2 = ((pos2 + 4) > _this2->length);
				}
				else {
					k2 = true;
				}
				if (k2) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				{
					int index2 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this2->b,pos2)) * 21) + 20) + 2);
					bool color3Abstract2;
					if ((index2 >= 0)) {
						color3Abstract2 = (index2 < (_e32->byteLength >> 2));
					}
					else {
						color3Abstract2 = false;
					}
					if (color3Abstract2) {
						_e32->bytes->setFloat(((index2 << 2) + _e32->byteOffset),v2);
					}
				}
			}
		}
		return col;
	}
	HX_END_LOCAL_FUNC1(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_33, ::haxe::io::ArrayBufferViewImpl,_e33) HXARGC(0)
	int _hx_run(){
		 ::haxe::io::Bytes _this = _e33->bytes;
		int pos = _e33->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 6);
		 ::haxe::io::Bytes _this1 = _e33->bytes;
		int pos1 = (((k1 + 2) << 2) + _e33->byteOffset);
		bool color3Abstract;
		if ((pos1 >= 0)) {
			color3Abstract = ((pos1 + 4) > _this1->length);
		}
		else {
			color3Abstract = true;
		}
		if (color3Abstract) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int color3Abstract1 = (::Math_obj::round(( ::__hxcpp_memory_get_float(_this1->b,pos1) * ( (Float)(255) ))) << 24);
		int color3Abstract2 = (color3Abstract1 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e33) * ( (Float)(255) ))) << 16));
		 ::haxe::io::Bytes _this2 = _e33->bytes;
		int pos2 = _e33->byteOffset;
		bool k2;
		if ((pos2 >= 0)) {
			k2 = ((pos2 + 4) > _this2->length);
		}
		else {
			k2 = true;
		}
		if (k2) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k3 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this2->b,pos2)) * 21) + 4);
		 ::haxe::io::Bytes _this3 = _e33->bytes;
		int pos3 = (((k3 + 2) << 2) + _e33->byteOffset);
		bool color3Abstract3;
		if ((pos3 >= 0)) {
			color3Abstract3 = ((pos3 + 4) > _this3->length);
		}
		else {
			color3Abstract3 = true;
		}
		if (color3Abstract3) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int color3Abstract4 = (color3Abstract2 | (::Math_obj::round(( ::__hxcpp_memory_get_float(_this3->b,pos3) * ( (Float)(255) ))) << 8));
		 ::haxe::io::Bytes _this4 = _e33->bytes;
		int pos4 = _e33->byteOffset;
		bool k4;
		if ((pos4 >= 0)) {
			k4 = ((pos4 + 4) > _this4->length);
		}
		else {
			k4 = true;
		}
		if (k4) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k5 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this4->b,pos4)) * 21) + 5);
		 ::haxe::io::Bytes _this5 = _e33->bytes;
		int pos5 = (((k5 + 2) << 2) + _e33->byteOffset);
		bool color3Abstract5;
		if ((pos5 >= 0)) {
			color3Abstract5 = ((pos5 + 4) > _this5->length);
		}
		else {
			color3Abstract5 = true;
		}
		if (color3Abstract5) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		return (color3Abstract4 | ::Math_obj::round(( ::__hxcpp_memory_get_float(_this5->b,pos5) * ( (Float)(255) ))));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_34, ::haxe::io::ArrayBufferViewImpl,_e34) HXARGC(3)
	void _hx_run(int colorA,int colorB,int colorC){
		{
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redA(_e34,(( (Float)(((colorA >> 16) & 255)) ) / ( (Float)(255) )));
			{
				Float v = (( (Float)((colorA & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this = _e34->bytes;
					int pos = _e34->byteOffset;
					bool k;
					if ((pos >= 0)) {
						k = ((pos + 4) > _this->length);
					}
					else {
						k = true;
					}
					if (k) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 5) + 2);
						bool colorAbstract;
						if ((index >= 0)) {
							colorAbstract = (index < (_e34->byteLength >> 2));
						}
						else {
							colorAbstract = false;
						}
						if (colorAbstract) {
							_e34->bytes->setFloat(((index << 2) + _e34->byteOffset),v);
						}
					}
				}
			}
			{
				Float v1 = (( (Float)(((colorA >> 8) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this1 = _e34->bytes;
					int pos1 = _e34->byteOffset;
					bool k1;
					if ((pos1 >= 0)) {
						k1 = ((pos1 + 4) > _this1->length);
					}
					else {
						k1 = true;
					}
					if (k1) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index1 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this1->b,pos1)) * 21) + 4) + 2);
						bool colorAbstract1;
						if ((index1 >= 0)) {
							colorAbstract1 = (index1 < (_e34->byteLength >> 2));
						}
						else {
							colorAbstract1 = false;
						}
						if (colorAbstract1) {
							_e34->bytes->setFloat(((index1 << 2) + _e34->byteOffset),v1);
						}
					}
				}
			}
			{
				Float v2 = (( (Float)(((colorA >> 24) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this2 = _e34->bytes;
					int pos2 = _e34->byteOffset;
					bool k2;
					if ((pos2 >= 0)) {
						k2 = ((pos2 + 4) > _this2->length);
					}
					else {
						k2 = true;
					}
					if (k2) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index2 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this2->b,pos2)) * 21) + 6) + 2);
						bool colorAbstract2;
						if ((index2 >= 0)) {
							colorAbstract2 = (index2 < (_e34->byteLength >> 2));
						}
						else {
							colorAbstract2 = false;
						}
						if (colorAbstract2) {
							_e34->bytes->setFloat(((index2 << 2) + _e34->byteOffset),v2);
						}
					}
				}
			}
		}
		{
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redB(_e34,(( (Float)(((colorB >> 16) & 255)) ) / ( (Float)(255) )));
			{
				Float v3 = (( (Float)((colorB & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this3 = _e34->bytes;
					int pos3 = _e34->byteOffset;
					bool k3;
					if ((pos3 >= 0)) {
						k3 = ((pos3 + 4) > _this3->length);
					}
					else {
						k3 = true;
					}
					if (k3) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index3 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this3->b,pos3)) * 21) + 12) + 2);
						bool colorAbstract3;
						if ((index3 >= 0)) {
							colorAbstract3 = (index3 < (_e34->byteLength >> 2));
						}
						else {
							colorAbstract3 = false;
						}
						if (colorAbstract3) {
							_e34->bytes->setFloat(((index3 << 2) + _e34->byteOffset),v3);
						}
					}
				}
			}
			{
				Float v4 = (( (Float)(((colorB >> 8) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this4 = _e34->bytes;
					int pos4 = _e34->byteOffset;
					bool k4;
					if ((pos4 >= 0)) {
						k4 = ((pos4 + 4) > _this4->length);
					}
					else {
						k4 = true;
					}
					if (k4) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index4 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this4->b,pos4)) * 21) + 11) + 2);
						bool colorAbstract4;
						if ((index4 >= 0)) {
							colorAbstract4 = (index4 < (_e34->byteLength >> 2));
						}
						else {
							colorAbstract4 = false;
						}
						if (colorAbstract4) {
							_e34->bytes->setFloat(((index4 << 2) + _e34->byteOffset),v4);
						}
					}
				}
			}
			{
				Float v5 = (( (Float)(((colorB >> 24) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this5 = _e34->bytes;
					int pos5 = _e34->byteOffset;
					bool k5;
					if ((pos5 >= 0)) {
						k5 = ((pos5 + 4) > _this5->length);
					}
					else {
						k5 = true;
					}
					if (k5) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index5 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this5->b,pos5)) * 21) + 13) + 2);
						bool colorAbstract5;
						if ((index5 >= 0)) {
							colorAbstract5 = (index5 < (_e34->byteLength >> 2));
						}
						else {
							colorAbstract5 = false;
						}
						if (colorAbstract5) {
							_e34->bytes->setFloat(((index5 << 2) + _e34->byteOffset),v5);
						}
					}
				}
			}
		}
		{
			::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redC(_e34,(( (Float)(((colorC >> 16) & 255)) ) / ( (Float)(255) )));
			{
				Float v6 = (( (Float)((colorC & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this6 = _e34->bytes;
					int pos6 = _e34->byteOffset;
					bool k6;
					if ((pos6 >= 0)) {
						k6 = ((pos6 + 4) > _this6->length);
					}
					else {
						k6 = true;
					}
					if (k6) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index6 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this6->b,pos6)) * 21) + 19) + 2);
						bool colorAbstract6;
						if ((index6 >= 0)) {
							colorAbstract6 = (index6 < (_e34->byteLength >> 2));
						}
						else {
							colorAbstract6 = false;
						}
						if (colorAbstract6) {
							_e34->bytes->setFloat(((index6 << 2) + _e34->byteOffset),v6);
						}
					}
				}
			}
			{
				Float v7 = (( (Float)(((colorC >> 8) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this7 = _e34->bytes;
					int pos7 = _e34->byteOffset;
					bool k7;
					if ((pos7 >= 0)) {
						k7 = ((pos7 + 4) > _this7->length);
					}
					else {
						k7 = true;
					}
					if (k7) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index7 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this7->b,pos7)) * 21) + 18) + 2);
						bool colorAbstract7;
						if ((index7 >= 0)) {
							colorAbstract7 = (index7 < (_e34->byteLength >> 2));
						}
						else {
							colorAbstract7 = false;
						}
						if (colorAbstract7) {
							_e34->bytes->setFloat(((index7 << 2) + _e34->byteOffset),v7);
						}
					}
				}
			}
			{
				Float v8 = (( (Float)(((colorC >> 24) & 255)) ) / ( (Float)(255) ));
				{
					 ::haxe::io::Bytes _this8 = _e34->bytes;
					int pos8 = _e34->byteOffset;
					bool k8;
					if ((pos8 >= 0)) {
						k8 = ((pos8 + 4) > _this8->length);
					}
					else {
						k8 = true;
					}
					if (k8) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					{
						int index8 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this8->b,pos8)) * 21) + 20) + 2);
						bool colorAbstract8;
						if ((index8 >= 0)) {
							colorAbstract8 = (index8 < (_e34->byteLength >> 2));
						}
						else {
							colorAbstract8 = false;
						}
						if (colorAbstract8) {
							_e34->bytes->setFloat(((index8 << 2) + _e34->byteOffset),v8);
						}
					}
				}
			}
		}
	}
	HX_END_LOCAL_FUNC3((void))

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_35, ::haxe::io::ArrayBufferViewImpl,_e35) HXARGC(2)
	void _hx_run(int color,int times){
		int _g = 0;
		int _g1 = times;
		while((_g < _g1)){
			_g = (_g + 1);
			int i = (_g - 1);
			{
				{
					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redA(_e35,(( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )));
					{
						Float v = (( (Float)((color & 255)) ) / ( (Float)(255) ));
						{
							 ::haxe::io::Bytes _this = _e35->bytes;
							int pos = _e35->byteOffset;
							bool k;
							if ((pos >= 0)) {
								k = ((pos + 4) > _this->length);
							}
							else {
								k = true;
							}
							if (k) {
								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
							}
							{
								int index = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 5) + 2);
								bool colorAbstract;
								if ((index >= 0)) {
									colorAbstract = (index < (_e35->byteLength >> 2));
								}
								else {
									colorAbstract = false;
								}
								if (colorAbstract) {
									_e35->bytes->setFloat(((index << 2) + _e35->byteOffset),v);
								}
							}
						}
					}
					{
						Float v1 = (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) ));
						{
							 ::haxe::io::Bytes _this1 = _e35->bytes;
							int pos1 = _e35->byteOffset;
							bool k1;
							if ((pos1 >= 0)) {
								k1 = ((pos1 + 4) > _this1->length);
							}
							else {
								k1 = true;
							}
							if (k1) {
								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
							}
							{
								int index1 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this1->b,pos1)) * 21) + 4) + 2);
								bool colorAbstract1;
								if ((index1 >= 0)) {
									colorAbstract1 = (index1 < (_e35->byteLength >> 2));
								}
								else {
									colorAbstract1 = false;
								}
								if (colorAbstract1) {
									_e35->bytes->setFloat(((index1 << 2) + _e35->byteOffset),v1);
								}
							}
						}
					}
					{
						Float v2 = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
						{
							 ::haxe::io::Bytes _this2 = _e35->bytes;
							int pos2 = _e35->byteOffset;
							bool k2;
							if ((pos2 >= 0)) {
								k2 = ((pos2 + 4) > _this2->length);
							}
							else {
								k2 = true;
							}
							if (k2) {
								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
							}
							{
								int index2 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this2->b,pos2)) * 21) + 6) + 2);
								bool colorAbstract2;
								if ((index2 >= 0)) {
									colorAbstract2 = (index2 < (_e35->byteLength >> 2));
								}
								else {
									colorAbstract2 = false;
								}
								if (colorAbstract2) {
									_e35->bytes->setFloat(((index2 << 2) + _e35->byteOffset),v2);
								}
							}
						}
					}
				}
				{
					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redB(_e35,(( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )));
					{
						Float v3 = (( (Float)((color & 255)) ) / ( (Float)(255) ));
						{
							 ::haxe::io::Bytes _this3 = _e35->bytes;
							int pos3 = _e35->byteOffset;
							bool k3;
							if ((pos3 >= 0)) {
								k3 = ((pos3 + 4) > _this3->length);
							}
							else {
								k3 = true;
							}
							if (k3) {
								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
							}
							{
								int index3 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this3->b,pos3)) * 21) + 12) + 2);
								bool colorAbstract3;
								if ((index3 >= 0)) {
									colorAbstract3 = (index3 < (_e35->byteLength >> 2));
								}
								else {
									colorAbstract3 = false;
								}
								if (colorAbstract3) {
									_e35->bytes->setFloat(((index3 << 2) + _e35->byteOffset),v3);
								}
							}
						}
					}
					{
						Float v4 = (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) ));
						{
							 ::haxe::io::Bytes _this4 = _e35->bytes;
							int pos4 = _e35->byteOffset;
							bool k4;
							if ((pos4 >= 0)) {
								k4 = ((pos4 + 4) > _this4->length);
							}
							else {
								k4 = true;
							}
							if (k4) {
								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
							}
							{
								int index4 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this4->b,pos4)) * 21) + 11) + 2);
								bool colorAbstract4;
								if ((index4 >= 0)) {
									colorAbstract4 = (index4 < (_e35->byteLength >> 2));
								}
								else {
									colorAbstract4 = false;
								}
								if (colorAbstract4) {
									_e35->bytes->setFloat(((index4 << 2) + _e35->byteOffset),v4);
								}
							}
						}
					}
					{
						Float v5 = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
						{
							 ::haxe::io::Bytes _this5 = _e35->bytes;
							int pos5 = _e35->byteOffset;
							bool k5;
							if ((pos5 >= 0)) {
								k5 = ((pos5 + 4) > _this5->length);
							}
							else {
								k5 = true;
							}
							if (k5) {
								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
							}
							{
								int index5 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this5->b,pos5)) * 21) + 13) + 2);
								bool colorAbstract5;
								if ((index5 >= 0)) {
									colorAbstract5 = (index5 < (_e35->byteLength >> 2));
								}
								else {
									colorAbstract5 = false;
								}
								if (colorAbstract5) {
									_e35->bytes->setFloat(((index5 << 2) + _e35->byteOffset),v5);
								}
							}
						}
					}
				}
				{
					::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_redC(_e35,(( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) )));
					{
						Float v6 = (( (Float)((color & 255)) ) / ( (Float)(255) ));
						{
							 ::haxe::io::Bytes _this6 = _e35->bytes;
							int pos6 = _e35->byteOffset;
							bool k6;
							if ((pos6 >= 0)) {
								k6 = ((pos6 + 4) > _this6->length);
							}
							else {
								k6 = true;
							}
							if (k6) {
								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
							}
							{
								int index6 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this6->b,pos6)) * 21) + 19) + 2);
								bool colorAbstract6;
								if ((index6 >= 0)) {
									colorAbstract6 = (index6 < (_e35->byteLength >> 2));
								}
								else {
									colorAbstract6 = false;
								}
								if (colorAbstract6) {
									_e35->bytes->setFloat(((index6 << 2) + _e35->byteOffset),v6);
								}
							}
						}
					}
					{
						Float v7 = (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) ));
						{
							 ::haxe::io::Bytes _this7 = _e35->bytes;
							int pos7 = _e35->byteOffset;
							bool k7;
							if ((pos7 >= 0)) {
								k7 = ((pos7 + 4) > _this7->length);
							}
							else {
								k7 = true;
							}
							if (k7) {
								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
							}
							{
								int index7 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this7->b,pos7)) * 21) + 18) + 2);
								bool colorAbstract7;
								if ((index7 >= 0)) {
									colorAbstract7 = (index7 < (_e35->byteLength >> 2));
								}
								else {
									colorAbstract7 = false;
								}
								if (colorAbstract7) {
									_e35->bytes->setFloat(((index7 << 2) + _e35->byteOffset),v7);
								}
							}
						}
					}
					{
						Float v8 = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
						{
							 ::haxe::io::Bytes _this8 = _e35->bytes;
							int pos8 = _e35->byteOffset;
							bool k8;
							if ((pos8 >= 0)) {
								k8 = ((pos8 + 4) > _this8->length);
							}
							else {
								k8 = true;
							}
							if (k8) {
								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
							}
							{
								int index8 = (((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this8->b,pos8)) * 21) + 20) + 2);
								bool colorAbstract8;
								if ((index8 >= 0)) {
									colorAbstract8 = (index8 < (_e35->byteLength >> 2));
								}
								else {
									colorAbstract8 = false;
								}
								if (colorAbstract8) {
									_e35->bytes->setFloat(((index8 << 2) + _e35->byteOffset),v8);
								}
							}
						}
					}
				}
			}
			{
				 ::haxe::io::Bytes _this9 = _e35->bytes;
				int pos9 = _e35->byteOffset;
				bool colorAbstract9;
				if ((pos9 >= 0)) {
					colorAbstract9 = ((pos9 + 4) > _this9->length);
				}
				else {
					colorAbstract9 = true;
				}
				if (colorAbstract9) {
					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
				}
				{
					Float pos_ = ( ::__hxcpp_memory_get_float(_this9->b,pos9) + 1);
					if ((0 < (_e35->byteLength >> 2))) {
						_e35->bytes->setFloat(_e35->byteOffset,pos_);
					}
					 ::haxe::io::Bytes _this10 = _e35->bytes;
					int pos10 = _e35->byteOffset;
					bool colorAbstract10;
					if ((pos10 >= 0)) {
						colorAbstract10 = ((pos10 + 4) > _this10->length);
					}
					else {
						colorAbstract10 = true;
					}
					if (colorAbstract10) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					Float colorAbstract11 =  ::__hxcpp_memory_get_float(_this10->b,pos10);
					 ::haxe::io::Bytes _this11 = _e35->bytes;
					int pos11 = (4 + _e35->byteOffset);
					bool colorAbstract12;
					if ((pos11 >= 0)) {
						colorAbstract12 = ((pos11 + 4) > _this11->length);
					}
					else {
						colorAbstract12 = true;
					}
					if (colorAbstract12) {
						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
					}
					if ((colorAbstract11 > ( ::__hxcpp_memory_get_float(_this11->b,pos11) - ( (Float)(1) )))) {
						 ::haxe::io::Bytes _this = _e35->bytes;
						int pos = _e35->byteOffset;
						bool colorAbstract;
						if ((pos >= 0)) {
							colorAbstract = ((pos + 4) > _this->length);
						}
						else {
							colorAbstract = true;
						}
						if (colorAbstract) {
							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
						}
						Float value =  ::__hxcpp_memory_get_float(_this->b,pos);
						if ((1 < (_e35->byteLength >> 2))) {
							_e35->bytes->setFloat((4 + _e35->byteOffset),value);
						}
					}
				}
			}
		}
	}
	HX_END_LOCAL_FUNC2((void))

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_36, ::haxe::io::ArrayBufferViewImpl,_e36) HXARGC(0)
	 ::trilateral3::structure::TriInt _hx_run(){
		HX_JUST_GC_STACKFRAME
		 ::haxe::io::Bytes _this = _e36->bytes;
		int pos = _e36->byteOffset;
		bool k;
		if ((pos >= 0)) {
			k = ((pos + 4) > _this->length);
		}
		else {
			k = true;
		}
		if (k) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos)) * 21) + 6);
		 ::haxe::io::Bytes _this1 = _e36->bytes;
		int pos1 = (((k1 + 2) << 2) + _e36->byteOffset);
		bool _g;
		if ((pos1 >= 0)) {
			_g = ((pos1 + 4) > _this1->length);
		}
		else {
			_g = true;
		}
		if (_g) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int _g1 = (::Math_obj::round(( ::__hxcpp_memory_get_float(_this1->b,pos1) * ( (Float)(255) ))) << 24);
		int _g2 = (_g1 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e36) * ( (Float)(255) ))) << 16));
		 ::haxe::io::Bytes _this2 = _e36->bytes;
		int pos2 = _e36->byteOffset;
		bool k2;
		if ((pos2 >= 0)) {
			k2 = ((pos2 + 4) > _this2->length);
		}
		else {
			k2 = true;
		}
		if (k2) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k3 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this2->b,pos2)) * 21) + 4);
		 ::haxe::io::Bytes _this3 = _e36->bytes;
		int pos3 = (((k3 + 2) << 2) + _e36->byteOffset);
		bool _g3;
		if ((pos3 >= 0)) {
			_g3 = ((pos3 + 4) > _this3->length);
		}
		else {
			_g3 = true;
		}
		if (_g3) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int _g4 = (_g2 | (::Math_obj::round(( ::__hxcpp_memory_get_float(_this3->b,pos3) * ( (Float)(255) ))) << 8));
		 ::haxe::io::Bytes _this4 = _e36->bytes;
		int pos4 = _e36->byteOffset;
		bool k4;
		if ((pos4 >= 0)) {
			k4 = ((pos4 + 4) > _this4->length);
		}
		else {
			k4 = true;
		}
		if (k4) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k5 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this4->b,pos4)) * 21) + 5);
		 ::haxe::io::Bytes _this5 = _e36->bytes;
		int pos5 = (((k5 + 2) << 2) + _e36->byteOffset);
		bool _g5;
		if ((pos5 >= 0)) {
			_g5 = ((pos5 + 4) > _this5->length);
		}
		else {
			_g5 = true;
		}
		if (_g5) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int _g6 = (_g4 | ::Math_obj::round(( ::__hxcpp_memory_get_float(_this5->b,pos5) * ( (Float)(255) ))));
		 ::haxe::io::Bytes _this6 = _e36->bytes;
		int pos6 = _e36->byteOffset;
		bool k6;
		if ((pos6 >= 0)) {
			k6 = ((pos6 + 4) > _this6->length);
		}
		else {
			k6 = true;
		}
		if (k6) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k7 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this6->b,pos6)) * 21) + 6);
		 ::haxe::io::Bytes _this7 = _e36->bytes;
		int pos7 = (((k7 + 2) << 2) + _e36->byteOffset);
		bool _g7;
		if ((pos7 >= 0)) {
			_g7 = ((pos7 + 4) > _this7->length);
		}
		else {
			_g7 = true;
		}
		if (_g7) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int _g8 = (::Math_obj::round(( ::__hxcpp_memory_get_float(_this7->b,pos7) * ( (Float)(255) ))) << 24);
		int _g9 = (_g8 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e36) * ( (Float)(255) ))) << 16));
		 ::haxe::io::Bytes _this8 = _e36->bytes;
		int pos8 = _e36->byteOffset;
		bool k8;
		if ((pos8 >= 0)) {
			k8 = ((pos8 + 4) > _this8->length);
		}
		else {
			k8 = true;
		}
		if (k8) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k9 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this8->b,pos8)) * 21) + 4);
		 ::haxe::io::Bytes _this9 = _e36->bytes;
		int pos9 = (((k9 + 2) << 2) + _e36->byteOffset);
		bool _g10;
		if ((pos9 >= 0)) {
			_g10 = ((pos9 + 4) > _this9->length);
		}
		else {
			_g10 = true;
		}
		if (_g10) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int _g11 = (_g9 | (::Math_obj::round(( ::__hxcpp_memory_get_float(_this9->b,pos9) * ( (Float)(255) ))) << 8));
		 ::haxe::io::Bytes _this10 = _e36->bytes;
		int pos10 = _e36->byteOffset;
		bool k10;
		if ((pos10 >= 0)) {
			k10 = ((pos10 + 4) > _this10->length);
		}
		else {
			k10 = true;
		}
		if (k10) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k11 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this10->b,pos10)) * 21) + 5);
		 ::haxe::io::Bytes _this11 = _e36->bytes;
		int pos11 = (((k11 + 2) << 2) + _e36->byteOffset);
		bool _g12;
		if ((pos11 >= 0)) {
			_g12 = ((pos11 + 4) > _this11->length);
		}
		else {
			_g12 = true;
		}
		if (_g12) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int _g13 = (_g11 | ::Math_obj::round(( ::__hxcpp_memory_get_float(_this11->b,pos11) * ( (Float)(255) ))));
		 ::haxe::io::Bytes _this12 = _e36->bytes;
		int pos12 = _e36->byteOffset;
		bool k12;
		if ((pos12 >= 0)) {
			k12 = ((pos12 + 4) > _this12->length);
		}
		else {
			k12 = true;
		}
		if (k12) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k13 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this12->b,pos12)) * 21) + 6);
		 ::haxe::io::Bytes _this13 = _e36->bytes;
		int pos13 = (((k13 + 2) << 2) + _e36->byteOffset);
		bool colorAbstract;
		if ((pos13 >= 0)) {
			colorAbstract = ((pos13 + 4) > _this13->length);
		}
		else {
			colorAbstract = true;
		}
		if (colorAbstract) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int colorAbstract1 = (::Math_obj::round(( ::__hxcpp_memory_get_float(_this13->b,pos13) * ( (Float)(255) ))) << 24);
		int colorAbstract2 = (colorAbstract1 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(_e36) * ( (Float)(255) ))) << 16));
		 ::haxe::io::Bytes _this14 = _e36->bytes;
		int pos14 = _e36->byteOffset;
		bool k14;
		if ((pos14 >= 0)) {
			k14 = ((pos14 + 4) > _this14->length);
		}
		else {
			k14 = true;
		}
		if (k14) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k15 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this14->b,pos14)) * 21) + 4);
		 ::haxe::io::Bytes _this15 = _e36->bytes;
		int pos15 = (((k15 + 2) << 2) + _e36->byteOffset);
		bool colorAbstract3;
		if ((pos15 >= 0)) {
			colorAbstract3 = ((pos15 + 4) > _this15->length);
		}
		else {
			colorAbstract3 = true;
		}
		if (colorAbstract3) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int colorAbstract4 = (colorAbstract2 | (::Math_obj::round(( ::__hxcpp_memory_get_float(_this15->b,pos15) * ( (Float)(255) ))) << 8));
		 ::haxe::io::Bytes _this16 = _e36->bytes;
		int pos16 = _e36->byteOffset;
		bool k16;
		if ((pos16 >= 0)) {
			k16 = ((pos16 + 4) > _this16->length);
		}
		else {
			k16 = true;
		}
		if (k16) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		int k17 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this16->b,pos16)) * 21) + 5);
		 ::haxe::io::Bytes _this17 = _e36->bytes;
		int pos17 = (((k17 + 2) << 2) + _e36->byteOffset);
		bool colorAbstract5;
		if ((pos17 >= 0)) {
			colorAbstract5 = ((pos17 + 4) > _this17->length);
		}
		else {
			colorAbstract5 = true;
		}
		if (colorAbstract5) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		return  ::trilateral3::structure::TriInt_obj::__alloc( HX_CTX ,_g6,_g13,(colorAbstract4 | ::Math_obj::round(( ::__hxcpp_memory_get_float(_this17->b,pos17) * ( (Float)(255) )))));
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_37, ::haxe::io::ArrayBufferViewImpl,_e37) HXARGC(0)
	Float _hx_run(){
		 ::haxe::io::Bytes _this = _e37->bytes;
		int pos = _e37->byteOffset;
		bool colorAbstract;
		if ((pos >= 0)) {
			colorAbstract = ((pos + 4) > _this->length);
		}
		else {
			colorAbstract = true;
		}
		if (colorAbstract) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		return  ::__hxcpp_memory_get_float(_this->b,pos);
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_38, ::haxe::io::ArrayBufferViewImpl,_e38) HXARGC(1)
	Float _hx_run(Float pos_){
		if ((0 < (_e38->byteLength >> 2))) {
			_e38->bytes->setFloat(_e38->byteOffset,pos_);
		}
		 ::haxe::io::Bytes _this = _e38->bytes;
		int pos = _e38->byteOffset;
		bool colorAbstract;
		if ((pos >= 0)) {
			colorAbstract = ((pos + 4) > _this->length);
		}
		else {
			colorAbstract = true;
		}
		if (colorAbstract) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		Float colorAbstract1 =  ::__hxcpp_memory_get_float(_this->b,pos);
		 ::haxe::io::Bytes _this1 = _e38->bytes;
		int pos1 = (4 + _e38->byteOffset);
		bool colorAbstract2;
		if ((pos1 >= 0)) {
			colorAbstract2 = ((pos1 + 4) > _this1->length);
		}
		else {
			colorAbstract2 = true;
		}
		if (colorAbstract2) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		if ((colorAbstract1 > ( ::__hxcpp_memory_get_float(_this1->b,pos1) - ( (Float)(1) )))) {
			 ::haxe::io::Bytes _this = _e38->bytes;
			int pos = _e38->byteOffset;
			bool colorAbstract;
			if ((pos >= 0)) {
				colorAbstract = ((pos + 4) > _this->length);
			}
			else {
				colorAbstract = true;
			}
			if (colorAbstract) {
				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
			}
			Float value =  ::__hxcpp_memory_get_float(_this->b,pos);
			if ((1 < (_e38->byteLength >> 2))) {
				_e38->bytes->setFloat((4 + _e38->byteOffset),value);
			}
		}
		return pos_;
	}
	HX_END_LOCAL_FUNC1(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_39, ::haxe::io::ArrayBufferViewImpl,_e39) HXARGC(0)
	int _hx_run(){
		return ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(_e39);
	}
	HX_END_LOCAL_FUNC0(return)

	HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_40, ::haxe::io::ArrayBufferViewImpl,_e40) HXARGC(1)
	int _hx_run(int id){
		return ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::set_size(_e40,id);
	}
	HX_END_LOCAL_FUNC1(return)

            	HX_JUST_GC_STACKFRAME
	 ::haxe::io::ArrayBufferViewImpl t = this->colorTriangles;
	 ::haxe::io::ArrayBufferViewImpl _e = t;
	 ::haxe::io::ArrayBufferViewImpl _e1 = t;
	 ::haxe::io::ArrayBufferViewImpl _e2 = t;
	 ::haxe::io::ArrayBufferViewImpl _e3 = t;
	 ::haxe::io::ArrayBufferViewImpl _e4 = t;
	 ::haxe::io::ArrayBufferViewImpl _e5 = t;
	 ::haxe::io::ArrayBufferViewImpl _e6 = t;
	 ::haxe::io::ArrayBufferViewImpl _e7 = t;
	 ::haxe::io::ArrayBufferViewImpl _e8 = t;
	 ::haxe::io::ArrayBufferViewImpl _e9 = t;
	 ::haxe::io::ArrayBufferViewImpl _e10 = t;
	 ::haxe::io::ArrayBufferViewImpl _e11 = t;
	 ::haxe::io::ArrayBufferViewImpl _e12 = t;
	 ::haxe::io::ArrayBufferViewImpl _e13 = t;
	 ::haxe::io::ArrayBufferViewImpl _e14 = t;
	 ::haxe::io::ArrayBufferViewImpl _e15 = t;
	 ::haxe::io::ArrayBufferViewImpl _e16 = t;
	 ::Dynamic triangleAbstract =  ::Dynamic(::hx::Anon_obj::Create(17)
		->setFixed(0,HX_("rotateTrig",d7,d8,0e,85), ::Dynamic(new _hx_Closure_2(_e2)))
		->setFixed(1,HX_("triangle",c8,be,c5,8d), ::Dynamic(new _hx_Closure_14(_e14)))
		->setFixed(2,HX_("get_x",4f,a5,60,91), ::Dynamic(new _hx_Closure_8(_e8)))
		->setFixed(3,HX_("get_y",50,a5,60,91), ::Dynamic(new _hx_Closure_10(_e10)))
		->setFixed(4,HX_("get_z",51,a5,60,91), ::Dynamic(new _hx_Closure_12(_e12)))
		->setFixed(5,HX_("liteHit",c5,d1,fb,93), ::Dynamic(new _hx_Closure_4(_e4)))
		->setFixed(6,HX_("moveDelta",27,b7,ed,94), ::Dynamic(new _hx_Closure_1(_e1)))
		->setFixed(7,HX_("get_back",b0,95,cb,c0), ::Dynamic(new _hx_Closure_6(_e6)))
		->setFixed(8,HX_("rotate",5b,46,20,cb), ::Dynamic(new _hx_Closure_0(_e)))
		->setFixed(9,HX_("fullHit",04,38,2f,d0), ::Dynamic(new _hx_Closure_3(_e3)))
		->setFixed(10,HX_("get_right",33,68,0d,2d), ::Dynamic(new _hx_Closure_7(_e7)))
		->setFixed(11,HX_("getTriangle3D",af,89,3b,36), ::Dynamic(new _hx_Closure_15(_e15)))
		->setFixed(12,HX_("transform",6c,2d,93,45), ::Dynamic(new _hx_Closure_16(_e16)))
		->setFixed(13,HX_("get_bottom",b4,56,00,56), ::Dynamic(new _hx_Closure_5(_e5)))
		->setFixed(14,HX_("set_x",5b,9b,2f,7a), ::Dynamic(new _hx_Closure_9(_e9)))
		->setFixed(15,HX_("set_y",5c,9b,2f,7a), ::Dynamic(new _hx_Closure_11(_e11)))
		->setFixed(16,HX_("set_z",5d,9b,2f,7a), ::Dynamic(new _hx_Closure_13(_e13))));
	 ::haxe::io::ArrayBufferViewImpl _e17 = t;
	 ::haxe::io::ArrayBufferViewImpl _e18 = t;
	 ::haxe::io::ArrayBufferViewImpl _e19 = t;
	 ::haxe::io::ArrayBufferViewImpl _e20 = t;
	 ::haxe::io::ArrayBufferViewImpl _e21 = t;
	 ::haxe::io::ArrayBufferViewImpl _e22 = t;
	 ::haxe::io::ArrayBufferViewImpl _e23 = t;
	 ::haxe::io::ArrayBufferViewImpl _e24 = t;
	 ::haxe::io::ArrayBufferViewImpl _e25 = t;
	 ::haxe::io::ArrayBufferViewImpl _e26 = t;
	 ::Dynamic drawAbstract =  ::Dynamic(::hx::Anon_obj::Create(11)
		->setFixed(0,HX_("triangle",c8,be,c5,8d), ::Dynamic(new _hx_Closure_17(_e17)))
		->setFixed(1,HX_("triangleCurrent",51,ee,2b,9e),triangleAbstract)
		->setFixed(2,HX_("get_size",4a,5c,0e,cc), ::Dynamic(new _hx_Closure_25(_e25)))
		->setFixed(3,HX_("hasNext",6d,a5,46,18), ::Dynamic(new _hx_Closure_22(_e22)))
		->setFixed(4,HX_("set_pos",37,b7,cb,19), ::Dynamic(new _hx_Closure_24(_e24)))
		->setFixed(5,HX_("get_pos",2b,26,ca,26), ::Dynamic(new _hx_Closure_23(_e23)))
		->setFixed(6,HX_("getTriangle3D",af,89,3b,36), ::Dynamic(new _hx_Closure_20(_e20)))
		->setFixed(7,HX_("transform",6c,2d,93,45), ::Dynamic(new _hx_Closure_18(_e18)))
		->setFixed(8,HX_("next",f3,84,02,49), ::Dynamic(new _hx_Closure_21(_e21)))
		->setFixed(9,HX_("transformRange",b1,c0,a1,5a), ::Dynamic(new _hx_Closure_19(_e19)))
		->setFixed(10,HX_("set_size",be,b5,6b,7a), ::Dynamic(new _hx_Closure_26(_e26))));
	 ::haxe::io::ArrayBufferViewImpl _e27 = t;
	 ::haxe::io::ArrayBufferViewImpl _e28 = t;
	 ::haxe::io::ArrayBufferViewImpl _e29 = t;
	 ::haxe::io::ArrayBufferViewImpl _e30 = t;
	 ::haxe::io::ArrayBufferViewImpl _e31 = t;
	 ::haxe::io::ArrayBufferViewImpl _e32 = t;
	 ::haxe::io::ArrayBufferViewImpl _e33 = t;
	 ::Dynamic color3Abstract =  ::Dynamic(::hx::Anon_obj::Create(7)
		->setFixed(0,HX_("set_argbA",d8,5d,81,4c), ::Dynamic(new _hx_Closure_28(_e28)))
		->setFixed(1,HX_("set_argbB",d9,5d,81,4c), ::Dynamic(new _hx_Closure_30(_e30)))
		->setFixed(2,HX_("set_argbC",da,5d,81,4c), ::Dynamic(new _hx_Closure_32(_e32)))
		->setFixed(3,HX_("get_argbA",cc,71,30,69), ::Dynamic(new _hx_Closure_29(_e29)))
		->setFixed(4,HX_("get_argbB",cd,71,30,69), ::Dynamic(new _hx_Closure_31(_e31)))
		->setFixed(5,HX_("get_argbC",ce,71,30,69), ::Dynamic(new _hx_Closure_33(_e33)))
		->setFixed(6,HX_("set_argb",49,a2,8c,6e), ::Dynamic(new _hx_Closure_27(_e27))));
	 ::haxe::io::ArrayBufferViewImpl _e34 = t;
	 ::haxe::io::ArrayBufferViewImpl _e35 = t;
	 ::haxe::io::ArrayBufferViewImpl _e36 = t;
	 ::haxe::io::ArrayBufferViewImpl _e37 = t;
	 ::haxe::io::ArrayBufferViewImpl _e38 = t;
	 ::haxe::io::ArrayBufferViewImpl _e39 = t;
	 ::haxe::io::ArrayBufferViewImpl _e40 = t;
	 ::Dynamic colorAbstract =  ::Dynamic(::hx::Anon_obj::Create(8)
		->setFixed(0,HX_("cornerColors",65,87,ed,a2), ::Dynamic(new _hx_Closure_34(_e34)))
		->setFixed(1,HX_("getTriInt",ba,b1,09,c7), ::Dynamic(new _hx_Closure_36(_e36)))
		->setFixed(2,HX_("get_size",4a,5c,0e,cc), ::Dynamic(new _hx_Closure_39(_e39)))
		->setFixed(3,HX_("colorTriangles",c8,da,ed,e6), ::Dynamic(new _hx_Closure_35(_e35)))
		->setFixed(4,HX_("set_pos",37,b7,cb,19), ::Dynamic(new _hx_Closure_38(_e38)))
		->setFixed(5,HX_("get_pos",2b,26,ca,26), ::Dynamic(new _hx_Closure_37(_e37)))
		->setFixed(6,HX_("color3current",c9,64,01,5a),color3Abstract)
		->setFixed(7,HX_("set_size",be,b5,6b,7a), ::Dynamic(new _hx_Closure_40(_e40))));
	this->pen =  ::trilateral3::drawing::Pen_obj::__alloc( HX_CTX ,drawAbstract,colorAbstract);
}


HX_DEFINE_DYNAMIC_FUNC0(PenNodule_obj,createPen,(void))

int PenNodule_obj::largeEnough;


::hx::ObjectPtr< PenNodule_obj > PenNodule_obj::__new() {
	::hx::ObjectPtr< PenNodule_obj > __this = new PenNodule_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PenNodule_obj > PenNodule_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PenNodule_obj *__this = (PenNodule_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PenNodule_obj), true, "trilateral3.nodule.PenNodule"));
	*(void **)__this = PenNodule_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PenNodule_obj::PenNodule_obj()
{
}

void PenNodule_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PenNodule);
	HX_MARK_MEMBER_NAME(colorTriangles,"colorTriangles");
	HX_MARK_MEMBER_NAME(pen,"pen");
	HX_MARK_END_CLASS();
}

void PenNodule_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(colorTriangles,"colorTriangles");
	HX_VISIT_MEMBER_NAME(pen,"pen");
}

::hx::Val PenNodule_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { return ::hx::Val( pen ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"createPen") ) { return ::hx::Val( createPen_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTriangles") ) { return ::hx::Val( colorTriangles ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PenNodule_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"largeEnough") ) { outValue = ( largeEnough ); return true; }
	}
	return false;
}

::hx::Val PenNodule_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { pen=inValue.Cast<  ::trilateral3::drawing::Pen >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTriangles") ) { colorTriangles=inValue.Cast<  ::haxe::io::ArrayBufferViewImpl >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PenNodule_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"largeEnough") ) { largeEnough=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PenNodule_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("colorTriangles",c8,da,ed,e6));
	outFields->push(HX_("pen",d9,54,55,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PenNodule_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::io::ArrayBufferViewImpl */ ,(int)offsetof(PenNodule_obj,colorTriangles),HX_("colorTriangles",c8,da,ed,e6)},
	{::hx::fsObject /*  ::trilateral3::drawing::Pen */ ,(int)offsetof(PenNodule_obj,pen),HX_("pen",d9,54,55,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PenNodule_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &PenNodule_obj::largeEnough,HX_("largeEnough",cb,b7,3c,cb)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PenNodule_obj_sMemberFields[] = {
	HX_("colorTriangles",c8,da,ed,e6),
	HX_("pen",d9,54,55,00),
	HX_("createPen",3d,2b,e3,49),
	::String(null()) };

static void PenNodule_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PenNodule_obj::largeEnough,"largeEnough");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PenNodule_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PenNodule_obj::largeEnough,"largeEnough");
};

#endif

::hx::Class PenNodule_obj::__mClass;

static ::String PenNodule_obj_sStaticFields[] = {
	HX_("largeEnough",cb,b7,3c,cb),
	::String(null())
};

void PenNodule_obj::__register()
{
	PenNodule_obj _hx_dummy;
	PenNodule_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.nodule.PenNodule",c8,6f,ae,d4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PenNodule_obj::__GetStatic;
	__mClass->mSetStaticField = &PenNodule_obj::__SetStatic;
	__mClass->mMarkFunc = PenNodule_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PenNodule_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PenNodule_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PenNodule_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PenNodule_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PenNodule_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PenNodule_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PenNodule_obj::__boot()
{
{
	largeEnough = 20000000;
}
}

} // end namespace trilateral3
} // end namespace nodule
