// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_kitGL_glLime_Shader
#define INCLUDED_kitGL_glLime_Shader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_c2b4fb6979ef7923_102_new)
HX_DECLARE_CLASS2(kitGL,glLime,Shader)

namespace kitGL{
namespace glLime{


class HXCPP_CLASS_ATTRIBUTES Shader_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Shader_obj OBJ_;
		Shader_obj();

	public:
		enum { _hx_ClassId = 0x5a0f6e9a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kitGL.glLime.Shader")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kitGL.glLime.Shader"); }

		inline static ::hx::ObjectPtr< Shader_obj > __new() {
			::hx::ObjectPtr< Shader_obj > __this = new Shader_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Shader_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Shader_obj *__this = (Shader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Shader_obj), true, "kitGL.glLime.Shader"));
			*(void **)__this = Shader_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_c2b4fb6979ef7923_102_new)
HXLINE( 110)		( ( ::kitGL::glLime::Shader)(__this) )->fragmentTexture_ = ((((HX_("varying vec2 vTexCoord;",a9,1f,fd,58) + HX_("uniform sampler2D uImage0;",a3,6f,63,d1)) + HX_("void main (void) {",c3,89,11,26)) + HX_("gl_FragColor = texture2D( uImage0, vTexCoord );",93,60,c7,5c)) + HX_("}",7d,00,00,00));
HXLINE( 109)		( ( ::kitGL::glLime::Shader)(__this) )->vertexTexture_ = (((((((HX_("attribute vec2 aVertexPosition;",0b,a8,4b,46) + HX_("attribute vec2 aTexCoord;",0a,16,fd,45)) + HX_("uniform mat4 uMatrix;",05,7f,15,4c)) + HX_("varying vec2 vTexCoord;",a9,1f,fd,58)) + HX_("void main (void) {",c3,89,11,26)) + HX_("vTexCoord = aTexCoord;",4b,57,a5,83)) + HX_("gl_Position = uMatrix * vec4 (aVertexPosition, 0.0, 1.0);",d9,20,33,7c)) + HX_("}",7d,00,00,00));
HXLINE( 108)		( ( ::kitGL::glLime::Shader)(__this) )->fragmentColor_ = (((HX_("varying vec4 vcol;",61,c8,5b,03) + HX_("void main(void) {",4d,18,fb,21)) + HX_("gl_FragColor = vcol;",05,df,af,ee)) + HX_("}",7d,00,00,00));
HXLINE( 107)		( ( ::kitGL::glLime::Shader)(__this) )->vertexColor_ = (((((((HX_("attribute vec3 vertexPosition;",31,27,01,79) + HX_("attribute vec4 vertexColor;",b8,a7,4a,43)) + HX_("varying vec4 vcol;",61,c8,5b,03)) + HX_("uniform mat4 modelViewProjection;",de,e0,6d,6f)) + HX_("void main(void) {",4d,18,fb,21)) + HX_(" gl_Position = modelViewProjection * vec4(vertexPosition, 1.);",ff,9f,7d,12)) + HX_(" vcol = vertexColor;",75,ef,b6,2e)) + HX_("}",7d,00,00,00));
HXLINE( 106)		( ( ::kitGL::glLime::Shader)(__this) )->fragmentString0_ = (((HX_("varying vec4 vcol;",61,c8,5b,03) + HX_("void main(void) {",4d,18,fb,21)) + HX_(" gl_FragColor = vcol;",25,af,1c,24)) + HX_("}",7d,00,00,00));
HXLINE( 105)		( ( ::kitGL::glLime::Shader)(__this) )->vertexString0_ = ((((((HX_("attribute vec3 vertexPosition;",31,27,01,79) + HX_("attribute vec4 vertexColor;",b8,a7,4a,43)) + HX_("varying vec4 vcol;",61,c8,5b,03)) + HX_("void main(void) {",4d,18,fb,21)) + HX_(" gl_Position = vec4(vertexPosition, 1.0);",1c,0c,87,98)) + HX_(" vcol = vertexColor;",75,ef,b6,2e)) + HX_("}",7d,00,00,00));
HXLINE( 104)		( ( ::kitGL::glLime::Shader)(__this) )->fragmentSimpleColor_ = (((HX_("varying vec3 vColor;",7d,46,f2,c9) + HX_("void main() {",a1,5c,71,87)) + HX_("gl_FragColor = vec4( vColor, 1.0 );",04,06,e8,8c)) + HX_("}",7d,00,00,00));
HXLINE( 103)		( ( ::kitGL::glLime::Shader)(__this) )->vertexSimpleColor_ = ((((((HX_("attribute vec2 vertexPosition;",30,55,0d,f6) + HX_("attribute vec3 vertexColor;",59,54,9d,80)) + HX_("varying vec3 vColor;",7d,46,f2,c9)) + HX_("void main() {",a1,5c,71,87)) + HX_("gl_Position = vec4(vertexPosition, 0.0, 1.0);",48,9e,07,fd)) + HX_("vColor = vertexColor;",72,7f,c3,40)) + HX_("}",7d,00,00,00));
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Shader_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Shader",45,33,b5,51); }

		::String vertexSimpleColor_;
		::String fragmentSimpleColor_;
		::String vertexString0_;
		::String fragmentString0_;
		::String vertexColor_;
		::String fragmentColor_;
		::String vertexTexture_;
		::String fragmentTexture_;
};

} // end namespace kitGL
} // end namespace glLime

#endif /* INCLUDED_kitGL_glLime_Shader */ 
