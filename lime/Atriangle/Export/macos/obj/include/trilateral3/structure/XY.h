// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_structure_XY
#define INCLUDED_trilateral3_structure_XY

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_188cfbeac1e70be9_6_new)
HX_DECLARE_CLASS2(trilateral3,structure,XY)

namespace trilateral3{
namespace structure{


class HXCPP_CLASS_ATTRIBUTES XY_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef XY_obj OBJ_;
		XY_obj();

	public:
		enum { _hx_ClassId = 0x3eb1434d };

		void __construct(Float x,Float y);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="trilateral3.structure.XY")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"trilateral3.structure.XY"); }

		inline static ::hx::ObjectPtr< XY_obj > __new(Float x,Float y) {
			::hx::ObjectPtr< XY_obj > __this = new XY_obj();
			__this->__construct(x,y);
			return __this;
		}

		inline static ::hx::ObjectPtr< XY_obj > __alloc(::hx::Ctx *_hx_ctx,Float x,Float y) {
			XY_obj *__this = (XY_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(XY_obj), false, "trilateral3.structure.XY"));
			*(void **)__this = XY_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_188cfbeac1e70be9_6_new)
HXLINE(   9)		( ( ::trilateral3::structure::XY)(__this) )->w = ((Float)1.);
HXLINE(   8)		( ( ::trilateral3::structure::XY)(__this) )->y = ((Float)0.);
HXLINE(   7)		( ( ::trilateral3::structure::XY)(__this) )->x = ((Float)0.);
HXLINE(  11)		( ( ::trilateral3::structure::XY)(__this) )->x = x;
HXLINE(  12)		( ( ::trilateral3::structure::XY)(__this) )->y = y;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~XY_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("XY",01,4d,00,00); }

		Float x;
		Float y;
		Float w;
};

} // end namespace trilateral3
} // end namespace structure

#endif /* INCLUDED_trilateral3_structure_XY */ 
