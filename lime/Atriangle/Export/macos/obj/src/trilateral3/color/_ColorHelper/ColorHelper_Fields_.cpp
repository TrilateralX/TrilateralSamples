// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_trilateral3_color__ColorHelper_ColorHelper_Fields_
#include <trilateral3/color/_ColorHelper/ColorHelper_Fields_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4a01bfcef1536f67_5_getBlack,"trilateral3.color._ColorHelper.ColorHelper_Fields_","getBlack",0x9fe648e9,"trilateral3.color._ColorHelper.ColorHelper_Fields_.getBlack","trilateral3/color/ColorHelper.hx",5,0x3833b301)
HX_LOCAL_STACK_FRAME(_hx_pos_4a01bfcef1536f67_9_from_cymka,"trilateral3.color._ColorHelper.ColorHelper_Fields_","from_cymka",0xf385b618,"trilateral3.color._ColorHelper.ColorHelper_Fields_.from_cymka","trilateral3/color/ColorHelper.hx",9,0x3833b301)
HX_LOCAL_STACK_FRAME(_hx_pos_4a01bfcef1536f67_16_from_argb,"trilateral3.color._ColorHelper.ColorHelper_Fields_","from_argb",0x437aebe1,"trilateral3.color._ColorHelper.ColorHelper_Fields_.from_argb","trilateral3/color/ColorHelper.hx",16,0x3833b301)
HX_LOCAL_STACK_FRAME(_hx_pos_4a01bfcef1536f67_22_toHexInt,"trilateral3.color._ColorHelper.ColorHelper_Fields_","toHexInt",0xbe7b884f,"trilateral3.color._ColorHelper.ColorHelper_Fields_.toHexInt","trilateral3/color/ColorHelper.hx",22,0x3833b301)
HX_LOCAL_STACK_FRAME(_hx_pos_4a01bfcef1536f67_25_rgbConvert,"trilateral3.color._ColorHelper.ColorHelper_Fields_","rgbConvert",0xe5ab0206,"trilateral3.color._ColorHelper.ColorHelper_Fields_.rgbConvert","trilateral3/color/ColorHelper.hx",25,0x3833b301)
HX_LOCAL_STACK_FRAME(_hx_pos_4a01bfcef1536f67_28_cymkConvert,"trilateral3.color._ColorHelper.ColorHelper_Fields_","cymkConvert",0xb915511f,"trilateral3.color._ColorHelper.ColorHelper_Fields_.cymkConvert","trilateral3/color/ColorHelper.hx",28,0x3833b301)
HX_LOCAL_STACK_FRAME(_hx_pos_4a01bfcef1536f67_31_alphaChannel,"trilateral3.color._ColorHelper.ColorHelper_Fields_","alphaChannel",0x096cfca5,"trilateral3.color._ColorHelper.ColorHelper_Fields_.alphaChannel","trilateral3/color/ColorHelper.hx",31,0x3833b301)
HX_LOCAL_STACK_FRAME(_hx_pos_4a01bfcef1536f67_34_redChannel,"trilateral3.color._ColorHelper.ColorHelper_Fields_","redChannel",0x64351712,"trilateral3.color._ColorHelper.ColorHelper_Fields_.redChannel","trilateral3/color/ColorHelper.hx",34,0x3833b301)
HX_LOCAL_STACK_FRAME(_hx_pos_4a01bfcef1536f67_37_greenChannel,"trilateral3.color._ColorHelper.ColorHelper_Fields_","greenChannel",0xc4a87be0,"trilateral3.color._ColorHelper.ColorHelper_Fields_.greenChannel","trilateral3/color/ColorHelper.hx",37,0x3833b301)
HX_LOCAL_STACK_FRAME(_hx_pos_4a01bfcef1536f67_40_blueChannel,"trilateral3.color._ColorHelper.ColorHelper_Fields_","blueChannel",0x66d36da9,"trilateral3.color._ColorHelper.ColorHelper_Fields_.blueChannel","trilateral3/color/ColorHelper.hx",40,0x3833b301)
namespace trilateral3{
namespace color{
namespace _ColorHelper{

void ColorHelper_Fields__obj::__construct() { }

Dynamic ColorHelper_Fields__obj::__CreateEmpty() { return new ColorHelper_Fields__obj; }

void *ColorHelper_Fields__obj::_hx_vtable = 0;

Dynamic ColorHelper_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColorHelper_Fields__obj > _hx_result = new ColorHelper_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorHelper_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x769f38e2;
}

Float ColorHelper_Fields__obj::getBlack(Float r,Float g,Float b){
            	HX_STACKFRAME(&_hx_pos_4a01bfcef1536f67_5_getBlack)
HXDLIN(   5)		return (((Float)1.) - ::Math_obj::max(::Math_obj::max(r,b),g));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ColorHelper_Fields__obj,getBlack,return )

int ColorHelper_Fields__obj::from_cymka(Float c,Float y,Float m,Float k,Float a){
            	HX_STACKFRAME(&_hx_pos_4a01bfcef1536f67_9_from_cymka)
HXDLIN(   9)		return ((((::Math_obj::round((a * ( (Float)(255) ))) << 24) | (::Math_obj::round((((( (Float)(1) ) - (c / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((((( (Float)(1) ) - (m / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((((( (Float)(1) ) - (y / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ColorHelper_Fields__obj,from_cymka,return )

int ColorHelper_Fields__obj::from_argb(Float a,Float r,Float g,Float b){
            	HX_STACKFRAME(&_hx_pos_4a01bfcef1536f67_16_from_argb)
HXDLIN(  16)		return ((((::Math_obj::round((a * ( (Float)(255) ))) << 24) | (::Math_obj::round((r * ( (Float)(255) ))) << 16)) | (::Math_obj::round((g * ( (Float)(255) ))) << 8)) | ::Math_obj::round((b * ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ColorHelper_Fields__obj,from_argb,return )

int ColorHelper_Fields__obj::toHexInt(Float c){
            	HX_STACKFRAME(&_hx_pos_4a01bfcef1536f67_22_toHexInt)
HXDLIN(  22)		return ::Math_obj::round((c * ( (Float)(255) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelper_Fields__obj,toHexInt,return )

Float ColorHelper_Fields__obj::rgbConvert(Float color,Float k){
            	HX_STACKFRAME(&_hx_pos_4a01bfcef1536f67_25_rgbConvert)
HXDLIN(  25)		return (((((Float)1.) - color) - k) / (((Float)1.) - k));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelper_Fields__obj,rgbConvert,return )

Float ColorHelper_Fields__obj::cymkConvert(Float color,Float black){
            	HX_STACKFRAME(&_hx_pos_4a01bfcef1536f67_28_cymkConvert)
HXDLIN(  28)		return ((( (Float)(1) ) - (color / ( (Float)(100) ))) * (( (Float)(1) ) - (black / ( (Float)(100) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelper_Fields__obj,cymkConvert,return )

Float ColorHelper_Fields__obj::alphaChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_4a01bfcef1536f67_31_alphaChannel)
HXDLIN(  31)		return (( (Float)(((_hx_int >> 24) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelper_Fields__obj,alphaChannel,return )

Float ColorHelper_Fields__obj::redChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_4a01bfcef1536f67_34_redChannel)
HXDLIN(  34)		return (( (Float)(((_hx_int >> 16) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelper_Fields__obj,redChannel,return )

Float ColorHelper_Fields__obj::greenChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_4a01bfcef1536f67_37_greenChannel)
HXDLIN(  37)		return (( (Float)(((_hx_int >> 8) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelper_Fields__obj,greenChannel,return )

Float ColorHelper_Fields__obj::blueChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_4a01bfcef1536f67_40_blueChannel)
HXDLIN(  40)		return (( (Float)((_hx_int & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelper_Fields__obj,blueChannel,return )


ColorHelper_Fields__obj::ColorHelper_Fields__obj()
{
}

bool ColorHelper_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"getBlack") ) { outValue = getBlack_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHexInt") ) { outValue = toHexInt_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"from_argb") ) { outValue = from_argb_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"from_cymka") ) { outValue = from_cymka_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rgbConvert") ) { outValue = rgbConvert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"redChannel") ) { outValue = redChannel_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cymkConvert") ) { outValue = cymkConvert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"blueChannel") ) { outValue = blueChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"alphaChannel") ) { outValue = alphaChannel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greenChannel") ) { outValue = greenChannel_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ColorHelper_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ColorHelper_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class ColorHelper_Fields__obj::__mClass;

static ::String ColorHelper_Fields__obj_sStaticFields[] = {
	HX_("getBlack",49,e5,c8,14),
	HX_("from_cymka",78,2a,90,5b),
	HX_("from_argb",81,23,e1,14),
	HX_("toHexInt",af,24,5e,33),
	HX_("rgbConvert",66,76,b5,4d),
	HX_("cymkConvert",bf,b0,30,5a),
	HX_("alphaChannel",05,49,45,60),
	HX_("redChannel",72,8b,3f,cc),
	HX_("greenChannel",40,c8,80,1b),
	HX_("blueChannel",49,cd,ee,07),
	::String(null())
};

void ColorHelper_Fields__obj::__register()
{
	ColorHelper_Fields__obj _hx_dummy;
	ColorHelper_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.color._ColorHelper.ColorHelper_Fields_",ce,f0,71,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColorHelper_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ColorHelper_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ColorHelper_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorHelper_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorHelper_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace color
} // end namespace _ColorHelper
