// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_trilateral3_geom__Transformer_Transformer_Fields_
#include <trilateral3/geom/_Transformer/Transformer_Fields_.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_Vertex
#include <trilateral3/matrix/Vertex.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_24bb7bd5a6e03e96_5_multiplyTransform,"trilateral3.geom._Transformer.Transformer_Fields_","multiplyTransform",0x30a1eff1,"trilateral3.geom._Transformer.Transformer_Fields_.multiplyTransform","trilateral3/geom/Transformer.hx",5,0x3c94a990)
HX_LOCAL_STACK_FRAME(_hx_pos_24bb7bd5a6e03e96_16_transformVertex,"trilateral3.geom._Transformer.Transformer_Fields_","transformVertex",0x2c236af9,"trilateral3.geom._Transformer.Transformer_Fields_.transformVertex","trilateral3/geom/Transformer.hx",16,0x3c94a990)
HX_LOCAL_STACK_FRAME(_hx_pos_24bb7bd5a6e03e96_24_unitTransform,"trilateral3.geom._Transformer.Transformer_Fields_","unitTransform",0xfb026311,"trilateral3.geom._Transformer.Transformer_Fields_.unitTransform","trilateral3/geom/Transformer.hx",24,0x3c94a990)
namespace trilateral3{
namespace geom{
namespace _Transformer{

void Transformer_Fields__obj::__construct() { }

Dynamic Transformer_Fields__obj::__CreateEmpty() { return new Transformer_Fields__obj; }

void *Transformer_Fields__obj::_hx_vtable = 0;

Dynamic Transformer_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Transformer_Fields__obj > _hx_result = new Transformer_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Transformer_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1ff08f0b;
}

 ::trilateral3::matrix::MatrixDozen Transformer_Fields__obj::multiplyTransform( ::trilateral3::matrix::MatrixDozen r, ::trilateral3::matrix::MatrixDozen s){
            	HX_GC_STACKFRAME(&_hx_pos_24bb7bd5a6e03e96_5_multiplyTransform)
HXLINE(   6)		 ::trilateral3::matrix::MatrixDozen m =  ::trilateral3::matrix::MatrixDozen_obj::__alloc( HX_CTX ,(((r->a * s->a) + (r->b * s->e)) + (r->c * s->i)),(((r->a * s->b) + (r->b * s->f)) + (r->c * s->j)),(((r->a * s->c) + (r->b * s->g)) + (r->c * s->k)),((((r->a * s->d) + (r->b * s->h)) + (r->c * s->l)) + r->d),(((r->e * s->a) + (r->f * s->e)) + (r->g * s->i)),(((r->e * s->b) + (r->f * s->f)) + (r->g * s->j)),(((r->e * s->c) + (r->f * s->g)) + (r->g * s->k)),((((r->e * s->d) + (r->f * s->h)) + (r->g * s->l)) + r->h),(((r->i * s->a) + (r->j * s->e)) + (r->k * s->i)),(((r->i * s->b) + (r->j * s->f)) + (r->k * s->j)),(((r->i * s->c) + (r->j * s->g)) + (r->k * s->k)),((((r->i * s->d) + (r->j * s->h)) + (r->k * s->l)) + r->l));
HXLINE(  13)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Transformer_Fields__obj,multiplyTransform,return )

 ::trilateral3::matrix::Vertex Transformer_Fields__obj::transformVertex( ::trilateral3::matrix::Vertex v, ::trilateral3::matrix::MatrixDozen t){
            	HX_GC_STACKFRAME(&_hx_pos_24bb7bd5a6e03e96_16_transformVertex)
HXLINE(  17)		 ::trilateral3::matrix::Vertex v2 =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,((((t->a * v->x) + (t->b * v->y)) + (t->c * v->z)) + t->d),((((t->e * v->x) + (t->f * v->y)) + (t->g * v->z)) + t->h),((((t->i * v->x) + (t->j * v->y)) + (t->k * v->z)) + t->l),((Float)1.));
HXLINE(  21)		return v2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Transformer_Fields__obj,transformVertex,return )

 ::trilateral3::matrix::MatrixDozen Transformer_Fields__obj::unitTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_24bb7bd5a6e03e96_24_unitTransform)
HXLINE(  25)		 ::trilateral3::matrix::MatrixDozen m =  ::trilateral3::matrix::MatrixDozen_obj::__alloc( HX_CTX ,((Float)1.),((Float)0.),((Float)0.),((Float)0.),((Float)0.),((Float)1.),((Float)0.),((Float)0.),((Float)0.),((Float)0.),((Float)1.),((Float)0.));
HXLINE(  28)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Transformer_Fields__obj,unitTransform,return )


Transformer_Fields__obj::Transformer_Fields__obj()
{
}

bool Transformer_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"unitTransform") ) { outValue = unitTransform_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"transformVertex") ) { outValue = transformVertex_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"multiplyTransform") ) { outValue = multiplyTransform_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Transformer_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Transformer_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Transformer_Fields__obj::__mClass;

static ::String Transformer_Fields__obj_sStaticFields[] = {
	HX_("multiplyTransform",a8,c6,a5,63),
	HX_("transformVertex",f0,55,9d,dc),
	HX_("unitTransform",48,d2,98,05),
	::String(null())
};

void Transformer_Fields__obj::__register()
{
	Transformer_Fields__obj _hx_dummy;
	Transformer_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.geom._Transformer.Transformer_Fields_",77,13,f2,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Transformer_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Transformer_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Transformer_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Transformer_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Transformer_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace geom
} // end namespace _Transformer
