// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_
#define INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(dsHelper,flatInterleave,_FloatColorTriangles,FloatColorTriangles_Impl_)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace dsHelper{
namespace flatInterleave{
namespace _FloatColorTriangles{


class HXCPP_CLASS_ATTRIBUTES FloatColorTriangles_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FloatColorTriangles_Impl__obj OBJ_;
		FloatColorTriangles_Impl__obj();

	public:
		enum { _hx_ClassId = 0x76c05f06 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_"); }

		inline static ::hx::ObjectPtr< FloatColorTriangles_Impl__obj > __new() {
			::hx::ObjectPtr< FloatColorTriangles_Impl__obj > __this = new FloatColorTriangles_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< FloatColorTriangles_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			FloatColorTriangles_Impl__obj *__this = (FloatColorTriangles_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FloatColorTriangles_Impl__obj), false, "dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_"));
			*(void **)__this = FloatColorTriangles_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FloatColorTriangles_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FloatColorTriangles_Impl_",04,25,89,b5); }

		static  ::lime::utils::ArrayBufferView _new(int len);
		static ::Dynamic _new_dyn();

		static  ::lime::utils::ArrayBufferView create(int len);
		static ::Dynamic create_dyn();

		static Float get_ax( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_ax_dyn();

		static Float set_ax( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_ax_dyn();

		static Float get_ay( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_ay_dyn();

		static Float set_ay( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_ay_dyn();

		static Float get_az( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_az_dyn();

		static Float set_az( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_az_dyn();

		static Float get_redA( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_redA_dyn();

		static Float set_redA( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_redA_dyn();

		static Float get_greenA( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_greenA_dyn();

		static Float set_greenA( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_greenA_dyn();

		static Float get_blueA( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_blueA_dyn();

		static Float set_blueA( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_blueA_dyn();

		static Float get_alphaA( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_alphaA_dyn();

		static Float set_alphaA( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_alphaA_dyn();

		static Float get_bx( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_bx_dyn();

		static Float set_bx( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_bx_dyn();

		static Float get_by( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_by_dyn();

		static Float set_by( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_by_dyn();

		static Float get_bz( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_bz_dyn();

		static Float set_bz( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_bz_dyn();

		static Float get_redB( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_redB_dyn();

		static Float set_redB( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_redB_dyn();

		static Float get_greenB( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_greenB_dyn();

		static Float set_greenB( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_greenB_dyn();

		static Float get_blueB( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_blueB_dyn();

		static Float set_blueB( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_blueB_dyn();

		static Float get_alphaB( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_alphaB_dyn();

		static Float set_alphaB( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_alphaB_dyn();

		static Float get_cx( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_cx_dyn();

		static Float set_cx( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_cx_dyn();

		static Float get_cy( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_cy_dyn();

		static Float set_cy( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_cy_dyn();

		static Float get_cz( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_cz_dyn();

		static Float set_cz( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_cz_dyn();

		static Float get_redC( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_redC_dyn();

		static Float set_redC( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_redC_dyn();

		static Float get_greenC( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_greenC_dyn();

		static Float set_greenC( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_greenC_dyn();

		static Float get_blueC( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_blueC_dyn();

		static Float set_blueC( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_blueC_dyn();

		static Float get_alphaC( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_alphaC_dyn();

		static Float set_alphaC( ::lime::utils::ArrayBufferView this1,Float v);
		static ::Dynamic set_alphaC_dyn();

		static bool triangle( ::lime::utils::ArrayBufferView this1,Float ax_,Float ay_,Float az_,Float bx_,Float by_,Float bz_,Float cx_,Float cy_,Float cz_);
		static ::Dynamic triangle_dyn();

		static bool adjustWinding( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic adjustWinding_dyn();

		static Float get_x( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_x_dyn();

		static Float set_x( ::lime::utils::ArrayBufferView this1,Float x);
		static ::Dynamic set_x_dyn();

		static Float get_y( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_y_dyn();

		static Float set_y( ::lime::utils::ArrayBufferView this1,Float y);
		static ::Dynamic set_y_dyn();

		static Float get_z( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_z_dyn();

		static Float set_z( ::lime::utils::ArrayBufferView this1,Float z);
		static ::Dynamic set_z_dyn();

		static Float get_right( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_right_dyn();

		static Float get_bottom( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_bottom_dyn();

		static Float get_back( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_back_dyn();

		static void moveDelta( ::lime::utils::ArrayBufferView this1,Float dx,Float dy);
		static ::Dynamic moveDelta_dyn();

		static int sign(Float n);
		static ::Dynamic sign_dyn();

		static bool liteHit( ::lime::utils::ArrayBufferView this1,Float px,Float py);
		static ::Dynamic liteHit_dyn();

		static bool fullHit( ::lime::utils::ArrayBufferView this1,Float px,Float py);
		static ::Dynamic fullHit_dyn();

		static void rotate( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float theta);
		static ::Dynamic rotate_dyn();

		static void rotateTrig( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float cos,Float sin);
		static ::Dynamic rotateTrig_dyn();

		static void colorTriangles( ::lime::utils::ArrayBufferView this1,int color,int times);
		static ::Dynamic colorTriangles_dyn();

		static void cornerColors( ::lime::utils::ArrayBufferView this1,int colorA,int colorB,int colorC);
		static ::Dynamic cornerColors_dyn();

		static int set_rgb( ::lime::utils::ArrayBufferView this1,int col);
		static ::Dynamic set_rgb_dyn();

		static int set_rgbA( ::lime::utils::ArrayBufferView this1,int col);
		static ::Dynamic set_rgbA_dyn();

		static int get_rgbA( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_rgbA_dyn();

		static int set_rgbB( ::lime::utils::ArrayBufferView this1,int col);
		static ::Dynamic set_rgbB_dyn();

		static int get_rgbB( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_rgbB_dyn();

		static int set_rgbC( ::lime::utils::ArrayBufferView this1,int col);
		static ::Dynamic set_rgbC_dyn();

		static int get_rgbC( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_rgbC_dyn();

		static int set_argb( ::lime::utils::ArrayBufferView this1,int col);
		static ::Dynamic set_argb_dyn();

		static int set_argbA( ::lime::utils::ArrayBufferView this1,int col);
		static ::Dynamic set_argbA_dyn();

		static int get_argbA( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_argbA_dyn();

		static int set_argbB( ::lime::utils::ArrayBufferView this1,int col);
		static ::Dynamic set_argbB_dyn();

		static int get_argbB( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_argbB_dyn();

		static int set_argbC( ::lime::utils::ArrayBufferView this1,int col);
		static ::Dynamic set_argbC_dyn();

		static int get_argbC( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic get_argbC_dyn();

		static ::String prettyStringVert( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic prettyStringVert_dyn();

		static ::String prettyAllVert( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic prettyAllVert_dyn();

		static ::String hex( ::lime::utils::ArrayBufferView this1,int v);
		static ::Dynamic hex_dyn();

		static ::String hexA( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic hexA_dyn();

		static ::String hexB( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic hexB_dyn();

		static ::String hexC( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic hexC_dyn();

		static ::String hexAll( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic hexAll_dyn();

		static Float alphaChannel(int _hx_int);
		static ::Dynamic alphaChannel_dyn();

		static Float redChannel(int _hx_int);
		static ::Dynamic redChannel_dyn();

		static Float greenChannel(int _hx_int);
		static ::Dynamic greenChannel_dyn();

		static Float blueChannel(int _hx_int);
		static ::Dynamic blueChannel_dyn();

};

} // end namespace dsHelper
} // end namespace flatInterleave
} // end namespace _FloatColorTriangles

#endif /* INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_ */ 
