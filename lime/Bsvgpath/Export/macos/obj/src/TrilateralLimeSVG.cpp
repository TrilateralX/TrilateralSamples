// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_TrilateralLimeSVG
#include <TrilateralLimeSVG.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_justPath_IPathContext
#include <justPath/IPathContext.h>
#endif
#ifndef INCLUDED_justPath_SvgPath
#include <justPath/SvgPath.h>
#endif
#ifndef INCLUDED_justPath_transform_TranslationContext
#include <justPath/transform/TranslationContext.h>
#endif
#ifndef INCLUDED_kitGL_glLime_InterleaveAlterGL
#include <kitGL/glLime/InterleaveAlterGL.h>
#endif
#ifndef INCLUDED_kitGL_glLime_setup_IAppGL
#include <kitGL/glLime/setup/IAppGL.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Pen
#include <trilateral3/drawing/Pen.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Sketch
#include <trilateral3/drawing/Sketch.h>
#endif
#ifndef INCLUDED_trilateral3_nodule_PenNodule
#include <trilateral3/nodule/PenNodule.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5d1db044614df584_25_new,"TrilateralLimeSVG","new",0x9d8a4555,"TrilateralLimeSVG.new","TrilateralLimeSVG.hx",25,0x04267bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d1db044614df584_35_draw,"TrilateralLimeSVG","draw",0x34e00d6f,"TrilateralLimeSVG.draw","TrilateralLimeSVG.hx",35,0x04267bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d1db044614df584_48_cubicSVG,"TrilateralLimeSVG","cubicSVG",0x1fe18625,"TrilateralLimeSVG.cubicSVG","TrilateralLimeSVG.hx",48,0x04267bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d1db044614df584_43_cubicSVG,"TrilateralLimeSVG","cubicSVG",0x1fe18625,"TrilateralLimeSVG.cubicSVG","TrilateralLimeSVG.hx",43,0x04267bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d1db044614df584_59_quadSVG,"TrilateralLimeSVG","quadSVG",0x3b9e1752,"TrilateralLimeSVG.quadSVG","TrilateralLimeSVG.hx",59,0x04267bbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d1db044614df584_54_quadSVG,"TrilateralLimeSVG","quadSVG",0x3b9e1752,"TrilateralLimeSVG.quadSVG","TrilateralLimeSVG.hx",54,0x04267bbb)

void TrilateralLimeSVG_obj::__construct(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_5d1db044614df584_25_new)
HXLINE(  29)		this->penNodule =  ::trilateral3::nodule::PenNodule_obj::__alloc( HX_CTX ,null());
HXLINE(  27)		this->cubictest_d = HX_("M100,200 C100,100 250,100 250,200S400,300 400,200",b0,60,65,bc);
HXLINE(  26)		this->quadtest_d = HX_("M200,300 Q400,50 600,300 T1000,300",c7,a8,bf,30);
HXLINE(  31)		super::__construct(width,height);
HXLINE(  32)		::haxe::Log_obj::trace(HX_("TrilateralLimeSVG",e3,f6,a5,01),::hx::SourceInfo(HX_("TrilateralLimeSVG.hx",bb,7b,26,04),32,HX_("TrilateralLimeSVG",e3,f6,a5,01),HX_("new",60,d0,53,00)));
            	}

Dynamic TrilateralLimeSVG_obj::__CreateEmpty() { return new TrilateralLimeSVG_obj; }

void *TrilateralLimeSVG_obj::_hx_vtable = 0;

Dynamic TrilateralLimeSVG_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TrilateralLimeSVG_obj > _hx_result = new TrilateralLimeSVG_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TrilateralLimeSVG_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01c3d3) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2c01c3d3;
	} else {
		return inClassId==(int)0x5140ac23;
	}
}

void TrilateralLimeSVG_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_5d1db044614df584_35_draw)
HXLINE(  36)		this->interleaveDataGL =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("get_data",b3,11,1e,c2),this->penNodule->get_data_dyn())
            			->setFixed(1,HX_("get_size",4a,5c,0e,cc),this->penNodule->get_size_dyn()));
HXLINE(  37)		this->pen = this->penNodule->pen;
HXLINE(  38)		this->pen->currentColor = -16776961;
HXLINE(  39)		this->cubicSVG();
HXLINE(  40)		this->pen->currentColor = -16776961;
HXLINE(  41)		this->quadSVG();
            	}


void TrilateralLimeSVG_obj::cubicSVG(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(5)
            		int _hx_run(int colour,Float x,Float y,Float x_,Float y_){
            			HX_GC_STACKFRAME(&_hx_pos_5d1db044614df584_48_cubicSVG)
HXLINE(  48)			return ::Math_obj::round((( (Float)(colour) ) - (x * y)));
            		}
            		HX_END_LOCAL_FUNC5(return)

            	HX_GC_STACKFRAME(&_hx_pos_5d1db044614df584_43_cubicSVG)
HXLINE(  44)		 ::trilateral3::drawing::Sketch sketch =  ::trilateral3::drawing::Sketch_obj::__alloc( HX_CTX ,this->pen,4,3);
HXLINE(  45)		sketch->width = ( (Float)(20) );
HXLINE(  47)		sketch->colourFunction =  ::Dynamic(new _hx_Closure_0());
HXLINE(  50)		 ::justPath::transform::TranslationContext translateContext =  ::justPath::transform::TranslationContext_obj::__alloc( HX_CTX ,sketch,( (Float)(50) ),( (Float)(200) ));
HXLINE(  51)		 ::justPath::SvgPath p =  ::justPath::SvgPath_obj::__alloc( HX_CTX ,translateContext);
HXLINE(  52)		p->parse(this->cubictest_d);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrilateralLimeSVG_obj,cubicSVG,(void))

void TrilateralLimeSVG_obj::quadSVG(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(5)
            		Float _hx_run(Float width,Float x,Float y,Float x_,Float y_){
            			HX_GC_STACKFRAME(&_hx_pos_5d1db044614df584_59_quadSVG)
HXLINE(  59)			return (width + ((Float)0.016));
            		}
            		HX_END_LOCAL_FUNC5(return)

            	HX_GC_STACKFRAME(&_hx_pos_5d1db044614df584_54_quadSVG)
HXLINE(  55)		 ::trilateral3::drawing::Sketch sketch =  ::trilateral3::drawing::Sketch_obj::__alloc( HX_CTX ,this->pen,4,3);
HXLINE(  56)		sketch->width = ( (Float)(5) );
HXLINE(  58)		sketch->widthFunction =  ::Dynamic(new _hx_Closure_0());
HXLINE(  61)		 ::justPath::transform::TranslationContext translateContext =  ::justPath::transform::TranslationContext_obj::__alloc( HX_CTX ,sketch,( (Float)(-100) ),( (Float)(300) ));
HXLINE(  62)		 ::justPath::SvgPath p =  ::justPath::SvgPath_obj::__alloc( HX_CTX ,translateContext);
HXLINE(  63)		p->parse(this->quadtest_d);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrilateralLimeSVG_obj,quadSVG,(void))


::hx::ObjectPtr< TrilateralLimeSVG_obj > TrilateralLimeSVG_obj::__new(int width,int height) {
	::hx::ObjectPtr< TrilateralLimeSVG_obj > __this = new TrilateralLimeSVG_obj();
	__this->__construct(width,height);
	return __this;
}

::hx::ObjectPtr< TrilateralLimeSVG_obj > TrilateralLimeSVG_obj::__alloc(::hx::Ctx *_hx_ctx,int width,int height) {
	TrilateralLimeSVG_obj *__this = (TrilateralLimeSVG_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TrilateralLimeSVG_obj), true, "TrilateralLimeSVG"));
	*(void **)__this = TrilateralLimeSVG_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

TrilateralLimeSVG_obj::TrilateralLimeSVG_obj()
{
}

void TrilateralLimeSVG_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TrilateralLimeSVG);
	HX_MARK_MEMBER_NAME(quadtest_d,"quadtest_d");
	HX_MARK_MEMBER_NAME(cubictest_d,"cubictest_d");
	HX_MARK_MEMBER_NAME(pen,"pen");
	HX_MARK_MEMBER_NAME(penNodule,"penNodule");
	 ::kitGL::glLime::InterleaveAlterGL_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TrilateralLimeSVG_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(quadtest_d,"quadtest_d");
	HX_VISIT_MEMBER_NAME(cubictest_d,"cubictest_d");
	HX_VISIT_MEMBER_NAME(pen,"pen");
	HX_VISIT_MEMBER_NAME(penNodule,"penNodule");
	 ::kitGL::glLime::InterleaveAlterGL_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TrilateralLimeSVG_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { return ::hx::Val( pen ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quadSVG") ) { return ::hx::Val( quadSVG_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cubicSVG") ) { return ::hx::Val( cubicSVG_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"penNodule") ) { return ::hx::Val( penNodule ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quadtest_d") ) { return ::hx::Val( quadtest_d ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cubictest_d") ) { return ::hx::Val( cubictest_d ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TrilateralLimeSVG_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { pen=inValue.Cast<  ::trilateral3::drawing::Pen >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"penNodule") ) { penNodule=inValue.Cast<  ::trilateral3::nodule::PenNodule >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quadtest_d") ) { quadtest_d=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cubictest_d") ) { cubictest_d=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TrilateralLimeSVG_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("quadtest_d",fe,db,ed,08));
	outFields->push(HX_("cubictest_d",c1,84,2e,d8));
	outFields->push(HX_("pen",d9,54,55,00));
	outFields->push(HX_("penNodule",c4,02,81,14));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TrilateralLimeSVG_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(TrilateralLimeSVG_obj,quadtest_d),HX_("quadtest_d",fe,db,ed,08)},
	{::hx::fsString,(int)offsetof(TrilateralLimeSVG_obj,cubictest_d),HX_("cubictest_d",c1,84,2e,d8)},
	{::hx::fsObject /*  ::trilateral3::drawing::Pen */ ,(int)offsetof(TrilateralLimeSVG_obj,pen),HX_("pen",d9,54,55,00)},
	{::hx::fsObject /*  ::trilateral3::nodule::PenNodule */ ,(int)offsetof(TrilateralLimeSVG_obj,penNodule),HX_("penNodule",c4,02,81,14)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TrilateralLimeSVG_obj_sStaticStorageInfo = 0;
#endif

static ::String TrilateralLimeSVG_obj_sMemberFields[] = {
	HX_("quadtest_d",fe,db,ed,08),
	HX_("cubictest_d",c1,84,2e,d8),
	HX_("pen",d9,54,55,00),
	HX_("penNodule",c4,02,81,14),
	HX_("draw",04,2c,70,42),
	HX_("cubicSVG",3a,13,8d,05),
	HX_("quadSVG",dd,83,f1,3e),
	::String(null()) };

::hx::Class TrilateralLimeSVG_obj::__mClass;

void TrilateralLimeSVG_obj::__register()
{
	TrilateralLimeSVG_obj _hx_dummy;
	TrilateralLimeSVG_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TrilateralLimeSVG",e3,f6,a5,01);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TrilateralLimeSVG_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TrilateralLimeSVG_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TrilateralLimeSVG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TrilateralLimeSVG_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

