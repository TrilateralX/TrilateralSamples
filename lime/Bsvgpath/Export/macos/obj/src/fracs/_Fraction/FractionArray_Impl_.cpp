// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_fracs__Fraction_FractionArray_Impl_
#include <fracs/_Fraction/FractionArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_11644c6c3ae3bc99_14__new,"fracs._Fraction.FractionArray_Impl_","_new",0x543c910e,"fracs._Fraction.FractionArray_Impl_._new","fracs/Fraction.hx",14,0xf40fb512)
HX_LOCAL_STACK_FRAME(_hx_pos_11644c6c3ae3bc99_19_add,"fracs._Fraction.FractionArray_Impl_","add",0x757a4b14,"fracs._Fraction.FractionArray_Impl_.add","fracs/Fraction.hx",19,0xf40fb512)
HX_LOCAL_STACK_FRAME(_hx_pos_11644c6c3ae3bc99_23_toString,"fracs._Fraction.FractionArray_Impl_","toString",0x85b826d9,"fracs._Fraction.FractionArray_Impl_.toString","fracs/Fraction.hx",23,0xf40fb512)
namespace fracs{
namespace _Fraction{

void FractionArray_Impl__obj::__construct() { }

Dynamic FractionArray_Impl__obj::__CreateEmpty() { return new FractionArray_Impl__obj; }

void *FractionArray_Impl__obj::_hx_vtable = 0;

Dynamic FractionArray_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FractionArray_Impl__obj > _hx_result = new FractionArray_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FractionArray_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2553099b;
}

::Array< ::Dynamic> FractionArray_Impl__obj::_new(::Array< ::Dynamic> val){
            	HX_STACKFRAME(&_hx_pos_11644c6c3ae3bc99_14__new)
HXDLIN(  14)		::Array< ::Dynamic> this1;
HXLINE(  15)		if (::hx::IsNull( val )) {
HXLINE(  15)			this1 = ::Array_obj< ::Dynamic>::__new();
            		}
            		else {
HXLINE(  15)			this1 = val;
            		}
HXLINE(  14)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FractionArray_Impl__obj,_new,return )

void FractionArray_Impl__obj::add(::Array< ::Dynamic> this1, ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_11644c6c3ae3bc99_19_add)
HXDLIN(  19)		this1[this1->length] = val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FractionArray_Impl__obj,add,(void))

::String FractionArray_Impl__obj::toString(::Array< ::Dynamic> this1){
            	HX_STACKFRAME(&_hx_pos_11644c6c3ae3bc99_23_toString)
HXLINE(  24)		int l = this1->length;
HXLINE(  25)		::String str = HX_("",00,00,00,00);
HXLINE(  26)		{
HXLINE(  26)			int _g = 0;
HXDLIN(  26)			int _g1 = l;
HXDLIN(  26)			while((_g < _g1)){
HXLINE(  26)				_g = (_g + 1);
HXDLIN(  26)				int i = (_g - 1);
HXDLIN(  26)				 ::Dynamic tmp = this1->__get(i);
HXDLIN(  26)				::String str1;
HXDLIN(  26)				if (::hx::IsNull( tmp )) {
HXLINE(  26)					str1 = HX_("null",87,9e,0e,49);
            				}
            				else {
HXLINE(  26)					int n = ( (int)(tmp->__Field(HX_("numerator",89,82,9c,c2),::hx::paccDynamic)) );
HXDLIN(  26)					int d = ( (int)(tmp->__Field(HX_("denominator",a6,25,84,eb),::hx::paccDynamic)) );
HXDLIN(  26)					::String out;
HXDLIN(  26)					if ((n == 0)) {
HXLINE(  26)						out = HX_("0",30,00,00,00);
            					}
            					else {
HXLINE(  26)						if ((n == d)) {
HXLINE(  26)							out = HX_("1",31,00,00,00);
            						}
            						else {
HXLINE(  26)							if ((d == 1)) {
HXLINE(  26)								if (( (bool)(tmp->__Field(HX_("positive",b9,a6,fa,ca),::hx::paccDynamic)) )) {
HXLINE(  26)									out = (HX_("",00,00,00,00) + n);
            								}
            								else {
HXLINE(  26)									out = (HX_("-",2d,00,00,00) + n);
            								}
            							}
            							else {
HXLINE(  26)								if (( (bool)(tmp->__Field(HX_("positive",b9,a6,fa,ca),::hx::paccDynamic)) )) {
HXLINE(  26)									out = (((HX_("",00,00,00,00) + n) + HX_("/",2f,00,00,00)) + d);
            								}
            								else {
HXLINE(  26)									out = (((HX_("-",2d,00,00,00) + n) + HX_("/",2f,00,00,00)) + d);
            								}
            							}
            						}
            					}
HXDLIN(  26)					str1 = out;
            				}
HXDLIN(  26)				str = ((str + HX_("\n",0a,00,00,00)) + str1);
            			}
            		}
HXLINE(  27)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FractionArray_Impl__obj,toString,return )


FractionArray_Impl__obj::FractionArray_Impl__obj()
{
}

bool FractionArray_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FractionArray_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FractionArray_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FractionArray_Impl__obj::__mClass;

static ::String FractionArray_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("add",21,f2,49,00),
	HX_("toString",ac,d0,6e,38),
	::String(null())
};

void FractionArray_Impl__obj::__register()
{
	FractionArray_Impl__obj _hx_dummy;
	FractionArray_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("fracs._Fraction.FractionArray_Impl_",e1,83,a2,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FractionArray_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FractionArray_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FractionArray_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FractionArray_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FractionArray_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace fracs
} // end namespace _Fraction
