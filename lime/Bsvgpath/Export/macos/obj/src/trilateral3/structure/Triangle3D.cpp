// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_trilateral3_matrix_Vertex
#include <trilateral3/matrix/Vertex.h>
#endif
#ifndef INCLUDED_trilateral3_structure_Triangle3D
#include <trilateral3/structure/Triangle3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_32c872a15ec9685c_8_new,"trilateral3.structure.Triangle3D","new",0x2a45da2d,"trilateral3.structure.Triangle3D.new","trilateral3/structure/Triangle3D.hx",8,0x40097d61)
namespace trilateral3{
namespace structure{

void Triangle3D_obj::__construct( ::trilateral3::matrix::Vertex a, ::trilateral3::matrix::Vertex b, ::trilateral3::matrix::Vertex c){
            	HX_STACKFRAME(&_hx_pos_32c872a15ec9685c_8_new)
HXLINE(   9)		this->a = a;
HXLINE(  10)		this->b = b;
HXLINE(  11)		this->c = c;
            	}

Dynamic Triangle3D_obj::__CreateEmpty() { return new Triangle3D_obj; }

void *Triangle3D_obj::_hx_vtable = 0;

Dynamic Triangle3D_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Triangle3D_obj > _hx_result = new Triangle3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Triangle3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x16226649;
}


::hx::ObjectPtr< Triangle3D_obj > Triangle3D_obj::__new( ::trilateral3::matrix::Vertex a, ::trilateral3::matrix::Vertex b, ::trilateral3::matrix::Vertex c) {
	::hx::ObjectPtr< Triangle3D_obj > __this = new Triangle3D_obj();
	__this->__construct(a,b,c);
	return __this;
}

::hx::ObjectPtr< Triangle3D_obj > Triangle3D_obj::__alloc(::hx::Ctx *_hx_ctx, ::trilateral3::matrix::Vertex a, ::trilateral3::matrix::Vertex b, ::trilateral3::matrix::Vertex c) {
	Triangle3D_obj *__this = (Triangle3D_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Triangle3D_obj), true, "trilateral3.structure.Triangle3D"));
	*(void **)__this = Triangle3D_obj::_hx_vtable;
	__this->__construct(a,b,c);
	return __this;
}

Triangle3D_obj::Triangle3D_obj()
{
}

void Triangle3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Triangle3D);
	HX_MARK_MEMBER_NAME(a,"a");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_END_CLASS();
}

void Triangle3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(a,"a");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(c,"c");
}

::hx::Val Triangle3D_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return ::hx::Val( a ); }
		if (HX_FIELD_EQ(inName,"b") ) { return ::hx::Val( b ); }
		if (HX_FIELD_EQ(inName,"c") ) { return ::hx::Val( c ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Triangle3D_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast<  ::trilateral3::matrix::Vertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast<  ::trilateral3::matrix::Vertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast<  ::trilateral3::matrix::Vertex >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Triangle3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("a",61,00,00,00));
	outFields->push(HX_("b",62,00,00,00));
	outFields->push(HX_("c",63,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Triangle3D_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::trilateral3::matrix::Vertex */ ,(int)offsetof(Triangle3D_obj,a),HX_("a",61,00,00,00)},
	{::hx::fsObject /*  ::trilateral3::matrix::Vertex */ ,(int)offsetof(Triangle3D_obj,b),HX_("b",62,00,00,00)},
	{::hx::fsObject /*  ::trilateral3::matrix::Vertex */ ,(int)offsetof(Triangle3D_obj,c),HX_("c",63,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Triangle3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Triangle3D_obj_sMemberFields[] = {
	HX_("a",61,00,00,00),
	HX_("b",62,00,00,00),
	HX_("c",63,00,00,00),
	::String(null()) };

::hx::Class Triangle3D_obj::__mClass;

void Triangle3D_obj::__register()
{
	Triangle3D_obj _hx_dummy;
	Triangle3D_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.structure.Triangle3D",bb,3f,10,59);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Triangle3D_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Triangle3D_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Triangle3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Triangle3D_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace structure
