// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_fracs_Angles
#define INCLUDED_fracs_Angles

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(fracs,Angles)
HX_DECLARE_CLASS1(fracs,DifferencePreference)

namespace fracs{


class HXCPP_CLASS_ATTRIBUTES Angles_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Angles_obj OBJ_;
		Angles_obj();

	public:
		enum { _hx_ClassId = 0x78557e1d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="fracs.Angles")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"fracs.Angles"); }

		inline static ::hx::ObjectPtr< Angles_obj > __new() {
			::hx::ObjectPtr< Angles_obj > __this = new Angles_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Angles_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Angles_obj *__this = (Angles_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Angles_obj), false, "fracs.Angles"));
			*(void **)__this = Angles_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Angles_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Angles",60,89,ad,97); }

		static Float pi2pi(Float angle);
		static ::Dynamic pi2pi_dyn();

		static Float zeroto2pi(Float angle);
		static ::Dynamic zeroto2pi_dyn();

		static Float zerotoMinus2pi(Float angle);
		static ::Dynamic zerotoMinus2pi_dyn();

		static Float differencePrefer(Float a,Float b, ::fracs::DifferencePreference prefer);
		static ::Dynamic differencePrefer_dyn();

		static Float difference(Float a,Float b);
		static ::Dynamic difference_dyn();

		static Float differenceClockWise(Float a,Float b);
		static ::Dynamic differenceClockWise_dyn();

		static Float differenceAntiClockwise(Float a,Float b);
		static ::Dynamic differenceAntiClockwise_dyn();

		static Float differenceSmall(Float a,Float b);
		static ::Dynamic differenceSmall_dyn();

		static Float differenceLarge(Float a,Float b);
		static ::Dynamic differenceLarge_dyn();

		static  ::Dynamic differenceSmallLarge(Float a,Float b);
		static ::Dynamic differenceSmallLarge_dyn();

};

} // end namespace fracs

#endif /* INCLUDED_fracs_Angles */ 
