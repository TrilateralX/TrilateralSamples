// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_kitGL_glLime_BufferGL
#define INCLUDED_kitGL_glLime_BufferGL

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(kitGL,glLime,BufferGL)
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace kitGL{
namespace glLime{


class HXCPP_CLASS_ATTRIBUTES BufferGL_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BufferGL_obj OBJ_;
		BufferGL_obj();

	public:
		enum { _hx_ClassId = 0x068f71da };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kitGL.glLime.BufferGL")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kitGL.glLime.BufferGL"); }
		static ::hx::ObjectPtr< BufferGL_obj > __new();
		static ::hx::ObjectPtr< BufferGL_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BufferGL_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BufferGL",45,f7,af,86); }

		 ::Dynamic bufferSetup_;
		Dynamic bufferSetup__dyn() { return bufferSetup_;}
		 ::Dynamic interleaveXY_RGB_;
		Dynamic interleaveXY_RGB__dyn() { return interleaveXY_RGB_;}
		 ::Dynamic interleaveXYZ_RGBA_;
		Dynamic interleaveXYZ_RGBA__dyn() { return interleaveXYZ_RGBA_;}
		 ::Dynamic colorsXYZ_RGBA_;
		Dynamic colorsXYZ_RGBA__dyn() { return colorsXYZ_RGBA_;}
		 ::Dynamic colorsXY_RGBA_;
		Dynamic colorsXY_RGBA__dyn() { return colorsXY_RGBA_;}
		 ::Dynamic colorsXYZ_RGB_;
		Dynamic colorsXYZ_RGB__dyn() { return colorsXYZ_RGB_;}
		 ::Dynamic colorsXY_RGB_;
		Dynamic colorsXY_RGB__dyn() { return colorsXY_RGB_;}
		 ::Dynamic posColors_;
		Dynamic posColors__dyn() { return posColors_;}
};

} // end namespace kitGL
} // end namespace glLime

#endif /* INCLUDED_kitGL_glLime_BufferGL */ 
