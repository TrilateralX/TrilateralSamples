// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_shape_Shaper
#define INCLUDED_trilateral3_shape_Shaper

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(fracs,DifferencePreference)
HX_DECLARE_CLASS2(trilateral3,shape,Shaper)
HX_DECLARE_CLASS2(trilateral3,structure,Quad2D)
HX_DECLARE_CLASS2(trilateral3,structure,XY)

namespace trilateral3{
namespace shape{


class HXCPP_CLASS_ATTRIBUTES Shaper_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Shaper_obj OBJ_;
		Shaper_obj();

	public:
		enum { _hx_ClassId = 0x6395270b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="trilateral3.shape.Shaper")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"trilateral3.shape.Shaper"); }
		static ::hx::ObjectPtr< Shaper_obj > __new();
		static ::hx::ObjectPtr< Shaper_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Shaper_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Shaper",51,4e,be,51); }

		 ::Dynamic add2DTriangle_;
		Dynamic add2DTriangle__dyn() { return add2DTriangle_;}
		 ::Dynamic add2DQuad_;
		Dynamic add2DQuad__dyn() { return add2DQuad_;}
		 ::Dynamic quad_;
		Dynamic quad__dyn() { return quad_;}
		 ::Dynamic lineAB_;
		Dynamic lineAB__dyn() { return lineAB_;}
		 ::Dynamic lineXY_;
		Dynamic lineXY__dyn() { return lineXY_;}
		 ::Dynamic rectangle_;
		Dynamic rectangle__dyn() { return rectangle_;}
		 ::Dynamic squareOutline_;
		Dynamic squareOutline__dyn() { return squareOutline_;}
		 ::Dynamic square_;
		Dynamic square__dyn() { return square_;}
		 ::Dynamic diamond_;
		Dynamic diamond__dyn() { return diamond_;}
		 ::Dynamic diamondOutline_;
		Dynamic diamondOutline__dyn() { return diamondOutline_;}
		 ::Dynamic overlapStar_;
		Dynamic overlapStar__dyn() { return overlapStar_;}
		 ::Dynamic circle_;
		Dynamic circle__dyn() { return circle_;}
		 ::Dynamic circleRadial_;
		Dynamic circleRadial__dyn() { return circleRadial_;}
		 ::Dynamic circleRadialOnSide_;
		Dynamic circleRadialOnSide__dyn() { return circleRadialOnSide_;}
		 ::Dynamic ellipse_;
		Dynamic ellipse__dyn() { return ellipse_;}
		 ::Dynamic pie_;
		Dynamic pie__dyn() { return pie_;}
		 ::Dynamic pieX_;
		Dynamic pieX__dyn() { return pieX_;}
		 ::Dynamic pieDifX_;
		Dynamic pieDifX__dyn() { return pieDifX_;}
		 ::Dynamic ellpisePie_;
		Dynamic ellpisePie__dyn() { return ellpisePie_;}
		 ::Dynamic pieDif_;
		Dynamic pieDif__dyn() { return pieDif_;}
		 ::Dynamic arc_;
		Dynamic arc__dyn() { return arc_;}
		 ::Dynamic circleOnSide_;
		Dynamic circleOnSide__dyn() { return circleOnSide_;}
		 ::Dynamic ellipseOnSide_;
		Dynamic ellipseOnSide__dyn() { return ellipseOnSide_;}
		 ::Dynamic shape_;
		Dynamic shape__dyn() { return shape_;}
		 ::Dynamic shapeRadial_;
		Dynamic shapeRadial__dyn() { return shapeRadial_;}
		 ::Dynamic roundedRectangle_;
		Dynamic roundedRectangle__dyn() { return roundedRectangle_;}
		 ::Dynamic roundedRectangleOutline_;
		Dynamic roundedRectangleOutline__dyn() { return roundedRectangleOutline_;}
		 ::Dynamic spiralLines_;
		Dynamic spiralLines__dyn() { return spiralLines_;}
};

} // end namespace trilateral3
} // end namespace shape

#endif /* INCLUDED_trilateral3_shape_Shaper */ 
