// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TrilateralLimeFill
#include <TrilateralLimeFill.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_justPath_IPathContext
#include <justPath/IPathContext.h>
#endif
#ifndef INCLUDED_justPath_SvgPath
#include <justPath/SvgPath.h>
#endif
#ifndef INCLUDED_justPath_transform_ScaleTranslateContext
#include <justPath/transform/ScaleTranslateContext.h>
#endif
#ifndef INCLUDED_kitGL_glLime_InterleaveAlterGL
#include <kitGL/glLime/InterleaveAlterGL.h>
#endif
#ifndef INCLUDED_kitGL_glLime_setup_IAppGL
#include <kitGL/glLime/setup/IAppGL.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Pen
#include <trilateral3/drawing/Pen.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Sketch
#include <trilateral3/drawing/Sketch.h>
#endif
#ifndef INCLUDED_trilateral3_drawing__Fill_Fill_Fields_
#include <trilateral3/drawing/_Fill/Fill_Fields_.h>
#endif
#ifndef INCLUDED_trilateral3_nodule_PenNodule
#include <trilateral3/nodule/PenNodule.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_057d91c23164b96f_28_new,"TrilateralLimeFill","new",0xbdbfd816,"TrilateralLimeFill.new","TrilateralLimeFill.hx",28,0x90593c1a)
HX_LOCAL_STACK_FRAME(_hx_pos_057d91c23164b96f_37_draw,"TrilateralLimeFill","draw",0x438ae38e,"TrilateralLimeFill.draw","TrilateralLimeFill.hx",37,0x90593c1a)
HX_LOCAL_STACK_FRAME(_hx_pos_057d91c23164b96f_61_renderDraw,"TrilateralLimeFill","renderDraw",0xf28a2184,"TrilateralLimeFill.renderDraw","TrilateralLimeFill.hx",61,0x90593c1a)

void TrilateralLimeFill_obj::__construct(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_057d91c23164b96f_28_new)
HXLINE(  31)		this->penNodule =  ::trilateral3::nodule::PenNodule_obj::__alloc( HX_CTX ,null());
HXLINE(  29)		this->bird_d = HX_("M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331zM445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111C434.693,207.929,439.613,203.01,445.731,203.01z",77,4c,e1,6a);
HXLINE(  33)		super::__construct(width,height);
HXLINE(  34)		::haxe::Log_obj::trace(HX_("TrilateralLimeFill",24,d5,08,67),::hx::SourceInfo(HX_("TrilateralLimeFill.hx",1a,3c,59,90),34,HX_("TrilateralLimeFill",24,d5,08,67),HX_("new",60,d0,53,00)));
            	}

Dynamic TrilateralLimeFill_obj::__CreateEmpty() { return new TrilateralLimeFill_obj; }

void *TrilateralLimeFill_obj::_hx_vtable = 0;

Dynamic TrilateralLimeFill_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TrilateralLimeFill_obj > _hx_result = new TrilateralLimeFill_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TrilateralLimeFill_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25c0c248) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25c0c248;
	} else {
		return inClassId==(int)0x2c01c3d3;
	}
}

void TrilateralLimeFill_obj::draw(){
            	HX_GC_STACKFRAME(&_hx_pos_057d91c23164b96f_37_draw)
HXLINE(  38)		this->interleaveDataGL =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("get_data",b3,11,1e,c2),this->penNodule->get_data_dyn())
            			->setFixed(1,HX_("get_size",4a,5c,0e,cc),this->penNodule->get_size_dyn()));
HXLINE(  39)		this->pen = this->penNodule->pen;
HXLINE(  40)		this->pen->currentColor = -2774968;
HXLINE(  41)		 ::trilateral3::drawing::Sketch sketch =  ::trilateral3::drawing::Sketch_obj::__alloc( HX_CTX ,this->pen,4,3);
HXLINE(  42)		sketch->width = ( (Float)(2) );
HXLINE(  43)		 ::justPath::transform::ScaleTranslateContext scaleTranslateContext =  ::justPath::transform::ScaleTranslateContext_obj::__alloc( HX_CTX ,sketch,( (Float)(0) ),( (Float)(0) ),((Float)1.5),((Float)1.5));
HXLINE(  44)		 ::justPath::SvgPath p =  ::justPath::SvgPath_obj::__alloc( HX_CTX ,scaleTranslateContext);
HXLINE(  45)		p->parse(this->bird_d);
HXLINE(  51)		Float start = ( (Float)(this->pen->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) );
HXLINE(  52)		::trilateral3::drawing::_Fill::Fill_Fields__obj::triangulate(this->pen,sketch,0);
HXLINE(  54)		Float end = ( (Float)(this->pen->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) );
HXLINE(  55)		{
HXLINE(  55)			 ::trilateral3::drawing::Pen _this = this->pen;
HXDLIN(  55)			_this->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(start);
HXDLIN(  55)			_this->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(start);
            		}
HXLINE(  56)		int numberTriangles = ::Std_obj::_hx_int((end - start));
HXLINE(  57)		::haxe::Log_obj::trace(numberTriangles,::hx::SourceInfo(HX_("TrilateralLimeFill.hx",1a,3c,59,90),57,HX_("TrilateralLimeFill",24,d5,08,67),HX_("draw",04,2c,70,42)));
HXLINE(  58)		{
HXLINE(  58)			 ::trilateral3::drawing::Pen _this1 = this->pen;
HXDLIN(  58)			int color = -2774968;
HXDLIN(  58)			if ((color == -1)) {
HXLINE(  58)				color = _this1->currentColor;
            			}
HXDLIN(  58)			_this1->colorType->__Field(HX_("colorTriangles",c8,da,ed,e6),::hx::paccDynamic)(color,numberTriangles);
            		}
            	}


void TrilateralLimeFill_obj::renderDraw(){
            	HX_STACKFRAME(&_hx_pos_057d91c23164b96f_61_renderDraw)
            	}



::hx::ObjectPtr< TrilateralLimeFill_obj > TrilateralLimeFill_obj::__new(int width,int height) {
	::hx::ObjectPtr< TrilateralLimeFill_obj > __this = new TrilateralLimeFill_obj();
	__this->__construct(width,height);
	return __this;
}

::hx::ObjectPtr< TrilateralLimeFill_obj > TrilateralLimeFill_obj::__alloc(::hx::Ctx *_hx_ctx,int width,int height) {
	TrilateralLimeFill_obj *__this = (TrilateralLimeFill_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TrilateralLimeFill_obj), true, "TrilateralLimeFill"));
	*(void **)__this = TrilateralLimeFill_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

TrilateralLimeFill_obj::TrilateralLimeFill_obj()
{
}

void TrilateralLimeFill_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TrilateralLimeFill);
	HX_MARK_MEMBER_NAME(bird_d,"bird_d");
	HX_MARK_MEMBER_NAME(pen,"pen");
	HX_MARK_MEMBER_NAME(penNodule,"penNodule");
	 ::kitGL::glLime::InterleaveAlterGL_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TrilateralLimeFill_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bird_d,"bird_d");
	HX_VISIT_MEMBER_NAME(pen,"pen");
	HX_VISIT_MEMBER_NAME(penNodule,"penNodule");
	 ::kitGL::glLime::InterleaveAlterGL_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TrilateralLimeFill_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { return ::hx::Val( pen ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bird_d") ) { return ::hx::Val( bird_d ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"penNodule") ) { return ::hx::Val( penNodule ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderDraw") ) { return ::hx::Val( renderDraw_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TrilateralLimeFill_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { pen=inValue.Cast<  ::trilateral3::drawing::Pen >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bird_d") ) { bird_d=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"penNodule") ) { penNodule=inValue.Cast<  ::trilateral3::nodule::PenNodule >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TrilateralLimeFill_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bird_d",9e,cc,b2,ef));
	outFields->push(HX_("pen",d9,54,55,00));
	outFields->push(HX_("penNodule",c4,02,81,14));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TrilateralLimeFill_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(TrilateralLimeFill_obj,bird_d),HX_("bird_d",9e,cc,b2,ef)},
	{::hx::fsObject /*  ::trilateral3::drawing::Pen */ ,(int)offsetof(TrilateralLimeFill_obj,pen),HX_("pen",d9,54,55,00)},
	{::hx::fsObject /*  ::trilateral3::nodule::PenNodule */ ,(int)offsetof(TrilateralLimeFill_obj,penNodule),HX_("penNodule",c4,02,81,14)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TrilateralLimeFill_obj_sStaticStorageInfo = 0;
#endif

static ::String TrilateralLimeFill_obj_sMemberFields[] = {
	HX_("bird_d",9e,cc,b2,ef),
	HX_("pen",d9,54,55,00),
	HX_("penNodule",c4,02,81,14),
	HX_("draw",04,2c,70,42),
	HX_("renderDraw",7a,26,7a,df),
	::String(null()) };

::hx::Class TrilateralLimeFill_obj::__mClass;

void TrilateralLimeFill_obj::__register()
{
	TrilateralLimeFill_obj _hx_dummy;
	TrilateralLimeFill_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TrilateralLimeFill",24,d5,08,67);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TrilateralLimeFill_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TrilateralLimeFill_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TrilateralLimeFill_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TrilateralLimeFill_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

