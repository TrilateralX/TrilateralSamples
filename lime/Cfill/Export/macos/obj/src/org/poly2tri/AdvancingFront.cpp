// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_org_poly2tri_AdvancingFront
#include <org/poly2tri/AdvancingFront.h>
#endif
#ifndef INCLUDED_org_poly2tri_Node
#include <org/poly2tri/Node.h>
#endif
#ifndef INCLUDED_org_poly2tri_Point
#include <org/poly2tri/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b3d1e068b2f66f8b_10_new,"org.poly2tri.AdvancingFront","new",0x914f54bb,"org.poly2tri.AdvancingFront.new","org/poly2tri/AdvancingFront.hx",10,0x9ce58735)
HX_LOCAL_STACK_FRAME(_hx_pos_b3d1e068b2f66f8b_16_locateNode,"org.poly2tri.AdvancingFront","locateNode",0xdf286fb9,"org.poly2tri.AdvancingFront.locateNode","org/poly2tri/AdvancingFront.hx",16,0x9ce58735)
HX_LOCAL_STACK_FRAME(_hx_pos_b3d1e068b2f66f8b_46_locatePoint,"org.poly2tri.AdvancingFront","locatePoint",0x8b0a4eb9,"org.poly2tri.AdvancingFront.locatePoint","org/poly2tri/AdvancingFront.hx",46,0x9ce58735)
namespace org{
namespace poly2tri{

void AdvancingFront_obj::__construct( ::org::poly2tri::Node head, ::org::poly2tri::Node tail){
            	HX_STACKFRAME(&_hx_pos_b3d1e068b2f66f8b_10_new)
HXLINE(  11)		this->search_node = (this->head = head);
HXLINE(  12)		this->tail = tail;
            	}

Dynamic AdvancingFront_obj::__CreateEmpty() { return new AdvancingFront_obj; }

void *AdvancingFront_obj::_hx_vtable = 0;

Dynamic AdvancingFront_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AdvancingFront_obj > _hx_result = new AdvancingFront_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AdvancingFront_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ed7886f;
}

 ::org::poly2tri::Node AdvancingFront_obj::locateNode(Float x){
            	HX_STACKFRAME(&_hx_pos_b3d1e068b2f66f8b_16_locateNode)
HXLINE(  17)		 ::org::poly2tri::Node node = this->search_node;
HXLINE(  19)		if ((x < node->value)) {
HXLINE(  21)			while(true){
HXLINE(  21)				node = node->prev;
HXDLIN(  21)				if (!(::hx::IsNotNull( node ))) {
HXLINE(  21)					goto _hx_goto_1;
            				}
HXLINE(  23)				if ((x >= node->value)) {
HXLINE(  25)					this->search_node = node;
HXLINE(  26)					return node;
            				}
            			}
            			_hx_goto_1:;
            		}
            		else {
HXLINE(  32)			while(true){
HXLINE(  32)				node = node->next;
HXDLIN(  32)				if (!(::hx::IsNotNull( node ))) {
HXLINE(  32)					goto _hx_goto_2;
            				}
HXLINE(  34)				if ((x < node->value)) {
HXLINE(  36)					this->search_node = node->prev;
HXLINE(  37)					return node->prev;
            				}
            			}
            			_hx_goto_2:;
            		}
HXLINE(  42)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancingFront_obj,locateNode,return )

 ::org::poly2tri::Node AdvancingFront_obj::locatePoint( ::org::poly2tri::Point point){
            	HX_STACKFRAME(&_hx_pos_b3d1e068b2f66f8b_46_locatePoint)
HXLINE(  47)		Float px = point->x;
HXLINE(  49)		 ::org::poly2tri::Node node = this->search_node;
HXLINE(  50)		Float nx = node->point->x;
HXLINE(  52)		if ((px == nx)) {
HXLINE(  54)			if (!(point->equals(node->point))) {
HXLINE(  57)				if (point->equals(node->prev->point)) {
HXLINE(  59)					node = node->prev;
            				}
            				else {
HXLINE(  61)					if (point->equals(node->next->point)) {
HXLINE(  63)						node = node->next;
            					}
            					else {
HXLINE(  67)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid AdvancingFront.locatePoint call!",86,45,43,ba)));
            					}
            				}
            			}
            		}
            		else {
HXLINE(  71)			if ((px < nx)) {
HXLINE(  73)				while(true){
HXLINE(  73)					node = node->prev;
HXDLIN(  73)					if (!(::hx::IsNotNull( node ))) {
HXLINE(  73)						goto _hx_goto_4;
            					}
HXLINE(  74)					if (point->equals(node->point)) {
HXLINE(  74)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
            			else {
HXLINE(  78)				while(true){
HXLINE(  78)					node = node->next;
HXDLIN(  78)					if (!(::hx::IsNotNull( node ))) {
HXLINE(  78)						goto _hx_goto_5;
            					}
HXLINE(  79)					if (point->equals(node->point)) {
HXLINE(  79)						goto _hx_goto_5;
            					}
            				}
            				_hx_goto_5:;
            			}
            		}
HXLINE(  82)		if (::hx::IsNotNull( node )) {
HXLINE(  82)			this->search_node = node;
            		}
HXLINE(  83)		return node;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancingFront_obj,locatePoint,return )


::hx::ObjectPtr< AdvancingFront_obj > AdvancingFront_obj::__new( ::org::poly2tri::Node head, ::org::poly2tri::Node tail) {
	::hx::ObjectPtr< AdvancingFront_obj > __this = new AdvancingFront_obj();
	__this->__construct(head,tail);
	return __this;
}

::hx::ObjectPtr< AdvancingFront_obj > AdvancingFront_obj::__alloc(::hx::Ctx *_hx_ctx, ::org::poly2tri::Node head, ::org::poly2tri::Node tail) {
	AdvancingFront_obj *__this = (AdvancingFront_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AdvancingFront_obj), true, "org.poly2tri.AdvancingFront"));
	*(void **)__this = AdvancingFront_obj::_hx_vtable;
	__this->__construct(head,tail);
	return __this;
}

AdvancingFront_obj::AdvancingFront_obj()
{
}

void AdvancingFront_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AdvancingFront);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(tail,"tail");
	HX_MARK_MEMBER_NAME(search_node,"search_node");
	HX_MARK_END_CLASS();
}

void AdvancingFront_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(tail,"tail");
	HX_VISIT_MEMBER_NAME(search_node,"search_node");
}

::hx::Val AdvancingFront_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return ::hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"tail") ) { return ::hx::Val( tail ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"locateNode") ) { return ::hx::Val( locateNode_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"search_node") ) { return ::hx::Val( search_node ); }
		if (HX_FIELD_EQ(inName,"locatePoint") ) { return ::hx::Val( locatePoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AdvancingFront_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::org::poly2tri::Node >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tail") ) { tail=inValue.Cast<  ::org::poly2tri::Node >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"search_node") ) { search_node=inValue.Cast<  ::org::poly2tri::Node >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AdvancingFront_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("tail",90,b6,f6,4c));
	outFields->push(HX_("search_node",79,ad,40,cd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AdvancingFront_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::org::poly2tri::Node */ ,(int)offsetof(AdvancingFront_obj,head),HX_("head",20,29,0b,45)},
	{::hx::fsObject /*  ::org::poly2tri::Node */ ,(int)offsetof(AdvancingFront_obj,tail),HX_("tail",90,b6,f6,4c)},
	{::hx::fsObject /*  ::org::poly2tri::Node */ ,(int)offsetof(AdvancingFront_obj,search_node),HX_("search_node",79,ad,40,cd)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AdvancingFront_obj_sStaticStorageInfo = 0;
#endif

static ::String AdvancingFront_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("tail",90,b6,f6,4c),
	HX_("search_node",79,ad,40,cd),
	HX_("locateNode",b4,e2,fc,32),
	HX_("locatePoint",5e,77,1a,91),
	::String(null()) };

::hx::Class AdvancingFront_obj::__mClass;

void AdvancingFront_obj::__register()
{
	AdvancingFront_obj _hx_dummy;
	AdvancingFront_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("org.poly2tri.AdvancingFront",49,db,c9,10);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AdvancingFront_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AdvancingFront_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AdvancingFront_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AdvancingFront_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace poly2tri
