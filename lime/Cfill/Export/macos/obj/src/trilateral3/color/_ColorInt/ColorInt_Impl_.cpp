// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_trilateral3_color__ColorInt_ColorInt_Impl_
#include <trilateral3/color/_ColorInt/ColorInt_Impl_.h>
#endif
#ifndef INCLUDED_trilateral3_structure_ARGB
#include <trilateral3/structure/ARGB.h>
#endif
#ifndef INCLUDED_trilateral3_structure_CYMKA
#include <trilateral3/structure/CYMKA.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_7__new,"trilateral3.color._ColorInt.ColorInt_Impl_","_new",0x857876ae,"trilateral3.color._ColorInt.ColorInt_Impl_._new","trilateral3/color/ColorInt.hx",7,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_14_fromARGB,"trilateral3.color._ColorInt.ColorInt_Impl_","fromARGB",0xb9208383,"trilateral3.color._ColorInt.ColorInt_Impl_.fromARGB","trilateral3/color/ColorInt.hx",14,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_19_toARGB,"trilateral3.color._ColorInt.ColorInt_Impl_","toARGB",0x0e83a2d4,"trilateral3.color._ColorInt.ColorInt_Impl_.toARGB","trilateral3/color/ColorInt.hx",19,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_24_fromCYMKA,"trilateral3.color._ColorInt.ColorInt_Impl_","fromCYMKA",0x6ec4cc16,"trilateral3.color._ColorInt.ColorInt_Impl_.fromCYMKA","trilateral3/color/ColorInt.hx",24,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_28_toCYMK,"trilateral3.color._ColorInt.ColorInt_Impl_","toCYMK",0x0fdb651c,"trilateral3.color._ColorInt.ColorInt_Impl_.toCYMK","trilateral3/color/ColorInt.hx",28,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_38_get_cyan,"trilateral3.color._ColorInt.ColorInt_Impl_","get_cyan",0xdc7f8c79,"trilateral3.color._ColorInt.ColorInt_Impl_.get_cyan","trilateral3/color/ColorInt.hx",38,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_41_set_cyan,"trilateral3.color._ColorInt.ColorInt_Impl_","set_cyan",0x8adce5ed,"trilateral3.color._ColorInt.ColorInt_Impl_.set_cyan","trilateral3/color/ColorInt.hx",41,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_51_get_yellow,"trilateral3.color._ColorInt.ColorInt_Impl_","get_yellow",0xf3f0e84a,"trilateral3.color._ColorInt.ColorInt_Impl_.get_yellow","trilateral3/color/ColorInt.hx",51,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_54_set_yellow,"trilateral3.color._ColorInt.ColorInt_Impl_","set_yellow",0xf76e86be,"trilateral3.color._ColorInt.ColorInt_Impl_.set_yellow","trilateral3/color/ColorInt.hx",54,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_64_get_magenta,"trilateral3.color._ColorInt.ColorInt_Impl_","get_magenta",0x0cc92c93,"trilateral3.color._ColorInt.ColorInt_Impl_.get_magenta","trilateral3/color/ColorInt.hx",64,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_67_set_magenta,"trilateral3.color._ColorInt.ColorInt_Impl_","set_magenta",0x1736339f,"trilateral3.color._ColorInt.ColorInt_Impl_.set_magenta","trilateral3/color/ColorInt.hx",67,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_76_get_black,"trilateral3.color._ColorInt.ColorInt_Impl_","get_black",0x771cf9a9,"trilateral3.color._ColorInt.ColorInt_Impl_.get_black","trilateral3/color/ColorInt.hx",76,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_78_set_black,"trilateral3.color._ColorInt.ColorInt_Impl_","set_black",0x5a6de5b5,"trilateral3.color._ColorInt.ColorInt_Impl_.set_black","trilateral3/color/ColorInt.hx",78,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_89_get_alpha,"trilateral3.color._ColorInt.ColorInt_Impl_","get_alpha",0xe3c1cb48,"trilateral3.color._ColorInt.ColorInt_Impl_.get_alpha","trilateral3/color/ColorInt.hx",89,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_92_set_alpha,"trilateral3.color._ColorInt.ColorInt_Impl_","set_alpha",0xc712b754,"trilateral3.color._ColorInt.ColorInt_Impl_.set_alpha","trilateral3/color/ColorInt.hx",92,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_99_get_red,"trilateral3.color._ColorInt.ColorInt_Impl_","get_red",0xeeaa4ebb,"trilateral3.color._ColorInt.ColorInt_Impl_.get_red","trilateral3/color/ColorInt.hx",99,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_102_set_red,"trilateral3.color._ColorInt.ColorInt_Impl_","set_red",0xe1abdfc7,"trilateral3.color._ColorInt.ColorInt_Impl_.set_red","trilateral3/color/ColorInt.hx",102,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_109_get_green,"trilateral3.color._ColorInt.ColorInt_Impl_","get_green",0x5c1832ad,"trilateral3.color._ColorInt.ColorInt_Impl_.get_green","trilateral3/color/ColorInt.hx",109,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_112_set_green,"trilateral3.color._ColorInt.ColorInt_Impl_","set_green",0x3f691eb9,"trilateral3.color._ColorInt.ColorInt_Impl_.set_green","trilateral3/color/ColorInt.hx",112,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_119_get_blue,"trilateral3.color._ColorInt.ColorInt_Impl_","get_blue",0xdbcc89f0,"trilateral3.color._ColorInt.ColorInt_Impl_.get_blue","trilateral3/color/ColorInt.hx",119,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_122_set_blue,"trilateral3.color._ColorInt.ColorInt_Impl_","set_blue",0x8a29e364,"trilateral3.color._ColorInt.ColorInt_Impl_.set_blue","trilateral3/color/ColorInt.hx",122,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_129_aiCYMKA,"trilateral3.color._ColorInt.ColorInt_Impl_","aiCYMKA",0x53e11918,"trilateral3.color._ColorInt.ColorInt_Impl_.aiCYMKA","trilateral3/color/ColorInt.hx",129,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_137_aiARGB,"trilateral3.color._ColorInt.ColorInt_Impl_","aiARGB",0x01544cc1,"trilateral3.color._ColorInt.ColorInt_Impl_.aiARGB","trilateral3/color/ColorInt.hx",137,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_144_aiGreyA,"trilateral3.color._ColorInt.ColorInt_Impl_","aiGreyA",0xb2141ecd,"trilateral3.color._ColorInt.ColorInt_Impl_.aiGreyA","trilateral3/color/ColorInt.hx",144,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_151_ARGB_CYMKA,"trilateral3.color._ColorInt.ColorInt_Impl_","ARGB_CYMKA",0xf79e00c7,"trilateral3.color._ColorInt.ColorInt_Impl_.ARGB_CYMKA","trilateral3/color/ColorInt.hx",151,0xd37a4f9e)
HX_LOCAL_STACK_FRAME(_hx_pos_48ae2dbc707ed6b9_161_CYMKA_ARGB,"trilateral3.color._ColorInt.ColorInt_Impl_","CYMKA_ARGB",0x1ae6bceb,"trilateral3.color._ColorInt.ColorInt_Impl_.CYMKA_ARGB","trilateral3/color/ColorInt.hx",161,0xd37a4f9e)
namespace trilateral3{
namespace color{
namespace _ColorInt{

void ColorInt_Impl__obj::__construct() { }

Dynamic ColorInt_Impl__obj::__CreateEmpty() { return new ColorInt_Impl__obj; }

void *ColorInt_Impl__obj::_hx_vtable = 0;

Dynamic ColorInt_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColorInt_Impl__obj > _hx_result = new ColorInt_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorInt_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0278c98b;
}

int ColorInt_Impl__obj::_new(int v){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_7__new)
HXDLIN(   7)		int this1 = v;
HXDLIN(   7)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,_new,return )

int ColorInt_Impl__obj::fromARGB( ::trilateral3::structure::ARGB argb){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_14_fromARGB)
HXDLIN(  14)		int this1 = ((((::Math_obj::round((argb->a * ( (Float)(255) ))) << 24) | (::Math_obj::round((argb->r * ( (Float)(255) ))) << 16)) | (::Math_obj::round((argb->g * ( (Float)(255) ))) << 8)) | ::Math_obj::round((argb->b * ( (Float)(255) ))));
HXDLIN(  14)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,fromARGB,return )

 ::trilateral3::structure::ARGB ColorInt_Impl__obj::toARGB(int this1){
            	HX_GC_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_19_toARGB)
HXDLIN(  19)		return  ::trilateral3::structure::ARGB_obj::__alloc( HX_CTX ,(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )),(( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,toARGB,return )

int ColorInt_Impl__obj::fromCYMKA( ::trilateral3::structure::CYMKA c){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_24_fromCYMKA)
HXDLIN(  24)		Float k = c->k;
HXDLIN(  24)		int this1 = ((((::Math_obj::round((c->a * ( (Float)(255) ))) << 24) | (::Math_obj::round((((( (Float)(1) ) - (c->c / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((((( (Float)(1) ) - (c->m / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((((( (Float)(1) ) - (c->y / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))));
HXDLIN(  24)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,fromCYMKA,return )

 ::trilateral3::structure::CYMKA ColorInt_Impl__obj::toCYMK(int this1){
            	HX_GC_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_28_toCYMK)
HXLINE(  29)		Float k = (((Float)1.) - ::Math_obj::max(::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))),(( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))));
HXLINE(  30)		Float c = (((((Float)1.) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  31)		Float m = (((((Float)1.) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  32)		Float y = (((((Float)1.) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  33)		return  ::trilateral3::structure::CYMKA_obj::__alloc( HX_CTX ,c,y,m,k,(( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,toCYMK,return )

Float ColorInt_Impl__obj::get_cyan(int this1){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_38_get_cyan)
HXDLIN(  38)		Float k = (((Float)1.) - ::Math_obj::max(::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))),(( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))));
HXDLIN(  38)		return (((((Float)1.) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,get_cyan,return )

Float ColorInt_Impl__obj::set_cyan(int this1,Float v){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_41_set_cyan)
HXLINE(  42)		Float k = (((Float)1.) - ::Math_obj::max(::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))),(( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))));
HXLINE(  43)		Float m = (((((Float)1.) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  44)		Float y = (((((Float)1.) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  45)		int this2 = ((((::Math_obj::round(((( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round((((( (Float)(1) ) - (v / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((((( (Float)(1) ) - (m / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((((( (Float)(1) ) - (y / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))));
HXDLIN(  45)		this1 = this2;
HXLINE(  46)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,set_cyan,return )

Float ColorInt_Impl__obj::get_yellow(int this1){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_51_get_yellow)
HXDLIN(  51)		Float k = (((Float)1.) - ::Math_obj::max(::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))),(( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))));
HXDLIN(  51)		return (((((Float)1.) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,get_yellow,return )

Float ColorInt_Impl__obj::set_yellow(int this1,Float v){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_54_set_yellow)
HXLINE(  55)		Float k = (((Float)1.) - ::Math_obj::max(::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))),(( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))));
HXLINE(  56)		Float c = (((((Float)1.) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  57)		Float m = (((((Float)1.) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  58)		int this2 = ((((::Math_obj::round(((( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round((((( (Float)(1) ) - (v / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((((( (Float)(1) ) - (m / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((((( (Float)(1) ) - (v / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))));
HXDLIN(  58)		this1 = this2;
HXLINE(  59)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,set_yellow,return )

Float ColorInt_Impl__obj::get_magenta(int this1){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_64_get_magenta)
HXDLIN(  64)		Float k = (((Float)1.) - ::Math_obj::max(::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))),(( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))));
HXDLIN(  64)		return (((((Float)1.) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,get_magenta,return )

Float ColorInt_Impl__obj::set_magenta(int this1,Float v){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_67_set_magenta)
HXLINE(  68)		Float k = (((Float)1.) - ::Math_obj::max(::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))),(( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))));
HXLINE(  69)		Float c = (((((Float)1.) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  70)		Float y = (((((Float)1.) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  71)		int this2 = ((((::Math_obj::round(((( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round((((( (Float)(1) ) - (c / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((((( (Float)(1) ) - (v / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((((( (Float)(1) ) - (y / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))));
HXDLIN(  71)		this1 = this2;
HXLINE(  72)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,set_magenta,return )

Float ColorInt_Impl__obj::get_black(int this1){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_76_get_black)
HXDLIN(  76)		return (((Float)1.) - ::Math_obj::max(::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))),(( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,get_black,return )

Float ColorInt_Impl__obj::set_black(int this1,Float v){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_78_set_black)
HXLINE(  79)		Float k = (((Float)1.) - ::Math_obj::max(::Math_obj::max((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)((this1 & 255)) ) / ( (Float)(255) ))),(( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))));
HXLINE(  80)		Float c = (((((Float)1.) - (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  81)		Float m = (((((Float)1.) - (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  82)		Float y = (((((Float)1.) - (( (Float)((this1 & 255)) ) / ( (Float)(255) ))) - k) / (((Float)1.) - k));
HXLINE(  83)		int this2 = ((((::Math_obj::round(((( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round((((( (Float)(1) ) - (c / ( (Float)(100) ))) * (( (Float)(1) ) - (v / ( (Float)(100) )))) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((((( (Float)(1) ) - (m / ( (Float)(100) ))) * (( (Float)(1) ) - (v / ( (Float)(100) )))) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((((( (Float)(1) ) - (y / ( (Float)(100) ))) * (( (Float)(1) ) - (v / ( (Float)(100) )))) * ( (Float)(255) ))));
HXDLIN(  83)		this1 = this2;
HXLINE(  84)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,set_black,return )

Float ColorInt_Impl__obj::get_alpha(int this1){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_89_get_alpha)
HXDLIN(  89)		return (( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,get_alpha,return )

Float ColorInt_Impl__obj::set_alpha(int this1,Float v){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_92_set_alpha)
HXLINE(  93)		int this2 = ((((::Math_obj::round((v * ( (Float)(255) ))) << 24) | (::Math_obj::round(((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 16)) | (::Math_obj::round(((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 8)) | ::Math_obj::round(((( (Float)((this1 & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))));
HXDLIN(  93)		this1 = this2;
HXLINE(  94)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,set_alpha,return )

Float ColorInt_Impl__obj::get_red(int this1){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_99_get_red)
HXDLIN(  99)		return (( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,get_red,return )

Float ColorInt_Impl__obj::set_red(int this1,Float v){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_102_set_red)
HXLINE( 103)		int this2 = ((((::Math_obj::round(((( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round((v * ( (Float)(255) ))) << 16)) | (::Math_obj::round(((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 8)) | ::Math_obj::round(((( (Float)((this1 & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))));
HXDLIN( 103)		this1 = this2;
HXLINE( 104)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,set_red,return )

Float ColorInt_Impl__obj::get_green(int this1){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_109_get_green)
HXDLIN( 109)		return (( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,get_green,return )

Float ColorInt_Impl__obj::set_green(int this1,Float v){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_112_set_green)
HXLINE( 113)		int this2 = ((((::Math_obj::round(((( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round(((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((v * ( (Float)(255) ))) << 8)) | ::Math_obj::round(((( (Float)((this1 & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))));
HXDLIN( 113)		this1 = this2;
HXLINE( 114)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,set_green,return )

Float ColorInt_Impl__obj::get_blue(int this1){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_119_get_blue)
HXDLIN( 119)		return (( (Float)((this1 & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,get_blue,return )

Float ColorInt_Impl__obj::set_blue(int this1,Float v){
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_122_set_blue)
HXLINE( 123)		int this2 = ((((::Math_obj::round(((( (Float)(((this1 >> 24) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round(((( (Float)(((this1 >> 16) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 16)) | (::Math_obj::round(((( (Float)(((this1 >> 8) & 255)) ) / ( (Float)(255) )) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((v * ( (Float)(255) ))));
HXDLIN( 123)		this1 = this2;
HXLINE( 124)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,set_blue,return )

int ColorInt_Impl__obj::aiCYMKA(::Array< ::String > arr,::hx::Null< Float >  __o_alpha){
            		Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_129_aiCYMKA)
HXDLIN( 129)		Float c = ::Std_obj::parseFloat(arr->__get(0));
HXDLIN( 129)		Float y = ::Std_obj::parseFloat(arr->__get(1));
HXDLIN( 129)		Float m = ::Std_obj::parseFloat(arr->__get(2));
HXDLIN( 129)		Float k = ::Std_obj::parseFloat(arr->__get(3));
HXDLIN( 129)		int this1 = ((((::Math_obj::round((alpha * ( (Float)(255) ))) << 24) | (::Math_obj::round((((( (Float)(1) ) - (c / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((((( (Float)(1) ) - (m / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((((( (Float)(1) ) - (y / ( (Float)(100) ))) * (( (Float)(1) ) - (k / ( (Float)(100) )))) * ( (Float)(255) ))));
HXDLIN( 129)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,aiCYMKA,return )

int ColorInt_Impl__obj::aiARGB(::Array< ::String > arr,::hx::Null< Float >  __o_alpha){
            		Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_137_aiARGB)
HXDLIN( 137)		Float r = ::Std_obj::parseFloat(arr->__get(0));
HXDLIN( 137)		Float g = ::Std_obj::parseFloat(arr->__get(1));
HXDLIN( 137)		Float b = ::Std_obj::parseFloat(arr->__get(2));
HXDLIN( 137)		int this1 = ((((::Math_obj::round((alpha * ( (Float)(255) ))) << 24) | (::Math_obj::round((r * ( (Float)(255) ))) << 16)) | (::Math_obj::round((g * ( (Float)(255) ))) << 8)) | ::Math_obj::round((b * ( (Float)(255) ))));
HXDLIN( 137)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,aiARGB,return )

int ColorInt_Impl__obj::aiGreyA(::String s,::hx::Null< Float >  __o_alpha){
            		Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_144_aiGreyA)
HXLINE( 145)		Float v = ::Std_obj::parseFloat(s);
HXLINE( 146)		int this1 = ((((::Math_obj::round((alpha * ( (Float)(255) ))) << 24) | (::Math_obj::round((v * ( (Float)(255) ))) << 16)) | (::Math_obj::round((v * ( (Float)(255) ))) << 8)) | ::Math_obj::round((v * ( (Float)(255) ))));
HXDLIN( 146)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorInt_Impl__obj,aiGreyA,return )

 ::trilateral3::structure::CYMKA ColorInt_Impl__obj::ARGB_CYMKA( ::trilateral3::structure::ARGB v){
            	HX_GC_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_151_ARGB_CYMKA)
HXLINE( 152)		Float k = (((Float)1.) - ::Math_obj::max(::Math_obj::max(v->r,v->b),v->g));
HXLINE( 153)		Float c = (((((Float)1.) - v->r) - k) / (((Float)1.) - k));
HXLINE( 154)		Float m = (((((Float)1.) - v->g) - k) / (((Float)1.) - k));
HXLINE( 155)		Float y = (((((Float)1.) - v->b) - k) / (((Float)1.) - k));
HXLINE( 156)		return  ::trilateral3::structure::CYMKA_obj::__alloc( HX_CTX ,c,y,m,k,v->a);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,ARGB_CYMKA,return )

 ::trilateral3::structure::ARGB ColorInt_Impl__obj::CYMKA_ARGB( ::trilateral3::structure::CYMKA v){
            	HX_GC_STACKFRAME(&_hx_pos_48ae2dbc707ed6b9_161_CYMKA_ARGB)
HXLINE( 162)		Float r = ((( (Float)(1) ) - (v->c / ( (Float)(100) ))) * (( (Float)(1) ) - (v->k / ( (Float)(100) ))));
HXLINE( 163)		Float g = ((( (Float)(1) ) - (v->m / ( (Float)(100) ))) * (( (Float)(1) ) - (v->k / ( (Float)(100) ))));
HXLINE( 164)		Float b = ((( (Float)(1) ) - (v->y / ( (Float)(100) ))) * (( (Float)(1) ) - (v->k / ( (Float)(100) ))));
HXLINE( 165)		return  ::trilateral3::structure::ARGB_obj::__alloc( HX_CTX ,v->a,r,g,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorInt_Impl__obj,CYMKA_ARGB,return )


ColorInt_Impl__obj::ColorInt_Impl__obj()
{
}

bool ColorInt_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toARGB") ) { outValue = toARGB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCYMK") ) { outValue = toCYMK_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"aiARGB") ) { outValue = aiARGB_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_red") ) { outValue = get_red_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_red") ) { outValue = set_red_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"aiCYMKA") ) { outValue = aiCYMKA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"aiGreyA") ) { outValue = aiGreyA_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromARGB") ) { outValue = fromARGB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_cyan") ) { outValue = get_cyan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_cyan") ) { outValue = set_cyan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_blue") ) { outValue = get_blue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_blue") ) { outValue = set_blue_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromCYMKA") ) { outValue = fromCYMKA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_black") ) { outValue = get_black_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_black") ) { outValue = set_black_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { outValue = get_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { outValue = set_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_green") ) { outValue = get_green_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_green") ) { outValue = set_green_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_yellow") ) { outValue = get_yellow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_yellow") ) { outValue = set_yellow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ARGB_CYMKA") ) { outValue = ARGB_CYMKA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"CYMKA_ARGB") ) { outValue = CYMKA_ARGB_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_magenta") ) { outValue = get_magenta_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_magenta") ) { outValue = set_magenta_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ColorInt_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ColorInt_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class ColorInt_Impl__obj::__mClass;

static ::String ColorInt_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("fromARGB",b6,f7,27,9e),
	HX_("toARGB",47,94,15,76),
	HX_("fromCYMKA",83,04,43,f0),
	HX_("toCYMK",8f,56,6d,77),
	HX_("get_cyan",ac,00,87,c1),
	HX_("set_cyan",20,5a,e4,6f),
	HX_("get_yellow",3d,0f,e4,c0),
	HX_("set_yellow",b1,ad,61,c4),
	HX_("get_magenta",40,1a,98,94),
	HX_("set_magenta",4c,21,05,9f),
	HX_("get_black",16,32,9b,f8),
	HX_("set_black",22,1e,ec,db),
	HX_("get_alpha",b5,03,40,65),
	HX_("set_alpha",c1,ef,90,48),
	HX_("get_red",e8,a1,cb,26),
	HX_("set_red",f4,32,cd,19),
	HX_("get_green",1a,6b,96,dd),
	HX_("set_green",26,57,e7,c0),
	HX_("get_blue",23,fe,d3,c0),
	HX_("set_blue",97,57,31,6f),
	HX_("aiCYMKA",45,6c,02,8c),
	HX_("aiARGB",34,3e,e6,68),
	HX_("aiGreyA",fa,71,35,ea),
	HX_("ARGB_CYMKA",ba,27,91,c4),
	HX_("CYMKA_ARGB",de,e3,d9,e7),
	::String(null())
};

void ColorInt_Impl__obj::__register()
{
	ColorInt_Impl__obj _hx_dummy;
	ColorInt_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.color._ColorInt.ColorInt_Impl_",41,82,30,aa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColorInt_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ColorInt_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ColorInt_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorInt_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorInt_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace color
} // end namespace _ColorInt
