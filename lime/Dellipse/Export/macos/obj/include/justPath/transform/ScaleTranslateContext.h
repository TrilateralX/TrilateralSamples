// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_justPath_transform_ScaleTranslateContext
#define INCLUDED_justPath_transform_ScaleTranslateContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_justPath_IPathContext
#include <justPath/IPathContext.h>
#endif
HX_DECLARE_CLASS1(justPath,IPathContext)
HX_DECLARE_CLASS2(justPath,transform,ScaleTranslateContext)

namespace justPath{
namespace transform{


class HXCPP_CLASS_ATTRIBUTES ScaleTranslateContext_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ScaleTranslateContext_obj OBJ_;
		ScaleTranslateContext_obj();

	public:
		enum { _hx_ClassId = 0x1eb54034 };

		void __construct(::Dynamic pathContext_,Float dx_,Float dy_,Float sx_,Float sy_);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="justPath.transform.ScaleTranslateContext")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"justPath.transform.ScaleTranslateContext"); }
		static ::hx::ObjectPtr< ScaleTranslateContext_obj > __new(::Dynamic pathContext_,Float dx_,Float dy_,Float sx_,Float sy_);
		static ::hx::ObjectPtr< ScaleTranslateContext_obj > __alloc(::hx::Ctx *_hx_ctx,::Dynamic pathContext_,Float dx_,Float dy_,Float sx_,Float sy_);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ScaleTranslateContext_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ScaleTranslateContext",cb,9a,28,4a); }

		::Dynamic pathContext;
		Float dx;
		Float dy;
		Float sx;
		Float sy;
		void moveTo(Float x,Float y);
		::Dynamic moveTo_dyn();

		void lineTo(Float x,Float y);
		::Dynamic lineTo_dyn();

		void quadTo(Float x1,Float y1,Float x2,Float y2);
		::Dynamic quadTo_dyn();

		void curveTo(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3);
		::Dynamic curveTo_dyn();

};

} // end namespace justPath
} // end namespace transform

#endif /* INCLUDED_justPath_transform_ScaleTranslateContext */ 
