// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_org_poly2tri_SweepContext
#define INCLUDED_org_poly2tri_SweepContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(org,poly2tri,AdvancingFront)
HX_DECLARE_CLASS2(org,poly2tri,Basin)
HX_DECLARE_CLASS2(org,poly2tri,Edge)
HX_DECLARE_CLASS2(org,poly2tri,EdgeEvent)
HX_DECLARE_CLASS2(org,poly2tri,Node)
HX_DECLARE_CLASS2(org,poly2tri,Point)
HX_DECLARE_CLASS2(org,poly2tri,SweepContext)
HX_DECLARE_CLASS2(org,poly2tri,Triangle)

namespace org{
namespace poly2tri{


class HXCPP_CLASS_ATTRIBUTES SweepContext_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SweepContext_obj OBJ_;
		SweepContext_obj();

	public:
		enum { _hx_ClassId = 0x181a07a4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="org.poly2tri.SweepContext")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"org.poly2tri.SweepContext"); }
		static ::hx::ObjectPtr< SweepContext_obj > __new();
		static ::hx::ObjectPtr< SweepContext_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SweepContext_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SweepContext",83,c9,ee,3b); }

		::Array< ::Dynamic> triangles;
		::Array< ::Dynamic> points;
		::Array< ::Dynamic> edge_list;
		 ::haxe::ds::StringMap map;
		 ::org::poly2tri::AdvancingFront front;
		 ::org::poly2tri::Point head;
		 ::org::poly2tri::Point tail;
		 ::org::poly2tri::Basin basin;
		 ::org::poly2tri::EdgeEvent edge_event;
		void addPoints(::Array< ::Dynamic> points);
		::Dynamic addPoints_dyn();

		void addPolyline(::Array< ::Dynamic> polyline);
		::Dynamic addPolyline_dyn();

		void initEdges(::Array< ::Dynamic> polyline);
		::Dynamic initEdges_dyn();

		void addToMap( ::org::poly2tri::Triangle triangle);
		::Dynamic addToMap_dyn();

		void initTriangulation();
		::Dynamic initTriangulation_dyn();

		 ::org::poly2tri::Node locateNode( ::org::poly2tri::Point point);
		::Dynamic locateNode_dyn();

		void createAdvancingFront();
		::Dynamic createAdvancingFront_dyn();

		void removeNode( ::org::poly2tri::Node node);
		::Dynamic removeNode_dyn();

		void mapTriangleToNodes( ::org::poly2tri::Triangle triangle);
		::Dynamic mapTriangleToNodes_dyn();

		void meshClean( ::org::poly2tri::Triangle t);
		::Dynamic meshClean_dyn();

};

} // end namespace org
} // end namespace poly2tri

#endif /* INCLUDED_org_poly2tri_SweepContext */ 
