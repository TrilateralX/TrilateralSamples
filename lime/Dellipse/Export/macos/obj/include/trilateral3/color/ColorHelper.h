// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_color_ColorHelper
#define INCLUDED_trilateral3_color_ColorHelper

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(trilateral3,color,ColorHelper)

namespace trilateral3{
namespace color{


class HXCPP_CLASS_ATTRIBUTES ColorHelper_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ColorHelper_obj OBJ_;
		ColorHelper_obj();

	public:
		enum { _hx_ClassId = 0x0a3663b1 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="trilateral3.color.ColorHelper")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"trilateral3.color.ColorHelper"); }
		static ::hx::ObjectPtr< ColorHelper_obj > __new();
		static ::hx::ObjectPtr< ColorHelper_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ColorHelper_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ColorHelper",11,a7,a9,a2); }

		 ::Dynamic getBlack_;
		Dynamic getBlack__dyn() { return getBlack_;}
		 ::Dynamic from_cymka_;
		Dynamic from_cymka__dyn() { return from_cymka_;}
		 ::Dynamic from_argb_;
		Dynamic from_argb__dyn() { return from_argb_;}
		 ::Dynamic toHexInt_;
		Dynamic toHexInt__dyn() { return toHexInt_;}
		 ::Dynamic rgbConvert_;
		Dynamic rgbConvert__dyn() { return rgbConvert_;}
		 ::Dynamic cymkConvert_;
		Dynamic cymkConvert__dyn() { return cymkConvert_;}
		 ::Dynamic alphaChannel_;
		Dynamic alphaChannel__dyn() { return alphaChannel_;}
		 ::Dynamic redChannel_;
		Dynamic redChannel__dyn() { return redChannel_;}
		 ::Dynamic greenChannel_;
		Dynamic greenChannel__dyn() { return greenChannel_;}
		 ::Dynamic blueChannel_;
		Dynamic blueChannel__dyn() { return blueChannel_;}
};

} // end namespace trilateral3
} // end namespace color

#endif /* INCLUDED_trilateral3_color_ColorHelper */ 
