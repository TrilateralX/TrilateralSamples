// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_trilateral3_color_ColorHelper
#include <trilateral3/color/ColorHelper.h>
#endif
#ifndef INCLUDED_trilateral3_color__ColorHelper_ColorHelper_Fields_
#include <trilateral3/color/_ColorHelper/ColorHelper_Fields_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_34652de5af1856c4_41_new,"trilateral3.color.ColorHelper","new",0xe98ef7d1,"trilateral3.color.ColorHelper.new","trilateral3/color/ColorHelper.hx",41,0x3833b301)
namespace trilateral3{
namespace color{

void ColorHelper_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_34652de5af1856c4_41_new)
HXLINE(  51)		this->blueChannel_ = ::trilateral3::color::_ColorHelper::ColorHelper_Fields__obj::blueChannel_dyn();
HXLINE(  50)		this->greenChannel_ = ::trilateral3::color::_ColorHelper::ColorHelper_Fields__obj::greenChannel_dyn();
HXLINE(  49)		this->redChannel_ = ::trilateral3::color::_ColorHelper::ColorHelper_Fields__obj::redChannel_dyn();
HXLINE(  48)		this->alphaChannel_ = ::trilateral3::color::_ColorHelper::ColorHelper_Fields__obj::alphaChannel_dyn();
HXLINE(  47)		this->cymkConvert_ = ::trilateral3::color::_ColorHelper::ColorHelper_Fields__obj::cymkConvert_dyn();
HXLINE(  46)		this->rgbConvert_ = ::trilateral3::color::_ColorHelper::ColorHelper_Fields__obj::rgbConvert_dyn();
HXLINE(  45)		this->toHexInt_ = ::trilateral3::color::_ColorHelper::ColorHelper_Fields__obj::toHexInt_dyn();
HXLINE(  44)		this->from_argb_ = ::trilateral3::color::_ColorHelper::ColorHelper_Fields__obj::from_argb_dyn();
HXLINE(  43)		this->from_cymka_ = ::trilateral3::color::_ColorHelper::ColorHelper_Fields__obj::from_cymka_dyn();
HXLINE(  42)		this->getBlack_ = ::trilateral3::color::_ColorHelper::ColorHelper_Fields__obj::getBlack_dyn();
            	}

Dynamic ColorHelper_obj::__CreateEmpty() { return new ColorHelper_obj; }

void *ColorHelper_obj::_hx_vtable = 0;

Dynamic ColorHelper_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColorHelper_obj > _hx_result = new ColorHelper_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorHelper_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a3663b1;
}


::hx::ObjectPtr< ColorHelper_obj > ColorHelper_obj::__new() {
	::hx::ObjectPtr< ColorHelper_obj > __this = new ColorHelper_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ColorHelper_obj > ColorHelper_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ColorHelper_obj *__this = (ColorHelper_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ColorHelper_obj), true, "trilateral3.color.ColorHelper"));
	*(void **)__this = ColorHelper_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ColorHelper_obj::ColorHelper_obj()
{
}

void ColorHelper_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColorHelper);
	HX_MARK_MEMBER_NAME(getBlack_,"getBlack_");
	HX_MARK_MEMBER_NAME(from_cymka_,"from_cymka_");
	HX_MARK_MEMBER_NAME(from_argb_,"from_argb_");
	HX_MARK_MEMBER_NAME(toHexInt_,"toHexInt_");
	HX_MARK_MEMBER_NAME(rgbConvert_,"rgbConvert_");
	HX_MARK_MEMBER_NAME(cymkConvert_,"cymkConvert_");
	HX_MARK_MEMBER_NAME(alphaChannel_,"alphaChannel_");
	HX_MARK_MEMBER_NAME(redChannel_,"redChannel_");
	HX_MARK_MEMBER_NAME(greenChannel_,"greenChannel_");
	HX_MARK_MEMBER_NAME(blueChannel_,"blueChannel_");
	HX_MARK_END_CLASS();
}

void ColorHelper_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(getBlack_,"getBlack_");
	HX_VISIT_MEMBER_NAME(from_cymka_,"from_cymka_");
	HX_VISIT_MEMBER_NAME(from_argb_,"from_argb_");
	HX_VISIT_MEMBER_NAME(toHexInt_,"toHexInt_");
	HX_VISIT_MEMBER_NAME(rgbConvert_,"rgbConvert_");
	HX_VISIT_MEMBER_NAME(cymkConvert_,"cymkConvert_");
	HX_VISIT_MEMBER_NAME(alphaChannel_,"alphaChannel_");
	HX_VISIT_MEMBER_NAME(redChannel_,"redChannel_");
	HX_VISIT_MEMBER_NAME(greenChannel_,"greenChannel_");
	HX_VISIT_MEMBER_NAME(blueChannel_,"blueChannel_");
}

::hx::Val ColorHelper_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"getBlack_") ) { return ::hx::Val( getBlack_ ); }
		if (HX_FIELD_EQ(inName,"toHexInt_") ) { return ::hx::Val( toHexInt_ ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"from_argb_") ) { return ::hx::Val( from_argb_ ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"from_cymka_") ) { return ::hx::Val( from_cymka_ ); }
		if (HX_FIELD_EQ(inName,"rgbConvert_") ) { return ::hx::Val( rgbConvert_ ); }
		if (HX_FIELD_EQ(inName,"redChannel_") ) { return ::hx::Val( redChannel_ ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cymkConvert_") ) { return ::hx::Val( cymkConvert_ ); }
		if (HX_FIELD_EQ(inName,"blueChannel_") ) { return ::hx::Val( blueChannel_ ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"alphaChannel_") ) { return ::hx::Val( alphaChannel_ ); }
		if (HX_FIELD_EQ(inName,"greenChannel_") ) { return ::hx::Val( greenChannel_ ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ColorHelper_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"getBlack_") ) { getBlack_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toHexInt_") ) { toHexInt_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"from_argb_") ) { from_argb_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"from_cymka_") ) { from_cymka_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rgbConvert_") ) { rgbConvert_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"redChannel_") ) { redChannel_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cymkConvert_") ) { cymkConvert_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blueChannel_") ) { blueChannel_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"alphaChannel_") ) { alphaChannel_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"greenChannel_") ) { greenChannel_=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ColorHelper_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,getBlack_),HX_("getBlack_",f6,ba,ff,1a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,from_cymka_),HX_("from_cymka_",e7,fe,94,c2)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,from_argb_),HX_("from_argb_",be,ed,1d,30)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,toHexInt_),HX_("toHexInt_",d0,f4,01,bf)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,rgbConvert_),HX_("rgbConvert_",39,23,12,b1)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,cymkConvert_),HX_("cymkConvert_",c0,f6,69,90)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,alphaChannel_),HX_("alphaChannel_",ba,9b,5a,dc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,redChannel_),HX_("redChannel_",ad,78,5a,eb)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,greenChannel_),HX_("greenChannel_",1f,70,2e,f5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,blueChannel_),HX_("blueChannel_",f6,d2,04,e9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ColorHelper_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorHelper_obj_sMemberFields[] = {
	HX_("getBlack_",f6,ba,ff,1a),
	HX_("from_cymka_",e7,fe,94,c2),
	HX_("from_argb_",be,ed,1d,30),
	HX_("toHexInt_",d0,f4,01,bf),
	HX_("rgbConvert_",39,23,12,b1),
	HX_("cymkConvert_",c0,f6,69,90),
	HX_("alphaChannel_",ba,9b,5a,dc),
	HX_("redChannel_",ad,78,5a,eb),
	HX_("greenChannel_",1f,70,2e,f5),
	HX_("blueChannel_",f6,d2,04,e9),
	::String(null()) };

::hx::Class ColorHelper_obj::__mClass;

void ColorHelper_obj::__register()
{
	ColorHelper_obj _hx_dummy;
	ColorHelper_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.color.ColorHelper",5f,bb,48,e5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ColorHelper_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ColorHelper_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorHelper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorHelper_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace color
