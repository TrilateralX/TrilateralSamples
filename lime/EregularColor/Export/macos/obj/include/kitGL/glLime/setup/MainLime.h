// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_kitGL_glLime_setup_MainLime
#define INCLUDED_kitGL_glLime_setup_MainLime

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
HX_DECLARE_CLASS3(kitGL,glLime,setup,IAppGL)
HX_DECLARE_CLASS3(kitGL,glLime,setup,MainLime)
HX_DECLARE_CLASS3(kitGL,glLime,setup,NonGL)
HX_DECLARE_CLASS2(lime,app,Application)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(lime,app,Module)
HX_DECLARE_CLASS2(lime,graphics,RenderContext)

namespace kitGL{
namespace glLime{
namespace setup{


class HXCPP_CLASS_ATTRIBUTES MainLime_obj : public  ::lime::app::Application_obj
{
	public:
		typedef  ::lime::app::Application_obj super;
		typedef MainLime_obj OBJ_;
		MainLime_obj();

	public:
		enum { _hx_ClassId = 0x4ac01a5e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kitGL.glLime.setup.MainLime")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kitGL.glLime.setup.MainLime"); }
		static ::hx::ObjectPtr< MainLime_obj > __new();
		static ::hx::ObjectPtr< MainLime_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MainLime_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MainLime",0e,48,e7,79); }

		bool ready;
		Float runSeconds;
		 ::kitGL::glLime::setup::NonGL other;
		::Dynamic appGL;
		int width;
		int height;
		 ::Dynamic appCreate;
		Dynamic appCreate_dyn() { return appCreate;}
		void onWindowCreate();

		void update(int deltaTime);

		void render( ::lime::graphics::RenderContext context);

};

} // end namespace kitGL
} // end namespace glLime
} // end namespace setup

#endif /* INCLUDED_kitGL_glLime_setup_MainLime */ 
