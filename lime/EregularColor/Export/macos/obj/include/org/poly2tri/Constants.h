// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_org_poly2tri_Constants
#define INCLUDED_org_poly2tri_Constants

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(org,poly2tri,Constants)

namespace org{
namespace poly2tri{


class HXCPP_CLASS_ATTRIBUTES Constants_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Constants_obj OBJ_;
		Constants_obj();

	public:
		enum { _hx_ClassId = 0x77318ee6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="org.poly2tri.Constants")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"org.poly2tri.Constants"); }

		inline static ::hx::ObjectPtr< Constants_obj > __new() {
			::hx::ObjectPtr< Constants_obj > __this = new Constants_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Constants_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Constants_obj *__this = (Constants_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Constants_obj), false, "org.poly2tri.Constants"));
			*(void **)__this = Constants_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Constants_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Constants",6f,56,3e,e6); }

		static void __boot();
		static Float kAlpha;
		static Float EPSILON;
		static Float PI_2;
		static Float PI_3div4;
};

} // end namespace org
} // end namespace poly2tri

#endif /* INCLUDED_org_poly2tri_Constants */ 
