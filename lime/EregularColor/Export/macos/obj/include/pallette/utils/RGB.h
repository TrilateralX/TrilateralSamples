// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_pallette_utils_RGB
#define INCLUDED_pallette_utils_RGB

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_7db7afea569703be_6_new)
HX_DECLARE_CLASS2(pallette,utils,RGB)

namespace pallette{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES RGB_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef RGB_obj OBJ_;
		RGB_obj();

	public:
		enum { _hx_ClassId = 0x5bdf6e2d };

		void __construct(Float r,Float g,Float b);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pallette.utils.RGB")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pallette.utils.RGB"); }

		inline static ::hx::ObjectPtr< RGB_obj > __new(Float r,Float g,Float b) {
			::hx::ObjectPtr< RGB_obj > __this = new RGB_obj();
			__this->__construct(r,g,b);
			return __this;
		}

		inline static ::hx::ObjectPtr< RGB_obj > __alloc(::hx::Ctx *_hx_ctx,Float r,Float g,Float b) {
			RGB_obj *__this = (RGB_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RGB_obj), false, "pallette.utils.RGB"));
			*(void **)__this = RGB_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_7db7afea569703be_6_new)
HXLINE(   9)		( ( ::pallette::utils::RGB)(__this) )->b = ((Float)0.);
HXLINE(   8)		( ( ::pallette::utils::RGB)(__this) )->g = ((Float)0.);
HXLINE(   7)		( ( ::pallette::utils::RGB)(__this) )->r = ((Float)0.);
HXLINE(  11)		( ( ::pallette::utils::RGB)(__this) )->r = r;
HXLINE(  12)		( ( ::pallette::utils::RGB)(__this) )->g = g;
HXLINE(  13)		( ( ::pallette::utils::RGB)(__this) )->b = b;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RGB_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RGB",ed,76,3e,00); }

		Float r;
		Float g;
		Float b;
};

} // end namespace pallette
} // end namespace utils

#endif /* INCLUDED_pallette_utils_RGB */ 
