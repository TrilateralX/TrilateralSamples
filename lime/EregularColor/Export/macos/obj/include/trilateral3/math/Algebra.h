// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_math_Algebra
#define INCLUDED_trilateral3_math_Algebra

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(trilateral3,math,Algebra)
HX_DECLARE_CLASS2(trilateral3,structure,Quad2D)
HX_DECLARE_CLASS2(trilateral3,structure,XY)

namespace trilateral3{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Algebra_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Algebra_obj OBJ_;
		Algebra_obj();

	public:
		enum { _hx_ClassId = 0x4463dd61 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="trilateral3.math.Algebra")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"trilateral3.math.Algebra"); }
		static ::hx::ObjectPtr< Algebra_obj > __new();
		static ::hx::ObjectPtr< Algebra_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Algebra_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Algebra",48,2c,d1,4e); }

		 ::Dynamic adjustWinding_;
		Dynamic adjustWinding__dyn() { return adjustWinding_;}
		 ::Dynamic minusXY_;
		Dynamic minusXY__dyn() { return minusXY_;}
		 ::Dynamic sign_;
		Dynamic sign__dyn() { return sign_;}
		 ::Dynamic quadCurve_;
		Dynamic quadCurve__dyn() { return quadCurve_;}
		 ::Dynamic cubicCurve_;
		Dynamic cubicCurve__dyn() { return cubicCurve_;}
		 ::Dynamic calculateQuadStep_;
		Dynamic calculateQuadStep__dyn() { return calculateQuadStep_;}
		 ::Dynamic calculateCubicStep_;
		Dynamic calculateCubicStep__dyn() { return calculateCubicStep_;}
		 ::Dynamic lineAB_;
		Dynamic lineAB__dyn() { return lineAB_;}
		 ::Dynamic lineABCoord_;
		Dynamic lineABCoord__dyn() { return lineABCoord_;}
		 ::Dynamic rotateVectorLine_;
		Dynamic rotateVectorLine__dyn() { return rotateVectorLine_;}
		 ::Dynamic pivotCheap_;
		Dynamic pivotCheap__dyn() { return pivotCheap_;}
		 ::Dynamic pivot_;
		Dynamic pivot__dyn() { return pivot_;}
		 ::Dynamic thetaCheap_;
		Dynamic thetaCheap__dyn() { return thetaCheap_;}
		 ::Dynamic distCheap_;
		Dynamic distCheap__dyn() { return distCheap_;}
		 ::Dynamic distance_;
		Dynamic distance__dyn() { return distance_;}
		 ::Dynamic quadraticThru_;
		Dynamic quadraticThru__dyn() { return quadraticThru_;}
		 ::Dynamic quadratic_;
		Dynamic quadratic__dyn() { return quadratic_;}
		 ::Dynamic quadSegment_;
		Dynamic quadSegment__dyn() { return quadSegment_;}
		 ::Dynamic cubic_;
		Dynamic cubic__dyn() { return cubic_;}
		 ::Dynamic perp_;
		Dynamic perp__dyn() { return perp_;}
};

} // end namespace trilateral3
} // end namespace math

#endif /* INCLUDED_trilateral3_math_Algebra */ 
