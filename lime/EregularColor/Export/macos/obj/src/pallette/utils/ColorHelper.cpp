// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_pallette_utils_ColorHelper
#include <pallette/utils/ColorHelper.h>
#endif
#ifndef INCLUDED_pallette_utils__ColorHelper_ColorHelper_Fields_
#include <pallette/utils/_ColorHelper/ColorHelper_Fields_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0d499ac2098ae956_146_new,"pallette.utils.ColorHelper","new",0xa45328e9,"pallette.utils.ColorHelper.new","pallette/utils/ColorHelper.hx",146,0x871a2ce9)
namespace pallette{
namespace utils{

void ColorHelper_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0d499ac2098ae956_146_new)
HXLINE( 174)		this->percentCyanSoft_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentCyanSoft_dyn();
HXLINE( 173)		this->percentMagentaSoft_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentMagentaSoft_dyn();
HXLINE( 172)		this->percentYellowSoft_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentYellowSoft_dyn();
HXLINE( 171)		this->percentBlueSoft_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentBlueSoft_dyn();
HXLINE( 170)		this->percentGreenSoft_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentGreenSoft_dyn();
HXLINE( 169)		this->percentRedSoft_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentRedSoft_dyn();
HXLINE( 168)		this->percentBlue_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentBlue_dyn();
HXLINE( 167)		this->percentGreen_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentGreen_dyn();
HXLINE( 166)		this->percentRed_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentRed_dyn();
HXLINE( 165)		this->percentDarkColor_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentDarkColor_dyn();
HXLINE( 164)		this->percentColor_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentColor_dyn();
HXLINE( 163)		this->rgbPercent_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::rgbPercent_dyn();
HXLINE( 162)		this->percentBlack_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentBlack_dyn();
HXLINE( 161)		this->percentWhite_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::percentWhite_dyn();
HXLINE( 160)		this->get_percentHex_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::get_percentHex_dyn();
HXLINE( 158)		this->blueChannel_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::blueChannel_dyn();
HXLINE( 157)		this->greenChannel_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::greenChannel_dyn();
HXLINE( 156)		this->redChannel_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::redChannel_dyn();
HXLINE( 155)		this->alphaChannel_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::alphaChannel_dyn();
HXLINE( 154)		this->cymkConvert_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::cymkConvert_dyn();
HXLINE( 153)		this->rgbConvert_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::rgbConvert_dyn();
HXLINE( 152)		this->toHexInt_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::toHexInt_dyn();
HXLINE( 151)		this->from_argb_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::from_argb_dyn();
HXLINE( 150)		this->from_cymka_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::from_cymka_dyn();
HXLINE( 149)		this->getBlack_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::getBlack_dyn();
HXLINE( 148)		this->htmlHex_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::htmlHex_dyn();
HXLINE( 147)		this->htmlRGBA_ = ::pallette::utils::_ColorHelper::ColorHelper_Fields__obj::htmlRGBA_dyn();
            	}

Dynamic ColorHelper_obj::__CreateEmpty() { return new ColorHelper_obj; }

void *ColorHelper_obj::_hx_vtable = 0;

Dynamic ColorHelper_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColorHelper_obj > _hx_result = new ColorHelper_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorHelper_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x46f3de51;
}


::hx::ObjectPtr< ColorHelper_obj > ColorHelper_obj::__new() {
	::hx::ObjectPtr< ColorHelper_obj > __this = new ColorHelper_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ColorHelper_obj > ColorHelper_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ColorHelper_obj *__this = (ColorHelper_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ColorHelper_obj), true, "pallette.utils.ColorHelper"));
	*(void **)__this = ColorHelper_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ColorHelper_obj::ColorHelper_obj()
{
}

void ColorHelper_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColorHelper);
	HX_MARK_MEMBER_NAME(htmlRGBA_,"htmlRGBA_");
	HX_MARK_MEMBER_NAME(htmlHex_,"htmlHex_");
	HX_MARK_MEMBER_NAME(getBlack_,"getBlack_");
	HX_MARK_MEMBER_NAME(from_cymka_,"from_cymka_");
	HX_MARK_MEMBER_NAME(from_argb_,"from_argb_");
	HX_MARK_MEMBER_NAME(toHexInt_,"toHexInt_");
	HX_MARK_MEMBER_NAME(rgbConvert_,"rgbConvert_");
	HX_MARK_MEMBER_NAME(cymkConvert_,"cymkConvert_");
	HX_MARK_MEMBER_NAME(alphaChannel_,"alphaChannel_");
	HX_MARK_MEMBER_NAME(redChannel_,"redChannel_");
	HX_MARK_MEMBER_NAME(greenChannel_,"greenChannel_");
	HX_MARK_MEMBER_NAME(blueChannel_,"blueChannel_");
	HX_MARK_MEMBER_NAME(get_percentHex_,"get_percentHex_");
	HX_MARK_MEMBER_NAME(percentWhite_,"percentWhite_");
	HX_MARK_MEMBER_NAME(percentBlack_,"percentBlack_");
	HX_MARK_MEMBER_NAME(rgbPercent_,"rgbPercent_");
	HX_MARK_MEMBER_NAME(percentColor_,"percentColor_");
	HX_MARK_MEMBER_NAME(percentDarkColor_,"percentDarkColor_");
	HX_MARK_MEMBER_NAME(percentRed_,"percentRed_");
	HX_MARK_MEMBER_NAME(percentGreen_,"percentGreen_");
	HX_MARK_MEMBER_NAME(percentBlue_,"percentBlue_");
	HX_MARK_MEMBER_NAME(percentRedSoft_,"percentRedSoft_");
	HX_MARK_MEMBER_NAME(percentGreenSoft_,"percentGreenSoft_");
	HX_MARK_MEMBER_NAME(percentBlueSoft_,"percentBlueSoft_");
	HX_MARK_MEMBER_NAME(percentYellowSoft_,"percentYellowSoft_");
	HX_MARK_MEMBER_NAME(percentMagentaSoft_,"percentMagentaSoft_");
	HX_MARK_MEMBER_NAME(percentCyanSoft_,"percentCyanSoft_");
	HX_MARK_END_CLASS();
}

void ColorHelper_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(htmlRGBA_,"htmlRGBA_");
	HX_VISIT_MEMBER_NAME(htmlHex_,"htmlHex_");
	HX_VISIT_MEMBER_NAME(getBlack_,"getBlack_");
	HX_VISIT_MEMBER_NAME(from_cymka_,"from_cymka_");
	HX_VISIT_MEMBER_NAME(from_argb_,"from_argb_");
	HX_VISIT_MEMBER_NAME(toHexInt_,"toHexInt_");
	HX_VISIT_MEMBER_NAME(rgbConvert_,"rgbConvert_");
	HX_VISIT_MEMBER_NAME(cymkConvert_,"cymkConvert_");
	HX_VISIT_MEMBER_NAME(alphaChannel_,"alphaChannel_");
	HX_VISIT_MEMBER_NAME(redChannel_,"redChannel_");
	HX_VISIT_MEMBER_NAME(greenChannel_,"greenChannel_");
	HX_VISIT_MEMBER_NAME(blueChannel_,"blueChannel_");
	HX_VISIT_MEMBER_NAME(get_percentHex_,"get_percentHex_");
	HX_VISIT_MEMBER_NAME(percentWhite_,"percentWhite_");
	HX_VISIT_MEMBER_NAME(percentBlack_,"percentBlack_");
	HX_VISIT_MEMBER_NAME(rgbPercent_,"rgbPercent_");
	HX_VISIT_MEMBER_NAME(percentColor_,"percentColor_");
	HX_VISIT_MEMBER_NAME(percentDarkColor_,"percentDarkColor_");
	HX_VISIT_MEMBER_NAME(percentRed_,"percentRed_");
	HX_VISIT_MEMBER_NAME(percentGreen_,"percentGreen_");
	HX_VISIT_MEMBER_NAME(percentBlue_,"percentBlue_");
	HX_VISIT_MEMBER_NAME(percentRedSoft_,"percentRedSoft_");
	HX_VISIT_MEMBER_NAME(percentGreenSoft_,"percentGreenSoft_");
	HX_VISIT_MEMBER_NAME(percentBlueSoft_,"percentBlueSoft_");
	HX_VISIT_MEMBER_NAME(percentYellowSoft_,"percentYellowSoft_");
	HX_VISIT_MEMBER_NAME(percentMagentaSoft_,"percentMagentaSoft_");
	HX_VISIT_MEMBER_NAME(percentCyanSoft_,"percentCyanSoft_");
}

::hx::Val ColorHelper_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"htmlHex_") ) { return ::hx::Val( htmlHex_ ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"htmlRGBA_") ) { return ::hx::Val( htmlRGBA_ ); }
		if (HX_FIELD_EQ(inName,"getBlack_") ) { return ::hx::Val( getBlack_ ); }
		if (HX_FIELD_EQ(inName,"toHexInt_") ) { return ::hx::Val( toHexInt_ ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"from_argb_") ) { return ::hx::Val( from_argb_ ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"from_cymka_") ) { return ::hx::Val( from_cymka_ ); }
		if (HX_FIELD_EQ(inName,"rgbConvert_") ) { return ::hx::Val( rgbConvert_ ); }
		if (HX_FIELD_EQ(inName,"redChannel_") ) { return ::hx::Val( redChannel_ ); }
		if (HX_FIELD_EQ(inName,"rgbPercent_") ) { return ::hx::Val( rgbPercent_ ); }
		if (HX_FIELD_EQ(inName,"percentRed_") ) { return ::hx::Val( percentRed_ ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cymkConvert_") ) { return ::hx::Val( cymkConvert_ ); }
		if (HX_FIELD_EQ(inName,"blueChannel_") ) { return ::hx::Val( blueChannel_ ); }
		if (HX_FIELD_EQ(inName,"percentBlue_") ) { return ::hx::Val( percentBlue_ ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"alphaChannel_") ) { return ::hx::Val( alphaChannel_ ); }
		if (HX_FIELD_EQ(inName,"greenChannel_") ) { return ::hx::Val( greenChannel_ ); }
		if (HX_FIELD_EQ(inName,"percentWhite_") ) { return ::hx::Val( percentWhite_ ); }
		if (HX_FIELD_EQ(inName,"percentBlack_") ) { return ::hx::Val( percentBlack_ ); }
		if (HX_FIELD_EQ(inName,"percentColor_") ) { return ::hx::Val( percentColor_ ); }
		if (HX_FIELD_EQ(inName,"percentGreen_") ) { return ::hx::Val( percentGreen_ ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_percentHex_") ) { return ::hx::Val( get_percentHex_ ); }
		if (HX_FIELD_EQ(inName,"percentRedSoft_") ) { return ::hx::Val( percentRedSoft_ ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"percentBlueSoft_") ) { return ::hx::Val( percentBlueSoft_ ); }
		if (HX_FIELD_EQ(inName,"percentCyanSoft_") ) { return ::hx::Val( percentCyanSoft_ ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"percentDarkColor_") ) { return ::hx::Val( percentDarkColor_ ); }
		if (HX_FIELD_EQ(inName,"percentGreenSoft_") ) { return ::hx::Val( percentGreenSoft_ ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"percentYellowSoft_") ) { return ::hx::Val( percentYellowSoft_ ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"percentMagentaSoft_") ) { return ::hx::Val( percentMagentaSoft_ ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ColorHelper_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"htmlHex_") ) { htmlHex_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"htmlRGBA_") ) { htmlRGBA_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"getBlack_") ) { getBlack_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toHexInt_") ) { toHexInt_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"from_argb_") ) { from_argb_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"from_cymka_") ) { from_cymka_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rgbConvert_") ) { rgbConvert_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"redChannel_") ) { redChannel_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rgbPercent_") ) { rgbPercent_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percentRed_") ) { percentRed_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cymkConvert_") ) { cymkConvert_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blueChannel_") ) { blueChannel_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percentBlue_") ) { percentBlue_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"alphaChannel_") ) { alphaChannel_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"greenChannel_") ) { greenChannel_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percentWhite_") ) { percentWhite_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percentBlack_") ) { percentBlack_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percentColor_") ) { percentColor_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percentGreen_") ) { percentGreen_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_percentHex_") ) { get_percentHex_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percentRedSoft_") ) { percentRedSoft_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"percentBlueSoft_") ) { percentBlueSoft_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percentCyanSoft_") ) { percentCyanSoft_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"percentDarkColor_") ) { percentDarkColor_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percentGreenSoft_") ) { percentGreenSoft_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"percentYellowSoft_") ) { percentYellowSoft_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"percentMagentaSoft_") ) { percentMagentaSoft_=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ColorHelper_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,htmlRGBA_),HX_("htmlRGBA_",e0,eb,18,e6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,htmlHex_),HX_("htmlHex_",2f,90,49,08)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,getBlack_),HX_("getBlack_",f6,ba,ff,1a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,from_cymka_),HX_("from_cymka_",e7,fe,94,c2)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,from_argb_),HX_("from_argb_",be,ed,1d,30)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,toHexInt_),HX_("toHexInt_",d0,f4,01,bf)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,rgbConvert_),HX_("rgbConvert_",39,23,12,b1)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,cymkConvert_),HX_("cymkConvert_",c0,f6,69,90)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,alphaChannel_),HX_("alphaChannel_",ba,9b,5a,dc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,redChannel_),HX_("redChannel_",ad,78,5a,eb)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,greenChannel_),HX_("greenChannel_",1f,70,2e,f5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,blueChannel_),HX_("blueChannel_",f6,d2,04,e9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,get_percentHex_),HX_("get_percentHex_",20,12,2e,6b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentWhite_),HX_("percentWhite_",3b,0a,b3,c9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentBlack_),HX_("percentBlack_",65,32,78,ac)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,rgbPercent_),HX_("rgbPercent_",27,ae,98,a1)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentColor_),HX_("percentColor_",41,c6,55,d4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentDarkColor_),HX_("percentDarkColor_",d7,01,07,82)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentRed_),HX_("percentRed_",53,6b,e8,b0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentGreen_),HX_("percentGreen_",e1,dc,4e,23)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentBlue_),HX_("percentBlue_",80,9f,b9,e8)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentRedSoft_),HX_("percentRedSoft_",09,95,19,50)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentGreenSoft_),HX_("percentGreenSoft_",97,e5,f2,f7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentBlueSoft_),HX_("percentBlueSoft_",b6,e3,9c,03)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentYellowSoft_),HX_("percentYellowSoft_",5c,05,8b,12)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentMagentaSoft_),HX_("percentMagentaSoft_",b1,fb,54,52)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ColorHelper_obj,percentCyanSoft_),HX_("percentCyanSoft_",8d,10,a7,17)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ColorHelper_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorHelper_obj_sMemberFields[] = {
	HX_("htmlRGBA_",e0,eb,18,e6),
	HX_("htmlHex_",2f,90,49,08),
	HX_("getBlack_",f6,ba,ff,1a),
	HX_("from_cymka_",e7,fe,94,c2),
	HX_("from_argb_",be,ed,1d,30),
	HX_("toHexInt_",d0,f4,01,bf),
	HX_("rgbConvert_",39,23,12,b1),
	HX_("cymkConvert_",c0,f6,69,90),
	HX_("alphaChannel_",ba,9b,5a,dc),
	HX_("redChannel_",ad,78,5a,eb),
	HX_("greenChannel_",1f,70,2e,f5),
	HX_("blueChannel_",f6,d2,04,e9),
	HX_("get_percentHex_",20,12,2e,6b),
	HX_("percentWhite_",3b,0a,b3,c9),
	HX_("percentBlack_",65,32,78,ac),
	HX_("rgbPercent_",27,ae,98,a1),
	HX_("percentColor_",41,c6,55,d4),
	HX_("percentDarkColor_",d7,01,07,82),
	HX_("percentRed_",53,6b,e8,b0),
	HX_("percentGreen_",e1,dc,4e,23),
	HX_("percentBlue_",80,9f,b9,e8),
	HX_("percentRedSoft_",09,95,19,50),
	HX_("percentGreenSoft_",97,e5,f2,f7),
	HX_("percentBlueSoft_",b6,e3,9c,03),
	HX_("percentYellowSoft_",5c,05,8b,12),
	HX_("percentMagentaSoft_",b1,fb,54,52),
	HX_("percentCyanSoft_",8d,10,a7,17),
	::String(null()) };

::hx::Class ColorHelper_obj::__mClass;

void ColorHelper_obj::__register()
{
	ColorHelper_obj _hx_dummy;
	ColorHelper_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pallette.utils.ColorHelper",77,80,a8,42);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ColorHelper_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ColorHelper_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorHelper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorHelper_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pallette
} // end namespace utils
