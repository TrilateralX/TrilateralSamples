// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_trilateral3_math_Algebra
#include <trilateral3/math/Algebra.h>
#endif
#ifndef INCLUDED_trilateral3_math__Algebra_Algebra_Fields_
#include <trilateral3/math/_Algebra/Algebra_Fields_.h>
#endif
#ifndef INCLUDED_trilateral3_structure_Quad2D
#include <trilateral3/structure/Quad2D.h>
#endif
#ifndef INCLUDED_trilateral3_structure_XY
#include <trilateral3/structure/XY.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_309bb2115a6bb9a3_168_new,"trilateral3.math.Algebra","new",0x4064a7db,"trilateral3.math.Algebra.new","trilateral3/math/Algebra.hx",168,0xf5b0e055)
namespace trilateral3{
namespace math{

void Algebra_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_309bb2115a6bb9a3_168_new)
HXLINE( 203)		this->perp_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::perp_dyn();
HXLINE( 202)		this->cubic_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::cubic_dyn();
HXLINE( 201)		this->quadSegment_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::quadSegment_dyn();
HXLINE( 200)		this->quadratic_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::quadratic_dyn();
HXLINE( 199)		this->quadraticThru_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::quadraticThru_dyn();
HXLINE( 198)		this->distance_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::distance_dyn();
HXLINE( 197)		this->distCheap_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::distCheap_dyn();
HXLINE( 196)		this->thetaCheap_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::thetaCheap_dyn();
HXLINE( 195)		this->pivot_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::pivot_dyn();
HXLINE( 194)		this->pivotCheap_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::pivotCheap_dyn();
HXLINE( 193)		this->rotateVectorLine_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::rotateVectorLine_dyn();
HXLINE( 190)		this->lineABCoord_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::lineABCoord_dyn();
HXLINE( 188)		this->lineAB_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::lineAB_dyn();
HXLINE( 187)		this->calculateCubicStep_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::calculateCubicStep_dyn();
HXLINE( 183)		this->calculateQuadStep_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::calculateQuadStep_dyn();
HXLINE( 180)		this->cubicCurve_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::cubicCurve_dyn();
HXLINE( 175)		this->quadCurve_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::quadCurve_dyn();
HXLINE( 171)		this->sign_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::sign_dyn();
HXLINE( 170)		this->minusXY_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::minusXY_dyn();
HXLINE( 169)		this->adjustWinding_ = ::trilateral3::math::_Algebra::Algebra_Fields__obj::adjustWinding_dyn();
            	}

Dynamic Algebra_obj::__CreateEmpty() { return new Algebra_obj; }

void *Algebra_obj::_hx_vtable = 0;

Dynamic Algebra_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Algebra_obj > _hx_result = new Algebra_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Algebra_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4463dd61;
}


::hx::ObjectPtr< Algebra_obj > Algebra_obj::__new() {
	::hx::ObjectPtr< Algebra_obj > __this = new Algebra_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Algebra_obj > Algebra_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Algebra_obj *__this = (Algebra_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Algebra_obj), true, "trilateral3.math.Algebra"));
	*(void **)__this = Algebra_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Algebra_obj::Algebra_obj()
{
}

void Algebra_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Algebra);
	HX_MARK_MEMBER_NAME(adjustWinding_,"adjustWinding_");
	HX_MARK_MEMBER_NAME(minusXY_,"minusXY_");
	HX_MARK_MEMBER_NAME(sign_,"sign_");
	HX_MARK_MEMBER_NAME(quadCurve_,"quadCurve_");
	HX_MARK_MEMBER_NAME(cubicCurve_,"cubicCurve_");
	HX_MARK_MEMBER_NAME(calculateQuadStep_,"calculateQuadStep_");
	HX_MARK_MEMBER_NAME(calculateCubicStep_,"calculateCubicStep_");
	HX_MARK_MEMBER_NAME(lineAB_,"lineAB_");
	HX_MARK_MEMBER_NAME(lineABCoord_,"lineABCoord_");
	HX_MARK_MEMBER_NAME(rotateVectorLine_,"rotateVectorLine_");
	HX_MARK_MEMBER_NAME(pivotCheap_,"pivotCheap_");
	HX_MARK_MEMBER_NAME(pivot_,"pivot_");
	HX_MARK_MEMBER_NAME(thetaCheap_,"thetaCheap_");
	HX_MARK_MEMBER_NAME(distCheap_,"distCheap_");
	HX_MARK_MEMBER_NAME(distance_,"distance_");
	HX_MARK_MEMBER_NAME(quadraticThru_,"quadraticThru_");
	HX_MARK_MEMBER_NAME(quadratic_,"quadratic_");
	HX_MARK_MEMBER_NAME(quadSegment_,"quadSegment_");
	HX_MARK_MEMBER_NAME(cubic_,"cubic_");
	HX_MARK_MEMBER_NAME(perp_,"perp_");
	HX_MARK_END_CLASS();
}

void Algebra_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(adjustWinding_,"adjustWinding_");
	HX_VISIT_MEMBER_NAME(minusXY_,"minusXY_");
	HX_VISIT_MEMBER_NAME(sign_,"sign_");
	HX_VISIT_MEMBER_NAME(quadCurve_,"quadCurve_");
	HX_VISIT_MEMBER_NAME(cubicCurve_,"cubicCurve_");
	HX_VISIT_MEMBER_NAME(calculateQuadStep_,"calculateQuadStep_");
	HX_VISIT_MEMBER_NAME(calculateCubicStep_,"calculateCubicStep_");
	HX_VISIT_MEMBER_NAME(lineAB_,"lineAB_");
	HX_VISIT_MEMBER_NAME(lineABCoord_,"lineABCoord_");
	HX_VISIT_MEMBER_NAME(rotateVectorLine_,"rotateVectorLine_");
	HX_VISIT_MEMBER_NAME(pivotCheap_,"pivotCheap_");
	HX_VISIT_MEMBER_NAME(pivot_,"pivot_");
	HX_VISIT_MEMBER_NAME(thetaCheap_,"thetaCheap_");
	HX_VISIT_MEMBER_NAME(distCheap_,"distCheap_");
	HX_VISIT_MEMBER_NAME(distance_,"distance_");
	HX_VISIT_MEMBER_NAME(quadraticThru_,"quadraticThru_");
	HX_VISIT_MEMBER_NAME(quadratic_,"quadratic_");
	HX_VISIT_MEMBER_NAME(quadSegment_,"quadSegment_");
	HX_VISIT_MEMBER_NAME(cubic_,"cubic_");
	HX_VISIT_MEMBER_NAME(perp_,"perp_");
}

::hx::Val Algebra_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"sign_") ) { return ::hx::Val( sign_ ); }
		if (HX_FIELD_EQ(inName,"perp_") ) { return ::hx::Val( perp_ ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pivot_") ) { return ::hx::Val( pivot_ ); }
		if (HX_FIELD_EQ(inName,"cubic_") ) { return ::hx::Val( cubic_ ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lineAB_") ) { return ::hx::Val( lineAB_ ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minusXY_") ) { return ::hx::Val( minusXY_ ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"distance_") ) { return ::hx::Val( distance_ ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quadCurve_") ) { return ::hx::Val( quadCurve_ ); }
		if (HX_FIELD_EQ(inName,"distCheap_") ) { return ::hx::Val( distCheap_ ); }
		if (HX_FIELD_EQ(inName,"quadratic_") ) { return ::hx::Val( quadratic_ ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cubicCurve_") ) { return ::hx::Val( cubicCurve_ ); }
		if (HX_FIELD_EQ(inName,"pivotCheap_") ) { return ::hx::Val( pivotCheap_ ); }
		if (HX_FIELD_EQ(inName,"thetaCheap_") ) { return ::hx::Val( thetaCheap_ ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lineABCoord_") ) { return ::hx::Val( lineABCoord_ ); }
		if (HX_FIELD_EQ(inName,"quadSegment_") ) { return ::hx::Val( quadSegment_ ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"adjustWinding_") ) { return ::hx::Val( adjustWinding_ ); }
		if (HX_FIELD_EQ(inName,"quadraticThru_") ) { return ::hx::Val( quadraticThru_ ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"rotateVectorLine_") ) { return ::hx::Val( rotateVectorLine_ ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"calculateQuadStep_") ) { return ::hx::Val( calculateQuadStep_ ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"calculateCubicStep_") ) { return ::hx::Val( calculateCubicStep_ ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Algebra_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"sign_") ) { sign_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"perp_") ) { perp_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pivot_") ) { pivot_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cubic_") ) { cubic_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lineAB_") ) { lineAB_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minusXY_") ) { minusXY_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"distance_") ) { distance_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"quadCurve_") ) { quadCurve_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"distCheap_") ) { distCheap_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quadratic_") ) { quadratic_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cubicCurve_") ) { cubicCurve_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pivotCheap_") ) { pivotCheap_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"thetaCheap_") ) { thetaCheap_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lineABCoord_") ) { lineABCoord_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quadSegment_") ) { quadSegment_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"adjustWinding_") ) { adjustWinding_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quadraticThru_") ) { quadraticThru_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"rotateVectorLine_") ) { rotateVectorLine_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"calculateQuadStep_") ) { calculateQuadStep_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"calculateCubicStep_") ) { calculateCubicStep_=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Algebra_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,adjustWinding_),HX_("adjustWinding_",b4,dd,20,6c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,minusXY_),HX_("minusXY_",ce,79,32,0e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,sign_),HX_("sign_",82,a5,ca,7c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,quadCurve_),HX_("quadCurve_",f7,c8,32,a7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,cubicCurve_),HX_("cubicCurve_",ba,71,73,76)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,calculateQuadStep_),HX_("calculateQuadStep_",06,ef,c4,a9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,calculateCubicStep_),HX_("calculateCubicStep_",ef,f6,f5,d6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,lineAB_),HX_("lineAB_",ea,e4,8e,1f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,lineABCoord_),HX_("lineABCoord_",bf,db,aa,ac)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,rotateVectorLine_),HX_("rotateVectorLine_",8d,03,e3,ca)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,pivotCheap_),HX_("pivotCheap_",d2,d2,5b,0e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,pivot_),HX_("pivot_",5d,1f,5f,8b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,thetaCheap_),HX_("thetaCheap_",2e,79,67,57)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,distCheap_),HX_("distCheap_",76,02,20,1a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,distance_),HX_("distance_",8a,3b,67,0e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,quadraticThru_),HX_("quadraticThru_",50,b8,c3,cf)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,quadratic_),HX_("quadratic_",87,b2,3d,ef)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,quadSegment_),HX_("quadSegment_",33,81,83,55)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,cubic_),HX_("cubic_",d5,83,4d,34)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Algebra_obj,perp_),HX_("perp_",0c,68,fa,bf)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Algebra_obj_sStaticStorageInfo = 0;
#endif

static ::String Algebra_obj_sMemberFields[] = {
	HX_("adjustWinding_",b4,dd,20,6c),
	HX_("minusXY_",ce,79,32,0e),
	HX_("sign_",82,a5,ca,7c),
	HX_("quadCurve_",f7,c8,32,a7),
	HX_("cubicCurve_",ba,71,73,76),
	HX_("calculateQuadStep_",06,ef,c4,a9),
	HX_("calculateCubicStep_",ef,f6,f5,d6),
	HX_("lineAB_",ea,e4,8e,1f),
	HX_("lineABCoord_",bf,db,aa,ac),
	HX_("rotateVectorLine_",8d,03,e3,ca),
	HX_("pivotCheap_",d2,d2,5b,0e),
	HX_("pivot_",5d,1f,5f,8b),
	HX_("thetaCheap_",2e,79,67,57),
	HX_("distCheap_",76,02,20,1a),
	HX_("distance_",8a,3b,67,0e),
	HX_("quadraticThru_",50,b8,c3,cf),
	HX_("quadratic_",87,b2,3d,ef),
	HX_("quadSegment_",33,81,83,55),
	HX_("cubic_",d5,83,4d,34),
	HX_("perp_",0c,68,fa,bf),
	::String(null()) };

::hx::Class Algebra_obj::__mClass;

void Algebra_obj::__register()
{
	Algebra_obj _hx_dummy;
	Algebra_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.math.Algebra",69,1e,af,a3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Algebra_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Algebra_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Algebra_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Algebra_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace math
