// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_trilateral3_shape__IndexRange_IndexRange_Impl_
#include <trilateral3/shape/_IndexRange/IndexRange_Impl_.h>
#endif
#ifndef INCLUDED_trilateral3_structure_StartEnd
#include <trilateral3/structure/StartEnd.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d9f629319e7c8d13_5__new,"trilateral3.shape._IndexRange.IndexRange_Impl_","_new",0x3f896b8c,"trilateral3.shape._IndexRange.IndexRange_Impl_._new","trilateral3/shape/IndexRange.hx",5,0xe0a7183d)
HX_LOCAL_STACK_FRAME(_hx_pos_d9f629319e7c8d13_8_adding,"trilateral3.shape._IndexRange.IndexRange_Impl_","adding",0x4f65dc4c,"trilateral3.shape._IndexRange.IndexRange_Impl_.adding","trilateral3/shape/IndexRange.hx",8,0xe0a7183d)
HX_LOCAL_STACK_FRAME(_hx_pos_d9f629319e7c8d13_11_add,"trilateral3.shape._IndexRange.IndexRange_Impl_","add",0x105cca56,"trilateral3.shape._IndexRange.IndexRange_Impl_.add","trilateral3/shape/IndexRange.hx",11,0xe0a7183d)
HX_LOCAL_STACK_FRAME(_hx_pos_d9f629319e7c8d13_20_get_length,"trilateral3.shape._IndexRange.IndexRange_Impl_","get_length",0xed78cd1a,"trilateral3.shape._IndexRange.IndexRange_Impl_.get_length","trilateral3/shape/IndexRange.hx",20,0xe0a7183d)
namespace trilateral3{
namespace shape{
namespace _IndexRange{

void IndexRange_Impl__obj::__construct() { }

Dynamic IndexRange_Impl__obj::__CreateEmpty() { return new IndexRange_Impl__obj; }

void *IndexRange_Impl__obj::_hx_vtable = 0;

Dynamic IndexRange_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IndexRange_Impl__obj > _hx_result = new IndexRange_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IndexRange_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ca27cef;
}

 ::trilateral3::structure::StartEnd IndexRange_Impl__obj::_new( ::trilateral3::structure::StartEnd startEnd){
            	HX_STACKFRAME(&_hx_pos_d9f629319e7c8d13_5__new)
HXDLIN(   5)		 ::trilateral3::structure::StartEnd this1 = startEnd;
HXDLIN(   5)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IndexRange_Impl__obj,_new,return )

 ::trilateral3::structure::StartEnd IndexRange_Impl__obj::adding( ::trilateral3::structure::StartEnd a, ::trilateral3::structure::StartEnd b){
            	HX_GC_STACKFRAME(&_hx_pos_d9f629319e7c8d13_8_adding)
HXDLIN(   8)		int begin = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(a->start) ),( (Float)(b->start) )));
HXDLIN(   8)		int _hx_tmp;
HXDLIN(   8)		if ((begin == a->start)) {
HXDLIN(   8)			_hx_tmp = b->end;
            		}
            		else {
HXDLIN(   8)			_hx_tmp = a->end;
            		}
HXDLIN(   8)		return ::trilateral3::shape::_IndexRange::IndexRange_Impl__obj::_new( ::trilateral3::structure::StartEnd_obj::__alloc( HX_CTX ,begin,_hx_tmp));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IndexRange_Impl__obj,adding,return )

 ::trilateral3::structure::StartEnd IndexRange_Impl__obj::add( ::trilateral3::structure::StartEnd this1, ::trilateral3::structure::StartEnd b){
            	HX_GC_STACKFRAME(&_hx_pos_d9f629319e7c8d13_11_add)
HXLINE(  12)		int begin = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this1->start) ),( (Float)(b->start) )));
HXLINE(  14)		int _hx_tmp;
HXDLIN(  14)		if ((begin == this1->start)) {
HXLINE(  14)			_hx_tmp = b->end;
            		}
            		else {
HXLINE(  14)			_hx_tmp = this1->end;
            		}
HXLINE(  13)		return ::trilateral3::shape::_IndexRange::IndexRange_Impl__obj::_new( ::trilateral3::structure::StartEnd_obj::__alloc( HX_CTX ,begin,_hx_tmp));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IndexRange_Impl__obj,add,return )

int IndexRange_Impl__obj::get_length( ::trilateral3::structure::StartEnd this1){
            	HX_STACKFRAME(&_hx_pos_d9f629319e7c8d13_20_get_length)
HXDLIN(  20)		return ((this1->end - this1->start) + 1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IndexRange_Impl__obj,get_length,return )


IndexRange_Impl__obj::IndexRange_Impl__obj()
{
}

bool IndexRange_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"adding") ) { outValue = adding_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *IndexRange_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *IndexRange_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class IndexRange_Impl__obj::__mClass;

static ::String IndexRange_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("adding",61,65,19,9f),
	HX_("add",21,f2,49,00),
	HX_("get_length",af,04,8f,8f),
	::String(null())
};

void IndexRange_Impl__obj::__register()
{
	IndexRange_Impl__obj _hx_dummy;
	IndexRange_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.shape._IndexRange.IndexRange_Impl_",23,ba,3f,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IndexRange_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(IndexRange_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< IndexRange_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IndexRange_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IndexRange_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace shape
} // end namespace _IndexRange
