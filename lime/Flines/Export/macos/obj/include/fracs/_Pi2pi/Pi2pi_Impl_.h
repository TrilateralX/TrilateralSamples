// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_fracs__Pi2pi_Pi2pi_Impl_
#define INCLUDED_fracs__Pi2pi_Pi2pi_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(fracs,_Pi2pi,Pi2pi_Impl_)

namespace fracs{
namespace _Pi2pi{


class HXCPP_CLASS_ATTRIBUTES Pi2pi_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Pi2pi_Impl__obj OBJ_;
		Pi2pi_Impl__obj();

	public:
		enum { _hx_ClassId = 0x1f28d962 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="fracs._Pi2pi.Pi2pi_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"fracs._Pi2pi.Pi2pi_Impl_"); }

		inline static ::hx::ObjectPtr< Pi2pi_Impl__obj > __new() {
			::hx::ObjectPtr< Pi2pi_Impl__obj > __this = new Pi2pi_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Pi2pi_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Pi2pi_Impl__obj *__this = (Pi2pi_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Pi2pi_Impl__obj), false, "fracs._Pi2pi.Pi2pi_Impl_"));
			*(void **)__this = Pi2pi_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Pi2pi_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Pi2pi_Impl_",52,10,1c,b8); }

		static Float _new(Float f);
		static ::Dynamic _new_dyn();

		static Float fromFloat(Float f);
		static ::Dynamic fromFloat_dyn();

		static Float additionPi(Float this1,Float b);
		static ::Dynamic additionPi_dyn();

		static Float subtractionPi(Float this1,Float b);
		static ::Dynamic subtractionPi_dyn();

		static Float dividePi(Float this1,Float b);
		static ::Dynamic dividePi_dyn();

		static Float timesPi(Float this1,Float b);
		static ::Dynamic timesPi_dyn();

		static Float addition(Float this1,Float b);
		static ::Dynamic addition_dyn();

		static Float subtraction(Float this1,Float b);
		static ::Dynamic subtraction_dyn();

		static Float divide(Float this1,Float b);
		static ::Dynamic divide_dyn();

		static Float times(Float this1,Float b);
		static ::Dynamic times_dyn();

		static Float get_degrees(Float this1);
		static ::Dynamic get_degrees_dyn();

		static Float set_degrees(Float this1,Float val);
		static ::Dynamic set_degrees_dyn();

		static Float fromFraction( ::Dynamic val);
		static ::Dynamic fromFraction_dyn();

		static  ::Dynamic tofraction(Float this1);
		static ::Dynamic tofraction_dyn();

		static Float fromString(::String val);
		static ::Dynamic fromString_dyn();

		static ::String toString(Float this1);
		static ::Dynamic toString_dyn();

};

} // end namespace fracs
} // end namespace _Pi2pi

#endif /* INCLUDED_fracs__Pi2pi_Pi2pi_Impl_ */ 
