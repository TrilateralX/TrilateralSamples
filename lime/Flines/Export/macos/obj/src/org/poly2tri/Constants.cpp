// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_org_poly2tri_Constants
#include <org/poly2tri/Constants.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e0518971f57b5b79_8_boot,"org.poly2tri.Constants","boot",0x7a8203d0,"org.poly2tri.Constants.boot","org/poly2tri/Constants.hx",8,0xbab7df0e)
HX_LOCAL_STACK_FRAME(_hx_pos_e0518971f57b5b79_9_boot,"org.poly2tri.Constants","boot",0x7a8203d0,"org.poly2tri.Constants.boot","org/poly2tri/Constants.hx",9,0xbab7df0e)
HX_LOCAL_STACK_FRAME(_hx_pos_e0518971f57b5b79_10_boot,"org.poly2tri.Constants","boot",0x7a8203d0,"org.poly2tri.Constants.boot","org/poly2tri/Constants.hx",10,0xbab7df0e)
HX_LOCAL_STACK_FRAME(_hx_pos_e0518971f57b5b79_11_boot,"org.poly2tri.Constants","boot",0x7a8203d0,"org.poly2tri.Constants.boot","org/poly2tri/Constants.hx",11,0xbab7df0e)
namespace org{
namespace poly2tri{

void Constants_obj::__construct() { }

Dynamic Constants_obj::__CreateEmpty() { return new Constants_obj; }

void *Constants_obj::_hx_vtable = 0;

Dynamic Constants_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Constants_obj > _hx_result = new Constants_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Constants_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x77318ee6;
}

Float Constants_obj::kAlpha;

Float Constants_obj::EPSILON;

Float Constants_obj::PI_2;

Float Constants_obj::PI_3div4;


Constants_obj::Constants_obj()
{
}

bool Constants_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"PI_2") ) { outValue = ( PI_2 ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"kAlpha") ) { outValue = ( kAlpha ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"EPSILON") ) { outValue = ( EPSILON ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"PI_3div4") ) { outValue = ( PI_3div4 ); return true; }
	}
	return false;
}

bool Constants_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"PI_2") ) { PI_2=ioValue.Cast< Float >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"kAlpha") ) { kAlpha=ioValue.Cast< Float >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"EPSILON") ) { EPSILON=ioValue.Cast< Float >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"PI_3div4") ) { PI_3div4=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Constants_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Constants_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Constants_obj::kAlpha,HX_("kAlpha",f3,b2,f3,7c)},
	{::hx::fsFloat,(void *) &Constants_obj::EPSILON,HX_("EPSILON",4a,89,92,2c)},
	{::hx::fsFloat,(void *) &Constants_obj::PI_2,HX_("PI_2",2c,c9,18,35)},
	{::hx::fsFloat,(void *) &Constants_obj::PI_3div4,HX_("PI_3div4",70,cd,22,57)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Constants_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Constants_obj::kAlpha,"kAlpha");
	HX_MARK_MEMBER_NAME(Constants_obj::EPSILON,"EPSILON");
	HX_MARK_MEMBER_NAME(Constants_obj::PI_2,"PI_2");
	HX_MARK_MEMBER_NAME(Constants_obj::PI_3div4,"PI_3div4");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Constants_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Constants_obj::kAlpha,"kAlpha");
	HX_VISIT_MEMBER_NAME(Constants_obj::EPSILON,"EPSILON");
	HX_VISIT_MEMBER_NAME(Constants_obj::PI_2,"PI_2");
	HX_VISIT_MEMBER_NAME(Constants_obj::PI_3div4,"PI_3div4");
};

#endif

::hx::Class Constants_obj::__mClass;

static ::String Constants_obj_sStaticFields[] = {
	HX_("kAlpha",f3,b2,f3,7c),
	HX_("EPSILON",4a,89,92,2c),
	HX_("PI_2",2c,c9,18,35),
	HX_("PI_3div4",70,cd,22,57),
	::String(null())
};

void Constants_obj::__register()
{
	Constants_obj _hx_dummy;
	Constants_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("org.poly2tri.Constants",90,05,fa,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Constants_obj::__GetStatic;
	__mClass->mSetStaticField = &Constants_obj::__SetStatic;
	__mClass->mMarkFunc = Constants_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Constants_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Constants_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Constants_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Constants_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Constants_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Constants_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e0518971f57b5b79_8_boot)
HXDLIN(   8)		kAlpha = ((Float)0.3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e0518971f57b5b79_9_boot)
HXDLIN(   9)		EPSILON = ((Float)1e-12);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e0518971f57b5b79_10_boot)
HXDLIN(  10)		PI_2 = (::Math_obj::PI / ( (Float)(2) ));
            	}
{
            	HX_STACKFRAME(&_hx_pos_e0518971f57b5b79_11_boot)
HXDLIN(  11)		PI_3div4 = ((( (Float)(3) ) * ::Math_obj::PI) / ( (Float)(4) ));
            	}
}

} // end namespace org
} // end namespace poly2tri
