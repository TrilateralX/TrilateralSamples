// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_trilateral3_Trilateral
#include <trilateral3/Trilateral.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c1355cde420a5cd1_5_boot,"trilateral3.Trilateral","boot",0xf4d7b2ad,"trilateral3.Trilateral.boot","trilateral3/Trilateral.hx",5,0xc487b82a)
namespace trilateral3{

void Trilateral_obj::__construct() { }

Dynamic Trilateral_obj::__CreateEmpty() { return new Trilateral_obj; }

void *Trilateral_obj::_hx_vtable = 0;

Dynamic Trilateral_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Trilateral_obj > _hx_result = new Trilateral_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Trilateral_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x32665153;
}

 ::trilateral3::matrix::MatrixDozen Trilateral_obj::transformMatrix;


Trilateral_obj::Trilateral_obj()
{
}

bool Trilateral_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"transformMatrix") ) { outValue = ( transformMatrix ); return true; }
	}
	return false;
}

bool Trilateral_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"transformMatrix") ) { transformMatrix=ioValue.Cast<  ::trilateral3::matrix::MatrixDozen >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Trilateral_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Trilateral_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::trilateral3::matrix::MatrixDozen */ ,(void *) &Trilateral_obj::transformMatrix,HX_("transformMatrix",cd,b0,1d,f7)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Trilateral_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Trilateral_obj::transformMatrix,"transformMatrix");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Trilateral_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Trilateral_obj::transformMatrix,"transformMatrix");
};

#endif

::hx::Class Trilateral_obj::__mClass;

static ::String Trilateral_obj_sStaticFields[] = {
	HX_("transformMatrix",cd,b0,1d,f7),
	::String(null())
};

void Trilateral_obj::__register()
{
	Trilateral_obj _hx_dummy;
	Trilateral_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.Trilateral",d3,c3,dc,bf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Trilateral_obj::__GetStatic;
	__mClass->mSetStaticField = &Trilateral_obj::__SetStatic;
	__mClass->mMarkFunc = Trilateral_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Trilateral_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Trilateral_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Trilateral_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Trilateral_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Trilateral_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Trilateral_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c1355cde420a5cd1_5_boot)
HXDLIN(   5)		transformMatrix = null();
            	}
}

} // end namespace trilateral3
