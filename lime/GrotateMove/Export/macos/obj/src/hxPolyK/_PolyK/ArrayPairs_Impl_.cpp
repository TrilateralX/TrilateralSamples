// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_hxPolyK__PolyK_ArrayPairs_Impl_
#include <hxPolyK/_PolyK/ArrayPairs_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_576804e1cf6aa834_68__new,"hxPolyK._PolyK.ArrayPairs_Impl_","_new",0xd00f8040,"hxPolyK._PolyK.ArrayPairs_Impl_._new","hxPolyK/PolyK.hx",68,0x7f79f9bf)
HX_LOCAL_STACK_FRAME(_hx_pos_576804e1cf6aa834_70_get_length,"hxPolyK._PolyK.ArrayPairs_Impl_","get_length",0x90dd60ce,"hxPolyK._PolyK.ArrayPairs_Impl_.get_length","hxPolyK/PolyK.hx",70,0x7f79f9bf)
HX_LOCAL_STACK_FRAME(_hx_pos_576804e1cf6aa834_71_access,"hxPolyK._PolyK.ArrayPairs_Impl_","access",0x090eb643,"hxPolyK._PolyK.ArrayPairs_Impl_.access","hxPolyK/PolyK.hx",71,0x7f79f9bf)
HX_LOCAL_STACK_FRAME(_hx_pos_576804e1cf6aa834_75_reverse,"hxPolyK._PolyK.ArrayPairs_Impl_","reverse",0x6410a3a3,"hxPolyK._PolyK.ArrayPairs_Impl_.reverse","hxPolyK/PolyK.hx",75,0x7f79f9bf)
namespace hxPolyK{
namespace _PolyK{

void ArrayPairs_Impl__obj::__construct() { }

Dynamic ArrayPairs_Impl__obj::__CreateEmpty() { return new ArrayPairs_Impl__obj; }

void *ArrayPairs_Impl__obj::_hx_vtable = 0;

Dynamic ArrayPairs_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ArrayPairs_Impl__obj > _hx_result = new ArrayPairs_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ArrayPairs_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3a68ac27;
}

::cpp::VirtualArray ArrayPairs_Impl__obj::_new(::cpp::VirtualArray arr){
            	HX_STACKFRAME(&_hx_pos_576804e1cf6aa834_68__new)
HXDLIN(  68)		::cpp::VirtualArray this1 = arr;
HXDLIN(  68)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayPairs_Impl__obj,_new,return )

int ArrayPairs_Impl__obj::get_length(::cpp::VirtualArray this1){
            	HX_STACKFRAME(&_hx_pos_576804e1cf6aa834_70_get_length)
HXDLIN(  70)		return ::Std_obj::_hx_int((( (Float)(this1->get_length()) ) / ( (Float)(2) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayPairs_Impl__obj,get_length,return )

 ::Dynamic ArrayPairs_Impl__obj::access(::cpp::VirtualArray this1,int key){
            	HX_STACKFRAME(&_hx_pos_576804e1cf6aa834_71_access)
HXLINE(  72)		int i = ::Std_obj::_hx_int(( (Float)((key * 2)) ));
HXLINE(  73)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),this1->__get(i))
            			->setFixed(1,HX_("y",79,00,00,00),this1->__get((i + 1))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ArrayPairs_Impl__obj,access,return )

::cpp::VirtualArray ArrayPairs_Impl__obj::reverse(::cpp::VirtualArray this1){
            	HX_STACKFRAME(&_hx_pos_576804e1cf6aa834_75_reverse)
HXLINE(  76)		::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  77)		{
HXLINE(  77)			int _g = 0;
HXDLIN(  77)			::cpp::VirtualArray _g1 = ::hxPolyK::_PolyK::ArrayPairs_Impl__obj::_new(this1);
HXDLIN(  77)			while((_g < ::Std_obj::_hx_int((( (Float)(_g1->get_length()) ) / ( (Float)(2) ))))){
HXLINE(  77)				int i = ::Std_obj::_hx_int(( (Float)((_g * 2)) ));
HXDLIN(  77)				 ::Dynamic i_x = _g1->__get(i);
HXDLIN(  77)				 ::Dynamic i_y = _g1->__get((i + 1));
HXDLIN(  77)				_g = (_g + 1);
HXLINE(  78)				arr->unshift(i_y);
HXLINE(  79)				arr->unshift(i_x);
            			}
            		}
HXLINE(  81)		this1 = arr;
HXLINE(  82)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayPairs_Impl__obj,reverse,return )


ArrayPairs_Impl__obj::ArrayPairs_Impl__obj()
{
}

bool ArrayPairs_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"access") ) { outValue = access_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"reverse") ) { outValue = reverse_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ArrayPairs_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ArrayPairs_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class ArrayPairs_Impl__obj::__mClass;

static ::String ArrayPairs_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("get_length",af,04,8f,8f),
	HX_("access",a4,95,06,0b),
	HX_("reverse",22,39,fc,1a),
	::String(null())
};

void ArrayPairs_Impl__obj::__register()
{
	ArrayPairs_Impl__obj _hx_dummy;
	ArrayPairs_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxPolyK._PolyK.ArrayPairs_Impl_",ef,e1,59,64);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ArrayPairs_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ArrayPairs_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ArrayPairs_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayPairs_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayPairs_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxPolyK
} // end namespace _PolyK
