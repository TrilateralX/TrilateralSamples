// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_org_poly2tri_Edge
#include <org/poly2tri/Edge.h>
#endif
#ifndef INCLUDED_org_poly2tri_EdgeEvent
#include <org/poly2tri/EdgeEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3f0fc89ccd23e57e_9_new,"org.poly2tri.EdgeEvent","new",0xbf41c990,"org.poly2tri.EdgeEvent.new","org/poly2tri/EdgeEvent.hx",9,0xc5765fc0)
namespace org{
namespace poly2tri{

void EdgeEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3f0fc89ccd23e57e_9_new)
            	}

Dynamic EdgeEvent_obj::__CreateEmpty() { return new EdgeEvent_obj; }

void *EdgeEvent_obj::_hx_vtable = 0;

Dynamic EdgeEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EdgeEvent_obj > _hx_result = new EdgeEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EdgeEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x14d37858;
}


EdgeEvent_obj::EdgeEvent_obj()
{
}

void EdgeEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EdgeEvent);
	HX_MARK_MEMBER_NAME(constrained_edge,"constrained_edge");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_END_CLASS();
}

void EdgeEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(constrained_edge,"constrained_edge");
	HX_VISIT_MEMBER_NAME(right,"right");
}

::hx::Val EdgeEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"constrained_edge") ) { return ::hx::Val( constrained_edge ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EdgeEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"constrained_edge") ) { constrained_edge=inValue.Cast<  ::org::poly2tri::Edge >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EdgeEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("constrained_edge",06,28,26,19));
	outFields->push(HX_("right",dc,0b,64,e9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EdgeEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::org::poly2tri::Edge */ ,(int)offsetof(EdgeEvent_obj,constrained_edge),HX_("constrained_edge",06,28,26,19)},
	{::hx::fsBool,(int)offsetof(EdgeEvent_obj,right),HX_("right",dc,0b,64,e9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EdgeEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String EdgeEvent_obj_sMemberFields[] = {
	HX_("constrained_edge",06,28,26,19),
	HX_("right",dc,0b,64,e9),
	::String(null()) };

::hx::Class EdgeEvent_obj::__mClass;

void EdgeEvent_obj::__register()
{
	EdgeEvent_obj _hx_dummy;
	EdgeEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("org.poly2tri.EdgeEvent",9e,01,a2,c7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EdgeEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EdgeEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EdgeEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EdgeEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace poly2tri
