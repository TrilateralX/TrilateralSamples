// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_color__ColorInt_ColorInt_Impl_
#define INCLUDED_trilateral3_color__ColorInt_ColorInt_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(trilateral3,color,_ColorInt,ColorInt_Impl_)
HX_DECLARE_CLASS2(trilateral3,structure,ARGB)
HX_DECLARE_CLASS2(trilateral3,structure,CYMKA)

namespace trilateral3{
namespace color{
namespace _ColorInt{


class HXCPP_CLASS_ATTRIBUTES ColorInt_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ColorInt_Impl__obj OBJ_;
		ColorInt_Impl__obj();

	public:
		enum { _hx_ClassId = 0x0278c98b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="trilateral3.color._ColorInt.ColorInt_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"trilateral3.color._ColorInt.ColorInt_Impl_"); }

		inline static ::hx::ObjectPtr< ColorInt_Impl__obj > __new() {
			::hx::ObjectPtr< ColorInt_Impl__obj > __this = new ColorInt_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ColorInt_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			ColorInt_Impl__obj *__this = (ColorInt_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ColorInt_Impl__obj), false, "trilateral3.color._ColorInt.ColorInt_Impl_"));
			*(void **)__this = ColorInt_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ColorInt_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ColorInt_Impl_",0c,65,f6,4e); }

		static int _new(int v);
		static ::Dynamic _new_dyn();

		static int fromARGB( ::trilateral3::structure::ARGB argb);
		static ::Dynamic fromARGB_dyn();

		static  ::trilateral3::structure::ARGB toARGB(int this1);
		static ::Dynamic toARGB_dyn();

		static int fromCYMKA( ::trilateral3::structure::CYMKA c);
		static ::Dynamic fromCYMKA_dyn();

		static  ::trilateral3::structure::CYMKA toCYMK(int this1);
		static ::Dynamic toCYMK_dyn();

		static Float get_cyan(int this1);
		static ::Dynamic get_cyan_dyn();

		static Float set_cyan(int this1,Float v);
		static ::Dynamic set_cyan_dyn();

		static Float get_yellow(int this1);
		static ::Dynamic get_yellow_dyn();

		static Float set_yellow(int this1,Float v);
		static ::Dynamic set_yellow_dyn();

		static Float get_magenta(int this1);
		static ::Dynamic get_magenta_dyn();

		static Float set_magenta(int this1,Float v);
		static ::Dynamic set_magenta_dyn();

		static Float get_black(int this1);
		static ::Dynamic get_black_dyn();

		static Float set_black(int this1,Float v);
		static ::Dynamic set_black_dyn();

		static Float get_alpha(int this1);
		static ::Dynamic get_alpha_dyn();

		static Float set_alpha(int this1,Float v);
		static ::Dynamic set_alpha_dyn();

		static Float get_red(int this1);
		static ::Dynamic get_red_dyn();

		static Float set_red(int this1,Float v);
		static ::Dynamic set_red_dyn();

		static Float get_green(int this1);
		static ::Dynamic get_green_dyn();

		static Float set_green(int this1,Float v);
		static ::Dynamic set_green_dyn();

		static Float get_blue(int this1);
		static ::Dynamic get_blue_dyn();

		static Float set_blue(int this1,Float v);
		static ::Dynamic set_blue_dyn();

		static int aiCYMKA(::Array< ::String > arr,::hx::Null< Float >  alpha);
		static ::Dynamic aiCYMKA_dyn();

		static int aiARGB(::Array< ::String > arr,::hx::Null< Float >  alpha);
		static ::Dynamic aiARGB_dyn();

		static int aiGreyA(::String s,::hx::Null< Float >  alpha);
		static ::Dynamic aiGreyA_dyn();

		static  ::trilateral3::structure::CYMKA ARGB_CYMKA( ::trilateral3::structure::ARGB v);
		static ::Dynamic ARGB_CYMKA_dyn();

		static  ::trilateral3::structure::ARGB CYMKA_ARGB( ::trilateral3::structure::CYMKA v);
		static ::Dynamic CYMKA_ARGB_dyn();

};

} // end namespace trilateral3
} // end namespace color
} // end namespace _ColorInt

#endif /* INCLUDED_trilateral3_color__ColorInt_ColorInt_Impl_ */ 
