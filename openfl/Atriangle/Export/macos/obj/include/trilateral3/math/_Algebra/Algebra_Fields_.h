// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_math__Algebra_Algebra_Fields_
#define INCLUDED_trilateral3_math__Algebra_Algebra_Fields_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(trilateral3,math,_Algebra,Algebra_Fields_)
HX_DECLARE_CLASS2(trilateral3,structure,Quad2D)
HX_DECLARE_CLASS2(trilateral3,structure,XY)

namespace trilateral3{
namespace math{
namespace _Algebra{


class HXCPP_CLASS_ATTRIBUTES Algebra_Fields__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Algebra_Fields__obj OBJ_;
		Algebra_Fields__obj();

	public:
		enum { _hx_ClassId = 0x7459f04b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="trilateral3.math._Algebra.Algebra_Fields_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"trilateral3.math._Algebra.Algebra_Fields_"); }

		inline static ::hx::ObjectPtr< Algebra_Fields__obj > __new() {
			::hx::ObjectPtr< Algebra_Fields__obj > __this = new Algebra_Fields__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Algebra_Fields__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Algebra_Fields__obj *__this = (Algebra_Fields__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Algebra_Fields__obj), false, "trilateral3.math._Algebra.Algebra_Fields_"));
			*(void **)__this = Algebra_Fields__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Algebra_Fields__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Algebra_Fields_",6f,51,fa,dc); }

		static void __boot();
		static bool adjustWinding( ::trilateral3::structure::XY A_, ::trilateral3::structure::XY B_, ::trilateral3::structure::XY C_);
		static ::Dynamic adjustWinding_dyn();

		static  ::trilateral3::structure::XY minusXY( ::trilateral3::structure::XY a, ::trilateral3::structure::XY b);
		static ::Dynamic minusXY_dyn();

		static int sign(Float n);
		static ::Dynamic sign_dyn();

		static Float quadStep;
		static ::Array< Float > quadCurve(::Array< Float > p,Float ax,Float ay,Float bx,Float by,Float cx,Float cy);
		static ::Dynamic quadCurve_dyn();

		static Float cubicStep;
		static ::Array< Float > cubicCurve(::Array< Float > p,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy);
		static ::Dynamic cubicCurve_dyn();

		static Float calculateQuadStep(Float ax,Float ay,Float bx,Float by,Float cx,Float cy);
		static ::Dynamic calculateQuadStep_dyn();

		static Float calculateCubicStep(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy);
		static ::Dynamic calculateCubicStep_dyn();

		static  ::trilateral3::structure::Quad2D lineAB( ::trilateral3::structure::XY A, ::trilateral3::structure::XY B,Float width);
		static ::Dynamic lineAB_dyn();

		static  ::trilateral3::structure::Quad2D lineABCoord(Float ax,Float ay,Float bx,Float by,Float width);
		static ::Dynamic lineABCoord_dyn();

		static  ::trilateral3::structure::Quad2D rotateVectorLine( ::trilateral3::structure::XY pos, ::trilateral3::structure::XY dim,Float omega,Float pivotX,Float pivotY);
		static ::Dynamic rotateVectorLine_dyn();

		static  ::trilateral3::structure::XY pivotCheap( ::trilateral3::structure::XY p,Float sin,Float cos,Float pivotX,Float pivotY);
		static ::Dynamic pivotCheap_dyn();

		static  ::trilateral3::structure::XY pivot( ::trilateral3::structure::XY p,Float omega,Float pivotX,Float pivotY);
		static ::Dynamic pivot_dyn();

		static Float thetaCheap(Float dx,Float dy);
		static ::Dynamic thetaCheap_dyn();

		static Float distCheap(Float dx,Float dy);
		static ::Dynamic distCheap_dyn();

		static Float distance(Float px,Float py,Float qx,Float qy);
		static ::Dynamic distance_dyn();

		static Float quadraticThru(Float t,Float s,Float c,Float e);
		static ::Dynamic quadraticThru_dyn();

		static Float quadratic(Float t,Float s,Float c,Float e);
		static ::Dynamic quadratic_dyn();

		static Float quadSegment(Float t0,Float t1,Float s,Float c,Float e);
		static ::Dynamic quadSegment_dyn();

		static Float cubic(Float t,Float s,Float c1,Float c2,Float e);
		static ::Dynamic cubic_dyn();

		static Float perp( ::trilateral3::structure::XY a, ::trilateral3::structure::XY b);
		static ::Dynamic perp_dyn();

};

} // end namespace trilateral3
} // end namespace math
} // end namespace _Algebra

#endif /* INCLUDED_trilateral3_math__Algebra_Algebra_Fields_ */ 
