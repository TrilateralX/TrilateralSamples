// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_target_openfl_AppOpenFL
#define INCLUDED_trilateral3_target_openfl_AppOpenFL

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(trilateral3,drawing,Pen)
HX_DECLARE_CLASS2(trilateral3,nodule,PenNodule)
HX_DECLARE_CLASS3(trilateral3,target,openfl,AppOpenFL)

namespace trilateral3{
namespace target{
namespace openfl{


class HXCPP_CLASS_ATTRIBUTES AppOpenFL_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef AppOpenFL_obj OBJ_;
		AppOpenFL_obj();

	public:
		enum { _hx_ClassId = 0x222f2689 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="trilateral3.target.openfl.AppOpenFL")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"trilateral3.target.openfl.AppOpenFL"); }
		static ::hx::ObjectPtr< AppOpenFL_obj > __new();
		static ::hx::ObjectPtr< AppOpenFL_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AppOpenFL_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AppOpenFL",f1,46,ea,1c); }

		static void main();
		static ::Dynamic main_dyn();

		 ::trilateral3::drawing::Pen pen;
		 ::trilateral3::nodule::PenNodule nodule;
		 ::lime::utils::ArrayBufferView tri;
		 ::openfl::display::Graphics g;
		 ::openfl::display::Sprite viewSprite;
		void internalSetup();
		::Dynamic internalSetup_dyn();

		void animate();
		::Dynamic animate_dyn();

		void firstDraw();
		::Dynamic firstDraw_dyn();

		virtual void draw();
		::Dynamic draw_dyn();

		void render();
		::Dynamic render_dyn();

		void internalDraw();
		::Dynamic internalDraw_dyn();

		virtual void renderDraw();
		::Dynamic renderDraw_dyn();

		void this_onEnterFrame( ::openfl::events::Event event);
		::Dynamic this_onEnterFrame_dyn();

};

} // end namespace trilateral3
} // end namespace target
} // end namespace openfl

#endif /* INCLUDED_trilateral3_target_openfl_AppOpenFL */ 
