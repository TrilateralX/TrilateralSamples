// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TrilateralOpenFLTriangle
#include <TrilateralOpenFLTriangle.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_justPath_IPathContext
#include <justPath/IPathContext.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_trilateral3_Trilateral
#include <trilateral3/Trilateral.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Pen
#include <trilateral3/drawing/Pen.h>
#endif
#ifndef INCLUDED_trilateral3_drawing_Sketch
#include <trilateral3/drawing/Sketch.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif
#ifndef INCLUDED_trilateral3_target_openfl_AppOpenFL
#include <trilateral3/target/openfl/AppOpenFL.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9a6637ac4db630ad_30_new,"TrilateralOpenFLTriangle","new",0x02c30356,"TrilateralOpenFLTriangle.new","TrilateralOpenFLTriangle.hx",30,0x4e1338da)
HX_LOCAL_STACK_FRAME(_hx_pos_9a6637ac4db630ad_32_draw,"TrilateralOpenFLTriangle","draw",0x614d904e,"TrilateralOpenFLTriangle.draw","TrilateralOpenFLTriangle.hx",32,0x4e1338da)
HX_LOCAL_STACK_FRAME(_hx_pos_9a6637ac4db630ad_64_renderDraw,"TrilateralOpenFLTriangle","renderDraw",0x69aede44,"TrilateralOpenFLTriangle.renderDraw","TrilateralOpenFLTriangle.hx",64,0x4e1338da)

void TrilateralOpenFLTriangle_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9a6637ac4db630ad_30_new)
HXDLIN(  30)		super::__construct();
            	}

Dynamic TrilateralOpenFLTriangle_obj::__CreateEmpty() { return new TrilateralOpenFLTriangle_obj; }

void *TrilateralOpenFLTriangle_obj::_hx_vtable = 0;

Dynamic TrilateralOpenFLTriangle_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TrilateralOpenFLTriangle_obj > _hx_result = new TrilateralOpenFLTriangle_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TrilateralOpenFLTriangle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x222f2689) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x222f2689;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x40b7d324 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void TrilateralOpenFLTriangle_obj::draw(){
            	HX_GC_STACKFRAME(&_hx_pos_9a6637ac4db630ad_32_draw)
HXLINE(  33)		::haxe::Log_obj::trace(HX_("test",52,c8,f9,4c),::hx::SourceInfo(HX_("TrilateralOpenFLTriangle.hx",da,38,13,4e),33,HX_("TrilateralOpenFLTriangle",64,60,c5,11),HX_("draw",04,2c,70,42)));
HXLINE(  34)		{
HXLINE(  34)			 ::trilateral3::drawing::Pen _this = this->pen;
HXDLIN(  34)			_this->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(100,100,0,500,500,0,100,500,0);
HXDLIN(  34)			if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
HXLINE(  34)				_this->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
            			}
HXDLIN(  34)			_this->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
            		}
HXLINE(  37)		{
HXLINE(  37)			 ::trilateral3::drawing::Pen _this1 = this->pen;
HXDLIN(  37)			_this1->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(100,100,0,500,100,0,500,500,0);
HXDLIN(  37)			if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
HXLINE(  37)				_this1->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
            			}
HXDLIN(  37)			_this1->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
            		}
HXLINE(  40)		{
HXLINE(  40)			 ::trilateral3::drawing::Pen _this2 = this->pen;
HXDLIN(  40)			_this2->drawType->__Field(HX_("triangle",c8,be,c5,8d),::hx::paccDynamic)(300,300,0,400,300,0,400,400,0);
HXDLIN(  40)			if (::hx::IsNotNull( ::trilateral3::Trilateral_obj::transformMatrix )) {
HXLINE(  40)				_this2->drawType->__Field(HX_("transform",6c,2d,93,45),::hx::paccDynamic)(::trilateral3::Trilateral_obj::transformMatrix);
            			}
HXDLIN(  40)			_this2->drawType->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
            		}
HXLINE(  44)		{
HXLINE(  44)			 ::trilateral3::drawing::Pen _this3 = this->pen;
HXDLIN(  44)			_this3->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(1);
HXDLIN(  44)			_this3->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(1);
            		}
HXLINE(  45)		{
HXLINE(  45)			 ::trilateral3::drawing::Pen _this4 = this->pen;
HXDLIN(  45)			int color = -65536;
HXDLIN(  45)			if ((color == -1)) {
HXLINE(  45)				color = _this4->currentColor;
            			}
HXDLIN(  45)			_this4->colorType->__Field(HX_("colorTriangles",c8,da,ed,e6),::hx::paccDynamic)(color,1);
            		}
HXLINE(  46)		{
HXLINE(  46)			 ::trilateral3::drawing::Pen _this5 = this->pen;
HXDLIN(  46)			int color1 = -256;
HXDLIN(  46)			if ((color1 == -1)) {
HXLINE(  46)				color1 = _this5->currentColor;
            			}
HXDLIN(  46)			_this5->colorType->__Field(HX_("colorTriangles",c8,da,ed,e6),::hx::paccDynamic)(color1,1);
            		}
HXLINE(  48)		 ::trilateral3::drawing::Sketch sketch =  ::trilateral3::drawing::Sketch_obj::__alloc( HX_CTX ,this->pen,4,3);
HXLINE(  50)		sketch->width = ( (Float)(30) );
HXLINE(  51)		Float start = ( (Float)(this->pen->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) );
HXLINE(  52)		sketch->moveTo(( (Float)(50) ),( (Float)(50) ));
HXLINE(  53)		{
HXLINE(  53)			bool repeat;
HXDLIN(  53)			if ((sketch->x == 550)) {
HXLINE(  53)				repeat = (sketch->y == 50);
            			}
            			else {
HXLINE(  53)				repeat = false;
            			}
HXDLIN(  53)			if (!(repeat)) {
HXLINE(  53)				if (::hx::IsNotNull( sketch->widthFunction )) {
HXLINE(  53)					sketch->width = ( (Float)(sketch->widthFunction(sketch->width,sketch->x,sketch->y,550,50)) );
            				}
HXDLIN(  53)				if (::hx::IsNotNull( sketch->colourFunction )) {
HXLINE(  53)					sketch->pen->currentColor = ( (int)(sketch->colourFunction(sketch->pen->currentColor,sketch->x,sketch->y,550,50)) );
            				}
HXDLIN(  53)				sketch->line(550,50);
HXDLIN(  53)				int l = sketch->points->length;
HXDLIN(  53)				::Array< Float > p = sketch->points->__get((l - 1)).StaticCast< ::Array< Float > >();
HXDLIN(  53)				int l2 = p->length;
HXDLIN(  53)				p[l2] = ( (Float)(550) );
HXDLIN(  53)				p[(l2 + 1)] = ( (Float)(50) );
HXDLIN(  53)				{
HXLINE(  53)					 ::Dynamic d = sketch->dim->__get((sketch->dim->length - 1));
HXDLIN(  53)					if (::hx::IsLess( 550,d->__Field(HX_("minX",86,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  53)						d->__SetField(HX_("minX",86,4e,5c,48),550,::hx::paccDynamic);
            					}
HXDLIN(  53)					if (::hx::IsGreater( 550,d->__Field(HX_("maxX",34,45,56,48),::hx::paccDynamic) )) {
HXLINE(  53)						d->__SetField(HX_("maxX",34,45,56,48),550,::hx::paccDynamic);
            					}
HXDLIN(  53)					if (::hx::IsLess( 50,d->__Field(HX_("minY",87,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  53)						d->__SetField(HX_("minY",87,4e,5c,48),50,::hx::paccDynamic);
            					}
HXDLIN(  53)					if (::hx::IsGreater( 50,d->__Field(HX_("maxY",35,45,56,48),::hx::paccDynamic) )) {
HXLINE(  53)						d->__SetField(HX_("maxY",35,45,56,48),50,::hx::paccDynamic);
            					}
            				}
HXDLIN(  53)				sketch->x = ( (Float)(550) );
HXDLIN(  53)				sketch->y = ( (Float)(50) );
            			}
            		}
HXLINE(  54)		{
HXLINE(  54)			bool repeat1;
HXDLIN(  54)			if ((sketch->x == 550)) {
HXLINE(  54)				repeat1 = (sketch->y == 550);
            			}
            			else {
HXLINE(  54)				repeat1 = false;
            			}
HXDLIN(  54)			if (!(repeat1)) {
HXLINE(  54)				if (::hx::IsNotNull( sketch->widthFunction )) {
HXLINE(  54)					sketch->width = ( (Float)(sketch->widthFunction(sketch->width,sketch->x,sketch->y,550,550)) );
            				}
HXDLIN(  54)				if (::hx::IsNotNull( sketch->colourFunction )) {
HXLINE(  54)					sketch->pen->currentColor = ( (int)(sketch->colourFunction(sketch->pen->currentColor,sketch->x,sketch->y,550,550)) );
            				}
HXDLIN(  54)				sketch->line(550,550);
HXDLIN(  54)				int l = sketch->points->length;
HXDLIN(  54)				::Array< Float > p = sketch->points->__get((l - 1)).StaticCast< ::Array< Float > >();
HXDLIN(  54)				int l2 = p->length;
HXDLIN(  54)				p[l2] = ( (Float)(550) );
HXDLIN(  54)				p[(l2 + 1)] = ( (Float)(550) );
HXDLIN(  54)				{
HXLINE(  54)					 ::Dynamic d = sketch->dim->__get((sketch->dim->length - 1));
HXDLIN(  54)					if (::hx::IsLess( 550,d->__Field(HX_("minX",86,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  54)						d->__SetField(HX_("minX",86,4e,5c,48),550,::hx::paccDynamic);
            					}
HXDLIN(  54)					if (::hx::IsGreater( 550,d->__Field(HX_("maxX",34,45,56,48),::hx::paccDynamic) )) {
HXLINE(  54)						d->__SetField(HX_("maxX",34,45,56,48),550,::hx::paccDynamic);
            					}
HXDLIN(  54)					if (::hx::IsLess( 550,d->__Field(HX_("minY",87,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  54)						d->__SetField(HX_("minY",87,4e,5c,48),550,::hx::paccDynamic);
            					}
HXDLIN(  54)					if (::hx::IsGreater( 550,d->__Field(HX_("maxY",35,45,56,48),::hx::paccDynamic) )) {
HXLINE(  54)						d->__SetField(HX_("maxY",35,45,56,48),550,::hx::paccDynamic);
            					}
            				}
HXDLIN(  54)				sketch->x = ( (Float)(550) );
HXDLIN(  54)				sketch->y = ( (Float)(550) );
            			}
            		}
HXLINE(  55)		{
HXLINE(  55)			bool repeat2;
HXDLIN(  55)			if ((sketch->x == 50)) {
HXLINE(  55)				repeat2 = (sketch->y == 550);
            			}
            			else {
HXLINE(  55)				repeat2 = false;
            			}
HXDLIN(  55)			if (!(repeat2)) {
HXLINE(  55)				if (::hx::IsNotNull( sketch->widthFunction )) {
HXLINE(  55)					sketch->width = ( (Float)(sketch->widthFunction(sketch->width,sketch->x,sketch->y,50,550)) );
            				}
HXDLIN(  55)				if (::hx::IsNotNull( sketch->colourFunction )) {
HXLINE(  55)					sketch->pen->currentColor = ( (int)(sketch->colourFunction(sketch->pen->currentColor,sketch->x,sketch->y,50,550)) );
            				}
HXDLIN(  55)				sketch->line(50,550);
HXDLIN(  55)				int l = sketch->points->length;
HXDLIN(  55)				::Array< Float > p = sketch->points->__get((l - 1)).StaticCast< ::Array< Float > >();
HXDLIN(  55)				int l2 = p->length;
HXDLIN(  55)				p[l2] = ( (Float)(50) );
HXDLIN(  55)				p[(l2 + 1)] = ( (Float)(550) );
HXDLIN(  55)				{
HXLINE(  55)					 ::Dynamic d = sketch->dim->__get((sketch->dim->length - 1));
HXDLIN(  55)					if (::hx::IsLess( 50,d->__Field(HX_("minX",86,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  55)						d->__SetField(HX_("minX",86,4e,5c,48),50,::hx::paccDynamic);
            					}
HXDLIN(  55)					if (::hx::IsGreater( 50,d->__Field(HX_("maxX",34,45,56,48),::hx::paccDynamic) )) {
HXLINE(  55)						d->__SetField(HX_("maxX",34,45,56,48),50,::hx::paccDynamic);
            					}
HXDLIN(  55)					if (::hx::IsLess( 550,d->__Field(HX_("minY",87,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  55)						d->__SetField(HX_("minY",87,4e,5c,48),550,::hx::paccDynamic);
            					}
HXDLIN(  55)					if (::hx::IsGreater( 550,d->__Field(HX_("maxY",35,45,56,48),::hx::paccDynamic) )) {
HXLINE(  55)						d->__SetField(HX_("maxY",35,45,56,48),550,::hx::paccDynamic);
            					}
            				}
HXDLIN(  55)				sketch->x = ( (Float)(50) );
HXDLIN(  55)				sketch->y = ( (Float)(550) );
            			}
            		}
HXLINE(  56)		{
HXLINE(  56)			bool repeat3;
HXDLIN(  56)			if ((sketch->x == 50)) {
HXLINE(  56)				repeat3 = (sketch->y == 50);
            			}
            			else {
HXLINE(  56)				repeat3 = false;
            			}
HXDLIN(  56)			if (!(repeat3)) {
HXLINE(  56)				if (::hx::IsNotNull( sketch->widthFunction )) {
HXLINE(  56)					sketch->width = ( (Float)(sketch->widthFunction(sketch->width,sketch->x,sketch->y,50,50)) );
            				}
HXDLIN(  56)				if (::hx::IsNotNull( sketch->colourFunction )) {
HXLINE(  56)					sketch->pen->currentColor = ( (int)(sketch->colourFunction(sketch->pen->currentColor,sketch->x,sketch->y,50,50)) );
            				}
HXDLIN(  56)				sketch->line(50,50);
HXDLIN(  56)				int l = sketch->points->length;
HXDLIN(  56)				::Array< Float > p = sketch->points->__get((l - 1)).StaticCast< ::Array< Float > >();
HXDLIN(  56)				int l2 = p->length;
HXDLIN(  56)				p[l2] = ( (Float)(50) );
HXDLIN(  56)				p[(l2 + 1)] = ( (Float)(50) );
HXDLIN(  56)				{
HXLINE(  56)					 ::Dynamic d = sketch->dim->__get((sketch->dim->length - 1));
HXDLIN(  56)					if (::hx::IsLess( 50,d->__Field(HX_("minX",86,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  56)						d->__SetField(HX_("minX",86,4e,5c,48),50,::hx::paccDynamic);
            					}
HXDLIN(  56)					if (::hx::IsGreater( 50,d->__Field(HX_("maxX",34,45,56,48),::hx::paccDynamic) )) {
HXLINE(  56)						d->__SetField(HX_("maxX",34,45,56,48),50,::hx::paccDynamic);
            					}
HXDLIN(  56)					if (::hx::IsLess( 50,d->__Field(HX_("minY",87,4e,5c,48),::hx::paccDynamic) )) {
HXLINE(  56)						d->__SetField(HX_("minY",87,4e,5c,48),50,::hx::paccDynamic);
            					}
HXDLIN(  56)					if (::hx::IsGreater( 50,d->__Field(HX_("maxY",35,45,56,48),::hx::paccDynamic) )) {
HXLINE(  56)						d->__SetField(HX_("maxY",35,45,56,48),50,::hx::paccDynamic);
            					}
            				}
HXDLIN(  56)				sketch->x = ( (Float)(50) );
HXDLIN(  56)				sketch->y = ( (Float)(50) );
            			}
            		}
HXLINE(  57)		Float end = ( (Float)(this->pen->drawType->__Field(HX_("get_pos",2b,26,ca,26),::hx::paccDynamic)()) );
HXLINE(  58)		{
HXLINE(  58)			 ::trilateral3::drawing::Pen _this6 = this->pen;
HXDLIN(  58)			_this6->drawType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(start);
HXDLIN(  58)			_this6->colorType->__Field(HX_("set_pos",37,b7,cb,19),::hx::paccDynamic)(start);
            		}
HXLINE(  59)		int numberTriangles = ::Std_obj::_hx_int((end - start));
HXLINE(  60)		{
HXLINE(  60)			 ::trilateral3::drawing::Pen _this7 = this->pen;
HXDLIN(  60)			int color2 = -16776961;
HXDLIN(  60)			if ((color2 == -1)) {
HXLINE(  60)				color2 = _this7->currentColor;
            			}
HXDLIN(  60)			_this7->colorType->__Field(HX_("colorTriangles",c8,da,ed,e6),::hx::paccDynamic)(color2,numberTriangles);
            		}
            	}


void TrilateralOpenFLTriangle_obj::renderDraw(){
            	HX_STACKFRAME(&_hx_pos_9a6637ac4db630ad_64_renderDraw)
            	}



::hx::ObjectPtr< TrilateralOpenFLTriangle_obj > TrilateralOpenFLTriangle_obj::__new() {
	::hx::ObjectPtr< TrilateralOpenFLTriangle_obj > __this = new TrilateralOpenFLTriangle_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TrilateralOpenFLTriangle_obj > TrilateralOpenFLTriangle_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TrilateralOpenFLTriangle_obj *__this = (TrilateralOpenFLTriangle_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TrilateralOpenFLTriangle_obj), true, "TrilateralOpenFLTriangle"));
	*(void **)__this = TrilateralOpenFLTriangle_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TrilateralOpenFLTriangle_obj::TrilateralOpenFLTriangle_obj()
{
}

::hx::Val TrilateralOpenFLTriangle_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderDraw") ) { return ::hx::Val( renderDraw_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TrilateralOpenFLTriangle_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TrilateralOpenFLTriangle_obj_sStaticStorageInfo = 0;
#endif

static ::String TrilateralOpenFLTriangle_obj_sMemberFields[] = {
	HX_("draw",04,2c,70,42),
	HX_("renderDraw",7a,26,7a,df),
	::String(null()) };

::hx::Class TrilateralOpenFLTriangle_obj::__mClass;

void TrilateralOpenFLTriangle_obj::__register()
{
	TrilateralOpenFLTriangle_obj _hx_dummy;
	TrilateralOpenFLTriangle_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TrilateralOpenFLTriangle",64,60,c5,11);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TrilateralOpenFLTriangle_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TrilateralOpenFLTriangle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TrilateralOpenFLTriangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TrilateralOpenFLTriangle_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

