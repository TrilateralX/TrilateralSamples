// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dsHelper_flat_io__Float32Flat_Float32Flat_Impl_
#include <dsHelper/flat/io/_Float32Flat/Float32Flat_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_19_readItem,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","readItem",0xecb79078,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.readItem","dsHelper/flat/io/Float32Flat.hx",19,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_31_writeItem,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","writeItem",0xef6699c3,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.writeItem","dsHelper/flat/io/Float32Flat.hx",31,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_36__new,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","_new",0x459a22d0,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_._new","dsHelper/flat/io/Float32Flat.hx",36,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_45_get_size,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","get_size",0x4b0e4d39,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.get_size","dsHelper/flat/io/Float32Flat.hx",45,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_49_set_size,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","set_size",0xf96ba6ad,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.set_size","dsHelper/flat/io/Float32Flat.hx",49,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_56_get_index,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","get_index",0xa2b0d79a,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.get_index","dsHelper/flat/io/Float32Flat.hx",56,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_59_set_index,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","set_index",0x8601c3a6,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.set_index","dsHelper/flat/io/Float32Flat.hx",59,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_66_get_pos,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","get_pos",0x0053e81c,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.get_pos","dsHelper/flat/io/Float32Flat.hx",66,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_69_set_pos,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","set_pos",0xf3557928,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.set_pos","dsHelper/flat/io/Float32Flat.hx",69,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_75_updateLen,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","updateLen",0x23d2097d,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.updateLen","dsHelper/flat/io/Float32Flat.hx",75,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_80_hasNext,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","hasNext",0xf1d0675e,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.hasNext","dsHelper/flat/io/Float32Flat.hx",80,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_82_next,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","next",0x4f7d9262,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.next","dsHelper/flat/io/Float32Flat.hx",82,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_88_increment,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","increment",0xd2f1e660,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.increment","dsHelper/flat/io/Float32Flat.hx",88,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_93_toArray,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","toArray",0xcb9d7c0f,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.toArray","dsHelper/flat/io/Float32Flat.hx",93,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_97_fromArray,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","fromArray",0x7b0b3800,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.fromArray","dsHelper/flat/io/Float32Flat.hx",97,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_103_clone,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","clone",0xed93c70e,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.clone","dsHelper/flat/io/Float32Flat.hx",103,0x3517e5af)
HX_LOCAL_STACK_FRAME(_hx_pos_bbba311f8878eef7_109_fill,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_","fill",0x4a36dbf2,"dsHelper.flat.io._Float32Flat.Float32Flat_Impl_.fill","dsHelper/flat/io/Float32Flat.hx",109,0x3517e5af)
namespace dsHelper{
namespace flat{
namespace io{
namespace _Float32Flat{

void Float32Flat_Impl__obj::__construct() { }

Dynamic Float32Flat_Impl__obj::__CreateEmpty() { return new Float32Flat_Impl__obj; }

void *Float32Flat_Impl__obj::_hx_vtable = 0;

Dynamic Float32Flat_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Float32Flat_Impl__obj > _hx_result = new Float32Flat_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Float32Flat_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x767b5cc3;
}

Float Float32Flat_Impl__obj::readItem( ::lime::utils::ArrayBufferView this1,int k){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_19_readItem)
HXDLIN(  19)		return  ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k + 2) * 4)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Float32Flat_Impl__obj,readItem,return )

Float Float32Flat_Impl__obj::writeItem( ::lime::utils::ArrayBufferView this1,int k,Float v){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_31_writeItem)
HXLINE(  32)		 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + ((k + 2) * 4)),v);
HXLINE(  33)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Float32Flat_Impl__obj,writeItem,return )

 ::lime::utils::ArrayBufferView Float32Flat_Impl__obj::_new(int len){
            	HX_GC_STACKFRAME(&_hx_pos_bbba311f8878eef7_36__new)
HXLINE(  38)		 ::Dynamic elements = (len + 2);
HXDLIN(  38)		 ::haxe::io::Bytes buffer = null();
HXDLIN(  38)		::cpp::VirtualArray array = null();
HXDLIN(  38)		 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(  38)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN(  38)		 ::Dynamic len1 = null();
HXDLIN(  38)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(  38)		if (::hx::IsNotNull( elements )) {
HXLINE(  38)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            		}
            		else {
HXLINE(  38)			if (::hx::IsNotNull( array )) {
HXLINE(  38)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  38)				_this->byteOffset = 0;
HXDLIN(  38)				_this->length = array->get_length();
HXDLIN(  38)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  38)				 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  38)				_this->buffer = this2;
HXDLIN(  38)				_this->copyFromArray(array,null());
HXDLIN(  38)				this1 = _this;
            			}
            			else {
HXLINE(  38)				if (::hx::IsNotNull( vector )) {
HXLINE(  38)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  38)					::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  38)					_this->byteOffset = 0;
HXDLIN(  38)					_this->length = array->get_length();
HXDLIN(  38)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  38)					 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  38)					_this->buffer = this2;
HXDLIN(  38)					_this->copyFromArray(array,null());
HXDLIN(  38)					this1 = _this;
            				}
            				else {
HXLINE(  38)					if (::hx::IsNotNull( view )) {
HXLINE(  38)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  38)						 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN(  38)						int srcLength = view->length;
HXDLIN(  38)						int srcByteOffset = view->byteOffset;
HXDLIN(  38)						int srcElementSize = view->bytesPerElement;
HXDLIN(  38)						int elementSize = _this->bytesPerElement;
HXDLIN(  38)						if ((view->type == _this->type)) {
HXLINE(  38)							int srcLength = srcData->length;
HXDLIN(  38)							int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  38)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  38)							_this->buffer = this1;
HXDLIN(  38)							_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            						}
            						else {
HXLINE(  38)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            						}
HXDLIN(  38)						_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  38)						_this->byteOffset = 0;
HXDLIN(  38)						_this->length = srcLength;
HXDLIN(  38)						this1 = _this;
            					}
            					else {
HXLINE(  38)						if (::hx::IsNotNull( buffer )) {
HXLINE(  38)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  38)							int in_byteOffset = 0;
HXDLIN(  38)							if ((in_byteOffset < 0)) {
HXLINE(  38)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN(  38)							if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE(  38)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN(  38)							int bufferByteLength = buffer->length;
HXDLIN(  38)							int elementSize = _this->bytesPerElement;
HXDLIN(  38)							int newByteLength = bufferByteLength;
HXDLIN(  38)							if (::hx::IsNull( len1 )) {
HXLINE(  38)								newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  38)								if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE(  38)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN(  38)								if ((newByteLength < 0)) {
HXLINE(  38)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
            							}
            							else {
HXLINE(  38)								newByteLength = (( (int)(len1) ) * _this->bytesPerElement);
HXDLIN(  38)								int newRange = (in_byteOffset + newByteLength);
HXDLIN(  38)								if ((newRange > bufferByteLength)) {
HXLINE(  38)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
            							}
HXDLIN(  38)							_this->buffer = buffer;
HXDLIN(  38)							_this->byteOffset = in_byteOffset;
HXDLIN(  38)							_this->byteLength = newByteLength;
HXDLIN(  38)							_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  38)							this1 = _this;
            						}
            						else {
HXLINE(  38)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            						}
            					}
            				}
            			}
            		}
HXLINE(  36)		 ::lime::utils::ArrayBufferView this2 = this1;
HXLINE(  39)		 ::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,((Float)0.));
HXLINE(  40)		 ::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + 4),((Float)0.));
HXLINE(  36)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,_new,return )

int Float32Flat_Impl__obj::get_size( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_45_get_size)
HXDLIN(  45)		return ::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,get_size,return )

int Float32Flat_Impl__obj::set_size( ::lime::utils::ArrayBufferView this1,int id){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_49_set_size)
HXLINE(  50)		{
HXLINE(  50)			Float pos_ = ( (Float)(id) );
HXDLIN(  50)			 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,pos_);
HXDLIN(  50)			Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  50)			if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXLINE(  50)				Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  50)				 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            			}
            		}
HXLINE(  51)		return id;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Float32Flat_Impl__obj,set_size,return )

int Float32Flat_Impl__obj::get_index( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_56_get_index)
HXDLIN(  56)		return ::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,get_index,return )

int Float32Flat_Impl__obj::set_index( ::lime::utils::ArrayBufferView this1,int id){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_59_set_index)
HXLINE(  60)		{
HXLINE(  60)			 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,id);
HXDLIN(  60)			Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  60)			if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXLINE(  60)				Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  60)				 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            			}
            		}
HXLINE(  61)		return id;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Float32Flat_Impl__obj,set_index,return )

Float Float32Flat_Impl__obj::get_pos( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_66_get_pos)
HXDLIN(  66)		return  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,get_pos,return )

Float Float32Flat_Impl__obj::set_pos( ::lime::utils::ArrayBufferView this1,Float pos_){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_69_set_pos)
HXLINE(  70)		 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,pos_);
HXLINE(  71)		Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  71)		if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXLINE(  71)			Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  71)			 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            		}
HXLINE(  72)		return pos_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Float32Flat_Impl__obj,set_pos,return )

void Float32Flat_Impl__obj::updateLen( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_75_updateLen)
HXDLIN(  75)		Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  75)		if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXLINE(  76)			Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  76)			 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,updateLen,(void))

bool Float32Flat_Impl__obj::hasNext( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_80_hasNext)
HXDLIN(  80)		Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  80)		return (_hx_tmp < ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,hasNext,return )

Float Float32Flat_Impl__obj::next( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_82_next)
HXLINE(  83)		{
HXLINE(  83)			Float pos_ = ( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset) + ((Float)1.));
HXDLIN(  83)			 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,pos_);
HXDLIN(  83)			Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  83)			if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXLINE(  83)				Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  83)				 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            			}
            		}
HXLINE(  84)		return  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,next,return )

Float Float32Flat_Impl__obj::increment( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_88_increment)
HXDLIN(  88)		{
HXDLIN(  88)			Float pos_ = ( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset) + ((Float)1.));
HXDLIN(  88)			 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,pos_);
HXDLIN(  88)			Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  88)			if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXDLIN(  88)				Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  88)				 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            			}
            		}
HXDLIN(  88)		return  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,increment,return )

 ::lime::utils::ArrayBufferView Float32Flat_Impl__obj::toArray( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_bbba311f8878eef7_93_toArray)
HXDLIN(  93)		 ::Dynamic end = (this1->length - 2);
HXDLIN(  93)		if (::hx::IsNull( end )) {
HXDLIN(  93)			end = this1->length;
            		}
HXDLIN(  93)		int len = (( (int)(end) ) - 2);
HXDLIN(  93)		int byte_offset = ((2 * this1->bytesPerElement) + this1->byteOffset);
HXDLIN(  93)		 ::lime::utils::ArrayBufferView view;
HXDLIN(  93)		switch((int)(this1->type)){
            			case (int)0: {
HXDLIN(  93)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("subarray on a blank ArrayBufferView",39,87,fd,19)));
            			}
            			break;
            			case (int)1: {
HXDLIN(  93)				 ::Dynamic elements = null();
HXDLIN(  93)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  93)				::cpp::VirtualArray array = null();
HXDLIN(  93)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  93)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  93)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  93)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  93)					byteoffset = 0;
            				}
HXDLIN(  93)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  93)				if (::hx::IsNotNull( elements )) {
HXDLIN(  93)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,1);
            				}
            				else {
HXDLIN(  93)					if (::hx::IsNotNull( array )) {
HXDLIN(  93)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN(  93)						_this->byteOffset = 0;
HXDLIN(  93)						_this->length = array->get_length();
HXDLIN(  93)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)						_this->buffer = this1;
HXDLIN(  93)						_this->copyFromArray(array,null());
HXDLIN(  93)						this2 = _this;
            					}
            					else {
HXDLIN(  93)						if (::hx::IsNotNull( vector )) {
HXDLIN(  93)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN(  93)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  93)							_this->byteOffset = 0;
HXDLIN(  93)							_this->length = array->get_length();
HXDLIN(  93)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)							_this->buffer = this1;
HXDLIN(  93)							_this->copyFromArray(array,null());
HXDLIN(  93)							this2 = _this;
            						}
            						else {
HXDLIN(  93)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  93)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN(  93)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  93)								int srcLength = view1->length;
HXDLIN(  93)								int srcByteOffset = view1->byteOffset;
HXDLIN(  93)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  93)								int elementSize = _this->bytesPerElement;
HXDLIN(  93)								if ((view1->type == _this->type)) {
HXDLIN(  93)									int srcLength = srcData->length;
HXDLIN(  93)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  93)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  93)									_this->buffer = this1;
HXDLIN(  93)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  93)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  93)								_this->byteOffset = 0;
HXDLIN(  93)								_this->length = srcLength;
HXDLIN(  93)								this2 = _this;
            							}
            							else {
HXDLIN(  93)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  93)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN(  93)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  93)									if ((in_byteOffset < 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									int bufferByteLength = buffer->length;
HXDLIN(  93)									int elementSize = _this->bytesPerElement;
HXDLIN(  93)									int newByteLength = bufferByteLength;
HXDLIN(  93)									if (::hx::IsNull( len )) {
HXDLIN(  93)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  93)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  93)										if ((newByteLength < 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  93)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  93)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  93)										if ((newRange > bufferByteLength)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  93)									_this->buffer = buffer;
HXDLIN(  93)									_this->byteOffset = in_byteOffset;
HXDLIN(  93)									_this->byteLength = newByteLength;
HXDLIN(  93)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  93)									this2 = _this;
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Int8Array",40,53,da,77)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  93)				view = this2;
            			}
            			break;
            			case (int)2: {
HXDLIN(  93)				 ::Dynamic elements = null();
HXDLIN(  93)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  93)				::cpp::VirtualArray array = null();
HXDLIN(  93)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  93)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  93)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  93)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  93)					byteoffset = 0;
            				}
HXDLIN(  93)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  93)				if (::hx::IsNotNull( elements )) {
HXDLIN(  93)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,2);
            				}
            				else {
HXDLIN(  93)					if (::hx::IsNotNull( array )) {
HXDLIN(  93)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN(  93)						_this->byteOffset = 0;
HXDLIN(  93)						_this->length = array->get_length();
HXDLIN(  93)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)						_this->buffer = this1;
HXDLIN(  93)						_this->copyFromArray(array,null());
HXDLIN(  93)						this2 = _this;
            					}
            					else {
HXDLIN(  93)						if (::hx::IsNotNull( vector )) {
HXDLIN(  93)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN(  93)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  93)							_this->byteOffset = 0;
HXDLIN(  93)							_this->length = array->get_length();
HXDLIN(  93)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)							_this->buffer = this1;
HXDLIN(  93)							_this->copyFromArray(array,null());
HXDLIN(  93)							this2 = _this;
            						}
            						else {
HXDLIN(  93)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  93)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN(  93)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  93)								int srcLength = view1->length;
HXDLIN(  93)								int srcByteOffset = view1->byteOffset;
HXDLIN(  93)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  93)								int elementSize = _this->bytesPerElement;
HXDLIN(  93)								if ((view1->type == _this->type)) {
HXDLIN(  93)									int srcLength = srcData->length;
HXDLIN(  93)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  93)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  93)									_this->buffer = this1;
HXDLIN(  93)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  93)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  93)								_this->byteOffset = 0;
HXDLIN(  93)								_this->length = srcLength;
HXDLIN(  93)								this2 = _this;
            							}
            							else {
HXDLIN(  93)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  93)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN(  93)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  93)									if ((in_byteOffset < 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									int bufferByteLength = buffer->length;
HXDLIN(  93)									int elementSize = _this->bytesPerElement;
HXDLIN(  93)									int newByteLength = bufferByteLength;
HXDLIN(  93)									if (::hx::IsNull( len )) {
HXDLIN(  93)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  93)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  93)										if ((newByteLength < 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  93)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  93)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  93)										if ((newRange > bufferByteLength)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  93)									_this->buffer = buffer;
HXDLIN(  93)									_this->byteOffset = in_byteOffset;
HXDLIN(  93)									_this->byteLength = newByteLength;
HXDLIN(  93)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  93)									this2 = _this;
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  93)				view = this2;
            			}
            			break;
            			case (int)3: {
HXDLIN(  93)				 ::Dynamic elements = null();
HXDLIN(  93)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  93)				::cpp::VirtualArray array = null();
HXDLIN(  93)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  93)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  93)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  93)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  93)					byteoffset = 0;
            				}
HXDLIN(  93)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  93)				if (::hx::IsNotNull( elements )) {
HXDLIN(  93)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,3);
            				}
            				else {
HXDLIN(  93)					if (::hx::IsNotNull( array )) {
HXDLIN(  93)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN(  93)						_this->byteOffset = 0;
HXDLIN(  93)						_this->length = array->get_length();
HXDLIN(  93)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)						_this->buffer = this1;
HXDLIN(  93)						_this->copyFromArray(array,null());
HXDLIN(  93)						this2 = _this;
            					}
            					else {
HXDLIN(  93)						if (::hx::IsNotNull( vector )) {
HXDLIN(  93)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN(  93)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  93)							_this->byteOffset = 0;
HXDLIN(  93)							_this->length = array->get_length();
HXDLIN(  93)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)							_this->buffer = this1;
HXDLIN(  93)							_this->copyFromArray(array,null());
HXDLIN(  93)							this2 = _this;
            						}
            						else {
HXDLIN(  93)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  93)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN(  93)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  93)								int srcLength = view1->length;
HXDLIN(  93)								int srcByteOffset = view1->byteOffset;
HXDLIN(  93)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  93)								int elementSize = _this->bytesPerElement;
HXDLIN(  93)								if ((view1->type == _this->type)) {
HXDLIN(  93)									int srcLength = srcData->length;
HXDLIN(  93)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  93)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  93)									_this->buffer = this1;
HXDLIN(  93)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  93)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  93)								_this->byteOffset = 0;
HXDLIN(  93)								_this->length = srcLength;
HXDLIN(  93)								this2 = _this;
            							}
            							else {
HXDLIN(  93)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  93)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN(  93)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  93)									if ((in_byteOffset < 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									int bufferByteLength = buffer->length;
HXDLIN(  93)									int elementSize = _this->bytesPerElement;
HXDLIN(  93)									int newByteLength = bufferByteLength;
HXDLIN(  93)									if (::hx::IsNull( len )) {
HXDLIN(  93)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  93)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  93)										if ((newByteLength < 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  93)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  93)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  93)										if ((newRange > bufferByteLength)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  93)									_this->buffer = buffer;
HXDLIN(  93)									_this->byteOffset = in_byteOffset;
HXDLIN(  93)									_this->byteLength = newByteLength;
HXDLIN(  93)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  93)									this2 = _this;
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  93)				view = this2;
            			}
            			break;
            			case (int)4: {
HXDLIN(  93)				 ::Dynamic elements = null();
HXDLIN(  93)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  93)				::cpp::VirtualArray array = null();
HXDLIN(  93)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  93)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  93)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  93)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  93)					byteoffset = 0;
            				}
HXDLIN(  93)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  93)				if (::hx::IsNotNull( elements )) {
HXDLIN(  93)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            				}
            				else {
HXDLIN(  93)					if (::hx::IsNotNull( array )) {
HXDLIN(  93)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(  93)						_this->byteOffset = 0;
HXDLIN(  93)						_this->length = array->get_length();
HXDLIN(  93)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)						_this->buffer = this1;
HXDLIN(  93)						_this->copyFromArray(array,null());
HXDLIN(  93)						this2 = _this;
            					}
            					else {
HXDLIN(  93)						if (::hx::IsNotNull( vector )) {
HXDLIN(  93)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(  93)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  93)							_this->byteOffset = 0;
HXDLIN(  93)							_this->length = array->get_length();
HXDLIN(  93)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)							_this->buffer = this1;
HXDLIN(  93)							_this->copyFromArray(array,null());
HXDLIN(  93)							this2 = _this;
            						}
            						else {
HXDLIN(  93)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  93)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(  93)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  93)								int srcLength = view1->length;
HXDLIN(  93)								int srcByteOffset = view1->byteOffset;
HXDLIN(  93)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  93)								int elementSize = _this->bytesPerElement;
HXDLIN(  93)								if ((view1->type == _this->type)) {
HXDLIN(  93)									int srcLength = srcData->length;
HXDLIN(  93)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  93)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  93)									_this->buffer = this1;
HXDLIN(  93)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  93)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  93)								_this->byteOffset = 0;
HXDLIN(  93)								_this->length = srcLength;
HXDLIN(  93)								this2 = _this;
            							}
            							else {
HXDLIN(  93)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  93)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(  93)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  93)									if ((in_byteOffset < 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									int bufferByteLength = buffer->length;
HXDLIN(  93)									int elementSize = _this->bytesPerElement;
HXDLIN(  93)									int newByteLength = bufferByteLength;
HXDLIN(  93)									if (::hx::IsNull( len )) {
HXDLIN(  93)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  93)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  93)										if ((newByteLength < 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  93)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  93)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  93)										if ((newRange > bufferByteLength)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  93)									_this->buffer = buffer;
HXDLIN(  93)									_this->byteOffset = in_byteOffset;
HXDLIN(  93)									_this->byteLength = newByteLength;
HXDLIN(  93)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  93)									this2 = _this;
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  93)				view = this2;
            			}
            			break;
            			case (int)5: {
HXDLIN(  93)				 ::Dynamic elements = null();
HXDLIN(  93)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  93)				::cpp::VirtualArray array = null();
HXDLIN(  93)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  93)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  93)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  93)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  93)					byteoffset = 0;
            				}
HXDLIN(  93)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  93)				if (::hx::IsNotNull( elements )) {
HXDLIN(  93)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,5);
            				}
            				else {
HXDLIN(  93)					if (::hx::IsNotNull( array )) {
HXDLIN(  93)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN(  93)						_this->byteOffset = 0;
HXDLIN(  93)						_this->length = array->get_length();
HXDLIN(  93)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)						_this->buffer = this1;
HXDLIN(  93)						_this->copyFromArray(array,null());
HXDLIN(  93)						this2 = _this;
            					}
            					else {
HXDLIN(  93)						if (::hx::IsNotNull( vector )) {
HXDLIN(  93)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN(  93)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  93)							_this->byteOffset = 0;
HXDLIN(  93)							_this->length = array->get_length();
HXDLIN(  93)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)							_this->buffer = this1;
HXDLIN(  93)							_this->copyFromArray(array,null());
HXDLIN(  93)							this2 = _this;
            						}
            						else {
HXDLIN(  93)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  93)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN(  93)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  93)								int srcLength = view1->length;
HXDLIN(  93)								int srcByteOffset = view1->byteOffset;
HXDLIN(  93)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  93)								int elementSize = _this->bytesPerElement;
HXDLIN(  93)								if ((view1->type == _this->type)) {
HXDLIN(  93)									int srcLength = srcData->length;
HXDLIN(  93)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  93)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  93)									_this->buffer = this1;
HXDLIN(  93)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  93)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  93)								_this->byteOffset = 0;
HXDLIN(  93)								_this->length = srcLength;
HXDLIN(  93)								this2 = _this;
            							}
            							else {
HXDLIN(  93)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  93)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN(  93)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  93)									if ((in_byteOffset < 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									int bufferByteLength = buffer->length;
HXDLIN(  93)									int elementSize = _this->bytesPerElement;
HXDLIN(  93)									int newByteLength = bufferByteLength;
HXDLIN(  93)									if (::hx::IsNull( len )) {
HXDLIN(  93)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  93)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  93)										if ((newByteLength < 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  93)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  93)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  93)										if ((newRange > bufferByteLength)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  93)									_this->buffer = buffer;
HXDLIN(  93)									_this->byteOffset = in_byteOffset;
HXDLIN(  93)									_this->byteLength = newByteLength;
HXDLIN(  93)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  93)									this2 = _this;
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  93)				view = this2;
            			}
            			break;
            			case (int)6: {
HXDLIN(  93)				 ::Dynamic elements = null();
HXDLIN(  93)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  93)				::cpp::VirtualArray array = null();
HXDLIN(  93)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  93)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  93)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  93)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  93)					byteoffset = 0;
            				}
HXDLIN(  93)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  93)				if (::hx::IsNotNull( elements )) {
HXDLIN(  93)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,6);
            				}
            				else {
HXDLIN(  93)					if (::hx::IsNotNull( array )) {
HXDLIN(  93)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN(  93)						_this->byteOffset = 0;
HXDLIN(  93)						_this->length = array->get_length();
HXDLIN(  93)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)						_this->buffer = this1;
HXDLIN(  93)						_this->copyFromArray(array,null());
HXDLIN(  93)						this2 = _this;
            					}
            					else {
HXDLIN(  93)						if (::hx::IsNotNull( vector )) {
HXDLIN(  93)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN(  93)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  93)							_this->byteOffset = 0;
HXDLIN(  93)							_this->length = array->get_length();
HXDLIN(  93)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)							_this->buffer = this1;
HXDLIN(  93)							_this->copyFromArray(array,null());
HXDLIN(  93)							this2 = _this;
            						}
            						else {
HXDLIN(  93)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  93)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN(  93)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  93)								int srcLength = view1->length;
HXDLIN(  93)								int srcByteOffset = view1->byteOffset;
HXDLIN(  93)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  93)								int elementSize = _this->bytesPerElement;
HXDLIN(  93)								if ((view1->type == _this->type)) {
HXDLIN(  93)									int srcLength = srcData->length;
HXDLIN(  93)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  93)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  93)									_this->buffer = this1;
HXDLIN(  93)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  93)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  93)								_this->byteOffset = 0;
HXDLIN(  93)								_this->length = srcLength;
HXDLIN(  93)								this2 = _this;
            							}
            							else {
HXDLIN(  93)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  93)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN(  93)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  93)									if ((in_byteOffset < 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									int bufferByteLength = buffer->length;
HXDLIN(  93)									int elementSize = _this->bytesPerElement;
HXDLIN(  93)									int newByteLength = bufferByteLength;
HXDLIN(  93)									if (::hx::IsNull( len )) {
HXDLIN(  93)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  93)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  93)										if ((newByteLength < 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  93)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  93)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  93)										if ((newRange > bufferByteLength)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  93)									_this->buffer = buffer;
HXDLIN(  93)									_this->byteOffset = in_byteOffset;
HXDLIN(  93)									_this->byteLength = newByteLength;
HXDLIN(  93)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  93)									this2 = _this;
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  93)				view = this2;
            			}
            			break;
            			case (int)7: {
HXDLIN(  93)				 ::Dynamic elements = null();
HXDLIN(  93)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  93)				::cpp::VirtualArray array = null();
HXDLIN(  93)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  93)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  93)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  93)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  93)					byteoffset = 0;
            				}
HXDLIN(  93)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  93)				if (::hx::IsNotNull( elements )) {
HXDLIN(  93)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,7);
            				}
            				else {
HXDLIN(  93)					if (::hx::IsNotNull( array )) {
HXDLIN(  93)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN(  93)						_this->byteOffset = 0;
HXDLIN(  93)						_this->length = array->get_length();
HXDLIN(  93)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)						_this->buffer = this1;
HXDLIN(  93)						_this->copyFromArray(array,null());
HXDLIN(  93)						this2 = _this;
            					}
            					else {
HXDLIN(  93)						if (::hx::IsNotNull( vector )) {
HXDLIN(  93)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN(  93)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  93)							_this->byteOffset = 0;
HXDLIN(  93)							_this->length = array->get_length();
HXDLIN(  93)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)							_this->buffer = this1;
HXDLIN(  93)							_this->copyFromArray(array,null());
HXDLIN(  93)							this2 = _this;
            						}
            						else {
HXDLIN(  93)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  93)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN(  93)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  93)								int srcLength = view1->length;
HXDLIN(  93)								int srcByteOffset = view1->byteOffset;
HXDLIN(  93)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  93)								int elementSize = _this->bytesPerElement;
HXDLIN(  93)								if ((view1->type == _this->type)) {
HXDLIN(  93)									int srcLength = srcData->length;
HXDLIN(  93)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  93)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  93)									_this->buffer = this1;
HXDLIN(  93)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  93)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  93)								_this->byteOffset = 0;
HXDLIN(  93)								_this->length = srcLength;
HXDLIN(  93)								this2 = _this;
            							}
            							else {
HXDLIN(  93)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  93)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN(  93)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  93)									if ((in_byteOffset < 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									int bufferByteLength = buffer->length;
HXDLIN(  93)									int elementSize = _this->bytesPerElement;
HXDLIN(  93)									int newByteLength = bufferByteLength;
HXDLIN(  93)									if (::hx::IsNull( len )) {
HXDLIN(  93)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  93)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  93)										if ((newByteLength < 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  93)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  93)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  93)										if ((newRange > bufferByteLength)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  93)									_this->buffer = buffer;
HXDLIN(  93)									_this->byteOffset = in_byteOffset;
HXDLIN(  93)									_this->byteLength = newByteLength;
HXDLIN(  93)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  93)									this2 = _this;
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  93)				view = this2;
            			}
            			break;
            			case (int)8: {
HXDLIN(  93)				 ::Dynamic elements = null();
HXDLIN(  93)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  93)				::cpp::VirtualArray array = null();
HXDLIN(  93)				 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(  93)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  93)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  93)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  93)					byteoffset = 0;
            				}
HXDLIN(  93)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  93)				if (::hx::IsNotNull( elements )) {
HXDLIN(  93)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            				}
            				else {
HXDLIN(  93)					if (::hx::IsNotNull( array )) {
HXDLIN(  93)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  93)						_this->byteOffset = 0;
HXDLIN(  93)						_this->length = array->get_length();
HXDLIN(  93)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)						_this->buffer = this1;
HXDLIN(  93)						_this->copyFromArray(array,null());
HXDLIN(  93)						this2 = _this;
            					}
            					else {
HXDLIN(  93)						if (::hx::IsNotNull( vector )) {
HXDLIN(  93)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  93)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  93)							_this->byteOffset = 0;
HXDLIN(  93)							_this->length = array->get_length();
HXDLIN(  93)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)							_this->buffer = this1;
HXDLIN(  93)							_this->copyFromArray(array,null());
HXDLIN(  93)							this2 = _this;
            						}
            						else {
HXDLIN(  93)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  93)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  93)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  93)								int srcLength = view1->length;
HXDLIN(  93)								int srcByteOffset = view1->byteOffset;
HXDLIN(  93)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  93)								int elementSize = _this->bytesPerElement;
HXDLIN(  93)								if ((view1->type == _this->type)) {
HXDLIN(  93)									int srcLength = srcData->length;
HXDLIN(  93)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  93)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  93)									_this->buffer = this1;
HXDLIN(  93)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  93)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  93)								_this->byteOffset = 0;
HXDLIN(  93)								_this->length = srcLength;
HXDLIN(  93)								this2 = _this;
            							}
            							else {
HXDLIN(  93)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  93)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  93)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  93)									if ((in_byteOffset < 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									int bufferByteLength = buffer->length;
HXDLIN(  93)									int elementSize = _this->bytesPerElement;
HXDLIN(  93)									int newByteLength = bufferByteLength;
HXDLIN(  93)									if (::hx::IsNull( len )) {
HXDLIN(  93)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  93)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  93)										if ((newByteLength < 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  93)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  93)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  93)										if ((newRange > bufferByteLength)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  93)									_this->buffer = buffer;
HXDLIN(  93)									_this->byteOffset = in_byteOffset;
HXDLIN(  93)									_this->byteLength = newByteLength;
HXDLIN(  93)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  93)									this2 = _this;
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  93)				view = this2;
            			}
            			break;
            			case (int)9: {
HXDLIN(  93)				 ::Dynamic elements = null();
HXDLIN(  93)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  93)				::cpp::VirtualArray array = null();
HXDLIN(  93)				 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(  93)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  93)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  93)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  93)					byteoffset = 0;
            				}
HXDLIN(  93)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  93)				if (::hx::IsNotNull( elements )) {
HXDLIN(  93)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,9);
            				}
            				else {
HXDLIN(  93)					if (::hx::IsNotNull( array )) {
HXDLIN(  93)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN(  93)						_this->byteOffset = 0;
HXDLIN(  93)						_this->length = array->get_length();
HXDLIN(  93)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)						_this->buffer = this1;
HXDLIN(  93)						_this->copyFromArray(array,null());
HXDLIN(  93)						this2 = _this;
            					}
            					else {
HXDLIN(  93)						if (::hx::IsNotNull( vector )) {
HXDLIN(  93)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN(  93)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  93)							_this->byteOffset = 0;
HXDLIN(  93)							_this->length = array->get_length();
HXDLIN(  93)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  93)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  93)							_this->buffer = this1;
HXDLIN(  93)							_this->copyFromArray(array,null());
HXDLIN(  93)							this2 = _this;
            						}
            						else {
HXDLIN(  93)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  93)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN(  93)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  93)								int srcLength = view1->length;
HXDLIN(  93)								int srcByteOffset = view1->byteOffset;
HXDLIN(  93)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  93)								int elementSize = _this->bytesPerElement;
HXDLIN(  93)								if ((view1->type == _this->type)) {
HXDLIN(  93)									int srcLength = srcData->length;
HXDLIN(  93)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  93)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  93)									_this->buffer = this1;
HXDLIN(  93)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  93)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  93)								_this->byteOffset = 0;
HXDLIN(  93)								_this->length = srcLength;
HXDLIN(  93)								this2 = _this;
            							}
            							else {
HXDLIN(  93)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  93)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN(  93)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  93)									if ((in_byteOffset < 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  93)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  93)									int bufferByteLength = buffer->length;
HXDLIN(  93)									int elementSize = _this->bytesPerElement;
HXDLIN(  93)									int newByteLength = bufferByteLength;
HXDLIN(  93)									if (::hx::IsNull( len )) {
HXDLIN(  93)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  93)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  93)										if ((newByteLength < 0)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  93)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  93)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  93)										if ((newRange > bufferByteLength)) {
HXDLIN(  93)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  93)									_this->buffer = buffer;
HXDLIN(  93)									_this->byteOffset = in_byteOffset;
HXDLIN(  93)									_this->byteLength = newByteLength;
HXDLIN(  93)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  93)									this2 = _this;
            								}
            								else {
HXDLIN(  93)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  93)				view = this2;
            			}
            			break;
            		}
HXDLIN(  93)		return view;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,toArray,return )

 ::lime::utils::ArrayBufferView Float32Flat_Impl__obj::fromArray( ::lime::utils::ArrayBufferView arr){
            	HX_GC_STACKFRAME(&_hx_pos_bbba311f8878eef7_97_fromArray)
HXLINE(  98)		 ::Dynamic elements = (arr->length + 2);
HXDLIN(  98)		 ::haxe::io::Bytes buffer = null();
HXDLIN(  98)		::cpp::VirtualArray array = null();
HXDLIN(  98)		 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(  98)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN(  98)		 ::Dynamic len = null();
HXDLIN(  98)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(  98)		if (::hx::IsNotNull( elements )) {
HXLINE(  98)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            		}
            		else {
HXLINE(  98)			if (::hx::IsNotNull( array )) {
HXLINE(  98)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  98)				_this->byteOffset = 0;
HXDLIN(  98)				_this->length = array->get_length();
HXDLIN(  98)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  98)				 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  98)				_this->buffer = this2;
HXDLIN(  98)				_this->copyFromArray(array,null());
HXDLIN(  98)				this1 = _this;
            			}
            			else {
HXLINE(  98)				if (::hx::IsNotNull( vector )) {
HXLINE(  98)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  98)					::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  98)					_this->byteOffset = 0;
HXDLIN(  98)					_this->length = array->get_length();
HXDLIN(  98)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  98)					 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  98)					_this->buffer = this2;
HXDLIN(  98)					_this->copyFromArray(array,null());
HXDLIN(  98)					this1 = _this;
            				}
            				else {
HXLINE(  98)					if (::hx::IsNotNull( view )) {
HXLINE(  98)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  98)						 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN(  98)						int srcLength = view->length;
HXDLIN(  98)						int srcByteOffset = view->byteOffset;
HXDLIN(  98)						int srcElementSize = view->bytesPerElement;
HXDLIN(  98)						int elementSize = _this->bytesPerElement;
HXDLIN(  98)						if ((view->type == _this->type)) {
HXLINE(  98)							int srcLength = srcData->length;
HXDLIN(  98)							int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  98)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  98)							_this->buffer = this1;
HXDLIN(  98)							_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            						}
            						else {
HXLINE(  98)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            						}
HXDLIN(  98)						_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  98)						_this->byteOffset = 0;
HXDLIN(  98)						_this->length = srcLength;
HXDLIN(  98)						this1 = _this;
            					}
            					else {
HXLINE(  98)						if (::hx::IsNotNull( buffer )) {
HXLINE(  98)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  98)							int in_byteOffset = 0;
HXDLIN(  98)							if ((in_byteOffset < 0)) {
HXLINE(  98)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN(  98)							if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE(  98)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN(  98)							int bufferByteLength = buffer->length;
HXDLIN(  98)							int elementSize = _this->bytesPerElement;
HXDLIN(  98)							int newByteLength = bufferByteLength;
HXDLIN(  98)							if (::hx::IsNull( len )) {
HXLINE(  98)								newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  98)								if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE(  98)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN(  98)								if ((newByteLength < 0)) {
HXLINE(  98)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
            							}
            							else {
HXLINE(  98)								newByteLength = (( (int)(len) ) * _this->bytesPerElement);
HXDLIN(  98)								int newRange = (in_byteOffset + newByteLength);
HXDLIN(  98)								if ((newRange > bufferByteLength)) {
HXLINE(  98)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
            							}
HXDLIN(  98)							_this->buffer = buffer;
HXDLIN(  98)							_this->byteOffset = in_byteOffset;
HXDLIN(  98)							_this->byteLength = newByteLength;
HXDLIN(  98)							_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  98)							this1 = _this;
            						}
            						else {
HXLINE(  98)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            						}
            					}
            				}
            			}
            		}
HXDLIN(  98)		 ::lime::utils::ArrayBufferView this2 = this1;
HXDLIN(  98)		 ::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,((Float)0.));
HXDLIN(  98)		 ::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + 4),((Float)0.));
HXDLIN(  98)		 ::lime::utils::ArrayBufferView flat = this2;
HXLINE(  99)		{
HXLINE(  99)			int l = arr->length;
HXDLIN(  99)			{
HXLINE(  99)				int _g = 0;
HXDLIN(  99)				int _g1 = l;
HXDLIN(  99)				while((_g < _g1)){
HXLINE(  99)					_g = (_g + 1);
HXDLIN(  99)					int i = (_g - 1);
HXDLIN(  99)					{
HXLINE(  99)						Float val =  ::__hxcpp_memory_get_float(arr->buffer->b,(arr->byteOffset + (i * 4)));
HXDLIN(  99)						 ::__hxcpp_memory_set_float(flat->buffer->b,(flat->byteOffset + ((i + 2) * 4)),val);
            					}
            				}
            			}
HXDLIN(  99)			 ::__hxcpp_memory_set_float(flat->buffer->b,flat->byteOffset,0);
HXDLIN(  99)			 ::__hxcpp_memory_set_float(flat->buffer->b,(flat->byteOffset + 4),l);
            		}
HXLINE( 100)		return flat;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,fromArray,return )

 ::lime::utils::ArrayBufferView Float32Flat_Impl__obj::clone( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_bbba311f8878eef7_103_clone)
HXLINE( 104)		 ::Dynamic elements = ((this1->length - 2) + 2);
HXDLIN( 104)		 ::haxe::io::Bytes buffer = null();
HXDLIN( 104)		::cpp::VirtualArray array = null();
HXDLIN( 104)		 ::openfl::_Vector::FloatVector vector = null();
HXDLIN( 104)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 104)		 ::Dynamic len = null();
HXDLIN( 104)		 ::lime::utils::ArrayBufferView this2;
HXDLIN( 104)		if (::hx::IsNotNull( elements )) {
HXLINE( 104)			this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            		}
            		else {
HXLINE( 104)			if (::hx::IsNotNull( array )) {
HXLINE( 104)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 104)				_this->byteOffset = 0;
HXDLIN( 104)				_this->length = array->get_length();
HXDLIN( 104)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 104)				 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 104)				_this->buffer = this1;
HXDLIN( 104)				_this->copyFromArray(array,null());
HXDLIN( 104)				this2 = _this;
            			}
            			else {
HXLINE( 104)				if (::hx::IsNotNull( vector )) {
HXLINE( 104)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 104)					::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 104)					_this->byteOffset = 0;
HXDLIN( 104)					_this->length = array->get_length();
HXDLIN( 104)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 104)					 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 104)					_this->buffer = this1;
HXDLIN( 104)					_this->copyFromArray(array,null());
HXDLIN( 104)					this2 = _this;
            				}
            				else {
HXLINE( 104)					if (::hx::IsNotNull( view )) {
HXLINE( 104)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 104)						 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 104)						int srcLength = view->length;
HXDLIN( 104)						int srcByteOffset = view->byteOffset;
HXDLIN( 104)						int srcElementSize = view->bytesPerElement;
HXDLIN( 104)						int elementSize = _this->bytesPerElement;
HXDLIN( 104)						if ((view->type == _this->type)) {
HXLINE( 104)							int srcLength = srcData->length;
HXDLIN( 104)							int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 104)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 104)							_this->buffer = this1;
HXDLIN( 104)							_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            						}
            						else {
HXLINE( 104)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            						}
HXDLIN( 104)						_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 104)						_this->byteOffset = 0;
HXDLIN( 104)						_this->length = srcLength;
HXDLIN( 104)						this2 = _this;
            					}
            					else {
HXLINE( 104)						if (::hx::IsNotNull( buffer )) {
HXLINE( 104)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 104)							int in_byteOffset = 0;
HXDLIN( 104)							if ((in_byteOffset < 0)) {
HXLINE( 104)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN( 104)							if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 104)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN( 104)							int bufferByteLength = buffer->length;
HXDLIN( 104)							int elementSize = _this->bytesPerElement;
HXDLIN( 104)							int newByteLength = bufferByteLength;
HXDLIN( 104)							if (::hx::IsNull( len )) {
HXLINE( 104)								newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 104)								if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 104)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 104)								if ((newByteLength < 0)) {
HXLINE( 104)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
            							}
            							else {
HXLINE( 104)								newByteLength = (( (int)(len) ) * _this->bytesPerElement);
HXDLIN( 104)								int newRange = (in_byteOffset + newByteLength);
HXDLIN( 104)								if ((newRange > bufferByteLength)) {
HXLINE( 104)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
            							}
HXDLIN( 104)							_this->buffer = buffer;
HXDLIN( 104)							_this->byteOffset = in_byteOffset;
HXDLIN( 104)							_this->byteLength = newByteLength;
HXDLIN( 104)							_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 104)							this2 = _this;
            						}
            						else {
HXLINE( 104)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 104)		 ::lime::utils::ArrayBufferView this3 = this2;
HXDLIN( 104)		 ::__hxcpp_memory_set_float(this3->buffer->b,this3->byteOffset,((Float)0.));
HXDLIN( 104)		 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 4),((Float)0.));
HXDLIN( 104)		 ::lime::utils::ArrayBufferView flat = this3;
HXLINE( 105)		{
HXLINE( 105)			 ::Dynamic end = (this1->length - 2);
HXDLIN( 105)			if (::hx::IsNull( end )) {
HXLINE( 105)				end = this1->length;
            			}
HXDLIN( 105)			int len1 = (( (int)(end) ) - 2);
HXDLIN( 105)			int byte_offset = ((2 * this1->bytesPerElement) + this1->byteOffset);
HXDLIN( 105)			 ::lime::utils::ArrayBufferView view1;
HXDLIN( 105)			switch((int)(this1->type)){
            				case (int)0: {
HXLINE( 105)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("subarray on a blank ArrayBufferView",39,87,fd,19)));
            				}
            				break;
            				case (int)1: {
HXLINE( 105)					 ::Dynamic elements = null();
HXDLIN( 105)					 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 105)					::cpp::VirtualArray array = null();
HXDLIN( 105)					 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 105)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 105)					 ::Dynamic byteoffset = byte_offset;
HXDLIN( 105)					if (::hx::IsNull( byteoffset )) {
HXLINE( 105)						byteoffset = 0;
            					}
HXDLIN( 105)					 ::lime::utils::ArrayBufferView this2;
HXDLIN( 105)					if (::hx::IsNotNull( elements )) {
HXLINE( 105)						this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,1);
            					}
            					else {
HXLINE( 105)						if (::hx::IsNotNull( array )) {
HXLINE( 105)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 105)							_this->byteOffset = 0;
HXDLIN( 105)							_this->length = array->get_length();
HXDLIN( 105)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)							_this->buffer = this1;
HXDLIN( 105)							_this->copyFromArray(array,null());
HXDLIN( 105)							this2 = _this;
            						}
            						else {
HXLINE( 105)							if (::hx::IsNotNull( vector )) {
HXLINE( 105)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 105)								::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 105)								_this->byteOffset = 0;
HXDLIN( 105)								_this->length = array->get_length();
HXDLIN( 105)								_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)								_this->buffer = this1;
HXDLIN( 105)								_this->copyFromArray(array,null());
HXDLIN( 105)								this2 = _this;
            							}
            							else {
HXLINE( 105)								if (::hx::IsNotNull( view )) {
HXLINE( 105)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 105)									 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 105)									int srcLength = view->length;
HXDLIN( 105)									int srcByteOffset = view->byteOffset;
HXDLIN( 105)									int srcElementSize = view->bytesPerElement;
HXDLIN( 105)									int elementSize = _this->bytesPerElement;
HXDLIN( 105)									if ((view->type == _this->type)) {
HXLINE( 105)										int srcLength = srcData->length;
HXDLIN( 105)										int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 105)										 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 105)										_this->buffer = this1;
HXDLIN( 105)										_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            									}
HXDLIN( 105)									_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 105)									_this->byteOffset = 0;
HXDLIN( 105)									_this->length = srcLength;
HXDLIN( 105)									this2 = _this;
            								}
            								else {
HXLINE( 105)									if (::hx::IsNotNull( buffer )) {
HXLINE( 105)										 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 105)										int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 105)										if ((in_byteOffset < 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										int bufferByteLength = buffer->length;
HXDLIN( 105)										int elementSize = _this->bytesPerElement;
HXDLIN( 105)										int newByteLength = bufferByteLength;
HXDLIN( 105)										if (::hx::IsNull( len1 )) {
HXLINE( 105)											newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 105)											if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
HXDLIN( 105)											if ((newByteLength < 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
            										else {
HXLINE( 105)											newByteLength = (len1 * _this->bytesPerElement);
HXDLIN( 105)											int newRange = (in_byteOffset + newByteLength);
HXDLIN( 105)											if ((newRange > bufferByteLength)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
HXDLIN( 105)										_this->buffer = buffer;
HXDLIN( 105)										_this->byteOffset = in_byteOffset;
HXDLIN( 105)										_this->byteLength = newByteLength;
HXDLIN( 105)										_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 105)										this2 = _this;
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Int8Array",40,53,da,77)));
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					view1 = this2;
            				}
            				break;
            				case (int)2: {
HXLINE( 105)					 ::Dynamic elements = null();
HXDLIN( 105)					 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 105)					::cpp::VirtualArray array = null();
HXDLIN( 105)					 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 105)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 105)					 ::Dynamic byteoffset = byte_offset;
HXDLIN( 105)					if (::hx::IsNull( byteoffset )) {
HXLINE( 105)						byteoffset = 0;
            					}
HXDLIN( 105)					 ::lime::utils::ArrayBufferView this2;
HXDLIN( 105)					if (::hx::IsNotNull( elements )) {
HXLINE( 105)						this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,2);
            					}
            					else {
HXLINE( 105)						if (::hx::IsNotNull( array )) {
HXLINE( 105)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 105)							_this->byteOffset = 0;
HXDLIN( 105)							_this->length = array->get_length();
HXDLIN( 105)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)							_this->buffer = this1;
HXDLIN( 105)							_this->copyFromArray(array,null());
HXDLIN( 105)							this2 = _this;
            						}
            						else {
HXLINE( 105)							if (::hx::IsNotNull( vector )) {
HXLINE( 105)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 105)								::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 105)								_this->byteOffset = 0;
HXDLIN( 105)								_this->length = array->get_length();
HXDLIN( 105)								_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)								_this->buffer = this1;
HXDLIN( 105)								_this->copyFromArray(array,null());
HXDLIN( 105)								this2 = _this;
            							}
            							else {
HXLINE( 105)								if (::hx::IsNotNull( view )) {
HXLINE( 105)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 105)									 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 105)									int srcLength = view->length;
HXDLIN( 105)									int srcByteOffset = view->byteOffset;
HXDLIN( 105)									int srcElementSize = view->bytesPerElement;
HXDLIN( 105)									int elementSize = _this->bytesPerElement;
HXDLIN( 105)									if ((view->type == _this->type)) {
HXLINE( 105)										int srcLength = srcData->length;
HXDLIN( 105)										int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 105)										 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 105)										_this->buffer = this1;
HXDLIN( 105)										_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            									}
HXDLIN( 105)									_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 105)									_this->byteOffset = 0;
HXDLIN( 105)									_this->length = srcLength;
HXDLIN( 105)									this2 = _this;
            								}
            								else {
HXLINE( 105)									if (::hx::IsNotNull( buffer )) {
HXLINE( 105)										 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 105)										int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 105)										if ((in_byteOffset < 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										int bufferByteLength = buffer->length;
HXDLIN( 105)										int elementSize = _this->bytesPerElement;
HXDLIN( 105)										int newByteLength = bufferByteLength;
HXDLIN( 105)										if (::hx::IsNull( len1 )) {
HXLINE( 105)											newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 105)											if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
HXDLIN( 105)											if ((newByteLength < 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
            										else {
HXLINE( 105)											newByteLength = (len1 * _this->bytesPerElement);
HXDLIN( 105)											int newRange = (in_byteOffset + newByteLength);
HXDLIN( 105)											if ((newRange > bufferByteLength)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
HXDLIN( 105)										_this->buffer = buffer;
HXDLIN( 105)										_this->byteOffset = in_byteOffset;
HXDLIN( 105)										_this->byteLength = newByteLength;
HXDLIN( 105)										_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 105)										this2 = _this;
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7)));
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					view1 = this2;
            				}
            				break;
            				case (int)3: {
HXLINE( 105)					 ::Dynamic elements = null();
HXDLIN( 105)					 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 105)					::cpp::VirtualArray array = null();
HXDLIN( 105)					 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 105)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 105)					 ::Dynamic byteoffset = byte_offset;
HXDLIN( 105)					if (::hx::IsNull( byteoffset )) {
HXLINE( 105)						byteoffset = 0;
            					}
HXDLIN( 105)					 ::lime::utils::ArrayBufferView this2;
HXDLIN( 105)					if (::hx::IsNotNull( elements )) {
HXLINE( 105)						this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,3);
            					}
            					else {
HXLINE( 105)						if (::hx::IsNotNull( array )) {
HXLINE( 105)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 105)							_this->byteOffset = 0;
HXDLIN( 105)							_this->length = array->get_length();
HXDLIN( 105)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)							_this->buffer = this1;
HXDLIN( 105)							_this->copyFromArray(array,null());
HXDLIN( 105)							this2 = _this;
            						}
            						else {
HXLINE( 105)							if (::hx::IsNotNull( vector )) {
HXLINE( 105)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 105)								::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 105)								_this->byteOffset = 0;
HXDLIN( 105)								_this->length = array->get_length();
HXDLIN( 105)								_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)								_this->buffer = this1;
HXDLIN( 105)								_this->copyFromArray(array,null());
HXDLIN( 105)								this2 = _this;
            							}
            							else {
HXLINE( 105)								if (::hx::IsNotNull( view )) {
HXLINE( 105)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 105)									 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 105)									int srcLength = view->length;
HXDLIN( 105)									int srcByteOffset = view->byteOffset;
HXDLIN( 105)									int srcElementSize = view->bytesPerElement;
HXDLIN( 105)									int elementSize = _this->bytesPerElement;
HXDLIN( 105)									if ((view->type == _this->type)) {
HXLINE( 105)										int srcLength = srcData->length;
HXDLIN( 105)										int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 105)										 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 105)										_this->buffer = this1;
HXDLIN( 105)										_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            									}
HXDLIN( 105)									_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 105)									_this->byteOffset = 0;
HXDLIN( 105)									_this->length = srcLength;
HXDLIN( 105)									this2 = _this;
            								}
            								else {
HXLINE( 105)									if (::hx::IsNotNull( buffer )) {
HXLINE( 105)										 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 105)										int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 105)										if ((in_byteOffset < 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										int bufferByteLength = buffer->length;
HXDLIN( 105)										int elementSize = _this->bytesPerElement;
HXDLIN( 105)										int newByteLength = bufferByteLength;
HXDLIN( 105)										if (::hx::IsNull( len1 )) {
HXLINE( 105)											newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 105)											if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
HXDLIN( 105)											if ((newByteLength < 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
            										else {
HXLINE( 105)											newByteLength = (len1 * _this->bytesPerElement);
HXDLIN( 105)											int newRange = (in_byteOffset + newByteLength);
HXDLIN( 105)											if ((newRange > bufferByteLength)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
HXDLIN( 105)										_this->buffer = buffer;
HXDLIN( 105)										_this->byteOffset = in_byteOffset;
HXDLIN( 105)										_this->byteLength = newByteLength;
HXDLIN( 105)										_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 105)										this2 = _this;
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61)));
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					view1 = this2;
            				}
            				break;
            				case (int)4: {
HXLINE( 105)					 ::Dynamic elements = null();
HXDLIN( 105)					 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 105)					::cpp::VirtualArray array = null();
HXDLIN( 105)					 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 105)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 105)					 ::Dynamic byteoffset = byte_offset;
HXDLIN( 105)					if (::hx::IsNull( byteoffset )) {
HXLINE( 105)						byteoffset = 0;
            					}
HXDLIN( 105)					 ::lime::utils::ArrayBufferView this2;
HXDLIN( 105)					if (::hx::IsNotNull( elements )) {
HXLINE( 105)						this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            					}
            					else {
HXLINE( 105)						if (::hx::IsNotNull( array )) {
HXLINE( 105)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 105)							_this->byteOffset = 0;
HXDLIN( 105)							_this->length = array->get_length();
HXDLIN( 105)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)							_this->buffer = this1;
HXDLIN( 105)							_this->copyFromArray(array,null());
HXDLIN( 105)							this2 = _this;
            						}
            						else {
HXLINE( 105)							if (::hx::IsNotNull( vector )) {
HXLINE( 105)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 105)								::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 105)								_this->byteOffset = 0;
HXDLIN( 105)								_this->length = array->get_length();
HXDLIN( 105)								_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)								_this->buffer = this1;
HXDLIN( 105)								_this->copyFromArray(array,null());
HXDLIN( 105)								this2 = _this;
            							}
            							else {
HXLINE( 105)								if (::hx::IsNotNull( view )) {
HXLINE( 105)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 105)									 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 105)									int srcLength = view->length;
HXDLIN( 105)									int srcByteOffset = view->byteOffset;
HXDLIN( 105)									int srcElementSize = view->bytesPerElement;
HXDLIN( 105)									int elementSize = _this->bytesPerElement;
HXDLIN( 105)									if ((view->type == _this->type)) {
HXLINE( 105)										int srcLength = srcData->length;
HXDLIN( 105)										int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 105)										 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 105)										_this->buffer = this1;
HXDLIN( 105)										_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            									}
HXDLIN( 105)									_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 105)									_this->byteOffset = 0;
HXDLIN( 105)									_this->length = srcLength;
HXDLIN( 105)									this2 = _this;
            								}
            								else {
HXLINE( 105)									if (::hx::IsNotNull( buffer )) {
HXLINE( 105)										 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 105)										int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 105)										if ((in_byteOffset < 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										int bufferByteLength = buffer->length;
HXDLIN( 105)										int elementSize = _this->bytesPerElement;
HXDLIN( 105)										int newByteLength = bufferByteLength;
HXDLIN( 105)										if (::hx::IsNull( len1 )) {
HXLINE( 105)											newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 105)											if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
HXDLIN( 105)											if ((newByteLength < 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
            										else {
HXLINE( 105)											newByteLength = (len1 * _this->bytesPerElement);
HXDLIN( 105)											int newRange = (in_byteOffset + newByteLength);
HXDLIN( 105)											if ((newRange > bufferByteLength)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
HXDLIN( 105)										_this->buffer = buffer;
HXDLIN( 105)										_this->byteOffset = in_byteOffset;
HXDLIN( 105)										_this->byteLength = newByteLength;
HXDLIN( 105)										_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 105)										this2 = _this;
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85)));
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					view1 = this2;
            				}
            				break;
            				case (int)5: {
HXLINE( 105)					 ::Dynamic elements = null();
HXDLIN( 105)					 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 105)					::cpp::VirtualArray array = null();
HXDLIN( 105)					 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 105)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 105)					 ::Dynamic byteoffset = byte_offset;
HXDLIN( 105)					if (::hx::IsNull( byteoffset )) {
HXLINE( 105)						byteoffset = 0;
            					}
HXDLIN( 105)					 ::lime::utils::ArrayBufferView this2;
HXDLIN( 105)					if (::hx::IsNotNull( elements )) {
HXLINE( 105)						this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,5);
            					}
            					else {
HXLINE( 105)						if (::hx::IsNotNull( array )) {
HXLINE( 105)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 105)							_this->byteOffset = 0;
HXDLIN( 105)							_this->length = array->get_length();
HXDLIN( 105)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)							_this->buffer = this1;
HXDLIN( 105)							_this->copyFromArray(array,null());
HXDLIN( 105)							this2 = _this;
            						}
            						else {
HXLINE( 105)							if (::hx::IsNotNull( vector )) {
HXLINE( 105)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 105)								::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 105)								_this->byteOffset = 0;
HXDLIN( 105)								_this->length = array->get_length();
HXDLIN( 105)								_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)								_this->buffer = this1;
HXDLIN( 105)								_this->copyFromArray(array,null());
HXDLIN( 105)								this2 = _this;
            							}
            							else {
HXLINE( 105)								if (::hx::IsNotNull( view )) {
HXLINE( 105)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 105)									 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 105)									int srcLength = view->length;
HXDLIN( 105)									int srcByteOffset = view->byteOffset;
HXDLIN( 105)									int srcElementSize = view->bytesPerElement;
HXDLIN( 105)									int elementSize = _this->bytesPerElement;
HXDLIN( 105)									if ((view->type == _this->type)) {
HXLINE( 105)										int srcLength = srcData->length;
HXDLIN( 105)										int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 105)										 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 105)										_this->buffer = this1;
HXDLIN( 105)										_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            									}
HXDLIN( 105)									_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 105)									_this->byteOffset = 0;
HXDLIN( 105)									_this->length = srcLength;
HXDLIN( 105)									this2 = _this;
            								}
            								else {
HXLINE( 105)									if (::hx::IsNotNull( buffer )) {
HXLINE( 105)										 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 105)										int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 105)										if ((in_byteOffset < 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										int bufferByteLength = buffer->length;
HXDLIN( 105)										int elementSize = _this->bytesPerElement;
HXDLIN( 105)										int newByteLength = bufferByteLength;
HXDLIN( 105)										if (::hx::IsNull( len1 )) {
HXLINE( 105)											newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 105)											if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
HXDLIN( 105)											if ((newByteLength < 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
            										else {
HXLINE( 105)											newByteLength = (len1 * _this->bytesPerElement);
HXDLIN( 105)											int newRange = (in_byteOffset + newByteLength);
HXDLIN( 105)											if ((newRange > bufferByteLength)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
HXDLIN( 105)										_this->buffer = buffer;
HXDLIN( 105)										_this->byteOffset = in_byteOffset;
HXDLIN( 105)										_this->byteLength = newByteLength;
HXDLIN( 105)										_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 105)										this2 = _this;
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13)));
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					view1 = this2;
            				}
            				break;
            				case (int)6: {
HXLINE( 105)					 ::Dynamic elements = null();
HXDLIN( 105)					 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 105)					::cpp::VirtualArray array = null();
HXDLIN( 105)					 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 105)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 105)					 ::Dynamic byteoffset = byte_offset;
HXDLIN( 105)					if (::hx::IsNull( byteoffset )) {
HXLINE( 105)						byteoffset = 0;
            					}
HXDLIN( 105)					 ::lime::utils::ArrayBufferView this2;
HXDLIN( 105)					if (::hx::IsNotNull( elements )) {
HXLINE( 105)						this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,6);
            					}
            					else {
HXLINE( 105)						if (::hx::IsNotNull( array )) {
HXLINE( 105)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 105)							_this->byteOffset = 0;
HXDLIN( 105)							_this->length = array->get_length();
HXDLIN( 105)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)							_this->buffer = this1;
HXDLIN( 105)							_this->copyFromArray(array,null());
HXDLIN( 105)							this2 = _this;
            						}
            						else {
HXLINE( 105)							if (::hx::IsNotNull( vector )) {
HXLINE( 105)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 105)								::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 105)								_this->byteOffset = 0;
HXDLIN( 105)								_this->length = array->get_length();
HXDLIN( 105)								_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)								_this->buffer = this1;
HXDLIN( 105)								_this->copyFromArray(array,null());
HXDLIN( 105)								this2 = _this;
            							}
            							else {
HXLINE( 105)								if (::hx::IsNotNull( view )) {
HXLINE( 105)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 105)									 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 105)									int srcLength = view->length;
HXDLIN( 105)									int srcByteOffset = view->byteOffset;
HXDLIN( 105)									int srcElementSize = view->bytesPerElement;
HXDLIN( 105)									int elementSize = _this->bytesPerElement;
HXDLIN( 105)									if ((view->type == _this->type)) {
HXLINE( 105)										int srcLength = srcData->length;
HXDLIN( 105)										int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 105)										 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 105)										_this->buffer = this1;
HXDLIN( 105)										_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            									}
HXDLIN( 105)									_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 105)									_this->byteOffset = 0;
HXDLIN( 105)									_this->length = srcLength;
HXDLIN( 105)									this2 = _this;
            								}
            								else {
HXLINE( 105)									if (::hx::IsNotNull( buffer )) {
HXLINE( 105)										 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 105)										int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 105)										if ((in_byteOffset < 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										int bufferByteLength = buffer->length;
HXDLIN( 105)										int elementSize = _this->bytesPerElement;
HXDLIN( 105)										int newByteLength = bufferByteLength;
HXDLIN( 105)										if (::hx::IsNull( len1 )) {
HXLINE( 105)											newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 105)											if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
HXDLIN( 105)											if ((newByteLength < 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
            										else {
HXLINE( 105)											newByteLength = (len1 * _this->bytesPerElement);
HXDLIN( 105)											int newRange = (in_byteOffset + newByteLength);
HXDLIN( 105)											if ((newRange > bufferByteLength)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
HXDLIN( 105)										_this->buffer = buffer;
HXDLIN( 105)										_this->byteOffset = in_byteOffset;
HXDLIN( 105)										_this->byteLength = newByteLength;
HXDLIN( 105)										_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 105)										this2 = _this;
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5)));
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					view1 = this2;
            				}
            				break;
            				case (int)7: {
HXLINE( 105)					 ::Dynamic elements = null();
HXDLIN( 105)					 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 105)					::cpp::VirtualArray array = null();
HXDLIN( 105)					 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 105)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 105)					 ::Dynamic byteoffset = byte_offset;
HXDLIN( 105)					if (::hx::IsNull( byteoffset )) {
HXLINE( 105)						byteoffset = 0;
            					}
HXDLIN( 105)					 ::lime::utils::ArrayBufferView this2;
HXDLIN( 105)					if (::hx::IsNotNull( elements )) {
HXLINE( 105)						this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,7);
            					}
            					else {
HXLINE( 105)						if (::hx::IsNotNull( array )) {
HXLINE( 105)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 105)							_this->byteOffset = 0;
HXDLIN( 105)							_this->length = array->get_length();
HXDLIN( 105)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)							_this->buffer = this1;
HXDLIN( 105)							_this->copyFromArray(array,null());
HXDLIN( 105)							this2 = _this;
            						}
            						else {
HXLINE( 105)							if (::hx::IsNotNull( vector )) {
HXLINE( 105)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 105)								::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 105)								_this->byteOffset = 0;
HXDLIN( 105)								_this->length = array->get_length();
HXDLIN( 105)								_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)								_this->buffer = this1;
HXDLIN( 105)								_this->copyFromArray(array,null());
HXDLIN( 105)								this2 = _this;
            							}
            							else {
HXLINE( 105)								if (::hx::IsNotNull( view )) {
HXLINE( 105)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 105)									 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 105)									int srcLength = view->length;
HXDLIN( 105)									int srcByteOffset = view->byteOffset;
HXDLIN( 105)									int srcElementSize = view->bytesPerElement;
HXDLIN( 105)									int elementSize = _this->bytesPerElement;
HXDLIN( 105)									if ((view->type == _this->type)) {
HXLINE( 105)										int srcLength = srcData->length;
HXDLIN( 105)										int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 105)										 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 105)										_this->buffer = this1;
HXDLIN( 105)										_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            									}
HXDLIN( 105)									_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 105)									_this->byteOffset = 0;
HXDLIN( 105)									_this->length = srcLength;
HXDLIN( 105)									this2 = _this;
            								}
            								else {
HXLINE( 105)									if (::hx::IsNotNull( buffer )) {
HXLINE( 105)										 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 105)										int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 105)										if ((in_byteOffset < 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										int bufferByteLength = buffer->length;
HXDLIN( 105)										int elementSize = _this->bytesPerElement;
HXDLIN( 105)										int newByteLength = bufferByteLength;
HXDLIN( 105)										if (::hx::IsNull( len1 )) {
HXLINE( 105)											newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 105)											if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
HXDLIN( 105)											if ((newByteLength < 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
            										else {
HXLINE( 105)											newByteLength = (len1 * _this->bytesPerElement);
HXDLIN( 105)											int newRange = (in_byteOffset + newByteLength);
HXDLIN( 105)											if ((newRange > bufferByteLength)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
HXDLIN( 105)										_this->buffer = buffer;
HXDLIN( 105)										_this->byteOffset = in_byteOffset;
HXDLIN( 105)										_this->byteLength = newByteLength;
HXDLIN( 105)										_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 105)										this2 = _this;
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e)));
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					view1 = this2;
            				}
            				break;
            				case (int)8: {
HXLINE( 105)					 ::Dynamic elements = null();
HXDLIN( 105)					 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 105)					::cpp::VirtualArray array = null();
HXDLIN( 105)					 ::openfl::_Vector::FloatVector vector = null();
HXDLIN( 105)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 105)					 ::Dynamic byteoffset = byte_offset;
HXDLIN( 105)					if (::hx::IsNull( byteoffset )) {
HXLINE( 105)						byteoffset = 0;
            					}
HXDLIN( 105)					 ::lime::utils::ArrayBufferView this2;
HXDLIN( 105)					if (::hx::IsNotNull( elements )) {
HXLINE( 105)						this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            					}
            					else {
HXLINE( 105)						if (::hx::IsNotNull( array )) {
HXLINE( 105)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 105)							_this->byteOffset = 0;
HXDLIN( 105)							_this->length = array->get_length();
HXDLIN( 105)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)							_this->buffer = this1;
HXDLIN( 105)							_this->copyFromArray(array,null());
HXDLIN( 105)							this2 = _this;
            						}
            						else {
HXLINE( 105)							if (::hx::IsNotNull( vector )) {
HXLINE( 105)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 105)								::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 105)								_this->byteOffset = 0;
HXDLIN( 105)								_this->length = array->get_length();
HXDLIN( 105)								_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)								_this->buffer = this1;
HXDLIN( 105)								_this->copyFromArray(array,null());
HXDLIN( 105)								this2 = _this;
            							}
            							else {
HXLINE( 105)								if (::hx::IsNotNull( view )) {
HXLINE( 105)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 105)									 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 105)									int srcLength = view->length;
HXDLIN( 105)									int srcByteOffset = view->byteOffset;
HXDLIN( 105)									int srcElementSize = view->bytesPerElement;
HXDLIN( 105)									int elementSize = _this->bytesPerElement;
HXDLIN( 105)									if ((view->type == _this->type)) {
HXLINE( 105)										int srcLength = srcData->length;
HXDLIN( 105)										int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 105)										 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 105)										_this->buffer = this1;
HXDLIN( 105)										_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            									}
HXDLIN( 105)									_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 105)									_this->byteOffset = 0;
HXDLIN( 105)									_this->length = srcLength;
HXDLIN( 105)									this2 = _this;
            								}
            								else {
HXLINE( 105)									if (::hx::IsNotNull( buffer )) {
HXLINE( 105)										 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 105)										int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 105)										if ((in_byteOffset < 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										int bufferByteLength = buffer->length;
HXDLIN( 105)										int elementSize = _this->bytesPerElement;
HXDLIN( 105)										int newByteLength = bufferByteLength;
HXDLIN( 105)										if (::hx::IsNull( len1 )) {
HXLINE( 105)											newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 105)											if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
HXDLIN( 105)											if ((newByteLength < 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
            										else {
HXLINE( 105)											newByteLength = (len1 * _this->bytesPerElement);
HXDLIN( 105)											int newRange = (in_byteOffset + newByteLength);
HXDLIN( 105)											if ((newRange > bufferByteLength)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
HXDLIN( 105)										_this->buffer = buffer;
HXDLIN( 105)										_this->byteOffset = in_byteOffset;
HXDLIN( 105)										_this->byteLength = newByteLength;
HXDLIN( 105)										_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 105)										this2 = _this;
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					view1 = this2;
            				}
            				break;
            				case (int)9: {
HXLINE( 105)					 ::Dynamic elements = null();
HXDLIN( 105)					 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 105)					::cpp::VirtualArray array = null();
HXDLIN( 105)					 ::openfl::_Vector::FloatVector vector = null();
HXDLIN( 105)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 105)					 ::Dynamic byteoffset = byte_offset;
HXDLIN( 105)					if (::hx::IsNull( byteoffset )) {
HXLINE( 105)						byteoffset = 0;
            					}
HXDLIN( 105)					 ::lime::utils::ArrayBufferView this2;
HXDLIN( 105)					if (::hx::IsNotNull( elements )) {
HXLINE( 105)						this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,9);
            					}
            					else {
HXLINE( 105)						if (::hx::IsNotNull( array )) {
HXLINE( 105)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 105)							_this->byteOffset = 0;
HXDLIN( 105)							_this->length = array->get_length();
HXDLIN( 105)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)							_this->buffer = this1;
HXDLIN( 105)							_this->copyFromArray(array,null());
HXDLIN( 105)							this2 = _this;
            						}
            						else {
HXLINE( 105)							if (::hx::IsNotNull( vector )) {
HXLINE( 105)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 105)								::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 105)								_this->byteOffset = 0;
HXDLIN( 105)								_this->length = array->get_length();
HXDLIN( 105)								_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 105)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 105)								_this->buffer = this1;
HXDLIN( 105)								_this->copyFromArray(array,null());
HXDLIN( 105)								this2 = _this;
            							}
            							else {
HXLINE( 105)								if (::hx::IsNotNull( view )) {
HXLINE( 105)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 105)									 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 105)									int srcLength = view->length;
HXDLIN( 105)									int srcByteOffset = view->byteOffset;
HXDLIN( 105)									int srcElementSize = view->bytesPerElement;
HXDLIN( 105)									int elementSize = _this->bytesPerElement;
HXDLIN( 105)									if ((view->type == _this->type)) {
HXLINE( 105)										int srcLength = srcData->length;
HXDLIN( 105)										int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 105)										 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 105)										_this->buffer = this1;
HXDLIN( 105)										_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            									}
HXDLIN( 105)									_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 105)									_this->byteOffset = 0;
HXDLIN( 105)									_this->length = srcLength;
HXDLIN( 105)									this2 = _this;
            								}
            								else {
HXLINE( 105)									if (::hx::IsNotNull( buffer )) {
HXLINE( 105)										 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 105)										int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 105)										if ((in_byteOffset < 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 105)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 105)										int bufferByteLength = buffer->length;
HXDLIN( 105)										int elementSize = _this->bytesPerElement;
HXDLIN( 105)										int newByteLength = bufferByteLength;
HXDLIN( 105)										if (::hx::IsNull( len1 )) {
HXLINE( 105)											newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 105)											if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
HXDLIN( 105)											if ((newByteLength < 0)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
            										else {
HXLINE( 105)											newByteLength = (len1 * _this->bytesPerElement);
HXDLIN( 105)											int newRange = (in_byteOffset + newByteLength);
HXDLIN( 105)											if ((newRange > bufferByteLength)) {
HXLINE( 105)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            											}
            										}
HXDLIN( 105)										_this->buffer = buffer;
HXDLIN( 105)										_this->byteOffset = in_byteOffset;
HXDLIN( 105)										_this->byteLength = newByteLength;
HXDLIN( 105)										_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 105)										this2 = _this;
            									}
            									else {
HXLINE( 105)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e)));
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					view1 = this2;
            				}
            				break;
            			}
HXDLIN( 105)			 ::lime::utils::ArrayBufferView arr = view1;
HXDLIN( 105)			int l = arr->length;
HXDLIN( 105)			{
HXLINE( 105)				int _g = 0;
HXDLIN( 105)				int _g1 = l;
HXDLIN( 105)				while((_g < _g1)){
HXLINE( 105)					_g = (_g + 1);
HXDLIN( 105)					int i = (_g - 1);
HXDLIN( 105)					{
HXLINE( 105)						Float val =  ::__hxcpp_memory_get_float(arr->buffer->b,(arr->byteOffset + (i * 4)));
HXDLIN( 105)						 ::__hxcpp_memory_set_float(flat->buffer->b,(flat->byteOffset + ((i + 2) * 4)),val);
            					}
            				}
            			}
HXDLIN( 105)			 ::__hxcpp_memory_set_float(flat->buffer->b,flat->byteOffset,0);
HXDLIN( 105)			 ::__hxcpp_memory_set_float(flat->buffer->b,(flat->byteOffset + 4),l);
            		}
HXLINE( 106)		return flat;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float32Flat_Impl__obj,clone,return )

void Float32Flat_Impl__obj::fill( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView arr){
            	HX_STACKFRAME(&_hx_pos_bbba311f8878eef7_109_fill)
HXLINE( 110)		int l = arr->length;
HXLINE( 111)		{
HXLINE( 111)			int _g = 0;
HXDLIN( 111)			int _g1 = l;
HXDLIN( 111)			while((_g < _g1)){
HXLINE( 111)				_g = (_g + 1);
HXDLIN( 111)				int i = (_g - 1);
HXLINE( 112)				{
HXLINE( 112)					Float val =  ::__hxcpp_memory_get_float(arr->buffer->b,(arr->byteOffset + (i * 4)));
HXDLIN( 112)					 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + ((i + 2) * 4)),val);
            				}
            			}
            		}
HXLINE( 114)		 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,0);
HXLINE( 115)		 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),l);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Float32Flat_Impl__obj,fill,(void))


Float32Flat_Impl__obj::Float32Flat_Impl__obj()
{
}

bool Float32Flat_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fill") ) { outValue = fill_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_pos") ) { outValue = get_pos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_pos") ) { outValue = set_pos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasNext") ) { outValue = hasNext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readItem") ) { outValue = readItem_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_size") ) { outValue = get_size_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_size") ) { outValue = set_size_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"writeItem") ) { outValue = writeItem_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_index") ) { outValue = get_index_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_index") ) { outValue = set_index_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateLen") ) { outValue = updateLen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"increment") ) { outValue = increment_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Float32Flat_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Float32Flat_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Float32Flat_Impl__obj::__mClass;

static ::String Float32Flat_Impl__obj_sStaticFields[] = {
	HX_("readItem",89,9f,b7,6d),
	HX_("writeItem",92,b9,73,4e),
	HX_("_new",61,15,1f,3f),
	HX_("get_size",4a,5c,0e,cc),
	HX_("set_size",be,b5,6b,7a),
	HX_("get_index",69,f7,bd,01),
	HX_("set_index",75,e3,0e,e5),
	HX_("get_pos",2b,26,ca,26),
	HX_("set_pos",37,b7,cb,19),
	HX_("updateLen",4c,29,df,82),
	HX_("hasNext",6d,a5,46,18),
	HX_("next",f3,84,02,49),
	HX_("increment",2f,06,ff,31),
	HX_("toArray",1e,ba,13,f2),
	HX_("fromArray",cf,57,18,da),
	HX_("clone",5d,13,63,48),
	HX_("fill",83,ce,bb,43),
	::String(null())
};

void Float32Flat_Impl__obj::__register()
{
	Float32Flat_Impl__obj _hx_dummy;
	Float32Flat_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("dsHelper.flat.io._Float32Flat.Float32Flat_Impl_",5f,49,f2,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Float32Flat_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Float32Flat_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Float32Flat_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Float32Flat_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Float32Flat_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace dsHelper
} // end namespace flat
} // end namespace io
} // end namespace _Float32Flat
