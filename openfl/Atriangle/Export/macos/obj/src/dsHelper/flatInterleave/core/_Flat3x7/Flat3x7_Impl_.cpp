// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dsHelper_flat_io__Float32Flat_Float32Flat_Impl_
#include <dsHelper/flat/io/_Float32Flat/Float32Flat_Impl_.h>
#endif
#ifndef INCLUDED_dsHelper_flatInterleave_core__Flat3x7_Flat3x7_Impl_
#include <dsHelper/flatInterleave/core/_Flat3x7/Flat3x7_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_762131805d6ff1c9_9_readItem,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_","readItem",0x62be104c,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_.readItem","dsHelper/flatInterleave/core/Flat3x7.hx",9,0x219745ac)
HX_LOCAL_STACK_FRAME(_hx_pos_762131805d6ff1c9_12_writeItem,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_","writeItem",0xbf0ff36f,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_.writeItem","dsHelper/flatInterleave/core/Flat3x7.hx",12,0x219745ac)
HX_LOCAL_STACK_FRAME(_hx_pos_762131805d6ff1c9_16__new,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_","_new",0xcf4728a4,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_._new","dsHelper/flatInterleave/core/Flat3x7.hx",16,0x219745ac)
HX_LOCAL_STACK_FRAME(_hx_pos_762131805d6ff1c9_23_get_index,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_","get_index",0x725a3146,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_.get_index","dsHelper/flatInterleave/core/Flat3x7.hx",23,0x219745ac)
HX_LOCAL_STACK_FRAME(_hx_pos_762131805d6ff1c9_26_set_index,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_","set_index",0x55ab1d52,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_.set_index","dsHelper/flatInterleave/core/Flat3x7.hx",26,0x219745ac)
HX_LOCAL_STACK_FRAME(_hx_pos_762131805d6ff1c9_32_getArray,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_","getArray",0x7a6cede6,"dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_.getArray","dsHelper/flatInterleave/core/Flat3x7.hx",32,0x219745ac)
namespace dsHelper{
namespace flatInterleave{
namespace core{
namespace _Flat3x7{

void Flat3x7_Impl__obj::__construct() { }

Dynamic Flat3x7_Impl__obj::__CreateEmpty() { return new Flat3x7_Impl__obj; }

void *Flat3x7_Impl__obj::_hx_vtable = 0;

Dynamic Flat3x7_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Flat3x7_Impl__obj > _hx_result = new Flat3x7_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Flat3x7_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x14ae6bdf;
}

Float Flat3x7_Impl__obj::readItem( ::lime::utils::ArrayBufferView this1,int k){
            	HX_STACKFRAME(&_hx_pos_762131805d6ff1c9_9_readItem)
HXDLIN(   9)		int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + k);
HXDLIN(   9)		return  ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k1 + 2) * 4)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Flat3x7_Impl__obj,readItem,return )

Float Flat3x7_Impl__obj::writeItem( ::lime::utils::ArrayBufferView this1,int k,Float v){
            	HX_STACKFRAME(&_hx_pos_762131805d6ff1c9_12_writeItem)
HXLINE(  13)		{
HXLINE(  13)			int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + k);
HXDLIN(  13)			 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + ((k1 + 2) * 4)),v);
            		}
HXLINE(  14)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Flat3x7_Impl__obj,writeItem,return )

 ::lime::utils::ArrayBufferView Flat3x7_Impl__obj::_new(int len){
            	HX_GC_STACKFRAME(&_hx_pos_762131805d6ff1c9_16__new)
HXLINE(  18)		 ::Dynamic elements = (len + 2);
HXDLIN(  18)		 ::haxe::io::Bytes buffer = null();
HXDLIN(  18)		::cpp::VirtualArray array = null();
HXDLIN(  18)		 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(  18)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN(  18)		 ::Dynamic len1 = null();
HXDLIN(  18)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(  18)		if (::hx::IsNotNull( elements )) {
HXLINE(  18)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            		}
            		else {
HXLINE(  18)			if (::hx::IsNotNull( array )) {
HXLINE(  18)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  18)				_this->byteOffset = 0;
HXDLIN(  18)				_this->length = array->get_length();
HXDLIN(  18)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  18)				 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  18)				_this->buffer = this2;
HXDLIN(  18)				_this->copyFromArray(array,null());
HXDLIN(  18)				this1 = _this;
            			}
            			else {
HXLINE(  18)				if (::hx::IsNotNull( vector )) {
HXLINE(  18)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  18)					::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  18)					_this->byteOffset = 0;
HXDLIN(  18)					_this->length = array->get_length();
HXDLIN(  18)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  18)					 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  18)					_this->buffer = this2;
HXDLIN(  18)					_this->copyFromArray(array,null());
HXDLIN(  18)					this1 = _this;
            				}
            				else {
HXLINE(  18)					if (::hx::IsNotNull( view )) {
HXLINE(  18)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  18)						 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN(  18)						int srcLength = view->length;
HXDLIN(  18)						int srcByteOffset = view->byteOffset;
HXDLIN(  18)						int srcElementSize = view->bytesPerElement;
HXDLIN(  18)						int elementSize = _this->bytesPerElement;
HXDLIN(  18)						if ((view->type == _this->type)) {
HXLINE(  18)							int srcLength = srcData->length;
HXDLIN(  18)							int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  18)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  18)							_this->buffer = this1;
HXDLIN(  18)							_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            						}
            						else {
HXLINE(  18)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            						}
HXDLIN(  18)						_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  18)						_this->byteOffset = 0;
HXDLIN(  18)						_this->length = srcLength;
HXDLIN(  18)						this1 = _this;
            					}
            					else {
HXLINE(  18)						if (::hx::IsNotNull( buffer )) {
HXLINE(  18)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  18)							int in_byteOffset = 0;
HXDLIN(  18)							if ((in_byteOffset < 0)) {
HXLINE(  18)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN(  18)							if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE(  18)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN(  18)							int bufferByteLength = buffer->length;
HXDLIN(  18)							int elementSize = _this->bytesPerElement;
HXDLIN(  18)							int newByteLength = bufferByteLength;
HXDLIN(  18)							if (::hx::IsNull( len1 )) {
HXLINE(  18)								newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  18)								if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE(  18)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN(  18)								if ((newByteLength < 0)) {
HXLINE(  18)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
            							}
            							else {
HXLINE(  18)								newByteLength = (( (int)(len1) ) * _this->bytesPerElement);
HXDLIN(  18)								int newRange = (in_byteOffset + newByteLength);
HXDLIN(  18)								if ((newRange > bufferByteLength)) {
HXLINE(  18)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
            							}
HXDLIN(  18)							_this->buffer = buffer;
HXDLIN(  18)							_this->byteOffset = in_byteOffset;
HXDLIN(  18)							_this->byteLength = newByteLength;
HXDLIN(  18)							_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  18)							this1 = _this;
            						}
            						else {
HXLINE(  18)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            						}
            					}
            				}
            			}
            		}
HXDLIN(  18)		 ::lime::utils::ArrayBufferView this2 = this1;
HXDLIN(  18)		 ::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,((Float)0.));
HXDLIN(  18)		 ::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + 4),((Float)0.));
HXLINE(  16)		 ::lime::utils::ArrayBufferView this3 = this2;
HXDLIN(  16)		return this3;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Flat3x7_Impl__obj,_new,return )

int Flat3x7_Impl__obj::get_index( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_762131805d6ff1c9_23_get_index)
HXDLIN(  23)		return ::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Flat3x7_Impl__obj,get_index,return )

int Flat3x7_Impl__obj::set_index( ::lime::utils::ArrayBufferView this1,int id){
            	HX_STACKFRAME(&_hx_pos_762131805d6ff1c9_26_set_index)
HXLINE(  27)		{
HXLINE(  27)			 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,id);
HXDLIN(  27)			Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  27)			if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXLINE(  27)				Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  27)				 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            			}
            		}
HXLINE(  28)		return id;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Flat3x7_Impl__obj,set_index,return )

 ::lime::utils::ArrayBufferView Flat3x7_Impl__obj::getArray( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_762131805d6ff1c9_32_getArray)
HXDLIN(  32)		 ::Dynamic end = ((::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this1) * 21) + 2);
HXDLIN(  32)		if (::hx::IsNull( end )) {
HXDLIN(  32)			end = this1->length;
            		}
HXDLIN(  32)		int len = (( (int)(end) ) - 2);
HXDLIN(  32)		int byte_offset = ((2 * this1->bytesPerElement) + this1->byteOffset);
HXDLIN(  32)		 ::lime::utils::ArrayBufferView view;
HXDLIN(  32)		switch((int)(this1->type)){
            			case (int)0: {
HXDLIN(  32)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("subarray on a blank ArrayBufferView",39,87,fd,19)));
            			}
            			break;
            			case (int)1: {
HXDLIN(  32)				 ::Dynamic elements = null();
HXDLIN(  32)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  32)				::cpp::VirtualArray array = null();
HXDLIN(  32)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  32)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  32)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  32)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  32)					byteoffset = 0;
            				}
HXDLIN(  32)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  32)				if (::hx::IsNotNull( elements )) {
HXDLIN(  32)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,1);
            				}
            				else {
HXDLIN(  32)					if (::hx::IsNotNull( array )) {
HXDLIN(  32)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN(  32)						_this->byteOffset = 0;
HXDLIN(  32)						_this->length = array->get_length();
HXDLIN(  32)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)						_this->buffer = this1;
HXDLIN(  32)						_this->copyFromArray(array,null());
HXDLIN(  32)						this2 = _this;
            					}
            					else {
HXDLIN(  32)						if (::hx::IsNotNull( vector )) {
HXDLIN(  32)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN(  32)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  32)							_this->byteOffset = 0;
HXDLIN(  32)							_this->length = array->get_length();
HXDLIN(  32)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)							_this->buffer = this1;
HXDLIN(  32)							_this->copyFromArray(array,null());
HXDLIN(  32)							this2 = _this;
            						}
            						else {
HXDLIN(  32)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  32)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN(  32)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  32)								int srcLength = view1->length;
HXDLIN(  32)								int srcByteOffset = view1->byteOffset;
HXDLIN(  32)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  32)								int elementSize = _this->bytesPerElement;
HXDLIN(  32)								if ((view1->type == _this->type)) {
HXDLIN(  32)									int srcLength = srcData->length;
HXDLIN(  32)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  32)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  32)									_this->buffer = this1;
HXDLIN(  32)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  32)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  32)								_this->byteOffset = 0;
HXDLIN(  32)								_this->length = srcLength;
HXDLIN(  32)								this2 = _this;
            							}
            							else {
HXDLIN(  32)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  32)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN(  32)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  32)									if ((in_byteOffset < 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									int bufferByteLength = buffer->length;
HXDLIN(  32)									int elementSize = _this->bytesPerElement;
HXDLIN(  32)									int newByteLength = bufferByteLength;
HXDLIN(  32)									if (::hx::IsNull( len )) {
HXDLIN(  32)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  32)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  32)										if ((newByteLength < 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  32)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  32)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  32)										if ((newRange > bufferByteLength)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  32)									_this->buffer = buffer;
HXDLIN(  32)									_this->byteOffset = in_byteOffset;
HXDLIN(  32)									_this->byteLength = newByteLength;
HXDLIN(  32)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  32)									this2 = _this;
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Int8Array",40,53,da,77)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  32)				view = this2;
            			}
            			break;
            			case (int)2: {
HXDLIN(  32)				 ::Dynamic elements = null();
HXDLIN(  32)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  32)				::cpp::VirtualArray array = null();
HXDLIN(  32)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  32)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  32)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  32)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  32)					byteoffset = 0;
            				}
HXDLIN(  32)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  32)				if (::hx::IsNotNull( elements )) {
HXDLIN(  32)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,2);
            				}
            				else {
HXDLIN(  32)					if (::hx::IsNotNull( array )) {
HXDLIN(  32)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN(  32)						_this->byteOffset = 0;
HXDLIN(  32)						_this->length = array->get_length();
HXDLIN(  32)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)						_this->buffer = this1;
HXDLIN(  32)						_this->copyFromArray(array,null());
HXDLIN(  32)						this2 = _this;
            					}
            					else {
HXDLIN(  32)						if (::hx::IsNotNull( vector )) {
HXDLIN(  32)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN(  32)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  32)							_this->byteOffset = 0;
HXDLIN(  32)							_this->length = array->get_length();
HXDLIN(  32)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)							_this->buffer = this1;
HXDLIN(  32)							_this->copyFromArray(array,null());
HXDLIN(  32)							this2 = _this;
            						}
            						else {
HXDLIN(  32)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  32)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN(  32)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  32)								int srcLength = view1->length;
HXDLIN(  32)								int srcByteOffset = view1->byteOffset;
HXDLIN(  32)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  32)								int elementSize = _this->bytesPerElement;
HXDLIN(  32)								if ((view1->type == _this->type)) {
HXDLIN(  32)									int srcLength = srcData->length;
HXDLIN(  32)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  32)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  32)									_this->buffer = this1;
HXDLIN(  32)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  32)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  32)								_this->byteOffset = 0;
HXDLIN(  32)								_this->length = srcLength;
HXDLIN(  32)								this2 = _this;
            							}
            							else {
HXDLIN(  32)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  32)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN(  32)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  32)									if ((in_byteOffset < 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									int bufferByteLength = buffer->length;
HXDLIN(  32)									int elementSize = _this->bytesPerElement;
HXDLIN(  32)									int newByteLength = bufferByteLength;
HXDLIN(  32)									if (::hx::IsNull( len )) {
HXDLIN(  32)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  32)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  32)										if ((newByteLength < 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  32)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  32)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  32)										if ((newRange > bufferByteLength)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  32)									_this->buffer = buffer;
HXDLIN(  32)									_this->byteOffset = in_byteOffset;
HXDLIN(  32)									_this->byteLength = newByteLength;
HXDLIN(  32)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  32)									this2 = _this;
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  32)				view = this2;
            			}
            			break;
            			case (int)3: {
HXDLIN(  32)				 ::Dynamic elements = null();
HXDLIN(  32)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  32)				::cpp::VirtualArray array = null();
HXDLIN(  32)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  32)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  32)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  32)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  32)					byteoffset = 0;
            				}
HXDLIN(  32)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  32)				if (::hx::IsNotNull( elements )) {
HXDLIN(  32)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,3);
            				}
            				else {
HXDLIN(  32)					if (::hx::IsNotNull( array )) {
HXDLIN(  32)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN(  32)						_this->byteOffset = 0;
HXDLIN(  32)						_this->length = array->get_length();
HXDLIN(  32)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)						_this->buffer = this1;
HXDLIN(  32)						_this->copyFromArray(array,null());
HXDLIN(  32)						this2 = _this;
            					}
            					else {
HXDLIN(  32)						if (::hx::IsNotNull( vector )) {
HXDLIN(  32)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN(  32)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  32)							_this->byteOffset = 0;
HXDLIN(  32)							_this->length = array->get_length();
HXDLIN(  32)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)							_this->buffer = this1;
HXDLIN(  32)							_this->copyFromArray(array,null());
HXDLIN(  32)							this2 = _this;
            						}
            						else {
HXDLIN(  32)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  32)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN(  32)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  32)								int srcLength = view1->length;
HXDLIN(  32)								int srcByteOffset = view1->byteOffset;
HXDLIN(  32)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  32)								int elementSize = _this->bytesPerElement;
HXDLIN(  32)								if ((view1->type == _this->type)) {
HXDLIN(  32)									int srcLength = srcData->length;
HXDLIN(  32)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  32)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  32)									_this->buffer = this1;
HXDLIN(  32)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  32)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  32)								_this->byteOffset = 0;
HXDLIN(  32)								_this->length = srcLength;
HXDLIN(  32)								this2 = _this;
            							}
            							else {
HXDLIN(  32)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  32)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN(  32)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  32)									if ((in_byteOffset < 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									int bufferByteLength = buffer->length;
HXDLIN(  32)									int elementSize = _this->bytesPerElement;
HXDLIN(  32)									int newByteLength = bufferByteLength;
HXDLIN(  32)									if (::hx::IsNull( len )) {
HXDLIN(  32)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  32)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  32)										if ((newByteLength < 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  32)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  32)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  32)										if ((newRange > bufferByteLength)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  32)									_this->buffer = buffer;
HXDLIN(  32)									_this->byteOffset = in_byteOffset;
HXDLIN(  32)									_this->byteLength = newByteLength;
HXDLIN(  32)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  32)									this2 = _this;
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  32)				view = this2;
            			}
            			break;
            			case (int)4: {
HXDLIN(  32)				 ::Dynamic elements = null();
HXDLIN(  32)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  32)				::cpp::VirtualArray array = null();
HXDLIN(  32)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  32)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  32)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  32)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  32)					byteoffset = 0;
            				}
HXDLIN(  32)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  32)				if (::hx::IsNotNull( elements )) {
HXDLIN(  32)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            				}
            				else {
HXDLIN(  32)					if (::hx::IsNotNull( array )) {
HXDLIN(  32)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(  32)						_this->byteOffset = 0;
HXDLIN(  32)						_this->length = array->get_length();
HXDLIN(  32)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)						_this->buffer = this1;
HXDLIN(  32)						_this->copyFromArray(array,null());
HXDLIN(  32)						this2 = _this;
            					}
            					else {
HXDLIN(  32)						if (::hx::IsNotNull( vector )) {
HXDLIN(  32)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(  32)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  32)							_this->byteOffset = 0;
HXDLIN(  32)							_this->length = array->get_length();
HXDLIN(  32)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)							_this->buffer = this1;
HXDLIN(  32)							_this->copyFromArray(array,null());
HXDLIN(  32)							this2 = _this;
            						}
            						else {
HXDLIN(  32)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  32)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(  32)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  32)								int srcLength = view1->length;
HXDLIN(  32)								int srcByteOffset = view1->byteOffset;
HXDLIN(  32)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  32)								int elementSize = _this->bytesPerElement;
HXDLIN(  32)								if ((view1->type == _this->type)) {
HXDLIN(  32)									int srcLength = srcData->length;
HXDLIN(  32)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  32)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  32)									_this->buffer = this1;
HXDLIN(  32)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  32)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  32)								_this->byteOffset = 0;
HXDLIN(  32)								_this->length = srcLength;
HXDLIN(  32)								this2 = _this;
            							}
            							else {
HXDLIN(  32)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  32)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(  32)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  32)									if ((in_byteOffset < 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									int bufferByteLength = buffer->length;
HXDLIN(  32)									int elementSize = _this->bytesPerElement;
HXDLIN(  32)									int newByteLength = bufferByteLength;
HXDLIN(  32)									if (::hx::IsNull( len )) {
HXDLIN(  32)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  32)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  32)										if ((newByteLength < 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  32)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  32)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  32)										if ((newRange > bufferByteLength)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  32)									_this->buffer = buffer;
HXDLIN(  32)									_this->byteOffset = in_byteOffset;
HXDLIN(  32)									_this->byteLength = newByteLength;
HXDLIN(  32)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  32)									this2 = _this;
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  32)				view = this2;
            			}
            			break;
            			case (int)5: {
HXDLIN(  32)				 ::Dynamic elements = null();
HXDLIN(  32)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  32)				::cpp::VirtualArray array = null();
HXDLIN(  32)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  32)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  32)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  32)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  32)					byteoffset = 0;
            				}
HXDLIN(  32)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  32)				if (::hx::IsNotNull( elements )) {
HXDLIN(  32)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,5);
            				}
            				else {
HXDLIN(  32)					if (::hx::IsNotNull( array )) {
HXDLIN(  32)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN(  32)						_this->byteOffset = 0;
HXDLIN(  32)						_this->length = array->get_length();
HXDLIN(  32)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)						_this->buffer = this1;
HXDLIN(  32)						_this->copyFromArray(array,null());
HXDLIN(  32)						this2 = _this;
            					}
            					else {
HXDLIN(  32)						if (::hx::IsNotNull( vector )) {
HXDLIN(  32)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN(  32)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  32)							_this->byteOffset = 0;
HXDLIN(  32)							_this->length = array->get_length();
HXDLIN(  32)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)							_this->buffer = this1;
HXDLIN(  32)							_this->copyFromArray(array,null());
HXDLIN(  32)							this2 = _this;
            						}
            						else {
HXDLIN(  32)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  32)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN(  32)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  32)								int srcLength = view1->length;
HXDLIN(  32)								int srcByteOffset = view1->byteOffset;
HXDLIN(  32)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  32)								int elementSize = _this->bytesPerElement;
HXDLIN(  32)								if ((view1->type == _this->type)) {
HXDLIN(  32)									int srcLength = srcData->length;
HXDLIN(  32)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  32)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  32)									_this->buffer = this1;
HXDLIN(  32)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  32)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  32)								_this->byteOffset = 0;
HXDLIN(  32)								_this->length = srcLength;
HXDLIN(  32)								this2 = _this;
            							}
            							else {
HXDLIN(  32)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  32)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN(  32)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  32)									if ((in_byteOffset < 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									int bufferByteLength = buffer->length;
HXDLIN(  32)									int elementSize = _this->bytesPerElement;
HXDLIN(  32)									int newByteLength = bufferByteLength;
HXDLIN(  32)									if (::hx::IsNull( len )) {
HXDLIN(  32)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  32)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  32)										if ((newByteLength < 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  32)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  32)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  32)										if ((newRange > bufferByteLength)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  32)									_this->buffer = buffer;
HXDLIN(  32)									_this->byteOffset = in_byteOffset;
HXDLIN(  32)									_this->byteLength = newByteLength;
HXDLIN(  32)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  32)									this2 = _this;
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  32)				view = this2;
            			}
            			break;
            			case (int)6: {
HXDLIN(  32)				 ::Dynamic elements = null();
HXDLIN(  32)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  32)				::cpp::VirtualArray array = null();
HXDLIN(  32)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  32)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  32)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  32)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  32)					byteoffset = 0;
            				}
HXDLIN(  32)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  32)				if (::hx::IsNotNull( elements )) {
HXDLIN(  32)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,6);
            				}
            				else {
HXDLIN(  32)					if (::hx::IsNotNull( array )) {
HXDLIN(  32)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN(  32)						_this->byteOffset = 0;
HXDLIN(  32)						_this->length = array->get_length();
HXDLIN(  32)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)						_this->buffer = this1;
HXDLIN(  32)						_this->copyFromArray(array,null());
HXDLIN(  32)						this2 = _this;
            					}
            					else {
HXDLIN(  32)						if (::hx::IsNotNull( vector )) {
HXDLIN(  32)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN(  32)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  32)							_this->byteOffset = 0;
HXDLIN(  32)							_this->length = array->get_length();
HXDLIN(  32)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)							_this->buffer = this1;
HXDLIN(  32)							_this->copyFromArray(array,null());
HXDLIN(  32)							this2 = _this;
            						}
            						else {
HXDLIN(  32)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  32)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN(  32)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  32)								int srcLength = view1->length;
HXDLIN(  32)								int srcByteOffset = view1->byteOffset;
HXDLIN(  32)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  32)								int elementSize = _this->bytesPerElement;
HXDLIN(  32)								if ((view1->type == _this->type)) {
HXDLIN(  32)									int srcLength = srcData->length;
HXDLIN(  32)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  32)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  32)									_this->buffer = this1;
HXDLIN(  32)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  32)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  32)								_this->byteOffset = 0;
HXDLIN(  32)								_this->length = srcLength;
HXDLIN(  32)								this2 = _this;
            							}
            							else {
HXDLIN(  32)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  32)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN(  32)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  32)									if ((in_byteOffset < 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									int bufferByteLength = buffer->length;
HXDLIN(  32)									int elementSize = _this->bytesPerElement;
HXDLIN(  32)									int newByteLength = bufferByteLength;
HXDLIN(  32)									if (::hx::IsNull( len )) {
HXDLIN(  32)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  32)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  32)										if ((newByteLength < 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  32)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  32)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  32)										if ((newRange > bufferByteLength)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  32)									_this->buffer = buffer;
HXDLIN(  32)									_this->byteOffset = in_byteOffset;
HXDLIN(  32)									_this->byteLength = newByteLength;
HXDLIN(  32)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  32)									this2 = _this;
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  32)				view = this2;
            			}
            			break;
            			case (int)7: {
HXDLIN(  32)				 ::Dynamic elements = null();
HXDLIN(  32)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  32)				::cpp::VirtualArray array = null();
HXDLIN(  32)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(  32)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  32)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  32)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  32)					byteoffset = 0;
            				}
HXDLIN(  32)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  32)				if (::hx::IsNotNull( elements )) {
HXDLIN(  32)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,7);
            				}
            				else {
HXDLIN(  32)					if (::hx::IsNotNull( array )) {
HXDLIN(  32)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN(  32)						_this->byteOffset = 0;
HXDLIN(  32)						_this->length = array->get_length();
HXDLIN(  32)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)						_this->buffer = this1;
HXDLIN(  32)						_this->copyFromArray(array,null());
HXDLIN(  32)						this2 = _this;
            					}
            					else {
HXDLIN(  32)						if (::hx::IsNotNull( vector )) {
HXDLIN(  32)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN(  32)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  32)							_this->byteOffset = 0;
HXDLIN(  32)							_this->length = array->get_length();
HXDLIN(  32)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)							_this->buffer = this1;
HXDLIN(  32)							_this->copyFromArray(array,null());
HXDLIN(  32)							this2 = _this;
            						}
            						else {
HXDLIN(  32)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  32)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN(  32)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  32)								int srcLength = view1->length;
HXDLIN(  32)								int srcByteOffset = view1->byteOffset;
HXDLIN(  32)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  32)								int elementSize = _this->bytesPerElement;
HXDLIN(  32)								if ((view1->type == _this->type)) {
HXDLIN(  32)									int srcLength = srcData->length;
HXDLIN(  32)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  32)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  32)									_this->buffer = this1;
HXDLIN(  32)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  32)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  32)								_this->byteOffset = 0;
HXDLIN(  32)								_this->length = srcLength;
HXDLIN(  32)								this2 = _this;
            							}
            							else {
HXDLIN(  32)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  32)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN(  32)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  32)									if ((in_byteOffset < 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									int bufferByteLength = buffer->length;
HXDLIN(  32)									int elementSize = _this->bytesPerElement;
HXDLIN(  32)									int newByteLength = bufferByteLength;
HXDLIN(  32)									if (::hx::IsNull( len )) {
HXDLIN(  32)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  32)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  32)										if ((newByteLength < 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  32)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  32)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  32)										if ((newRange > bufferByteLength)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  32)									_this->buffer = buffer;
HXDLIN(  32)									_this->byteOffset = in_byteOffset;
HXDLIN(  32)									_this->byteLength = newByteLength;
HXDLIN(  32)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  32)									this2 = _this;
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  32)				view = this2;
            			}
            			break;
            			case (int)8: {
HXDLIN(  32)				 ::Dynamic elements = null();
HXDLIN(  32)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  32)				::cpp::VirtualArray array = null();
HXDLIN(  32)				 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(  32)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  32)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  32)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  32)					byteoffset = 0;
            				}
HXDLIN(  32)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  32)				if (::hx::IsNotNull( elements )) {
HXDLIN(  32)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            				}
            				else {
HXDLIN(  32)					if (::hx::IsNotNull( array )) {
HXDLIN(  32)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  32)						_this->byteOffset = 0;
HXDLIN(  32)						_this->length = array->get_length();
HXDLIN(  32)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)						_this->buffer = this1;
HXDLIN(  32)						_this->copyFromArray(array,null());
HXDLIN(  32)						this2 = _this;
            					}
            					else {
HXDLIN(  32)						if (::hx::IsNotNull( vector )) {
HXDLIN(  32)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  32)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  32)							_this->byteOffset = 0;
HXDLIN(  32)							_this->length = array->get_length();
HXDLIN(  32)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)							_this->buffer = this1;
HXDLIN(  32)							_this->copyFromArray(array,null());
HXDLIN(  32)							this2 = _this;
            						}
            						else {
HXDLIN(  32)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  32)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  32)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  32)								int srcLength = view1->length;
HXDLIN(  32)								int srcByteOffset = view1->byteOffset;
HXDLIN(  32)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  32)								int elementSize = _this->bytesPerElement;
HXDLIN(  32)								if ((view1->type == _this->type)) {
HXDLIN(  32)									int srcLength = srcData->length;
HXDLIN(  32)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  32)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  32)									_this->buffer = this1;
HXDLIN(  32)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  32)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  32)								_this->byteOffset = 0;
HXDLIN(  32)								_this->length = srcLength;
HXDLIN(  32)								this2 = _this;
            							}
            							else {
HXDLIN(  32)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  32)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  32)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  32)									if ((in_byteOffset < 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									int bufferByteLength = buffer->length;
HXDLIN(  32)									int elementSize = _this->bytesPerElement;
HXDLIN(  32)									int newByteLength = bufferByteLength;
HXDLIN(  32)									if (::hx::IsNull( len )) {
HXDLIN(  32)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  32)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  32)										if ((newByteLength < 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  32)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  32)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  32)										if ((newRange > bufferByteLength)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  32)									_this->buffer = buffer;
HXDLIN(  32)									_this->byteOffset = in_byteOffset;
HXDLIN(  32)									_this->byteLength = newByteLength;
HXDLIN(  32)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  32)									this2 = _this;
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  32)				view = this2;
            			}
            			break;
            			case (int)9: {
HXDLIN(  32)				 ::Dynamic elements = null();
HXDLIN(  32)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN(  32)				::cpp::VirtualArray array = null();
HXDLIN(  32)				 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(  32)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(  32)				 ::Dynamic byteoffset = byte_offset;
HXDLIN(  32)				if (::hx::IsNull( byteoffset )) {
HXDLIN(  32)					byteoffset = 0;
            				}
HXDLIN(  32)				 ::lime::utils::ArrayBufferView this2;
HXDLIN(  32)				if (::hx::IsNotNull( elements )) {
HXDLIN(  32)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,9);
            				}
            				else {
HXDLIN(  32)					if (::hx::IsNotNull( array )) {
HXDLIN(  32)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN(  32)						_this->byteOffset = 0;
HXDLIN(  32)						_this->length = array->get_length();
HXDLIN(  32)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)						_this->buffer = this1;
HXDLIN(  32)						_this->copyFromArray(array,null());
HXDLIN(  32)						this2 = _this;
            					}
            					else {
HXDLIN(  32)						if (::hx::IsNotNull( vector )) {
HXDLIN(  32)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN(  32)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  32)							_this->byteOffset = 0;
HXDLIN(  32)							_this->length = array->get_length();
HXDLIN(  32)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  32)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  32)							_this->buffer = this1;
HXDLIN(  32)							_this->copyFromArray(array,null());
HXDLIN(  32)							this2 = _this;
            						}
            						else {
HXDLIN(  32)							if (::hx::IsNotNull( view1 )) {
HXDLIN(  32)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN(  32)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN(  32)								int srcLength = view1->length;
HXDLIN(  32)								int srcByteOffset = view1->byteOffset;
HXDLIN(  32)								int srcElementSize = view1->bytesPerElement;
HXDLIN(  32)								int elementSize = _this->bytesPerElement;
HXDLIN(  32)								if ((view1->type == _this->type)) {
HXDLIN(  32)									int srcLength = srcData->length;
HXDLIN(  32)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  32)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  32)									_this->buffer = this1;
HXDLIN(  32)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN(  32)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  32)								_this->byteOffset = 0;
HXDLIN(  32)								_this->length = srcLength;
HXDLIN(  32)								this2 = _this;
            							}
            							else {
HXDLIN(  32)								if (::hx::IsNotNull( buffer )) {
HXDLIN(  32)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN(  32)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(  32)									if ((in_byteOffset < 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN(  32)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN(  32)									int bufferByteLength = buffer->length;
HXDLIN(  32)									int elementSize = _this->bytesPerElement;
HXDLIN(  32)									int newByteLength = bufferByteLength;
HXDLIN(  32)									if (::hx::IsNull( len )) {
HXDLIN(  32)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  32)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN(  32)										if ((newByteLength < 0)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXDLIN(  32)										newByteLength = (len * _this->bytesPerElement);
HXDLIN(  32)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(  32)										if ((newRange > bufferByteLength)) {
HXDLIN(  32)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN(  32)									_this->buffer = buffer;
HXDLIN(  32)									_this->byteOffset = in_byteOffset;
HXDLIN(  32)									_this->byteLength = newByteLength;
HXDLIN(  32)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  32)									this2 = _this;
            								}
            								else {
HXDLIN(  32)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e)));
            								}
            							}
            						}
            					}
            				}
HXDLIN(  32)				view = this2;
            			}
            			break;
            		}
HXDLIN(  32)		return view;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Flat3x7_Impl__obj,getArray,return )


Flat3x7_Impl__obj::Flat3x7_Impl__obj()
{
}

bool Flat3x7_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readItem") ) { outValue = readItem_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getArray") ) { outValue = getArray_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"writeItem") ) { outValue = writeItem_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_index") ) { outValue = get_index_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_index") ) { outValue = set_index_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Flat3x7_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Flat3x7_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Flat3x7_Impl__obj::__mClass;

static ::String Flat3x7_Impl__obj_sStaticFields[] = {
	HX_("readItem",89,9f,b7,6d),
	HX_("writeItem",92,b9,73,4e),
	HX_("_new",61,15,1f,3f),
	HX_("get_index",69,f7,bd,01),
	HX_("set_index",75,e3,0e,e5),
	HX_("getArray",23,7d,66,85),
	::String(null())
};

void Flat3x7_Impl__obj::__register()
{
	Flat3x7_Impl__obj _hx_dummy;
	Flat3x7_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_",0b,14,8b,7d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Flat3x7_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Flat3x7_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Flat3x7_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Flat3x7_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Flat3x7_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace dsHelper
} // end namespace flatInterleave
} // end namespace core
} // end namespace _Flat3x7
