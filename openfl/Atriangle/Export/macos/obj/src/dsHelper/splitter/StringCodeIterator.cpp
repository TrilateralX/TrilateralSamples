// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_dsHelper_splitter_StringCodeIterator
#include <dsHelper/splitter/StringCodeIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b78640124a4df8ec_3_new,"dsHelper.splitter.StringCodeIterator","new",0x2cf1aff4,"dsHelper.splitter.StringCodeIterator.new","dsHelper/splitter/StringCodeIterator.hx",3,0xc1b4c61c)
HX_LOCAL_STACK_FRAME(_hx_pos_b78640124a4df8ec_19_addChar,"dsHelper.splitter.StringCodeIterator","addChar",0x4fc3db2b,"dsHelper.splitter.StringCodeIterator.addChar","dsHelper/splitter/StringCodeIterator.hx",19,0xc1b4c61c)
HX_LOCAL_STACK_FRAME(_hx_pos_b78640124a4df8ec_22_toStr,"dsHelper.splitter.StringCodeIterator","toStr",0x0b9d468a,"dsHelper.splitter.StringCodeIterator.toStr","dsHelper/splitter/StringCodeIterator.hx",22,0xc1b4c61c)
HX_LOCAL_STACK_FRAME(_hx_pos_b78640124a4df8ec_28_isRepeat,"dsHelper.splitter.StringCodeIterator","isRepeat",0x1b715ad1,"dsHelper.splitter.StringCodeIterator.isRepeat","dsHelper/splitter/StringCodeIterator.hx",28,0xc1b4c61c)
HX_LOCAL_STACK_FRAME(_hx_pos_b78640124a4df8ec_35_resetBuffer,"dsHelper.splitter.StringCodeIterator","resetBuffer",0x404ed3c3,"dsHelper.splitter.StringCodeIterator.resetBuffer","dsHelper/splitter/StringCodeIterator.hx",35,0xc1b4c61c)
HX_LOCAL_STACK_FRAME(_hx_pos_b78640124a4df8ec_39_reset,"dsHelper.splitter.StringCodeIterator","reset",0xde4c3663,"dsHelper.splitter.StringCodeIterator.reset","dsHelper/splitter/StringCodeIterator.hx",39,0xc1b4c61c)
HX_LOCAL_STACK_FRAME(_hx_pos_b78640124a4df8ec_43_hasNext,"dsHelper.splitter.StringCodeIterator","hasNext",0xea0ddf01,"dsHelper.splitter.StringCodeIterator.hasNext","dsHelper/splitter/StringCodeIterator.hx",43,0xc1b4c61c)
HX_LOCAL_STACK_FRAME(_hx_pos_b78640124a4df8ec_46_next,"dsHelper.splitter.StringCodeIterator","next",0x268846df,"dsHelper.splitter.StringCodeIterator.next","dsHelper/splitter/StringCodeIterator.hx",46,0xc1b4c61c)
namespace dsHelper{
namespace splitter{

void StringCodeIterator_obj::__construct(::String str_, ::Dynamic __o_pos_){
            		 ::Dynamic pos_ = __o_pos_;
            		if (::hx::IsNull(__o_pos_)) pos_ = 0;
            	HX_GC_STACKFRAME(&_hx_pos_b78640124a4df8ec_3_new)
HXLINE(   4)		this->str = HX_("",00,00,00,00);
HXLINE(  12)		this->pos = ( (int)(pos_) );
HXLINE(  13)		this->str = str_;
HXLINE(  14)		this->length = this->str.length;
HXLINE(  15)		this->b =  ::StringBuf_obj::__alloc( HX_CTX );
            	}

Dynamic StringCodeIterator_obj::__CreateEmpty() { return new StringCodeIterator_obj; }

void *StringCodeIterator_obj::_hx_vtable = 0;

Dynamic StringCodeIterator_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StringCodeIterator_obj > _hx_result = new StringCodeIterator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool StringCodeIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x30d031b8;
}

void StringCodeIterator_obj::addChar(){
            	HX_STACKFRAME(&_hx_pos_b78640124a4df8ec_19_addChar)
HXDLIN(  19)		 ::StringBuf _this = this->b;
HXDLIN(  19)		int c = this->c;
HXDLIN(  19)		if ((c >= 127)) {
HXDLIN(  19)			::String x = ::String::fromCharCode(c);
HXDLIN(  19)			if (::hx::IsNotNull( _this->charBuf )) {
HXDLIN(  19)				_this->flush();
            			}
HXDLIN(  19)			if (::hx::IsNull( _this->b )) {
HXDLIN(  19)				_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            			}
            			else {
HXDLIN(  19)				::Array< ::String > _this1 = _this->b;
HXDLIN(  19)				_this1->push(::Std_obj::string(x));
            			}
            		}
            		else {
HXDLIN(  19)			if (::hx::IsNull( _this->charBuf )) {
HXDLIN(  19)				_this->charBuf = ::Array_obj< char >::__new();
            			}
HXDLIN(  19)			_this->charBuf->push(c);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringCodeIterator_obj,addChar,(void))

::String StringCodeIterator_obj::toStr(){
            	HX_STACKFRAME(&_hx_pos_b78640124a4df8ec_22_toStr)
HXLINE(  23)		this->last2 = this->last;
HXLINE(  24)		this->last = this->b->toString();
HXLINE(  25)		return this->last;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringCodeIterator_obj,toStr,return )

bool StringCodeIterator_obj::isRepeat(){
            	HX_STACKFRAME(&_hx_pos_b78640124a4df8ec_28_isRepeat)
HXLINE(  29)		bool out;
HXLINE(  31)		return (this->last == this->last2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringCodeIterator_obj,isRepeat,return )

void StringCodeIterator_obj::resetBuffer(){
            	HX_GC_STACKFRAME(&_hx_pos_b78640124a4df8ec_35_resetBuffer)
HXDLIN(  35)		this->b =  ::StringBuf_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringCodeIterator_obj,resetBuffer,(void))

void StringCodeIterator_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_b78640124a4df8ec_39_reset)
HXDLIN(  39)		this->pos = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringCodeIterator_obj,reset,(void))

bool StringCodeIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_b78640124a4df8ec_43_hasNext)
HXDLIN(  43)		return (this->pos < this->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringCodeIterator_obj,hasNext,return )

int StringCodeIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_b78640124a4df8ec_46_next)
HXLINE(  47)		this->c = this->str.cca(this->pos++);
HXLINE(  48)		return this->c;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringCodeIterator_obj,next,return )


::hx::ObjectPtr< StringCodeIterator_obj > StringCodeIterator_obj::__new(::String str_, ::Dynamic __o_pos_) {
	::hx::ObjectPtr< StringCodeIterator_obj > __this = new StringCodeIterator_obj();
	__this->__construct(str_,__o_pos_);
	return __this;
}

::hx::ObjectPtr< StringCodeIterator_obj > StringCodeIterator_obj::__alloc(::hx::Ctx *_hx_ctx,::String str_, ::Dynamic __o_pos_) {
	StringCodeIterator_obj *__this = (StringCodeIterator_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StringCodeIterator_obj), true, "dsHelper.splitter.StringCodeIterator"));
	*(void **)__this = StringCodeIterator_obj::_hx_vtable;
	__this->__construct(str_,__o_pos_);
	return __this;
}

StringCodeIterator_obj::StringCodeIterator_obj()
{
}

void StringCodeIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StringCodeIterator);
	HX_MARK_MEMBER_NAME(str,"str");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_MEMBER_NAME(last2,"last2");
	HX_MARK_MEMBER_NAME(last,"last");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void StringCodeIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(str,"str");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(c,"c");
	HX_VISIT_MEMBER_NAME(last2,"last2");
	HX_VISIT_MEMBER_NAME(last,"last");
	HX_VISIT_MEMBER_NAME(length,"length");
}

::hx::Val StringCodeIterator_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { return ::hx::Val( b ); }
		if (HX_FIELD_EQ(inName,"c") ) { return ::hx::Val( c ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { return ::hx::Val( str ); }
		if (HX_FIELD_EQ(inName,"pos") ) { return ::hx::Val( pos ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"last") ) { return ::hx::Val( last ); }
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"last2") ) { return ::hx::Val( last2 ); }
		if (HX_FIELD_EQ(inName,"toStr") ) { return ::hx::Val( toStr_dyn() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addChar") ) { return ::hx::Val( addChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasNext") ) { return ::hx::Val( hasNext_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isRepeat") ) { return ::hx::Val( isRepeat_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"resetBuffer") ) { return ::hx::Val( resetBuffer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StringCodeIterator_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast<  ::StringBuf >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { str=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"last") ) { last=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"last2") ) { last2=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StringCodeIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("str",b1,a8,57,00));
	outFields->push(HX_("b",62,00,00,00));
	outFields->push(HX_("pos",94,5d,55,00));
	outFields->push(HX_("c",63,00,00,00));
	outFields->push(HX_("last2",1c,01,bc,6f));
	outFields->push(HX_("last",56,0a,ad,47));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StringCodeIterator_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(StringCodeIterator_obj,str),HX_("str",b1,a8,57,00)},
	{::hx::fsObject /*  ::StringBuf */ ,(int)offsetof(StringCodeIterator_obj,b),HX_("b",62,00,00,00)},
	{::hx::fsInt,(int)offsetof(StringCodeIterator_obj,pos),HX_("pos",94,5d,55,00)},
	{::hx::fsInt,(int)offsetof(StringCodeIterator_obj,c),HX_("c",63,00,00,00)},
	{::hx::fsString,(int)offsetof(StringCodeIterator_obj,last2),HX_("last2",1c,01,bc,6f)},
	{::hx::fsString,(int)offsetof(StringCodeIterator_obj,last),HX_("last",56,0a,ad,47)},
	{::hx::fsInt,(int)offsetof(StringCodeIterator_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StringCodeIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String StringCodeIterator_obj_sMemberFields[] = {
	HX_("str",b1,a8,57,00),
	HX_("b",62,00,00,00),
	HX_("pos",94,5d,55,00),
	HX_("c",63,00,00,00),
	HX_("last2",1c,01,bc,6f),
	HX_("last",56,0a,ad,47),
	HX_("length",e6,94,07,9f),
	HX_("addChar",97,a1,fc,7d),
	HX_("toStr",f6,59,19,14),
	HX_("isRepeat",e5,32,e6,5e),
	HX_("resetBuffer",2f,40,a9,70),
	HX_("reset",cf,49,c8,e6),
	HX_("hasNext",6d,a5,46,18),
	HX_("next",f3,84,02,49),
	::String(null()) };

::hx::Class StringCodeIterator_obj::__mClass;

void StringCodeIterator_obj::__register()
{
	StringCodeIterator_obj _hx_dummy;
	StringCodeIterator_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("dsHelper.splitter.StringCodeIterator",02,e6,7d,bb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StringCodeIterator_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StringCodeIterator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringCodeIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringCodeIterator_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace dsHelper
} // end namespace splitter
