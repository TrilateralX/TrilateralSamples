// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_text_GlyphPosition
#include <openfl/_internal/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayout
#include <openfl/_internal/text/TextLayout.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_105_new,"openfl._internal.text.TextEngine","new",0xcc80cb52,"openfl._internal.text.TextEngine.new","openfl/_internal/text/TextEngine.hx",105,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_155_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",155,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_150_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",150,0xdff93b7f)
static const ::String _hx_array_data_a0887a60_3[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_237_getBounds,"openfl._internal.text.TextEngine","getBounds",0x5ce2cc1d,"openfl._internal.text.TextEngine.getBounds","openfl/_internal/text/TextEngine.hx",237,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_552_getLine,"openfl._internal.text.TextEngine","getLine",0xf060239c,"openfl._internal.text.TextEngine.getLine","openfl/_internal/text/TextEngine.hx",552,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_569_getLineBreakIndex,"openfl._internal.text.TextEngine","getLineBreakIndex",0x0741948f,"openfl._internal.text.TextEngine.getLineBreakIndex","openfl/_internal/text/TextEngine.hx",569,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_579_getLineMeasurements,"openfl._internal.text.TextEngine","getLineMeasurements",0x203f1eb3,"openfl._internal.text.TextEngine.getLineMeasurements","openfl/_internal/text/TextEngine.hx",579,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_739_getLayoutGroups,"openfl._internal.text.TextEngine","getLayoutGroups",0xa3099646,"openfl._internal.text.TextEngine.getLayoutGroups","openfl/_internal/text/TextEngine.hx",739,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1605_restrictText,"openfl._internal.text.TextEngine","restrictText",0x020728d7,"openfl._internal.text.TextEngine.restrictText","openfl/_internal/text/TextEngine.hx",1605,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1626_setTextAlignment,"openfl._internal.text.TextEngine","setTextAlignment",0xb5caa542,"openfl._internal.text.TextEngine.setTextAlignment","openfl/_internal/text/TextEngine.hx",1626,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1733_trimText,"openfl._internal.text.TextEngine","trimText",0xf449c67d,"openfl._internal.text.TextEngine.trimText","openfl/_internal/text/TextEngine.hx",1733,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1748_update,"openfl._internal.text.TextEngine","update",0x7da66e57,"openfl._internal.text.TextEngine.update","openfl/_internal/text/TextEngine.hx",1748,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1780_get_bottomScrollV,"openfl._internal.text.TextEngine","get_bottomScrollV",0x630381c7,"openfl._internal.text.TextEngine.get_bottomScrollV","openfl/_internal/text/TextEngine.hx",1780,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1810_get_maxScrollV,"openfl._internal.text.TextEngine","get_maxScrollV",0xb4491bfc,"openfl._internal.text.TextEngine.get_maxScrollV","openfl/_internal/text/TextEngine.hx",1810,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1843_set_restrict,"openfl._internal.text.TextEngine","set_restrict",0x897ab987,"openfl._internal.text.TextEngine.set_restrict","openfl/_internal/text/TextEngine.hx",1843,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1864_get_scrollV,"openfl._internal.text.TextEngine","get_scrollV",0xb7bed0b2,"openfl._internal.text.TextEngine.get_scrollV","openfl/_internal/text/TextEngine.hx",1864,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1873_set_scrollV,"openfl._internal.text.TextEngine","set_scrollV",0xc22bd7be,"openfl._internal.text.TextEngine.set_scrollV","openfl/_internal/text/TextEngine.hx",1873,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1880_set_text,"openfl._internal.text.TextEngine","set_text",0x09f7f978,"openfl._internal.text.TextEngine.set_text","openfl/_internal/text/TextEngine.hx",1880,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_176_findFont,"openfl._internal.text.TextEngine","findFont",0x253a8276,"openfl._internal.text.TextEngine.findFont","openfl/_internal/text/TextEngine.hx",176,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_212_findFontVariant,"openfl._internal.text.TextEngine","findFontVariant",0xfb6dc0af,"openfl._internal.text.TextEngine.findFontVariant","openfl/_internal/text/TextEngine.hx",212,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_262_getFormatHeight,"openfl._internal.text.TextEngine","getFormatHeight",0xaafdc226,"openfl._internal.text.TextEngine.getFormatHeight","openfl/_internal/text/TextEngine.hx",262,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_298_getFont,"openfl._internal.text.TextEngine","getFont",0xec6d6977,"openfl._internal.text.TextEngine.getFont","openfl/_internal/text/TextEngine.hx",298,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_355_getFontInstance,"openfl._internal.text.TextEngine","getFontInstance",0xe749142c,"openfl._internal.text.TextEngine.getFontInstance","openfl/_internal/text/TextEngine.hx",355,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_34_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",34,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_36_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",36,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_37_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",37,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_38_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",38,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_39_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",39,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_40_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",40,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_41_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",41,0xdff93b7f)
namespace openfl{
namespace _internal{
namespace text{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_105_new)
HXLINE( 106)		this->textField = textField;
HXLINE( 108)		this->width = ( (Float)(100) );
HXLINE( 109)		this->height = ( (Float)(100) );
HXLINE( 110)		this->set_text(HX_("",00,00,00,00));
HXLINE( 112)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,0,0);
HXLINE( 113)		this->textBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,0,0);
HXLINE( 115)		this->type = 0;
HXLINE( 116)		this->autoSize = 2;
HXLINE( 117)		this->embedFonts = false;
HXLINE( 118)		this->selectable = true;
HXLINE( 119)		this->borderColor = 0;
HXLINE( 120)		this->border = false;
HXLINE( 121)		this->backgroundColor = 16777215;
HXLINE( 122)		this->background = false;
HXLINE( 123)		this->gridFitType = 1;
HXLINE( 124)		this->maxChars = 0;
HXLINE( 125)		this->multiline = false;
HXLINE( 126)		this->numLines = 1;
HXLINE( 127)		this->sharpness = ( (Float)(0) );
HXLINE( 128)		this->scrollH = 0;
HXLINE( 129)		this->set_scrollV(1);
HXLINE( 130)		this->wordWrap = false;
HXLINE( 132)		int length = null();
HXDLIN( 132)		bool fixed = null();
HXDLIN( 132)		::Array< Float > array = null();
HXDLIN( 132)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
HXLINE( 133)		int length1 = null();
HXDLIN( 133)		bool fixed1 = null();
HXDLIN( 133)		::Array< int > array1 = null();
HXDLIN( 133)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,array1);
HXLINE( 134)		int length2 = null();
HXDLIN( 134)		bool fixed2 = null();
HXDLIN( 134)		::Array< Float > array2 = null();
HXDLIN( 134)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,array2,true);
HXLINE( 135)		int length3 = null();
HXDLIN( 135)		bool fixed3 = null();
HXDLIN( 135)		::Array< Float > array3 = null();
HXDLIN( 135)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,array3,true);
HXLINE( 136)		int length4 = null();
HXDLIN( 136)		bool fixed4 = null();
HXDLIN( 136)		::Array< Float > array4 = null();
HXDLIN( 136)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,array4,true);
HXLINE( 137)		int length5 = null();
HXDLIN( 137)		bool fixed5 = null();
HXDLIN( 137)		::Array< Float > array5 = null();
HXDLIN( 137)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,array5,true);
HXLINE( 138)		int length6 = null();
HXDLIN( 138)		bool fixed6 = null();
HXDLIN( 138)		::Array< ::Dynamic> array6 = null();
HXDLIN( 138)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,array6,true);
HXLINE( 139)		int length7 = null();
HXDLIN( 139)		bool fixed7 = null();
HXDLIN( 139)		::Array< ::Dynamic> array7 = null();
HXDLIN( 139)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,array7,true);
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7042c0a8;
}

 ::EReg TextEngine_obj::createRestrictRegexp(::String restrict){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,declined) HXARGC(1)
            		::String _hx_run( ::EReg ereg){
            			HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_155_createRestrictRegexp)
HXLINE( 156)			::Array< ::String > declined1 = declined;
HXDLIN( 156)			int accepted = 0;
HXDLIN( 156)			::String declined2 = declined1->__get(accepted);
HXDLIN( 156)			declined1[accepted] = (declined2 + ereg->matched(1));
HXLINE( 157)			return HX_("",00,00,00,00);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_150_createRestrictRegexp)
HXLINE( 151)		 ::EReg declinedRange =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\^(.-.|.)",ee,f5,da,ba),HX_("gu",2e,5a,00,00));
HXLINE( 152)		::Array< ::String > declined = ::Array_obj< ::String >::fromData( _hx_array_data_a0887a60_3,1);
HXLINE( 154)		::String accepted = declinedRange->map(restrict, ::Dynamic(new _hx_Closure_0(declined)));
HXLINE( 160)		::Array< ::String > testRegexpParts = ::Array_obj< ::String >::__new(0);
HXLINE( 162)		if ((accepted.length > 0)) {
HXLINE( 164)			testRegexpParts->push(((HX_("[^",a3,4f,00,00) + restrict) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 167)		if ((declined->__get(0).length > 0)) {
HXLINE( 169)			testRegexpParts->push(((HX_("[",5b,00,00,00) + declined->__get(0)) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 172)		return  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + testRegexpParts->join(HX_("|",7c,00,00,00))) + HX_(")",29,00,00,00)),HX_("g",67,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,createRestrictRegexp,return )

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_237_getBounds)
HXLINE( 238)		int padding;
HXDLIN( 238)		if (this->border) {
HXLINE( 238)			padding = 1;
            		}
            		else {
HXLINE( 238)			padding = 0;
            		}
HXLINE( 240)		this->bounds->width = (this->width + padding);
HXLINE( 241)		this->bounds->height = (this->height + padding);
HXLINE( 243)		Float x = this->width;
HXDLIN( 243)		Float y = this->width;
HXLINE( 245)		{
HXLINE( 245)			 ::Dynamic group = this->layoutGroups->iterator();
HXDLIN( 245)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 245)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 247)				if ((group1->offsetX < x)) {
HXLINE( 247)					x = group1->offsetX;
            				}
HXLINE( 248)				if ((group1->offsetY < y)) {
HXLINE( 248)					y = group1->offsetY;
            				}
            			}
            		}
HXLINE( 251)		if ((x >= this->width)) {
HXLINE( 251)			x = ( (Float)(2) );
            		}
HXLINE( 252)		if ((y >= this->height)) {
HXLINE( 252)			y = ( (Float)(2) );
            		}
HXLINE( 258)		this->textBounds->setTo(::Math_obj::max((x - ( (Float)(2) )),( (Float)(0) )),::Math_obj::max((y - ( (Float)(2) )),( (Float)(0) )),::Math_obj::min((this->textWidth + 4),(this->bounds->width + 4)),::Math_obj::min((this->textHeight + 4),(this->bounds->height + 4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_552_getLine)
HXLINE( 553)		bool _hx_tmp;
HXDLIN( 553)		if ((index >= 0)) {
HXLINE( 553)			_hx_tmp = (index > (this->lineBreaks->get_length() + 1));
            		}
            		else {
HXLINE( 553)			_hx_tmp = true;
            		}
HXDLIN( 553)		if (_hx_tmp) {
HXLINE( 555)			return null();
            		}
HXLINE( 558)		if ((this->lineBreaks->get_length() == 0)) {
HXLINE( 560)			return this->text;
            		}
            		else {
HXLINE( 564)			::String _hx_tmp = this->text;
HXDLIN( 564)			int _hx_tmp1;
HXDLIN( 564)			if ((index > 0)) {
HXLINE( 564)				_hx_tmp1 = this->lineBreaks->get((index - 1));
            			}
            			else {
HXLINE( 564)				_hx_tmp1 = 0;
            			}
HXDLIN( 564)			return _hx_tmp.substring(_hx_tmp1,this->lineBreaks->get(index));
            		}
HXLINE( 558)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

int TextEngine_obj::getLineBreakIndex(::hx::Null< int >  __o_startIndex){
            		int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_569_getLineBreakIndex)
HXLINE( 570)		int cr = this->text.indexOf(HX_("\n",0a,00,00,00),startIndex);
HXLINE( 571)		int lf = this->text.indexOf(HX_("\r",0d,00,00,00),startIndex);
HXLINE( 573)		if ((cr == -1)) {
HXLINE( 573)			return lf;
            		}
HXLINE( 574)		if ((lf == -1)) {
HXLINE( 574)			return cr;
            		}
HXLINE( 575)		if ((cr < lf)) {
HXLINE( 575)			return cr;
            		}
            		else {
HXLINE( 575)			return lf;
            		}
HXDLIN( 575)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_579_getLineMeasurements)
HXLINE( 580)		this->lineAscents->set_length(0);
HXLINE( 581)		this->lineDescents->set_length(0);
HXLINE( 582)		this->lineLeadings->set_length(0);
HXLINE( 583)		this->lineHeights->set_length(0);
HXLINE( 584)		this->lineWidths->set_length(0);
HXLINE( 586)		Float currentLineAscent = ((Float)0.0);
HXLINE( 587)		Float currentLineDescent = ((Float)0.0);
HXLINE( 588)		 ::Dynamic currentLineLeading = null();
HXLINE( 589)		Float currentLineHeight = ((Float)0.0);
HXLINE( 590)		Float currentLineWidth = ((Float)0.0);
HXLINE( 591)		Float currentTextHeight = ((Float)0.0);
HXLINE( 593)		this->textWidth = ( (Float)(0) );
HXLINE( 594)		this->textHeight = ( (Float)(0) );
HXLINE( 595)		this->numLines = 1;
HXLINE( 596)		this->maxScrollH = 0;
HXLINE( 598)		{
HXLINE( 598)			 ::Dynamic group = this->layoutGroups->iterator();
HXDLIN( 598)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 598)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 600)				while((group1->lineIndex > (this->numLines - 1))){
HXLINE( 602)					this->lineAscents->push(currentLineAscent);
HXLINE( 603)					this->lineDescents->push(currentLineDescent);
HXLINE( 604)					{
HXLINE( 604)						Float _hx_tmp;
HXDLIN( 604)						if (::hx::IsNotNull( currentLineLeading )) {
HXLINE( 604)							_hx_tmp = ( (Float)(currentLineLeading) );
            						}
            						else {
HXLINE( 604)							_hx_tmp = ( (Float)(0) );
            						}
HXDLIN( 604)						this->lineLeadings->push(_hx_tmp);
            					}
HXLINE( 605)					this->lineHeights->push(currentLineHeight);
HXLINE( 606)					this->lineWidths->push(currentLineWidth);
HXLINE( 608)					currentLineAscent = ( (Float)(0) );
HXLINE( 609)					currentLineDescent = ( (Float)(0) );
HXLINE( 610)					currentLineLeading = null();
HXLINE( 611)					currentLineHeight = ( (Float)(0) );
HXLINE( 612)					currentLineWidth = ( (Float)(0) );
HXLINE( 614)					this->numLines++;
            				}
HXLINE( 617)				currentLineAscent = ::Math_obj::max(currentLineAscent,group1->ascent);
HXLINE( 618)				currentLineDescent = ::Math_obj::max(currentLineDescent,group1->descent);
HXLINE( 620)				if (::hx::IsNull( currentLineLeading )) {
HXLINE( 622)					currentLineLeading = group1->leading;
            				}
            				else {
HXLINE( 626)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(currentLineLeading) ),( (Float)(group1->leading) )));
            				}
HXLINE( 629)				currentLineHeight = ::Math_obj::max(currentLineHeight,group1->height);
HXLINE( 630)				currentLineWidth = ((group1->offsetX - ( (Float)(2) )) + group1->width);
HXLINE( 632)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 634)					this->textWidth = currentLineWidth;
            				}
HXLINE( 637)				currentTextHeight = (((group1->offsetY - ( (Float)(2) )) + group1->ascent) + group1->descent);
HXLINE( 639)				if ((currentTextHeight > this->textHeight)) {
HXLINE( 641)					this->textHeight = currentTextHeight;
            				}
            			}
            		}
HXLINE( 645)		bool _hx_tmp;
HXDLIN( 645)		bool _hx_tmp1;
HXDLIN( 645)		if ((this->textHeight == 0)) {
HXLINE( 645)			_hx_tmp1 = ::hx::IsNotNull( this->textField );
            		}
            		else {
HXLINE( 645)			_hx_tmp1 = false;
            		}
HXDLIN( 645)		if (_hx_tmp1) {
HXLINE( 645)			_hx_tmp = ::hx::IsEq( this->textField->get_type(),1 );
            		}
            		else {
HXLINE( 645)			_hx_tmp = false;
            		}
HXDLIN( 645)		if (_hx_tmp) {
HXLINE( 647)			 ::openfl::text::TextFormat currentFormat = this->textField->_hx___textFormat;
HXLINE( 648)			Float ascent;
HXDLIN( 648)			Float descent;
HXLINE( 650)			 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE( 652)			if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 654)				ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 655)				descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            			}
            			else {
HXLINE( 657)				bool _hx_tmp;
HXDLIN( 657)				if (::hx::IsNotNull( font )) {
HXLINE( 657)					_hx_tmp = (font->unitsPerEM != 0);
            				}
            				else {
HXLINE( 657)					_hx_tmp = false;
            				}
HXDLIN( 657)				if (_hx_tmp) {
HXLINE( 660)					ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 661)					descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            				}
            				else {
HXLINE( 669)					ascent = ( (Float)(currentFormat->size) );
HXLINE( 670)					descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            				}
            			}
HXLINE( 648)			 ::Dynamic leading = currentFormat->leading;
HXDLIN( 648)			Float heightValue = ((ascent + descent) + leading);
HXLINE( 677)			currentLineAscent = ascent;
HXLINE( 678)			currentLineDescent = descent;
HXLINE( 679)			currentLineLeading = leading;
HXLINE( 681)			currentTextHeight = (ascent + descent);
HXLINE( 682)			this->textHeight = currentTextHeight;
            		}
HXLINE( 685)		this->lineAscents->push(currentLineAscent);
HXLINE( 686)		this->lineDescents->push(currentLineDescent);
HXLINE( 687)		{
HXLINE( 687)			Float _hx_tmp2;
HXDLIN( 687)			if (::hx::IsNotNull( currentLineLeading )) {
HXLINE( 687)				_hx_tmp2 = ( (Float)(currentLineLeading) );
            			}
            			else {
HXLINE( 687)				_hx_tmp2 = ( (Float)(0) );
            			}
HXDLIN( 687)			this->lineLeadings->push(_hx_tmp2);
            		}
HXLINE( 688)		this->lineHeights->push(currentLineHeight);
HXLINE( 689)		this->lineWidths->push(currentLineWidth);
HXLINE( 691)		if ((this->numLines == 1)) {
HXLINE( 693)			if (::hx::IsGreater( currentLineLeading,0 )) {
HXLINE( 695)				 ::openfl::_internal::text::TextEngine _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 695)				_hx_tmp->textHeight = (_hx_tmp->textHeight + currentLineLeading);
            			}
            		}
HXLINE( 699)		if ((this->layoutGroups->get_length() > 0)) {
HXLINE( 701)			::Dynamic this1 = this->layoutGroups;
HXDLIN( 701)			 ::openfl::_internal::text::TextLayoutGroup group = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - 1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE( 703)			bool _hx_tmp;
HXDLIN( 703)			if (::hx::IsNotNull( group )) {
HXLINE( 703)				_hx_tmp = (group->startIndex == group->endIndex);
            			}
            			else {
HXLINE( 703)				_hx_tmp = false;
            			}
HXDLIN( 703)			if (_hx_tmp) {
HXLINE( 705)				 ::openfl::_internal::text::TextEngine _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 705)				_hx_tmp->textHeight = (_hx_tmp->textHeight - currentLineHeight);
            			}
            		}
HXLINE( 709)		if (::hx::IsNotEq( this->autoSize,2 )) {
HXLINE( 711)			 ::Dynamic _hx_switch_0 = this->autoSize;
            			if (  (_hx_switch_0==0) ||  (_hx_switch_0==1) ||  (_hx_switch_0==3) ){
HXLINE( 714)				if (!(this->wordWrap)) {
HXLINE( 716)					this->width = (this->textWidth + 4);
            				}
HXLINE( 719)				this->height = (this->textHeight + 4);
HXLINE( 720)				this->bottomScrollV = this->numLines;
HXLINE( 713)				goto _hx_goto_10;
            			}
            			/* default */{
            			}
            			_hx_goto_10:;
            		}
HXLINE( 726)		if ((this->textWidth > (this->width - ( (Float)(4) )))) {
HXLINE( 728)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + 4));
            		}
            		else {
HXLINE( 732)			this->maxScrollH = 0;
            		}
HXLINE( 735)		if ((this->scrollH > this->maxScrollH)) {
HXLINE( 735)			this->scrollH = this->maxScrollH;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_739_getLayoutGroups)
HXLINE( 738)		 ::openfl::_internal::text::TextEngine _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 740)		this->layoutGroups->set_length(0);
HXLINE( 742)		bool _hx_tmp;
HXDLIN( 742)		if (::hx::IsNotNull( this->text )) {
HXLINE( 742)			_hx_tmp = (this->text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 742)			_hx_tmp = true;
            		}
HXDLIN( 742)		if (_hx_tmp) {
HXLINE( 742)			return;
            		}
HXLINE( 744)		int rangeIndex = -1;
HXLINE( 745)		 ::openfl::_internal::text::TextFormatRange formatRange = null();
HXLINE( 746)		 ::lime::text::Font font = null();
HXLINE( 748)		 ::openfl::text::TextFormat currentFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 751)		int leading = 0;
HXLINE( 752)		Float ascent = ((Float)0.0);
HXDLIN( 752)		Float maxAscent = ((Float)0.0);
HXLINE( 753)		Float descent = ((Float)0.0);
HXLINE( 756)		 ::Dynamic align = 3;
HXLINE( 757)		int blockIndent = 0;
HXLINE( 758)		bool bullet = false;
HXLINE( 759)		int indent = 0;
HXLINE( 760)		int leftMargin = 0;
HXLINE( 761)		int rightMargin = 0;
HXLINE( 762)		 ::Dynamic tabStops = null();
HXLINE( 764)		 ::openfl::_internal::text::TextLayoutGroup layoutGroup = null();
HXDLIN( 764)		::Array< ::Dynamic> positions = null();
HXLINE( 765)		Float widthValue = ((Float)0.0);
HXDLIN( 765)		int heightValue = 0;
HXDLIN( 765)		int maxHeightValue = 0;
HXLINE( 766)		int previousSpaceIndex = -2;
HXLINE( 767)		int previousBreakIndex = -1;
HXLINE( 768)		int spaceIndex = this->text.indexOf(HX_(" ",20,00,00,00),null());
HXLINE( 769)		int breakIndex = this->getLineBreakIndex(null());
HXLINE( 771)		Float offsetX = ((Float)2.0);
HXLINE( 772)		Float offsetY = ((Float)2.0);
HXLINE( 773)		int textIndex = 0;
HXLINE( 774)		int lineIndex = 0;
HXLINE(1289)		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1289)			rangeIndex = (rangeIndex + 1);
HXDLIN(1289)			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1289)			currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            		}
HXLINE(1290)		{
HXLINE(1290)			if (::hx::IsNotNull( currentFormat->align )) {
HXLINE( 975)				align = currentFormat->align;
            			}
HXLINE(1290)			bool _hx_tmp1 = ::hx::IsNotNull( currentFormat->blockIndent );
HXDLIN(1290)			bool _hx_tmp2 = ::hx::IsNotNull( currentFormat->bullet );
HXDLIN(1290)			bool _hx_tmp3 = ::hx::IsNotNull( currentFormat->indent );
HXDLIN(1290)			if (::hx::IsNotNull( currentFormat->leftMargin )) {
HXLINE( 995)				leftMargin = ( (int)(currentFormat->leftMargin) );
            			}
HXLINE(1290)			if (::hx::IsNotNull( currentFormat->rightMargin )) {
HXLINE(1000)				rightMargin = ( (int)(currentFormat->rightMargin) );
            			}
HXLINE(1290)			bool _hx_tmp4 = ::hx::IsNotNull( currentFormat->tabStops );
            		}
HXLINE(1291)		{
HXLINE(1291)			if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)				ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)				descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            			}
            			else {
HXLINE(1291)				bool _hx_tmp;
HXDLIN(1291)				if (::hx::IsNotNull( font )) {
HXLINE(1291)					_hx_tmp = (font->unitsPerEM != 0);
            				}
            				else {
HXLINE(1291)					_hx_tmp = false;
            				}
HXDLIN(1291)				if (_hx_tmp) {
HXLINE( 945)					ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)					descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            				}
            				else {
HXLINE( 951)					ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)					descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            				}
            			}
HXLINE( 955)			leading = ( (int)(currentFormat->leading) );
HXLINE( 957)			heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1291)			if ((heightValue > maxHeightValue)) {
HXLINE( 961)				maxHeightValue = heightValue;
            			}
HXLINE(1291)			if ((ascent > maxAscent)) {
HXLINE( 966)				maxAscent = ascent;
            			}
            		}
HXLINE(1293)		bool wrap;
HXLINE(1294)		int maxLoops = (this->text.length + 1);
HXLINE(1298)		while((textIndex < maxLoops)){
HXLINE(1300)			bool _hx_tmp;
HXDLIN(1300)			if ((breakIndex > -1)) {
HXLINE(1300)				if ((spaceIndex != -1)) {
HXLINE(1300)					_hx_tmp = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE(1300)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1300)				_hx_tmp = false;
            			}
HXDLIN(1300)			if (_hx_tmp) {
HXLINE(1304)				if ((textIndex <= breakIndex)) {
HXLINE(1306)					if ((breakIndex <= formatRange->end)) {
HXLINE(1306)						::String text = _gthis->text;
HXDLIN(1306)						Float letterSpacing = ((Float)0.0);
HXDLIN(1306)						if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)							letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            						}
HXLINE(1306)						if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1306)							_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN(1306)						_gthis->_hx___textLayout->set_text(null());
HXDLIN(1306)						_gthis->_hx___textLayout->set_font(font);
HXDLIN(1306)						if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1306)							_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            						}
HXDLIN(1306)						_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1306)						bool positions1;
HXDLIN(1306)						if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1306)							positions1 = (_gthis->sharpness < 400);
            						}
            						else {
HXLINE(1306)							positions1 = true;
            						}
HXDLIN(1306)						_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1306)						 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1306)						_gthis1->set_text(text.substring(textIndex,breakIndex));
HXDLIN(1306)						positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1306)						Float width = ((Float)0.0);
HXDLIN(1306)						int _g = 0;
HXDLIN(1306)						while((_g < positions->length)){
HXLINE(1306)							 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1306)							_g = (_g + 1);
HXDLIN(1306)							width = (width + position->advance->x);
            						}
HXDLIN(1306)						widthValue = width;
            					}
            					else {
HXLINE(1306)						int tempIndex = textIndex;
HXDLIN(1306)						int tempRangeEnd = formatRange->end;
HXDLIN(1306)						int countRanges = 0;
HXLINE(1046)						positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)						widthValue = ( (Float)(0) );
HXLINE(1306)						while(true){
HXLINE(1306)							if ((tempIndex != tempRangeEnd)) {
HXLINE(1306)								::String text = _gthis->text;
HXDLIN(1306)								Float letterSpacing = ((Float)0.0);
HXDLIN(1306)								if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)									letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXLINE(1306)								if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1306)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1306)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1306)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1306)								if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1306)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1306)								_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1306)								bool _hx_tmp;
HXDLIN(1306)								if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1306)									_hx_tmp = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1306)									_hx_tmp = true;
            								}
HXDLIN(1306)								_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1306)								 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1306)								_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1306)								::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)								positions = positions->concat(tempPositions);
            							}
HXLINE(1306)							if ((tempRangeEnd != breakIndex)) {
HXLINE(1306)								bool _hx_tmp;
HXDLIN(1306)								if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1306)									rangeIndex = (rangeIndex + 1);
HXDLIN(1306)									formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1306)									currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1306)									_hx_tmp = true;
            								}
            								else {
HXLINE(1306)									_hx_tmp = false;
            								}
HXDLIN(1306)								if (!(_hx_tmp)) {
HXLINE(1306)									::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1306)									goto _hx_goto_14;
            								}
HXLINE(1065)								tempIndex = tempRangeEnd;
HXLINE(1306)								if ((breakIndex < formatRange->end)) {
HXLINE(1306)									tempRangeEnd = breakIndex;
            								}
            								else {
HXLINE(1306)									tempRangeEnd = formatRange->end;
            								}
HXDLIN(1306)								countRanges = (countRanges + 1);
            							}
            							else {
HXLINE(1306)								Float width = ((Float)0.0);
HXDLIN(1306)								int _g = 0;
HXDLIN(1306)								while((_g < positions->length)){
HXLINE(1306)									 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1306)									_g = (_g + 1);
HXDLIN(1306)									width = (width + position->advance->x);
            								}
HXDLIN(1306)								widthValue = width;
HXDLIN(1306)								goto _hx_goto_14;
            							}
            						}
            						_hx_goto_14:;
HXDLIN(1306)						rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1306)						if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1306)							rangeIndex = (rangeIndex + 1);
HXDLIN(1306)							formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1306)							currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)							font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            						}
            					}
HXLINE(1307)					{
HXLINE(1307)						bool _hx_tmp;
HXDLIN(1307)						if ((_gthis->width >= 4)) {
HXLINE(1307)							_hx_tmp = _gthis->wordWrap;
            						}
            						else {
HXLINE(1307)							_hx_tmp = false;
            						}
HXDLIN(1307)						if (_hx_tmp) {
HXLINE(1307)							::Array< ::Dynamic> remainingPositions = positions;
HXDLIN(1307)							int i;
HXDLIN(1307)							int bufferCount;
HXDLIN(1307)							int placeIndex;
HXDLIN(1307)							Float positionWidth;
HXDLIN(1307)							 ::openfl::_internal::text::GlyphPosition currentPosition;
HXDLIN(1307)							Float width = ((Float)0.0);
HXDLIN(1307)							{
HXLINE(1307)								int _g = 0;
HXDLIN(1307)								while((_g < remainingPositions->length)){
HXLINE(1307)									 ::openfl::_internal::text::GlyphPosition position = remainingPositions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)									_g = (_g + 1);
HXDLIN(1307)									width = (width + position->advance->x);
            								}
            							}
HXDLIN(1307)							Float tempWidth = width;
HXDLIN(1307)							while(((offsetX + tempWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1202)								bufferCount = 0;
HXDLIN(1202)								i = bufferCount;
HXLINE(1203)								positionWidth = ((Float)0.0);
HXLINE(1307)								while(((offsetX + positionWidth) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1207)									currentPosition = remainingPositions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1307)									if ((currentPosition->advance->x == ((Float)0.0))) {
HXLINE(1307)										i = (i + 1);
HXDLIN(1307)										bufferCount = (bufferCount + 1);
            									}
            									else {
HXLINE(1307)										positionWidth = (positionWidth + currentPosition->advance->x);
HXDLIN(1307)										i = (i + 1);
            									}
            								}
HXDLIN(1307)								if ((positionWidth == ((Float)0.0))) {
HXLINE(1307)									goto _hx_goto_17;
            								}
            								else {
HXLINE(1307)									bool _hx_tmp;
HXDLIN(1307)									if ((i < 2)) {
HXLINE(1307)										_hx_tmp = ((positionWidth + offsetX) > (_gthis->width - ( (Float)(2) )));
            									}
            									else {
HXLINE(1307)										_hx_tmp = false;
            									}
HXDLIN(1307)									if (_hx_tmp) {
HXLINE(1307)										if ((((textIndex + i) - bufferCount) == breakIndex)) {
HXLINE(1307)											goto _hx_goto_17;
            										}
            									}
            									else {
HXLINE(1307)										while(((offsetX + positionWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1307)											i = (i - 1);
HXDLIN(1307)											if (((i - bufferCount) > 0)) {
HXLINE(1307)												{
HXLINE(1307)													int endIndex = ((textIndex + i) - bufferCount);
HXDLIN(1307)													if ((endIndex <= formatRange->end)) {
HXLINE(1307)														::String text = _gthis->text;
HXDLIN(1307)														Float letterSpacing = ((Float)0.0);
HXDLIN(1307)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)															letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1307)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1307)														bool positions1;
HXDLIN(1307)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)															positions1 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1307)															positions1 = true;
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1307)														 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1307)														_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1307)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)														Float width = ((Float)0.0);
HXDLIN(1307)														int _g = 0;
HXDLIN(1307)														while((_g < positions->length)){
HXLINE(1307)															 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)															_g = (_g + 1);
HXDLIN(1307)															width = (width + position->advance->x);
            														}
HXDLIN(1307)														widthValue = width;
            													}
            													else {
HXLINE(1307)														int tempIndex = textIndex;
HXDLIN(1307)														int tempRangeEnd = formatRange->end;
HXDLIN(1307)														int countRanges = 0;
HXLINE(1046)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)														widthValue = ( (Float)(0) );
HXLINE(1307)														while(true){
HXLINE(1307)															if ((tempIndex != tempRangeEnd)) {
HXLINE(1307)																::String text = _gthis->text;
HXDLIN(1307)																Float letterSpacing = ((Float)0.0);
HXDLIN(1307)																if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																	letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1307)																if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)																if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1307)																bool _hx_tmp;
HXDLIN(1307)																if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)																	_hx_tmp = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1307)																	_hx_tmp = true;
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1307)																 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1307)																_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1307)																::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																positions = positions->concat(tempPositions);
            															}
HXLINE(1307)															if ((tempRangeEnd != endIndex)) {
HXLINE(1307)																bool _hx_tmp;
HXDLIN(1307)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1307)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1307)																	currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1307)																	_hx_tmp = true;
            																}
            																else {
HXLINE(1307)																	_hx_tmp = false;
            																}
HXDLIN(1307)																if (!(_hx_tmp)) {
HXLINE(1307)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1307)																	goto _hx_goto_21;
            																}
HXLINE(1065)																tempIndex = tempRangeEnd;
HXLINE(1307)																if ((endIndex < formatRange->end)) {
HXLINE(1307)																	tempRangeEnd = endIndex;
            																}
            																else {
HXLINE(1307)																	tempRangeEnd = formatRange->end;
            																}
HXDLIN(1307)																countRanges = (countRanges + 1);
            															}
            															else {
HXLINE(1307)																Float width = ((Float)0.0);
HXDLIN(1307)																int _g = 0;
HXDLIN(1307)																while((_g < positions->length)){
HXLINE(1307)																	 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)																	_g = (_g + 1);
HXDLIN(1307)																	width = (width + position->advance->x);
            																}
HXDLIN(1307)																widthValue = width;
HXDLIN(1307)																goto _hx_goto_21;
            															}
            														}
            														_hx_goto_21:;
HXDLIN(1307)														rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1307)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)															rangeIndex = (rangeIndex + 1);
HXDLIN(1307)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1307)															currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXLINE(1250)												positionWidth = widthValue;
            											}
            											else {
HXLINE(1256)												i = 1;
HXLINE(1257)												bufferCount = 0;
HXLINE(1307)												{
HXLINE(1307)													int endIndex = (textIndex + 1);
HXDLIN(1307)													if ((endIndex <= formatRange->end)) {
HXLINE(1307)														::String text = _gthis->text;
HXDLIN(1307)														Float letterSpacing = ((Float)0.0);
HXDLIN(1307)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)															letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1307)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1307)														bool positions1;
HXDLIN(1307)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)															positions1 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1307)															positions1 = true;
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1307)														 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1307)														_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1307)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)														Float width = ((Float)0.0);
HXDLIN(1307)														int _g = 0;
HXDLIN(1307)														while((_g < positions->length)){
HXLINE(1307)															 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)															_g = (_g + 1);
HXDLIN(1307)															width = (width + position->advance->x);
            														}
HXDLIN(1307)														widthValue = width;
            													}
            													else {
HXLINE(1307)														int tempIndex = textIndex;
HXDLIN(1307)														int tempRangeEnd = formatRange->end;
HXDLIN(1307)														int countRanges = 0;
HXLINE(1046)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)														widthValue = ( (Float)(0) );
HXLINE(1307)														while(true){
HXLINE(1307)															if ((tempIndex != tempRangeEnd)) {
HXLINE(1307)																::String text = _gthis->text;
HXDLIN(1307)																Float letterSpacing = ((Float)0.0);
HXDLIN(1307)																if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																	letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1307)																if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)																if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1307)																bool _hx_tmp;
HXDLIN(1307)																if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)																	_hx_tmp = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1307)																	_hx_tmp = true;
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1307)																 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1307)																_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1307)																::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																positions = positions->concat(tempPositions);
            															}
HXLINE(1307)															if ((tempRangeEnd != endIndex)) {
HXLINE(1307)																bool _hx_tmp;
HXDLIN(1307)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1307)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1307)																	currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1307)																	_hx_tmp = true;
            																}
            																else {
HXLINE(1307)																	_hx_tmp = false;
            																}
HXDLIN(1307)																if (!(_hx_tmp)) {
HXLINE(1307)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1307)																	goto _hx_goto_24;
            																}
HXLINE(1065)																tempIndex = tempRangeEnd;
HXLINE(1307)																if ((endIndex < formatRange->end)) {
HXLINE(1307)																	tempRangeEnd = endIndex;
            																}
            																else {
HXLINE(1307)																	tempRangeEnd = formatRange->end;
            																}
HXDLIN(1307)																countRanges = (countRanges + 1);
            															}
            															else {
HXLINE(1307)																Float width = ((Float)0.0);
HXDLIN(1307)																int _g = 0;
HXDLIN(1307)																while((_g < positions->length)){
HXLINE(1307)																	 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)																	_g = (_g + 1);
HXDLIN(1307)																	width = (width + position->advance->x);
            																}
HXDLIN(1307)																widthValue = width;
HXDLIN(1307)																goto _hx_goto_24;
            															}
            														}
            														_hx_goto_24:;
HXDLIN(1307)														rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1307)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)															rangeIndex = (rangeIndex + 1);
HXDLIN(1307)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1307)															currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXLINE(1260)												positionWidth = ( (Float)(0) );
            											}
            										}
            									}
            								}
HXLINE(1265)								placeIndex = ((textIndex + i) - bufferCount);
HXLINE(1307)								{
HXLINE(1307)									if ((placeIndex <= formatRange->end)) {
HXLINE(1307)										::String text = _gthis->text;
HXDLIN(1307)										Float letterSpacing = ((Float)0.0);
HXDLIN(1307)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1307)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1307)										bool positions1;
HXDLIN(1307)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)											positions1 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1307)											positions1 = true;
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1307)										 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1307)										_gthis1->set_text(text.substring(textIndex,placeIndex));
HXDLIN(1307)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)										Float width = ((Float)0.0);
HXDLIN(1307)										int _g = 0;
HXDLIN(1307)										while((_g < positions->length)){
HXLINE(1307)											 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)											_g = (_g + 1);
HXDLIN(1307)											width = (width + position->advance->x);
            										}
HXDLIN(1307)										widthValue = width;
HXDLIN(1307)										bool _hx_tmp;
HXDLIN(1307)										if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1307)											_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1307)											_hx_tmp = true;
            										}
HXDLIN(1307)										if (_hx_tmp) {
HXLINE( 923)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex);
HXLINE(1307)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1307)											layoutGroup->format = formatRange->format;
HXDLIN(1307)											layoutGroup->startIndex = textIndex;
HXDLIN(1307)											layoutGroup->endIndex = placeIndex;
            										}
HXDLIN(1307)										layoutGroup->positions = positions;
HXDLIN(1307)										layoutGroup->offsetX = offsetX;
HXDLIN(1307)										layoutGroup->ascent = ascent;
HXDLIN(1307)										layoutGroup->descent = descent;
HXDLIN(1307)										layoutGroup->leading = leading;
HXDLIN(1307)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1307)										layoutGroup->offsetY = offsetY;
HXDLIN(1307)										layoutGroup->width = widthValue;
HXDLIN(1307)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1307)										offsetX = (offsetX + widthValue);
HXDLIN(1307)										if ((placeIndex == formatRange->end)) {
HXLINE(1108)											layoutGroup = null();
HXLINE(1307)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)												rangeIndex = (rangeIndex + 1);
HXDLIN(1307)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1307)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXLINE(1307)											{
HXLINE(1307)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1307)													bool _hx_tmp;
HXDLIN(1307)													if (::hx::IsNotNull( font )) {
HXLINE(1307)														_hx_tmp = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1307)														_hx_tmp = false;
            													}
HXDLIN(1307)													if (_hx_tmp) {
HXLINE( 945)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 951)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 955)												leading = ( (int)(currentFormat->leading) );
HXLINE( 957)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1307)												if ((heightValue > maxHeightValue)) {
HXLINE( 961)													maxHeightValue = heightValue;
            												}
HXLINE(1307)												if ((ascent > maxAscent)) {
HXLINE( 966)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1307)										while(true){
HXLINE(1307)											int tempRangeEnd;
HXDLIN(1307)											if ((placeIndex < formatRange->end)) {
HXLINE(1307)												tempRangeEnd = placeIndex;
            											}
            											else {
HXLINE(1307)												tempRangeEnd = formatRange->end;
            											}
HXDLIN(1307)											if ((textIndex != tempRangeEnd)) {
HXLINE(1307)												::String text = _gthis->text;
HXDLIN(1307)												Float letterSpacing = ((Float)0.0);
HXDLIN(1307)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1307)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1307)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1307)												_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1307)												bool positions1;
HXDLIN(1307)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)													positions1 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1307)													positions1 = true;
            												}
HXDLIN(1307)												_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1307)												 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1307)												_gthis1->set_text(text.substring(textIndex,tempRangeEnd));
HXDLIN(1307)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)												Float width = ((Float)0.0);
HXDLIN(1307)												int _g = 0;
HXDLIN(1307)												while((_g < positions->length)){
HXLINE(1307)													 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)													_g = (_g + 1);
HXDLIN(1307)													width = (width + position->advance->x);
            												}
HXDLIN(1307)												widthValue = width;
HXDLIN(1307)												bool _hx_tmp;
HXDLIN(1307)												if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1307)													_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1307)													_hx_tmp = true;
            												}
HXDLIN(1307)												if (_hx_tmp) {
HXLINE( 923)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd);
HXLINE(1307)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1307)													layoutGroup->format = formatRange->format;
HXDLIN(1307)													layoutGroup->startIndex = textIndex;
HXDLIN(1307)													layoutGroup->endIndex = tempRangeEnd;
            												}
HXDLIN(1307)												layoutGroup->positions = positions;
HXDLIN(1307)												layoutGroup->offsetX = offsetX;
HXDLIN(1307)												layoutGroup->ascent = ascent;
HXDLIN(1307)												layoutGroup->descent = descent;
HXDLIN(1307)												layoutGroup->leading = leading;
HXDLIN(1307)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1307)												layoutGroup->offsetY = offsetY;
HXDLIN(1307)												layoutGroup->width = widthValue;
HXDLIN(1307)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1307)												offsetX = (offsetX + widthValue);
HXLINE(1140)												textIndex = tempRangeEnd;
            											}
HXLINE(1307)											if ((tempRangeEnd == formatRange->end)) {
HXLINE(1143)												layoutGroup = null();
            											}
HXLINE(1307)											if ((tempRangeEnd == placeIndex)) {
HXLINE(1307)												goto _hx_goto_27;
            											}
HXDLIN(1307)											bool _hx_tmp;
HXDLIN(1307)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)												rangeIndex = (rangeIndex + 1);
HXDLIN(1307)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1307)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1307)												_hx_tmp = true;
            											}
            											else {
HXLINE(1307)												_hx_tmp = false;
            											}
HXDLIN(1307)											if (!(_hx_tmp)) {
HXLINE(1307)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1149,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1307)												goto _hx_goto_27;
            											}
HXDLIN(1307)											{
HXLINE(1307)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1307)													bool _hx_tmp;
HXDLIN(1307)													if (::hx::IsNotNull( font )) {
HXLINE(1307)														_hx_tmp = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1307)														_hx_tmp = false;
            													}
HXDLIN(1307)													if (_hx_tmp) {
HXLINE( 945)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 951)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 955)												leading = ( (int)(currentFormat->leading) );
HXLINE( 957)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1307)												if ((heightValue > maxHeightValue)) {
HXLINE( 961)													maxHeightValue = heightValue;
            												}
HXLINE(1307)												if ((ascent > maxAscent)) {
HXLINE( 966)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_27:;
            									}
HXLINE(1157)									textIndex = placeIndex;
            								}
HXLINE(1307)								{
HXLINE(1307)									{
HXLINE(1307)										if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1307)											bool _hx_tmp;
HXDLIN(1307)											if (::hx::IsNotNull( font )) {
HXLINE(1307)												_hx_tmp = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1307)												_hx_tmp = false;
            											}
HXDLIN(1307)											if (_hx_tmp) {
HXLINE( 945)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE( 951)												ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXLINE( 955)										leading = ( (int)(currentFormat->leading) );
HXLINE( 957)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1307)										if ((heightValue > maxHeightValue)) {
HXLINE( 961)											maxHeightValue = heightValue;
            										}
HXLINE(1307)										if ((ascent > maxAscent)) {
HXLINE( 966)											maxAscent = ascent;
            										}
            									}
HXLINE(1307)									int i1 = _gthis->layoutGroups->get_length();
HXDLIN(1307)									while(true){
HXLINE(1307)										i1 = (i1 - 1);
HXDLIN(1307)										if (!((i1 > -1))) {
HXLINE(1307)											goto _hx_goto_29;
            										}
HXDLIN(1307)										 ::openfl::_internal::text::TextLayoutGroup lg = _gthis->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1307)										if ((lg->lineIndex < lineIndex)) {
HXLINE(1307)											goto _hx_goto_29;
            										}
HXDLIN(1307)										if ((lg->lineIndex > lineIndex)) {
HXLINE(1307)											continue;
            										}
HXDLIN(1307)										lg->ascent = maxAscent;
HXDLIN(1307)										lg->height = ( (Float)(maxHeightValue) );
            									}
            									_hx_goto_29:;
HXDLIN(1307)									offsetY = (offsetY + maxHeightValue);
HXLINE(1182)									maxAscent = ((Float)0.0);
HXLINE(1183)									maxHeightValue = 0;
HXLINE(1307)									lineIndex = (lineIndex + 1);
HXLINE(1186)									offsetX = ( (Float)(2) );
            								}
HXLINE(1307)								if ((breakIndex <= formatRange->end)) {
HXLINE(1307)									::String text = _gthis->text;
HXDLIN(1307)									Float letterSpacing = ((Float)0.0);
HXDLIN(1307)									if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)										letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXLINE(1307)									if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1307)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)									if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1307)									_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1307)									bool positions1;
HXDLIN(1307)									if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)										positions1 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1307)										positions1 = true;
            									}
HXDLIN(1307)									_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1307)									 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1307)									_gthis1->set_text(text.substring(placeIndex,breakIndex));
HXDLIN(1307)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)									Float width = ((Float)0.0);
HXDLIN(1307)									int _g = 0;
HXDLIN(1307)									while((_g < positions->length)){
HXLINE(1307)										 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)										_g = (_g + 1);
HXDLIN(1307)										width = (width + position->advance->x);
            									}
HXDLIN(1307)									widthValue = width;
            								}
            								else {
HXLINE(1307)									int tempIndex = placeIndex;
HXDLIN(1307)									int tempRangeEnd = formatRange->end;
HXDLIN(1307)									int countRanges = 0;
HXLINE(1046)									positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)									widthValue = ( (Float)(0) );
HXLINE(1307)									while(true){
HXLINE(1307)										if ((tempIndex != tempRangeEnd)) {
HXLINE(1307)											::String text = _gthis->text;
HXDLIN(1307)											Float letterSpacing = ((Float)0.0);
HXDLIN(1307)											if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)												letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1307)											if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1307)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)											if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1307)											_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1307)											bool _hx_tmp;
HXDLIN(1307)											if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)												_hx_tmp = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1307)												_hx_tmp = true;
            											}
HXDLIN(1307)											_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1307)											 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1307)											_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1307)											::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)											positions = positions->concat(tempPositions);
            										}
HXLINE(1307)										if ((tempRangeEnd != breakIndex)) {
HXLINE(1307)											bool _hx_tmp;
HXDLIN(1307)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)												rangeIndex = (rangeIndex + 1);
HXDLIN(1307)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1307)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1307)												_hx_tmp = true;
            											}
            											else {
HXLINE(1307)												_hx_tmp = false;
            											}
HXDLIN(1307)											if (!(_hx_tmp)) {
HXLINE(1307)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1307)												goto _hx_goto_31;
            											}
HXLINE(1065)											tempIndex = tempRangeEnd;
HXLINE(1307)											if ((breakIndex < formatRange->end)) {
HXLINE(1307)												tempRangeEnd = breakIndex;
            											}
            											else {
HXLINE(1307)												tempRangeEnd = formatRange->end;
            											}
HXDLIN(1307)											countRanges = (countRanges + 1);
            										}
            										else {
HXLINE(1307)											Float width = ((Float)0.0);
HXDLIN(1307)											int _g = 0;
HXDLIN(1307)											while((_g < positions->length)){
HXLINE(1307)												 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)												_g = (_g + 1);
HXDLIN(1307)												width = (width + position->advance->x);
            											}
HXDLIN(1307)											widthValue = width;
HXDLIN(1307)											goto _hx_goto_31;
            										}
            									}
            									_hx_goto_31:;
HXDLIN(1307)									rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1307)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)										rangeIndex = (rangeIndex + 1);
HXDLIN(1307)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1307)										currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
            								}
HXLINE(1271)								remainingPositions = positions;
HXLINE(1272)								tempWidth = widthValue;
            							}
            							_hx_goto_17:;
            						}
HXLINE(1307)						{
HXLINE(1307)							if ((breakIndex <= formatRange->end)) {
HXLINE(1307)								::String text = _gthis->text;
HXDLIN(1307)								Float letterSpacing = ((Float)0.0);
HXDLIN(1307)								if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)									letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXLINE(1307)								if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1307)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)								if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1307)								_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1307)								bool positions1;
HXDLIN(1307)								if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)									positions1 = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1307)									positions1 = true;
            								}
HXDLIN(1307)								_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1307)								 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1307)								_gthis1->set_text(text.substring(textIndex,breakIndex));
HXDLIN(1307)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)								Float width = ((Float)0.0);
HXDLIN(1307)								int _g = 0;
HXDLIN(1307)								while((_g < positions->length)){
HXLINE(1307)									 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)									_g = (_g + 1);
HXDLIN(1307)									width = (width + position->advance->x);
            								}
HXDLIN(1307)								widthValue = width;
HXDLIN(1307)								bool _hx_tmp;
HXDLIN(1307)								if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1307)									_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            								}
            								else {
HXLINE(1307)									_hx_tmp = true;
            								}
HXDLIN(1307)								if (_hx_tmp) {
HXLINE( 923)									layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXLINE(1307)									_gthis->layoutGroups->push(layoutGroup);
            								}
            								else {
HXLINE(1307)									layoutGroup->format = formatRange->format;
HXDLIN(1307)									layoutGroup->startIndex = textIndex;
HXDLIN(1307)									layoutGroup->endIndex = breakIndex;
            								}
HXDLIN(1307)								layoutGroup->positions = positions;
HXDLIN(1307)								layoutGroup->offsetX = offsetX;
HXDLIN(1307)								layoutGroup->ascent = ascent;
HXDLIN(1307)								layoutGroup->descent = descent;
HXDLIN(1307)								layoutGroup->leading = leading;
HXDLIN(1307)								layoutGroup->lineIndex = lineIndex;
HXDLIN(1307)								layoutGroup->offsetY = offsetY;
HXDLIN(1307)								layoutGroup->width = widthValue;
HXDLIN(1307)								layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1307)								offsetX = (offsetX + widthValue);
HXDLIN(1307)								if ((breakIndex == formatRange->end)) {
HXLINE(1108)									layoutGroup = null();
HXLINE(1307)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)										rangeIndex = (rangeIndex + 1);
HXDLIN(1307)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1307)										currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXLINE(1307)									{
HXLINE(1307)										if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1307)											bool _hx_tmp;
HXDLIN(1307)											if (::hx::IsNotNull( font )) {
HXLINE(1307)												_hx_tmp = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1307)												_hx_tmp = false;
            											}
HXDLIN(1307)											if (_hx_tmp) {
HXLINE( 945)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE( 951)												ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXLINE( 955)										leading = ( (int)(currentFormat->leading) );
HXLINE( 957)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1307)										if ((heightValue > maxHeightValue)) {
HXLINE( 961)											maxHeightValue = heightValue;
            										}
HXLINE(1307)										if ((ascent > maxAscent)) {
HXLINE( 966)											maxAscent = ascent;
            										}
            									}
            								}
            							}
            							else {
HXLINE(1307)								while(true){
HXLINE(1307)									int tempRangeEnd;
HXDLIN(1307)									if ((breakIndex < formatRange->end)) {
HXLINE(1307)										tempRangeEnd = breakIndex;
            									}
            									else {
HXLINE(1307)										tempRangeEnd = formatRange->end;
            									}
HXDLIN(1307)									if ((textIndex != tempRangeEnd)) {
HXLINE(1307)										::String text = _gthis->text;
HXDLIN(1307)										Float letterSpacing = ((Float)0.0);
HXDLIN(1307)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1307)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1307)										bool positions1;
HXDLIN(1307)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)											positions1 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1307)											positions1 = true;
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1307)										 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1307)										_gthis1->set_text(text.substring(textIndex,tempRangeEnd));
HXDLIN(1307)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)										Float width = ((Float)0.0);
HXDLIN(1307)										int _g = 0;
HXDLIN(1307)										while((_g < positions->length)){
HXLINE(1307)											 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1307)											_g = (_g + 1);
HXDLIN(1307)											width = (width + position->advance->x);
            										}
HXDLIN(1307)										widthValue = width;
HXDLIN(1307)										bool _hx_tmp;
HXDLIN(1307)										if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1307)											_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1307)											_hx_tmp = true;
            										}
HXDLIN(1307)										if (_hx_tmp) {
HXLINE( 923)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd);
HXLINE(1307)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1307)											layoutGroup->format = formatRange->format;
HXDLIN(1307)											layoutGroup->startIndex = textIndex;
HXDLIN(1307)											layoutGroup->endIndex = tempRangeEnd;
            										}
HXDLIN(1307)										layoutGroup->positions = positions;
HXDLIN(1307)										layoutGroup->offsetX = offsetX;
HXDLIN(1307)										layoutGroup->ascent = ascent;
HXDLIN(1307)										layoutGroup->descent = descent;
HXDLIN(1307)										layoutGroup->leading = leading;
HXDLIN(1307)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1307)										layoutGroup->offsetY = offsetY;
HXDLIN(1307)										layoutGroup->width = widthValue;
HXDLIN(1307)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1307)										offsetX = (offsetX + widthValue);
HXLINE(1140)										textIndex = tempRangeEnd;
            									}
HXLINE(1307)									if ((tempRangeEnd == formatRange->end)) {
HXLINE(1143)										layoutGroup = null();
            									}
HXLINE(1307)									if ((tempRangeEnd == breakIndex)) {
HXLINE(1307)										goto _hx_goto_34;
            									}
HXDLIN(1307)									bool _hx_tmp;
HXDLIN(1307)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)										rangeIndex = (rangeIndex + 1);
HXDLIN(1307)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1307)										currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1307)										_hx_tmp = true;
            									}
            									else {
HXLINE(1307)										_hx_tmp = false;
            									}
HXDLIN(1307)									if (!(_hx_tmp)) {
HXLINE(1307)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1149,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1307)										goto _hx_goto_34;
            									}
HXDLIN(1307)									{
HXLINE(1307)										if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1307)											bool _hx_tmp;
HXDLIN(1307)											if (::hx::IsNotNull( font )) {
HXLINE(1307)												_hx_tmp = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1307)												_hx_tmp = false;
            											}
HXDLIN(1307)											if (_hx_tmp) {
HXLINE( 945)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE( 951)												ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXLINE( 955)										leading = ( (int)(currentFormat->leading) );
HXLINE( 957)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1307)										if ((heightValue > maxHeightValue)) {
HXLINE( 961)											maxHeightValue = heightValue;
            										}
HXLINE(1307)										if ((ascent > maxAscent)) {
HXLINE( 966)											maxAscent = ascent;
            										}
            									}
            								}
            								_hx_goto_34:;
            							}
HXLINE(1157)							textIndex = breakIndex;
            						}
            					}
HXLINE(1309)					layoutGroup = null();
            				}
            				else {
HXLINE(1311)					bool _hx_tmp;
HXDLIN(1311)					if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1311)						_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1311)						_hx_tmp = false;
            					}
HXDLIN(1311)					if (_hx_tmp) {
HXLINE(1314)						if ((layoutGroup->endIndex == spaceIndex)) {
HXLINE(1316)							 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1316)							int index = (layoutGroup->positions->length - 1);
HXDLIN(1316)							Float _hx_tmp;
HXDLIN(1316)							bool _hx_tmp1;
HXDLIN(1316)							if ((index >= 0)) {
HXLINE(1316)								_hx_tmp1 = (index < layoutGroup->positions->length);
            							}
            							else {
HXLINE(1316)								_hx_tmp1 = false;
            							}
HXDLIN(1316)							if (_hx_tmp1) {
HXLINE(1316)								_hx_tmp = layoutGroup->positions->__get(index).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1316)								_hx_tmp = ( (Float)(0) );
            							}
HXDLIN(1316)							layoutGroup1->width = (layoutGroup1->width - _hx_tmp);
            						}
HXLINE(1319)						layoutGroup = null();
            					}
            				}
HXLINE(1323)				if ((formatRange->end == breakIndex)) {
HXLINE(1325)					if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1325)						rangeIndex = (rangeIndex + 1);
HXDLIN(1325)						formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1325)						currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            					}
HXLINE(1326)					{
HXLINE(1326)						if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)							ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)							descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            						}
            						else {
HXLINE(1326)							bool _hx_tmp;
HXDLIN(1326)							if (::hx::IsNotNull( font )) {
HXLINE(1326)								_hx_tmp = (font->unitsPerEM != 0);
            							}
            							else {
HXLINE(1326)								_hx_tmp = false;
            							}
HXDLIN(1326)							if (_hx_tmp) {
HXLINE( 945)								ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)								descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            							}
            							else {
HXLINE( 951)								ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)								descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            							}
            						}
HXLINE( 955)						leading = ( (int)(currentFormat->leading) );
HXLINE( 957)						heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1326)						if ((heightValue > maxHeightValue)) {
HXLINE( 961)							maxHeightValue = heightValue;
            						}
HXLINE(1326)						if ((ascent > maxAscent)) {
HXLINE( 966)							maxAscent = ascent;
            						}
            					}
            				}
HXLINE(1329)				{
HXLINE(1329)					{
HXLINE(1329)						if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)							ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)							descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            						}
            						else {
HXLINE(1329)							bool _hx_tmp;
HXDLIN(1329)							if (::hx::IsNotNull( font )) {
HXLINE(1329)								_hx_tmp = (font->unitsPerEM != 0);
            							}
            							else {
HXLINE(1329)								_hx_tmp = false;
            							}
HXDLIN(1329)							if (_hx_tmp) {
HXLINE( 945)								ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)								descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            							}
            							else {
HXLINE( 951)								ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)								descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            							}
            						}
HXLINE( 955)						leading = ( (int)(currentFormat->leading) );
HXLINE( 957)						heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1329)						if ((heightValue > maxHeightValue)) {
HXLINE( 961)							maxHeightValue = heightValue;
            						}
HXLINE(1329)						if ((ascent > maxAscent)) {
HXLINE( 966)							maxAscent = ascent;
            						}
            					}
HXLINE(1329)					int i = _gthis->layoutGroups->get_length();
HXDLIN(1329)					while(true){
HXLINE(1329)						i = (i - 1);
HXDLIN(1329)						if (!((i > -1))) {
HXLINE(1329)							goto _hx_goto_36;
            						}
HXDLIN(1329)						 ::openfl::_internal::text::TextLayoutGroup lg = _gthis->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1329)						if ((lg->lineIndex < lineIndex)) {
HXLINE(1329)							goto _hx_goto_36;
            						}
HXDLIN(1329)						if ((lg->lineIndex > lineIndex)) {
HXLINE(1329)							continue;
            						}
HXDLIN(1329)						lg->ascent = maxAscent;
HXDLIN(1329)						lg->height = ( (Float)(maxHeightValue) );
            					}
            					_hx_goto_36:;
HXDLIN(1329)					offsetY = (offsetY + maxHeightValue);
HXLINE(1182)					maxAscent = ((Float)0.0);
HXLINE(1183)					maxHeightValue = 0;
HXLINE(1329)					lineIndex = (lineIndex + 1);
HXLINE(1186)					offsetX = ( (Float)(2) );
            				}
HXLINE(1331)				textIndex = (breakIndex + 1);
HXLINE(1332)				previousBreakIndex = breakIndex;
HXLINE(1333)				breakIndex = this->getLineBreakIndex(textIndex);
HXLINE(1335)				{
HXLINE(1335)					if (::hx::IsNotNull( currentFormat->align )) {
HXLINE( 975)						align = currentFormat->align;
            					}
HXLINE(1335)					bool _hx_tmp = ::hx::IsNotNull( currentFormat->blockIndent );
HXDLIN(1335)					bool _hx_tmp1 = ::hx::IsNotNull( currentFormat->bullet );
HXDLIN(1335)					bool _hx_tmp2 = ::hx::IsNotNull( currentFormat->indent );
HXDLIN(1335)					if (::hx::IsNotNull( currentFormat->leftMargin )) {
HXLINE( 995)						leftMargin = ( (int)(currentFormat->leftMargin) );
            					}
HXLINE(1335)					if (::hx::IsNotNull( currentFormat->rightMargin )) {
HXLINE(1000)						rightMargin = ( (int)(currentFormat->rightMargin) );
            					}
HXLINE(1335)					bool _hx_tmp3 = ::hx::IsNotNull( currentFormat->tabStops );
            				}
            			}
            			else {
HXLINE(1337)				if ((spaceIndex > -1)) {
HXLINE(1341)					bool _hx_tmp;
HXDLIN(1341)					if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1341)						_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1341)						_hx_tmp = false;
            					}
HXDLIN(1341)					if (_hx_tmp) {
HXLINE(1343)						layoutGroup = null();
            					}
HXLINE(1346)					wrap = false;
HXLINE(1348)					while((textIndex < this->text.length)){
HXLINE(1352)						int endIndex = -1;
HXLINE(1354)						if ((spaceIndex == -1)) {
HXLINE(1356)							endIndex = breakIndex;
            						}
            						else {
HXLINE(1360)							endIndex = (spaceIndex + 1);
HXLINE(1362)							bool _hx_tmp;
HXDLIN(1362)							if ((breakIndex > -1)) {
HXLINE(1362)								_hx_tmp = (breakIndex < endIndex);
            							}
            							else {
HXLINE(1362)								_hx_tmp = false;
            							}
HXDLIN(1362)							if (_hx_tmp) {
HXLINE(1364)								endIndex = breakIndex;
            							}
            						}
HXLINE(1368)						if ((endIndex == -1)) {
HXLINE(1370)							endIndex = this->text.length;
            						}
HXLINE(1373)						if ((endIndex <= formatRange->end)) {
HXLINE(1373)							::String text = _gthis->text;
HXDLIN(1373)							Float letterSpacing = ((Float)0.0);
HXDLIN(1373)							if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)								letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            							}
HXLINE(1373)							if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1373)								_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1373)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1373)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1373)							if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1373)								_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            							}
HXDLIN(1373)							_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1373)							bool positions1;
HXDLIN(1373)							if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1373)								positions1 = (_gthis->sharpness < 400);
            							}
            							else {
HXLINE(1373)								positions1 = true;
            							}
HXDLIN(1373)							_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1373)							 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1373)							_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1373)							positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1373)							Float width = ((Float)0.0);
HXDLIN(1373)							int _g = 0;
HXDLIN(1373)							while((_g < positions->length)){
HXLINE(1373)								 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1373)								_g = (_g + 1);
HXDLIN(1373)								width = (width + position->advance->x);
            							}
HXDLIN(1373)							widthValue = width;
            						}
            						else {
HXLINE(1373)							int tempIndex = textIndex;
HXDLIN(1373)							int tempRangeEnd = formatRange->end;
HXDLIN(1373)							int countRanges = 0;
HXLINE(1046)							positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)							widthValue = ( (Float)(0) );
HXLINE(1373)							while(true){
HXLINE(1373)								if ((tempIndex != tempRangeEnd)) {
HXLINE(1373)									::String text = _gthis->text;
HXDLIN(1373)									Float letterSpacing = ((Float)0.0);
HXDLIN(1373)									if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)										letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXLINE(1373)									if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1373)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1373)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1373)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1373)									if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1373)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1373)									_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1373)									bool _hx_tmp;
HXDLIN(1373)									if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1373)										_hx_tmp = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1373)										_hx_tmp = true;
            									}
HXDLIN(1373)									_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1373)									 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1373)									_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1373)									::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)									positions = positions->concat(tempPositions);
            								}
HXLINE(1373)								if ((tempRangeEnd != endIndex)) {
HXLINE(1373)									bool _hx_tmp;
HXDLIN(1373)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1373)										rangeIndex = (rangeIndex + 1);
HXDLIN(1373)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1373)										currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1373)										_hx_tmp = true;
            									}
            									else {
HXLINE(1373)										_hx_tmp = false;
            									}
HXDLIN(1373)									if (!(_hx_tmp)) {
HXLINE(1373)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1373)										goto _hx_goto_39;
            									}
HXLINE(1065)									tempIndex = tempRangeEnd;
HXLINE(1373)									if ((endIndex < formatRange->end)) {
HXLINE(1373)										tempRangeEnd = endIndex;
            									}
            									else {
HXLINE(1373)										tempRangeEnd = formatRange->end;
            									}
HXDLIN(1373)									countRanges = (countRanges + 1);
            								}
            								else {
HXLINE(1373)									Float width = ((Float)0.0);
HXDLIN(1373)									int _g = 0;
HXDLIN(1373)									while((_g < positions->length)){
HXLINE(1373)										 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1373)										_g = (_g + 1);
HXDLIN(1373)										width = (width + position->advance->x);
            									}
HXDLIN(1373)									widthValue = width;
HXDLIN(1373)									goto _hx_goto_39;
            								}
            							}
            							_hx_goto_39:;
HXDLIN(1373)							rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1373)							if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1373)								rangeIndex = (rangeIndex + 1);
HXDLIN(1373)								formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1373)								currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)								font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            							}
            						}
HXLINE(1375)						if (::hx::IsEq( align,2 )) {
HXLINE(1377)							bool _hx_tmp;
HXDLIN(1377)							if ((positions->length > 0)) {
HXLINE(1377)								_hx_tmp = (textIndex == previousSpaceIndex);
            							}
            							else {
HXLINE(1377)								_hx_tmp = false;
            							}
HXDLIN(1377)							if (_hx_tmp) {
HXLINE(1380)								textIndex = (textIndex + 1);
HXLINE(1382)								Float spaceWidth = positions->shift().StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
HXLINE(1383)								widthValue = (widthValue - spaceWidth);
HXLINE(1384)								offsetX = (offsetX + spaceWidth);
            							}
HXLINE(1387)							bool _hx_tmp1;
HXDLIN(1387)							if ((positions->length > 0)) {
HXLINE(1387)								_hx_tmp1 = (endIndex == (spaceIndex + 1));
            							}
            							else {
HXLINE(1387)								_hx_tmp1 = false;
            							}
HXDLIN(1387)							if (_hx_tmp1) {
HXLINE(1390)								endIndex = (endIndex - 1);
HXLINE(1392)								Float spaceWidth = positions->pop().StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
HXLINE(1393)								widthValue = (widthValue - spaceWidth);
            							}
            						}
HXLINE(1397)						if (this->wordWrap) {
HXLINE(1399)							if (((offsetX + widthValue) > (this->width - ( (Float)(2) )))) {
HXLINE(1401)								wrap = true;
HXLINE(1403)								bool _hx_tmp;
HXDLIN(1403)								if ((positions->length > 0)) {
HXLINE(1403)									_hx_tmp = (endIndex == (spaceIndex + 1));
            								}
            								else {
HXLINE(1403)									_hx_tmp = false;
            								}
HXDLIN(1403)								if (_hx_tmp) {
HXLINE(1408)									 ::openfl::_internal::text::GlyphPosition lastPosition = positions->__get((positions->length - 1)).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1409)									Float spaceWidth = lastPosition->advance->x;
HXLINE(1411)									if ((((offsetX + widthValue) - spaceWidth) <= (this->width - ( (Float)(2) )))) {
HXLINE(1413)										wrap = false;
            									}
            								}
            							}
            						}
HXLINE(1419)						if (wrap) {
HXLINE(1421)							bool _hx_tmp;
HXDLIN(1421)							if (::hx::IsNotEq( align,2 )) {
HXLINE(1421)								if (::hx::IsNull( layoutGroup )) {
HXLINE(1421)									_hx_tmp = (this->layoutGroups->get_length() > 0);
            								}
            								else {
HXLINE(1421)									_hx_tmp = true;
            								}
            							}
            							else {
HXLINE(1421)								_hx_tmp = false;
            							}
HXDLIN(1421)							if (_hx_tmp) {
HXLINE(1423)								 ::openfl::_internal::text::TextLayoutGroup previous = layoutGroup;
HXLINE(1424)								if (::hx::IsNull( previous )) {
HXLINE(1426)									::Dynamic this1 = this->layoutGroups;
HXDLIN(1426)									previous = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - 1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            								}
HXLINE(1430)								 ::openfl::_internal::text::TextLayoutGroup previous1 = previous;
HXDLIN(1430)								int index = (previous->positions->length - 1);
HXDLIN(1430)								Float _hx_tmp;
HXDLIN(1430)								bool _hx_tmp1;
HXDLIN(1430)								if ((index >= 0)) {
HXLINE(1430)									_hx_tmp1 = (index < previous->positions->length);
            								}
            								else {
HXLINE(1430)									_hx_tmp1 = false;
            								}
HXDLIN(1430)								if (_hx_tmp1) {
HXLINE(1430)									_hx_tmp = previous->positions->__get(index).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1430)									_hx_tmp = ( (Float)(0) );
            								}
HXDLIN(1430)								previous1->width = (previous1->width - _hx_tmp);
HXLINE(1431)								previous->endIndex--;
            							}
HXLINE(1434)							int i = (this->layoutGroups->get_length() - 1);
HXLINE(1435)							int offsetCount = 0;
HXLINE(1437)							while(true){
HXLINE(1439)								layoutGroup = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1441)								bool _hx_tmp;
HXDLIN(1441)								if ((i > 0)) {
HXLINE(1441)									_hx_tmp = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE(1441)									_hx_tmp = false;
            								}
HXDLIN(1441)								if (_hx_tmp) {
HXLINE(1443)									offsetCount = (offsetCount + 1);
            								}
            								else {
HXLINE(1447)									goto _hx_goto_41;
            								}
HXLINE(1450)								i = (i - 1);
            							}
            							_hx_goto_41:;
HXLINE(1453)							if ((textIndex == (previousSpaceIndex + 1))) {
HXLINE(1455)								{
HXLINE(1455)									if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)										ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)										descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            									}
            									else {
HXLINE(1455)										bool _hx_tmp;
HXDLIN(1455)										if (::hx::IsNotNull( font )) {
HXLINE(1455)											_hx_tmp = (font->unitsPerEM != 0);
            										}
            										else {
HXLINE(1455)											_hx_tmp = false;
            										}
HXDLIN(1455)										if (_hx_tmp) {
HXLINE( 945)											ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)											descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            										}
            										else {
HXLINE( 951)											ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)											descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            										}
            									}
HXLINE( 955)									leading = ( (int)(currentFormat->leading) );
HXLINE( 957)									heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1455)									if ((heightValue > maxHeightValue)) {
HXLINE( 961)										maxHeightValue = heightValue;
            									}
HXLINE(1455)									if ((ascent > maxAscent)) {
HXLINE( 966)										maxAscent = ascent;
            									}
            								}
HXLINE(1455)								int i = _gthis->layoutGroups->get_length();
HXDLIN(1455)								while(true){
HXLINE(1455)									i = (i - 1);
HXDLIN(1455)									if (!((i > -1))) {
HXLINE(1455)										goto _hx_goto_42;
            									}
HXDLIN(1455)									 ::openfl::_internal::text::TextLayoutGroup lg = _gthis->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1455)									if ((lg->lineIndex < lineIndex)) {
HXLINE(1455)										goto _hx_goto_42;
            									}
HXDLIN(1455)									if ((lg->lineIndex > lineIndex)) {
HXLINE(1455)										continue;
            									}
HXDLIN(1455)									lg->ascent = maxAscent;
HXDLIN(1455)									lg->height = ( (Float)(maxHeightValue) );
            								}
            								_hx_goto_42:;
HXDLIN(1455)								offsetY = (offsetY + maxHeightValue);
HXLINE(1182)								maxAscent = ((Float)0.0);
HXLINE(1183)								maxHeightValue = 0;
HXLINE(1455)								lineIndex = (lineIndex + 1);
HXLINE(1186)								offsetX = ( (Float)(2) );
            							}
HXLINE(1458)							offsetX = ( (Float)(2) );
HXLINE(1460)							if ((offsetCount > 0)) {
HXLINE(1462)								::Dynamic this1 = this->layoutGroups;
HXDLIN(1462)								Float bumpX = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX;
HXLINE(1464)								{
HXLINE(1464)									int _g = (this->layoutGroups->get_length() - offsetCount);
HXDLIN(1464)									int _g1 = this->layoutGroups->get_length();
HXDLIN(1464)									while((_g < _g1)){
HXLINE(1464)										_g = (_g + 1);
HXDLIN(1464)										int i = (_g - 1);
HXLINE(1466)										layoutGroup = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1467)										 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1467)										layoutGroup1->offsetX = (layoutGroup1->offsetX - bumpX);
HXLINE(1468)										layoutGroup->offsetY = offsetY;
HXLINE(1469)										layoutGroup->lineIndex = lineIndex;
HXLINE(1470)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE(1474)							{
HXLINE(1474)								bool _hx_tmp1;
HXDLIN(1474)								if ((_gthis->width >= 4)) {
HXLINE(1474)									_hx_tmp1 = _gthis->wordWrap;
            								}
            								else {
HXLINE(1474)									_hx_tmp1 = false;
            								}
HXDLIN(1474)								if (_hx_tmp1) {
HXLINE(1474)									::Array< ::Dynamic> remainingPositions = positions;
HXDLIN(1474)									int i;
HXDLIN(1474)									int bufferCount;
HXDLIN(1474)									int placeIndex;
HXDLIN(1474)									Float positionWidth;
HXDLIN(1474)									 ::openfl::_internal::text::GlyphPosition currentPosition;
HXDLIN(1474)									Float width = ((Float)0.0);
HXDLIN(1474)									{
HXLINE(1474)										int _g = 0;
HXDLIN(1474)										while((_g < remainingPositions->length)){
HXLINE(1474)											 ::openfl::_internal::text::GlyphPosition position = remainingPositions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)											_g = (_g + 1);
HXDLIN(1474)											width = (width + position->advance->x);
            										}
            									}
HXDLIN(1474)									Float tempWidth = width;
HXDLIN(1474)									while(((offsetX + tempWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1202)										bufferCount = 0;
HXDLIN(1202)										i = bufferCount;
HXLINE(1203)										positionWidth = ((Float)0.0);
HXLINE(1474)										while(((offsetX + positionWidth) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1207)											currentPosition = remainingPositions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1474)											if ((currentPosition->advance->x == ((Float)0.0))) {
HXLINE(1474)												i = (i + 1);
HXDLIN(1474)												bufferCount = (bufferCount + 1);
            											}
            											else {
HXLINE(1474)												positionWidth = (positionWidth + currentPosition->advance->x);
HXDLIN(1474)												i = (i + 1);
            											}
            										}
HXDLIN(1474)										if ((positionWidth == ((Float)0.0))) {
HXLINE(1474)											goto _hx_goto_45;
            										}
            										else {
HXLINE(1474)											bool _hx_tmp;
HXDLIN(1474)											if ((i < 2)) {
HXLINE(1474)												_hx_tmp = ((positionWidth + offsetX) > (_gthis->width - ( (Float)(2) )));
            											}
            											else {
HXLINE(1474)												_hx_tmp = false;
            											}
HXDLIN(1474)											if (_hx_tmp) {
HXLINE(1474)												if ((((textIndex + i) - bufferCount) == endIndex)) {
HXLINE(1474)													goto _hx_goto_45;
            												}
            											}
            											else {
HXLINE(1474)												while(((offsetX + positionWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1474)													i = (i - 1);
HXDLIN(1474)													if (((i - bufferCount) > 0)) {
HXLINE(1474)														{
HXLINE(1474)															int endIndex = ((textIndex + i) - bufferCount);
HXDLIN(1474)															if ((endIndex <= formatRange->end)) {
HXLINE(1474)																::String text = _gthis->text;
HXDLIN(1474)																Float letterSpacing = ((Float)0.0);
HXDLIN(1474)																if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																	letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1474)																if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)																if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1474)																bool positions1;
HXDLIN(1474)																if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)																	positions1 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1474)																	positions1 = true;
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1474)																 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1474)																_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1474)																positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)																Float width = ((Float)0.0);
HXDLIN(1474)																int _g = 0;
HXDLIN(1474)																while((_g < positions->length)){
HXLINE(1474)																	 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)																	_g = (_g + 1);
HXDLIN(1474)																	width = (width + position->advance->x);
            																}
HXDLIN(1474)																widthValue = width;
            															}
            															else {
HXLINE(1474)																int tempIndex = textIndex;
HXDLIN(1474)																int tempRangeEnd = formatRange->end;
HXDLIN(1474)																int countRanges = 0;
HXLINE(1046)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)																widthValue = ( (Float)(0) );
HXLINE(1474)																while(true){
HXLINE(1474)																	if ((tempIndex != tempRangeEnd)) {
HXLINE(1474)																		::String text = _gthis->text;
HXDLIN(1474)																		Float letterSpacing = ((Float)0.0);
HXDLIN(1474)																		if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																			letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																		}
HXLINE(1474)																		if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)																			_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)																		if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)																			_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1474)																		bool _hx_tmp;
HXDLIN(1474)																		if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)																			_hx_tmp = (_gthis->sharpness < 400);
            																		}
            																		else {
HXLINE(1474)																			_hx_tmp = true;
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1474)																		 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1474)																		_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1474)																		::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																		positions = positions->concat(tempPositions);
            																	}
HXLINE(1474)																	if ((tempRangeEnd != endIndex)) {
HXLINE(1474)																		bool _hx_tmp;
HXDLIN(1474)																		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)																			rangeIndex = (rangeIndex + 1);
HXDLIN(1474)																			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1474)																			currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1474)																			_hx_tmp = true;
            																		}
            																		else {
HXLINE(1474)																			_hx_tmp = false;
            																		}
HXDLIN(1474)																		if (!(_hx_tmp)) {
HXLINE(1474)																			::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1474)																			goto _hx_goto_49;
            																		}
HXLINE(1065)																		tempIndex = tempRangeEnd;
HXLINE(1474)																		if ((endIndex < formatRange->end)) {
HXLINE(1474)																			tempRangeEnd = endIndex;
            																		}
            																		else {
HXLINE(1474)																			tempRangeEnd = formatRange->end;
            																		}
HXDLIN(1474)																		countRanges = (countRanges + 1);
            																	}
            																	else {
HXLINE(1474)																		Float width = ((Float)0.0);
HXDLIN(1474)																		int _g = 0;
HXDLIN(1474)																		while((_g < positions->length)){
HXLINE(1474)																			 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)																			_g = (_g + 1);
HXDLIN(1474)																			width = (width + position->advance->x);
            																		}
HXDLIN(1474)																		widthValue = width;
HXDLIN(1474)																		goto _hx_goto_49;
            																	}
            																}
            																_hx_goto_49:;
HXDLIN(1474)																rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1474)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1474)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1474)																	currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
HXLINE(1250)														positionWidth = widthValue;
            													}
            													else {
HXLINE(1256)														i = 1;
HXLINE(1257)														bufferCount = 0;
HXLINE(1474)														{
HXLINE(1474)															int endIndex = (textIndex + 1);
HXDLIN(1474)															if ((endIndex <= formatRange->end)) {
HXLINE(1474)																::String text = _gthis->text;
HXDLIN(1474)																Float letterSpacing = ((Float)0.0);
HXDLIN(1474)																if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																	letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1474)																if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)																if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1474)																bool positions1;
HXDLIN(1474)																if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)																	positions1 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1474)																	positions1 = true;
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1474)																 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1474)																_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1474)																positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)																Float width = ((Float)0.0);
HXDLIN(1474)																int _g = 0;
HXDLIN(1474)																while((_g < positions->length)){
HXLINE(1474)																	 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)																	_g = (_g + 1);
HXDLIN(1474)																	width = (width + position->advance->x);
            																}
HXDLIN(1474)																widthValue = width;
            															}
            															else {
HXLINE(1474)																int tempIndex = textIndex;
HXDLIN(1474)																int tempRangeEnd = formatRange->end;
HXDLIN(1474)																int countRanges = 0;
HXLINE(1046)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)																widthValue = ( (Float)(0) );
HXLINE(1474)																while(true){
HXLINE(1474)																	if ((tempIndex != tempRangeEnd)) {
HXLINE(1474)																		::String text = _gthis->text;
HXDLIN(1474)																		Float letterSpacing = ((Float)0.0);
HXDLIN(1474)																		if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																			letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																		}
HXLINE(1474)																		if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)																			_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)																		if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)																			_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1474)																		bool _hx_tmp;
HXDLIN(1474)																		if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)																			_hx_tmp = (_gthis->sharpness < 400);
            																		}
            																		else {
HXLINE(1474)																			_hx_tmp = true;
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1474)																		 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1474)																		_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1474)																		::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																		positions = positions->concat(tempPositions);
            																	}
HXLINE(1474)																	if ((tempRangeEnd != endIndex)) {
HXLINE(1474)																		bool _hx_tmp;
HXDLIN(1474)																		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)																			rangeIndex = (rangeIndex + 1);
HXDLIN(1474)																			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1474)																			currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1474)																			_hx_tmp = true;
            																		}
            																		else {
HXLINE(1474)																			_hx_tmp = false;
            																		}
HXDLIN(1474)																		if (!(_hx_tmp)) {
HXLINE(1474)																			::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1474)																			goto _hx_goto_52;
            																		}
HXLINE(1065)																		tempIndex = tempRangeEnd;
HXLINE(1474)																		if ((endIndex < formatRange->end)) {
HXLINE(1474)																			tempRangeEnd = endIndex;
            																		}
            																		else {
HXLINE(1474)																			tempRangeEnd = formatRange->end;
            																		}
HXDLIN(1474)																		countRanges = (countRanges + 1);
            																	}
            																	else {
HXLINE(1474)																		Float width = ((Float)0.0);
HXDLIN(1474)																		int _g = 0;
HXDLIN(1474)																		while((_g < positions->length)){
HXLINE(1474)																			 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)																			_g = (_g + 1);
HXDLIN(1474)																			width = (width + position->advance->x);
            																		}
HXDLIN(1474)																		widthValue = width;
HXDLIN(1474)																		goto _hx_goto_52;
            																	}
            																}
            																_hx_goto_52:;
HXDLIN(1474)																rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1474)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1474)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1474)																	currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
HXLINE(1260)														positionWidth = ( (Float)(0) );
            													}
            												}
            											}
            										}
HXLINE(1265)										placeIndex = ((textIndex + i) - bufferCount);
HXLINE(1474)										{
HXLINE(1474)											if ((placeIndex <= formatRange->end)) {
HXLINE(1474)												::String text = _gthis->text;
HXDLIN(1474)												Float letterSpacing = ((Float)0.0);
HXDLIN(1474)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1474)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1474)												bool positions1;
HXDLIN(1474)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)													positions1 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1474)													positions1 = true;
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1474)												 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1474)												_gthis1->set_text(text.substring(textIndex,placeIndex));
HXDLIN(1474)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)												Float width = ((Float)0.0);
HXDLIN(1474)												int _g = 0;
HXDLIN(1474)												while((_g < positions->length)){
HXLINE(1474)													 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)													_g = (_g + 1);
HXDLIN(1474)													width = (width + position->advance->x);
            												}
HXDLIN(1474)												widthValue = width;
HXDLIN(1474)												bool _hx_tmp;
HXDLIN(1474)												if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1474)													_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1474)													_hx_tmp = true;
            												}
HXDLIN(1474)												if (_hx_tmp) {
HXLINE( 923)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex);
HXLINE(1474)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1474)													layoutGroup->format = formatRange->format;
HXDLIN(1474)													layoutGroup->startIndex = textIndex;
HXDLIN(1474)													layoutGroup->endIndex = placeIndex;
            												}
HXDLIN(1474)												layoutGroup->positions = positions;
HXDLIN(1474)												layoutGroup->offsetX = offsetX;
HXDLIN(1474)												layoutGroup->ascent = ascent;
HXDLIN(1474)												layoutGroup->descent = descent;
HXDLIN(1474)												layoutGroup->leading = leading;
HXDLIN(1474)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1474)												layoutGroup->offsetY = offsetY;
HXDLIN(1474)												layoutGroup->width = widthValue;
HXDLIN(1474)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1474)												offsetX = (offsetX + widthValue);
HXDLIN(1474)												if ((placeIndex == formatRange->end)) {
HXLINE(1108)													layoutGroup = null();
HXLINE(1474)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)														rangeIndex = (rangeIndex + 1);
HXDLIN(1474)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1474)														currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXLINE(1474)													{
HXLINE(1474)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1474)															bool _hx_tmp;
HXDLIN(1474)															if (::hx::IsNotNull( font )) {
HXLINE(1474)																_hx_tmp = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1474)																_hx_tmp = false;
            															}
HXDLIN(1474)															if (_hx_tmp) {
HXLINE( 945)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 951)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 955)														leading = ( (int)(currentFormat->leading) );
HXLINE( 957)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1474)														if ((heightValue > maxHeightValue)) {
HXLINE( 961)															maxHeightValue = heightValue;
            														}
HXLINE(1474)														if ((ascent > maxAscent)) {
HXLINE( 966)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1474)												while(true){
HXLINE(1474)													int tempRangeEnd;
HXDLIN(1474)													if ((placeIndex < formatRange->end)) {
HXLINE(1474)														tempRangeEnd = placeIndex;
            													}
            													else {
HXLINE(1474)														tempRangeEnd = formatRange->end;
            													}
HXDLIN(1474)													if ((textIndex != tempRangeEnd)) {
HXLINE(1474)														::String text = _gthis->text;
HXDLIN(1474)														Float letterSpacing = ((Float)0.0);
HXDLIN(1474)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)															letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1474)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1474)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1474)														_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1474)														bool positions1;
HXDLIN(1474)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)															positions1 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1474)															positions1 = true;
            														}
HXDLIN(1474)														_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1474)														 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1474)														_gthis1->set_text(text.substring(textIndex,tempRangeEnd));
HXDLIN(1474)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)														Float width = ((Float)0.0);
HXDLIN(1474)														int _g = 0;
HXDLIN(1474)														while((_g < positions->length)){
HXLINE(1474)															 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)															_g = (_g + 1);
HXDLIN(1474)															width = (width + position->advance->x);
            														}
HXDLIN(1474)														widthValue = width;
HXDLIN(1474)														bool _hx_tmp;
HXDLIN(1474)														if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1474)															_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1474)															_hx_tmp = true;
            														}
HXDLIN(1474)														if (_hx_tmp) {
HXLINE( 923)															layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd);
HXLINE(1474)															_gthis->layoutGroups->push(layoutGroup);
            														}
            														else {
HXLINE(1474)															layoutGroup->format = formatRange->format;
HXDLIN(1474)															layoutGroup->startIndex = textIndex;
HXDLIN(1474)															layoutGroup->endIndex = tempRangeEnd;
            														}
HXDLIN(1474)														layoutGroup->positions = positions;
HXDLIN(1474)														layoutGroup->offsetX = offsetX;
HXDLIN(1474)														layoutGroup->ascent = ascent;
HXDLIN(1474)														layoutGroup->descent = descent;
HXDLIN(1474)														layoutGroup->leading = leading;
HXDLIN(1474)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1474)														layoutGroup->offsetY = offsetY;
HXDLIN(1474)														layoutGroup->width = widthValue;
HXDLIN(1474)														layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1474)														offsetX = (offsetX + widthValue);
HXLINE(1140)														textIndex = tempRangeEnd;
            													}
HXLINE(1474)													if ((tempRangeEnd == formatRange->end)) {
HXLINE(1143)														layoutGroup = null();
            													}
HXLINE(1474)													if ((tempRangeEnd == placeIndex)) {
HXLINE(1474)														goto _hx_goto_55;
            													}
HXDLIN(1474)													bool _hx_tmp;
HXDLIN(1474)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)														rangeIndex = (rangeIndex + 1);
HXDLIN(1474)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1474)														currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1474)														_hx_tmp = true;
            													}
            													else {
HXLINE(1474)														_hx_tmp = false;
            													}
HXDLIN(1474)													if (!(_hx_tmp)) {
HXLINE(1474)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1149,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1474)														goto _hx_goto_55;
            													}
HXDLIN(1474)													{
HXLINE(1474)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1474)															bool _hx_tmp;
HXDLIN(1474)															if (::hx::IsNotNull( font )) {
HXLINE(1474)																_hx_tmp = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1474)																_hx_tmp = false;
            															}
HXDLIN(1474)															if (_hx_tmp) {
HXLINE( 945)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 951)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 955)														leading = ( (int)(currentFormat->leading) );
HXLINE( 957)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1474)														if ((heightValue > maxHeightValue)) {
HXLINE( 961)															maxHeightValue = heightValue;
            														}
HXLINE(1474)														if ((ascent > maxAscent)) {
HXLINE( 966)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_55:;
            											}
HXLINE(1157)											textIndex = placeIndex;
            										}
HXLINE(1474)										{
HXLINE(1474)											{
HXLINE(1474)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1474)													bool _hx_tmp;
HXDLIN(1474)													if (::hx::IsNotNull( font )) {
HXLINE(1474)														_hx_tmp = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1474)														_hx_tmp = false;
            													}
HXDLIN(1474)													if (_hx_tmp) {
HXLINE( 945)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 951)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 955)												leading = ( (int)(currentFormat->leading) );
HXLINE( 957)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1474)												if ((heightValue > maxHeightValue)) {
HXLINE( 961)													maxHeightValue = heightValue;
            												}
HXLINE(1474)												if ((ascent > maxAscent)) {
HXLINE( 966)													maxAscent = ascent;
            												}
            											}
HXLINE(1474)											int i1 = _gthis->layoutGroups->get_length();
HXDLIN(1474)											while(true){
HXLINE(1474)												i1 = (i1 - 1);
HXDLIN(1474)												if (!((i1 > -1))) {
HXLINE(1474)													goto _hx_goto_57;
            												}
HXDLIN(1474)												 ::openfl::_internal::text::TextLayoutGroup lg = _gthis->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1474)												if ((lg->lineIndex < lineIndex)) {
HXLINE(1474)													goto _hx_goto_57;
            												}
HXDLIN(1474)												if ((lg->lineIndex > lineIndex)) {
HXLINE(1474)													continue;
            												}
HXDLIN(1474)												lg->ascent = maxAscent;
HXDLIN(1474)												lg->height = ( (Float)(maxHeightValue) );
            											}
            											_hx_goto_57:;
HXDLIN(1474)											offsetY = (offsetY + maxHeightValue);
HXLINE(1182)											maxAscent = ((Float)0.0);
HXLINE(1183)											maxHeightValue = 0;
HXLINE(1474)											lineIndex = (lineIndex + 1);
HXLINE(1186)											offsetX = ( (Float)(2) );
            										}
HXLINE(1474)										if ((endIndex <= formatRange->end)) {
HXLINE(1474)											::String text = _gthis->text;
HXDLIN(1474)											Float letterSpacing = ((Float)0.0);
HXDLIN(1474)											if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)												letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1474)											if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1474)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)											if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1474)											_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1474)											bool positions1;
HXDLIN(1474)											if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)												positions1 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1474)												positions1 = true;
            											}
HXDLIN(1474)											_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1474)											 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1474)											_gthis1->set_text(text.substring(placeIndex,endIndex));
HXDLIN(1474)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)											Float width = ((Float)0.0);
HXDLIN(1474)											int _g = 0;
HXDLIN(1474)											while((_g < positions->length)){
HXLINE(1474)												 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)												_g = (_g + 1);
HXDLIN(1474)												width = (width + position->advance->x);
            											}
HXDLIN(1474)											widthValue = width;
            										}
            										else {
HXLINE(1474)											int tempIndex = placeIndex;
HXDLIN(1474)											int tempRangeEnd = formatRange->end;
HXDLIN(1474)											int countRanges = 0;
HXLINE(1046)											positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)											widthValue = ( (Float)(0) );
HXLINE(1474)											while(true){
HXLINE(1474)												if ((tempIndex != tempRangeEnd)) {
HXLINE(1474)													::String text = _gthis->text;
HXDLIN(1474)													Float letterSpacing = ((Float)0.0);
HXDLIN(1474)													if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)														letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1474)													if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1474)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)													if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1474)													_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1474)													bool _hx_tmp;
HXDLIN(1474)													if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)														_hx_tmp = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1474)														_hx_tmp = true;
            													}
HXDLIN(1474)													_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1474)													 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1474)													_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1474)													::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)													positions = positions->concat(tempPositions);
            												}
HXLINE(1474)												if ((tempRangeEnd != endIndex)) {
HXLINE(1474)													bool _hx_tmp;
HXDLIN(1474)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)														rangeIndex = (rangeIndex + 1);
HXDLIN(1474)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1474)														currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1474)														_hx_tmp = true;
            													}
            													else {
HXLINE(1474)														_hx_tmp = false;
            													}
HXDLIN(1474)													if (!(_hx_tmp)) {
HXLINE(1474)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1474)														goto _hx_goto_59;
            													}
HXLINE(1065)													tempIndex = tempRangeEnd;
HXLINE(1474)													if ((endIndex < formatRange->end)) {
HXLINE(1474)														tempRangeEnd = endIndex;
            													}
            													else {
HXLINE(1474)														tempRangeEnd = formatRange->end;
            													}
HXDLIN(1474)													countRanges = (countRanges + 1);
            												}
            												else {
HXLINE(1474)													Float width = ((Float)0.0);
HXDLIN(1474)													int _g = 0;
HXDLIN(1474)													while((_g < positions->length)){
HXLINE(1474)														 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)														_g = (_g + 1);
HXDLIN(1474)														width = (width + position->advance->x);
            													}
HXDLIN(1474)													widthValue = width;
HXDLIN(1474)													goto _hx_goto_59;
            												}
            											}
            											_hx_goto_59:;
HXDLIN(1474)											rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1474)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)												rangeIndex = (rangeIndex + 1);
HXDLIN(1474)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1474)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
            										}
HXLINE(1271)										remainingPositions = positions;
HXLINE(1272)										tempWidth = widthValue;
            									}
            									_hx_goto_45:;
            								}
HXLINE(1474)								{
HXLINE(1474)									if ((endIndex <= formatRange->end)) {
HXLINE(1474)										::String text = _gthis->text;
HXDLIN(1474)										Float letterSpacing = ((Float)0.0);
HXDLIN(1474)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1474)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1474)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1474)										_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1474)										bool positions1;
HXDLIN(1474)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)											positions1 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1474)											positions1 = true;
            										}
HXDLIN(1474)										_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1474)										 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1474)										_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1474)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)										Float width = ((Float)0.0);
HXDLIN(1474)										int _g = 0;
HXDLIN(1474)										while((_g < positions->length)){
HXLINE(1474)											 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)											_g = (_g + 1);
HXDLIN(1474)											width = (width + position->advance->x);
            										}
HXDLIN(1474)										widthValue = width;
HXDLIN(1474)										bool _hx_tmp;
HXDLIN(1474)										if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1474)											_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1474)											_hx_tmp = true;
            										}
HXDLIN(1474)										if (_hx_tmp) {
HXLINE( 923)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex);
HXLINE(1474)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1474)											layoutGroup->format = formatRange->format;
HXDLIN(1474)											layoutGroup->startIndex = textIndex;
HXDLIN(1474)											layoutGroup->endIndex = endIndex;
            										}
HXDLIN(1474)										layoutGroup->positions = positions;
HXDLIN(1474)										layoutGroup->offsetX = offsetX;
HXDLIN(1474)										layoutGroup->ascent = ascent;
HXDLIN(1474)										layoutGroup->descent = descent;
HXDLIN(1474)										layoutGroup->leading = leading;
HXDLIN(1474)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1474)										layoutGroup->offsetY = offsetY;
HXDLIN(1474)										layoutGroup->width = widthValue;
HXDLIN(1474)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1474)										offsetX = (offsetX + widthValue);
HXDLIN(1474)										if ((endIndex == formatRange->end)) {
HXLINE(1108)											layoutGroup = null();
HXLINE(1474)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)												rangeIndex = (rangeIndex + 1);
HXDLIN(1474)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1474)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXLINE(1474)											{
HXLINE(1474)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1474)													bool _hx_tmp;
HXDLIN(1474)													if (::hx::IsNotNull( font )) {
HXLINE(1474)														_hx_tmp = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1474)														_hx_tmp = false;
            													}
HXDLIN(1474)													if (_hx_tmp) {
HXLINE( 945)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 951)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 955)												leading = ( (int)(currentFormat->leading) );
HXLINE( 957)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1474)												if ((heightValue > maxHeightValue)) {
HXLINE( 961)													maxHeightValue = heightValue;
            												}
HXLINE(1474)												if ((ascent > maxAscent)) {
HXLINE( 966)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1474)										while(true){
HXLINE(1474)											int tempRangeEnd;
HXDLIN(1474)											if ((endIndex < formatRange->end)) {
HXLINE(1474)												tempRangeEnd = endIndex;
            											}
            											else {
HXLINE(1474)												tempRangeEnd = formatRange->end;
            											}
HXDLIN(1474)											if ((textIndex != tempRangeEnd)) {
HXLINE(1474)												::String text = _gthis->text;
HXDLIN(1474)												Float letterSpacing = ((Float)0.0);
HXDLIN(1474)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1474)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1474)												bool positions1;
HXDLIN(1474)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)													positions1 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1474)													positions1 = true;
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1474)												 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1474)												_gthis1->set_text(text.substring(textIndex,tempRangeEnd));
HXDLIN(1474)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)												Float width = ((Float)0.0);
HXDLIN(1474)												int _g = 0;
HXDLIN(1474)												while((_g < positions->length)){
HXLINE(1474)													 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1474)													_g = (_g + 1);
HXDLIN(1474)													width = (width + position->advance->x);
            												}
HXDLIN(1474)												widthValue = width;
HXDLIN(1474)												bool _hx_tmp;
HXDLIN(1474)												if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1474)													_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1474)													_hx_tmp = true;
            												}
HXDLIN(1474)												if (_hx_tmp) {
HXLINE( 923)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd);
HXLINE(1474)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1474)													layoutGroup->format = formatRange->format;
HXDLIN(1474)													layoutGroup->startIndex = textIndex;
HXDLIN(1474)													layoutGroup->endIndex = tempRangeEnd;
            												}
HXDLIN(1474)												layoutGroup->positions = positions;
HXDLIN(1474)												layoutGroup->offsetX = offsetX;
HXDLIN(1474)												layoutGroup->ascent = ascent;
HXDLIN(1474)												layoutGroup->descent = descent;
HXDLIN(1474)												layoutGroup->leading = leading;
HXDLIN(1474)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1474)												layoutGroup->offsetY = offsetY;
HXDLIN(1474)												layoutGroup->width = widthValue;
HXDLIN(1474)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1474)												offsetX = (offsetX + widthValue);
HXLINE(1140)												textIndex = tempRangeEnd;
            											}
HXLINE(1474)											if ((tempRangeEnd == formatRange->end)) {
HXLINE(1143)												layoutGroup = null();
            											}
HXLINE(1474)											if ((tempRangeEnd == endIndex)) {
HXLINE(1474)												goto _hx_goto_62;
            											}
HXDLIN(1474)											bool _hx_tmp;
HXDLIN(1474)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)												rangeIndex = (rangeIndex + 1);
HXDLIN(1474)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1474)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1474)												_hx_tmp = true;
            											}
            											else {
HXLINE(1474)												_hx_tmp = false;
            											}
HXDLIN(1474)											if (!(_hx_tmp)) {
HXLINE(1474)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1149,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1474)												goto _hx_goto_62;
            											}
HXDLIN(1474)											{
HXLINE(1474)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1474)													bool _hx_tmp;
HXDLIN(1474)													if (::hx::IsNotNull( font )) {
HXLINE(1474)														_hx_tmp = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1474)														_hx_tmp = false;
            													}
HXDLIN(1474)													if (_hx_tmp) {
HXLINE( 945)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 951)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 955)												leading = ( (int)(currentFormat->leading) );
HXLINE( 957)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1474)												if ((heightValue > maxHeightValue)) {
HXLINE( 961)													maxHeightValue = heightValue;
            												}
HXLINE(1474)												if ((ascent > maxAscent)) {
HXLINE( 966)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_62:;
            									}
HXLINE(1157)									textIndex = endIndex;
            								}
            							}
HXLINE(1476)							wrap = false;
            						}
            						else {
HXLINE(1480)							bool _hx_tmp;
HXDLIN(1480)							if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1480)								_hx_tmp = (textIndex == spaceIndex);
            							}
            							else {
HXLINE(1480)								_hx_tmp = false;
            							}
HXDLIN(1480)							if (_hx_tmp) {
HXLINE(1483)								if (::hx::IsNotEq( align,2 )) {
HXLINE(1485)									layoutGroup->endIndex = spaceIndex;
HXLINE(1486)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1487)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1487)									layoutGroup1->width = (layoutGroup1->width + widthValue);
            								}
HXLINE(1490)								offsetX = (offsetX + widthValue);
HXLINE(1492)								textIndex = endIndex;
            							}
            							else {
HXLINE(1494)								bool _hx_tmp;
HXDLIN(1494)								if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1494)									_hx_tmp = ::hx::IsEq( align,2 );
            								}
            								else {
HXLINE(1494)									_hx_tmp = true;
            								}
HXDLIN(1494)								if (_hx_tmp) {
HXLINE(1496)									bool _hx_tmp;
HXDLIN(1496)									if ((_gthis->width >= 4)) {
HXLINE(1496)										_hx_tmp = _gthis->wordWrap;
            									}
            									else {
HXLINE(1496)										_hx_tmp = false;
            									}
HXDLIN(1496)									if (_hx_tmp) {
HXLINE(1496)										::Array< ::Dynamic> remainingPositions = positions;
HXDLIN(1496)										int i;
HXDLIN(1496)										int bufferCount;
HXDLIN(1496)										int placeIndex;
HXDLIN(1496)										Float positionWidth;
HXDLIN(1496)										 ::openfl::_internal::text::GlyphPosition currentPosition;
HXDLIN(1496)										Float width = ((Float)0.0);
HXDLIN(1496)										{
HXLINE(1496)											int _g = 0;
HXDLIN(1496)											while((_g < remainingPositions->length)){
HXLINE(1496)												 ::openfl::_internal::text::GlyphPosition position = remainingPositions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)												_g = (_g + 1);
HXDLIN(1496)												width = (width + position->advance->x);
            											}
            										}
HXDLIN(1496)										Float tempWidth = width;
HXDLIN(1496)										while(((offsetX + tempWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1202)											bufferCount = 0;
HXDLIN(1202)											i = bufferCount;
HXLINE(1203)											positionWidth = ((Float)0.0);
HXLINE(1496)											while(((offsetX + positionWidth) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1207)												currentPosition = remainingPositions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1496)												if ((currentPosition->advance->x == ((Float)0.0))) {
HXLINE(1496)													i = (i + 1);
HXDLIN(1496)													bufferCount = (bufferCount + 1);
            												}
            												else {
HXLINE(1496)													positionWidth = (positionWidth + currentPosition->advance->x);
HXDLIN(1496)													i = (i + 1);
            												}
            											}
HXDLIN(1496)											if ((positionWidth == ((Float)0.0))) {
HXLINE(1496)												goto _hx_goto_65;
            											}
            											else {
HXLINE(1496)												bool _hx_tmp;
HXDLIN(1496)												if ((i < 2)) {
HXLINE(1496)													_hx_tmp = ((positionWidth + offsetX) > (_gthis->width - ( (Float)(2) )));
            												}
            												else {
HXLINE(1496)													_hx_tmp = false;
            												}
HXDLIN(1496)												if (_hx_tmp) {
HXLINE(1496)													if ((((textIndex + i) - bufferCount) == endIndex)) {
HXLINE(1496)														goto _hx_goto_65;
            													}
            												}
            												else {
HXLINE(1496)													while(((offsetX + positionWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1496)														i = (i - 1);
HXDLIN(1496)														if (((i - bufferCount) > 0)) {
HXLINE(1496)															{
HXLINE(1496)																int endIndex = ((textIndex + i) - bufferCount);
HXDLIN(1496)																if ((endIndex <= formatRange->end)) {
HXLINE(1496)																	::String text = _gthis->text;
HXDLIN(1496)																	Float letterSpacing = ((Float)0.0);
HXDLIN(1496)																	if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																		letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXLINE(1496)																	if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)																	if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1496)																	bool positions1;
HXDLIN(1496)																	if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)																		positions1 = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1496)																		positions1 = true;
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1496)																	 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1496)																	_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1496)																	positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)																	Float width = ((Float)0.0);
HXDLIN(1496)																	int _g = 0;
HXDLIN(1496)																	while((_g < positions->length)){
HXLINE(1496)																		 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)																		_g = (_g + 1);
HXDLIN(1496)																		width = (width + position->advance->x);
            																	}
HXDLIN(1496)																	widthValue = width;
            																}
            																else {
HXLINE(1496)																	int tempIndex = textIndex;
HXDLIN(1496)																	int tempRangeEnd = formatRange->end;
HXDLIN(1496)																	int countRanges = 0;
HXLINE(1046)																	positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)																	widthValue = ( (Float)(0) );
HXLINE(1496)																	while(true){
HXLINE(1496)																		if ((tempIndex != tempRangeEnd)) {
HXLINE(1496)																			::String text = _gthis->text;
HXDLIN(1496)																			Float letterSpacing = ((Float)0.0);
HXDLIN(1496)																			if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																				letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																			}
HXLINE(1496)																			if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)																				_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)																			_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)																			if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)																				_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1496)																			bool _hx_tmp;
HXDLIN(1496)																			if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)																				_hx_tmp = (_gthis->sharpness < 400);
            																			}
            																			else {
HXLINE(1496)																				_hx_tmp = true;
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1496)																			 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1496)																			_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1496)																			::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																			positions = positions->concat(tempPositions);
            																		}
HXLINE(1496)																		if ((tempRangeEnd != endIndex)) {
HXLINE(1496)																			bool _hx_tmp;
HXDLIN(1496)																			if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)																				rangeIndex = (rangeIndex + 1);
HXDLIN(1496)																				formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1496)																				currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																				font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1496)																				_hx_tmp = true;
            																			}
            																			else {
HXLINE(1496)																				_hx_tmp = false;
            																			}
HXDLIN(1496)																			if (!(_hx_tmp)) {
HXLINE(1496)																				::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1496)																				goto _hx_goto_69;
            																			}
HXLINE(1065)																			tempIndex = tempRangeEnd;
HXLINE(1496)																			if ((endIndex < formatRange->end)) {
HXLINE(1496)																				tempRangeEnd = endIndex;
            																			}
            																			else {
HXLINE(1496)																				tempRangeEnd = formatRange->end;
            																			}
HXDLIN(1496)																			countRanges = (countRanges + 1);
            																		}
            																		else {
HXLINE(1496)																			Float width = ((Float)0.0);
HXDLIN(1496)																			int _g = 0;
HXDLIN(1496)																			while((_g < positions->length)){
HXLINE(1496)																				 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)																				_g = (_g + 1);
HXDLIN(1496)																				width = (width + position->advance->x);
            																			}
HXDLIN(1496)																			widthValue = width;
HXDLIN(1496)																			goto _hx_goto_69;
            																		}
            																	}
            																	_hx_goto_69:;
HXDLIN(1496)																	rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1496)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1496)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1496)																		currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																	}
            																}
            															}
HXLINE(1250)															positionWidth = widthValue;
            														}
            														else {
HXLINE(1256)															i = 1;
HXLINE(1257)															bufferCount = 0;
HXLINE(1496)															{
HXLINE(1496)																int endIndex = (textIndex + 1);
HXDLIN(1496)																if ((endIndex <= formatRange->end)) {
HXLINE(1496)																	::String text = _gthis->text;
HXDLIN(1496)																	Float letterSpacing = ((Float)0.0);
HXDLIN(1496)																	if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																		letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXLINE(1496)																	if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)																	if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1496)																	bool positions1;
HXDLIN(1496)																	if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)																		positions1 = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1496)																		positions1 = true;
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1496)																	 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1496)																	_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1496)																	positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)																	Float width = ((Float)0.0);
HXDLIN(1496)																	int _g = 0;
HXDLIN(1496)																	while((_g < positions->length)){
HXLINE(1496)																		 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)																		_g = (_g + 1);
HXDLIN(1496)																		width = (width + position->advance->x);
            																	}
HXDLIN(1496)																	widthValue = width;
            																}
            																else {
HXLINE(1496)																	int tempIndex = textIndex;
HXDLIN(1496)																	int tempRangeEnd = formatRange->end;
HXDLIN(1496)																	int countRanges = 0;
HXLINE(1046)																	positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)																	widthValue = ( (Float)(0) );
HXLINE(1496)																	while(true){
HXLINE(1496)																		if ((tempIndex != tempRangeEnd)) {
HXLINE(1496)																			::String text = _gthis->text;
HXDLIN(1496)																			Float letterSpacing = ((Float)0.0);
HXDLIN(1496)																			if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																				letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																			}
HXLINE(1496)																			if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)																				_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)																			_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)																			if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)																				_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1496)																			bool _hx_tmp;
HXDLIN(1496)																			if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)																				_hx_tmp = (_gthis->sharpness < 400);
            																			}
            																			else {
HXLINE(1496)																				_hx_tmp = true;
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1496)																			 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1496)																			_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1496)																			::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																			positions = positions->concat(tempPositions);
            																		}
HXLINE(1496)																		if ((tempRangeEnd != endIndex)) {
HXLINE(1496)																			bool _hx_tmp;
HXDLIN(1496)																			if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)																				rangeIndex = (rangeIndex + 1);
HXDLIN(1496)																				formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1496)																				currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																				font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1496)																				_hx_tmp = true;
            																			}
            																			else {
HXLINE(1496)																				_hx_tmp = false;
            																			}
HXDLIN(1496)																			if (!(_hx_tmp)) {
HXLINE(1496)																				::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1496)																				goto _hx_goto_72;
            																			}
HXLINE(1065)																			tempIndex = tempRangeEnd;
HXLINE(1496)																			if ((endIndex < formatRange->end)) {
HXLINE(1496)																				tempRangeEnd = endIndex;
            																			}
            																			else {
HXLINE(1496)																				tempRangeEnd = formatRange->end;
            																			}
HXDLIN(1496)																			countRanges = (countRanges + 1);
            																		}
            																		else {
HXLINE(1496)																			Float width = ((Float)0.0);
HXDLIN(1496)																			int _g = 0;
HXDLIN(1496)																			while((_g < positions->length)){
HXLINE(1496)																				 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)																				_g = (_g + 1);
HXDLIN(1496)																				width = (width + position->advance->x);
            																			}
HXDLIN(1496)																			widthValue = width;
HXDLIN(1496)																			goto _hx_goto_72;
            																		}
            																	}
            																	_hx_goto_72:;
HXDLIN(1496)																	rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1496)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1496)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1496)																		currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																	}
            																}
            															}
HXLINE(1260)															positionWidth = ( (Float)(0) );
            														}
            													}
            												}
            											}
HXLINE(1265)											placeIndex = ((textIndex + i) - bufferCount);
HXLINE(1496)											{
HXLINE(1496)												if ((placeIndex <= formatRange->end)) {
HXLINE(1496)													::String text = _gthis->text;
HXDLIN(1496)													Float letterSpacing = ((Float)0.0);
HXDLIN(1496)													if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)														letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1496)													if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)													if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1496)													bool positions1;
HXDLIN(1496)													if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)														positions1 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1496)														positions1 = true;
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1496)													 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1496)													_gthis1->set_text(text.substring(textIndex,placeIndex));
HXDLIN(1496)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)													Float width = ((Float)0.0);
HXDLIN(1496)													int _g = 0;
HXDLIN(1496)													while((_g < positions->length)){
HXLINE(1496)														 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)														_g = (_g + 1);
HXDLIN(1496)														width = (width + position->advance->x);
            													}
HXDLIN(1496)													widthValue = width;
HXDLIN(1496)													bool _hx_tmp;
HXDLIN(1496)													if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1496)														_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1496)														_hx_tmp = true;
            													}
HXDLIN(1496)													if (_hx_tmp) {
HXLINE( 923)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex);
HXLINE(1496)														_gthis->layoutGroups->push(layoutGroup);
            													}
            													else {
HXLINE(1496)														layoutGroup->format = formatRange->format;
HXDLIN(1496)														layoutGroup->startIndex = textIndex;
HXDLIN(1496)														layoutGroup->endIndex = placeIndex;
            													}
HXDLIN(1496)													layoutGroup->positions = positions;
HXDLIN(1496)													layoutGroup->offsetX = offsetX;
HXDLIN(1496)													layoutGroup->ascent = ascent;
HXDLIN(1496)													layoutGroup->descent = descent;
HXDLIN(1496)													layoutGroup->leading = leading;
HXDLIN(1496)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1496)													layoutGroup->offsetY = offsetY;
HXDLIN(1496)													layoutGroup->width = widthValue;
HXDLIN(1496)													layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1496)													offsetX = (offsetX + widthValue);
HXDLIN(1496)													if ((placeIndex == formatRange->end)) {
HXLINE(1108)														layoutGroup = null();
HXLINE(1496)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)															rangeIndex = (rangeIndex + 1);
HXDLIN(1496)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1496)															currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
HXLINE(1496)														{
HXLINE(1496)															if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)																ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)																descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            															}
            															else {
HXLINE(1496)																bool _hx_tmp;
HXDLIN(1496)																if (::hx::IsNotNull( font )) {
HXLINE(1496)																	_hx_tmp = (font->unitsPerEM != 0);
            																}
            																else {
HXLINE(1496)																	_hx_tmp = false;
            																}
HXDLIN(1496)																if (_hx_tmp) {
HXLINE( 945)																	ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																	descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            																}
            																else {
HXLINE( 951)																	ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																	descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            																}
            															}
HXLINE( 955)															leading = ( (int)(currentFormat->leading) );
HXLINE( 957)															heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1496)															if ((heightValue > maxHeightValue)) {
HXLINE( 961)																maxHeightValue = heightValue;
            															}
HXLINE(1496)															if ((ascent > maxAscent)) {
HXLINE( 966)																maxAscent = ascent;
            															}
            														}
            													}
            												}
            												else {
HXLINE(1496)													while(true){
HXLINE(1496)														int tempRangeEnd;
HXDLIN(1496)														if ((placeIndex < formatRange->end)) {
HXLINE(1496)															tempRangeEnd = placeIndex;
            														}
            														else {
HXLINE(1496)															tempRangeEnd = formatRange->end;
            														}
HXDLIN(1496)														if ((textIndex != tempRangeEnd)) {
HXLINE(1496)															::String text = _gthis->text;
HXDLIN(1496)															Float letterSpacing = ((Float)0.0);
HXDLIN(1496)															if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1496)															if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1496)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)															if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1496)															_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1496)															bool positions1;
HXDLIN(1496)															if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)																positions1 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1496)																positions1 = true;
            															}
HXDLIN(1496)															_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1496)															 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1496)															_gthis1->set_text(text.substring(textIndex,tempRangeEnd));
HXDLIN(1496)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)															Float width = ((Float)0.0);
HXDLIN(1496)															int _g = 0;
HXDLIN(1496)															while((_g < positions->length)){
HXLINE(1496)																 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)																_g = (_g + 1);
HXDLIN(1496)																width = (width + position->advance->x);
            															}
HXDLIN(1496)															widthValue = width;
HXDLIN(1496)															bool _hx_tmp;
HXDLIN(1496)															if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1496)																_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            															}
            															else {
HXLINE(1496)																_hx_tmp = true;
            															}
HXDLIN(1496)															if (_hx_tmp) {
HXLINE( 923)																layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd);
HXLINE(1496)																_gthis->layoutGroups->push(layoutGroup);
            															}
            															else {
HXLINE(1496)																layoutGroup->format = formatRange->format;
HXDLIN(1496)																layoutGroup->startIndex = textIndex;
HXDLIN(1496)																layoutGroup->endIndex = tempRangeEnd;
            															}
HXDLIN(1496)															layoutGroup->positions = positions;
HXDLIN(1496)															layoutGroup->offsetX = offsetX;
HXDLIN(1496)															layoutGroup->ascent = ascent;
HXDLIN(1496)															layoutGroup->descent = descent;
HXDLIN(1496)															layoutGroup->leading = leading;
HXDLIN(1496)															layoutGroup->lineIndex = lineIndex;
HXDLIN(1496)															layoutGroup->offsetY = offsetY;
HXDLIN(1496)															layoutGroup->width = widthValue;
HXDLIN(1496)															layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1496)															offsetX = (offsetX + widthValue);
HXLINE(1140)															textIndex = tempRangeEnd;
            														}
HXLINE(1496)														if ((tempRangeEnd == formatRange->end)) {
HXLINE(1143)															layoutGroup = null();
            														}
HXLINE(1496)														if ((tempRangeEnd == placeIndex)) {
HXLINE(1496)															goto _hx_goto_75;
            														}
HXDLIN(1496)														bool _hx_tmp;
HXDLIN(1496)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)															rangeIndex = (rangeIndex + 1);
HXDLIN(1496)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1496)															currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1496)															_hx_tmp = true;
            														}
            														else {
HXLINE(1496)															_hx_tmp = false;
            														}
HXDLIN(1496)														if (!(_hx_tmp)) {
HXLINE(1496)															::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1149,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1496)															goto _hx_goto_75;
            														}
HXDLIN(1496)														{
HXLINE(1496)															if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)																ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)																descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            															}
            															else {
HXLINE(1496)																bool _hx_tmp;
HXDLIN(1496)																if (::hx::IsNotNull( font )) {
HXLINE(1496)																	_hx_tmp = (font->unitsPerEM != 0);
            																}
            																else {
HXLINE(1496)																	_hx_tmp = false;
            																}
HXDLIN(1496)																if (_hx_tmp) {
HXLINE( 945)																	ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																	descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            																}
            																else {
HXLINE( 951)																	ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																	descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            																}
            															}
HXLINE( 955)															leading = ( (int)(currentFormat->leading) );
HXLINE( 957)															heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1496)															if ((heightValue > maxHeightValue)) {
HXLINE( 961)																maxHeightValue = heightValue;
            															}
HXLINE(1496)															if ((ascent > maxAscent)) {
HXLINE( 966)																maxAscent = ascent;
            															}
            														}
            													}
            													_hx_goto_75:;
            												}
HXLINE(1157)												textIndex = placeIndex;
            											}
HXLINE(1496)											{
HXLINE(1496)												{
HXLINE(1496)													if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1496)														bool _hx_tmp;
HXDLIN(1496)														if (::hx::IsNotNull( font )) {
HXLINE(1496)															_hx_tmp = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1496)															_hx_tmp = false;
            														}
HXDLIN(1496)														if (_hx_tmp) {
HXLINE( 945)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 951)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 955)													leading = ( (int)(currentFormat->leading) );
HXLINE( 957)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1496)													if ((heightValue > maxHeightValue)) {
HXLINE( 961)														maxHeightValue = heightValue;
            													}
HXLINE(1496)													if ((ascent > maxAscent)) {
HXLINE( 966)														maxAscent = ascent;
            													}
            												}
HXLINE(1496)												int i1 = _gthis->layoutGroups->get_length();
HXDLIN(1496)												while(true){
HXLINE(1496)													i1 = (i1 - 1);
HXDLIN(1496)													if (!((i1 > -1))) {
HXLINE(1496)														goto _hx_goto_77;
            													}
HXDLIN(1496)													 ::openfl::_internal::text::TextLayoutGroup lg = _gthis->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1496)													if ((lg->lineIndex < lineIndex)) {
HXLINE(1496)														goto _hx_goto_77;
            													}
HXDLIN(1496)													if ((lg->lineIndex > lineIndex)) {
HXLINE(1496)														continue;
            													}
HXDLIN(1496)													lg->ascent = maxAscent;
HXDLIN(1496)													lg->height = ( (Float)(maxHeightValue) );
            												}
            												_hx_goto_77:;
HXDLIN(1496)												offsetY = (offsetY + maxHeightValue);
HXLINE(1182)												maxAscent = ((Float)0.0);
HXLINE(1183)												maxHeightValue = 0;
HXLINE(1496)												lineIndex = (lineIndex + 1);
HXLINE(1186)												offsetX = ( (Float)(2) );
            											}
HXLINE(1496)											if ((endIndex <= formatRange->end)) {
HXLINE(1496)												::String text = _gthis->text;
HXDLIN(1496)												Float letterSpacing = ((Float)0.0);
HXDLIN(1496)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1496)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1496)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1496)												_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1496)												bool positions1;
HXDLIN(1496)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)													positions1 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1496)													positions1 = true;
            												}
HXDLIN(1496)												_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1496)												 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1496)												_gthis1->set_text(text.substring(placeIndex,endIndex));
HXDLIN(1496)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)												Float width = ((Float)0.0);
HXDLIN(1496)												int _g = 0;
HXDLIN(1496)												while((_g < positions->length)){
HXLINE(1496)													 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)													_g = (_g + 1);
HXDLIN(1496)													width = (width + position->advance->x);
            												}
HXDLIN(1496)												widthValue = width;
            											}
            											else {
HXLINE(1496)												int tempIndex = placeIndex;
HXDLIN(1496)												int tempRangeEnd = formatRange->end;
HXDLIN(1496)												int countRanges = 0;
HXLINE(1046)												positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)												widthValue = ( (Float)(0) );
HXLINE(1496)												while(true){
HXLINE(1496)													if ((tempIndex != tempRangeEnd)) {
HXLINE(1496)														::String text = _gthis->text;
HXDLIN(1496)														Float letterSpacing = ((Float)0.0);
HXDLIN(1496)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)															letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1496)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1496)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1496)														_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1496)														bool _hx_tmp;
HXDLIN(1496)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)															_hx_tmp = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1496)															_hx_tmp = true;
            														}
HXDLIN(1496)														_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1496)														 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1496)														_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1496)														::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)														positions = positions->concat(tempPositions);
            													}
HXLINE(1496)													if ((tempRangeEnd != endIndex)) {
HXLINE(1496)														bool _hx_tmp;
HXDLIN(1496)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)															rangeIndex = (rangeIndex + 1);
HXDLIN(1496)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1496)															currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1496)															_hx_tmp = true;
            														}
            														else {
HXLINE(1496)															_hx_tmp = false;
            														}
HXDLIN(1496)														if (!(_hx_tmp)) {
HXLINE(1496)															::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1496)															goto _hx_goto_79;
            														}
HXLINE(1065)														tempIndex = tempRangeEnd;
HXLINE(1496)														if ((endIndex < formatRange->end)) {
HXLINE(1496)															tempRangeEnd = endIndex;
            														}
            														else {
HXLINE(1496)															tempRangeEnd = formatRange->end;
            														}
HXDLIN(1496)														countRanges = (countRanges + 1);
            													}
            													else {
HXLINE(1496)														Float width = ((Float)0.0);
HXDLIN(1496)														int _g = 0;
HXDLIN(1496)														while((_g < positions->length)){
HXLINE(1496)															 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)															_g = (_g + 1);
HXDLIN(1496)															width = (width + position->advance->x);
            														}
HXDLIN(1496)														widthValue = width;
HXDLIN(1496)														goto _hx_goto_79;
            													}
            												}
            												_hx_goto_79:;
HXDLIN(1496)												rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1496)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)													rangeIndex = (rangeIndex + 1);
HXDLIN(1496)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1496)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
            											}
HXLINE(1271)											remainingPositions = positions;
HXLINE(1272)											tempWidth = widthValue;
            										}
            										_hx_goto_65:;
            									}
HXLINE(1496)									{
HXLINE(1496)										if ((endIndex <= formatRange->end)) {
HXLINE(1496)											::String text = _gthis->text;
HXDLIN(1496)											Float letterSpacing = ((Float)0.0);
HXDLIN(1496)											if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)												letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1496)											if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1496)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)											if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1496)											_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1496)											bool positions1;
HXDLIN(1496)											if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)												positions1 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1496)												positions1 = true;
            											}
HXDLIN(1496)											_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1496)											 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1496)											_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1496)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)											Float width = ((Float)0.0);
HXDLIN(1496)											int _g = 0;
HXDLIN(1496)											while((_g < positions->length)){
HXLINE(1496)												 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)												_g = (_g + 1);
HXDLIN(1496)												width = (width + position->advance->x);
            											}
HXDLIN(1496)											widthValue = width;
HXDLIN(1496)											bool _hx_tmp;
HXDLIN(1496)											if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1496)												_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1496)												_hx_tmp = true;
            											}
HXDLIN(1496)											if (_hx_tmp) {
HXLINE( 923)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex);
HXLINE(1496)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1496)												layoutGroup->format = formatRange->format;
HXDLIN(1496)												layoutGroup->startIndex = textIndex;
HXDLIN(1496)												layoutGroup->endIndex = endIndex;
            											}
HXDLIN(1496)											layoutGroup->positions = positions;
HXDLIN(1496)											layoutGroup->offsetX = offsetX;
HXDLIN(1496)											layoutGroup->ascent = ascent;
HXDLIN(1496)											layoutGroup->descent = descent;
HXDLIN(1496)											layoutGroup->leading = leading;
HXDLIN(1496)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1496)											layoutGroup->offsetY = offsetY;
HXDLIN(1496)											layoutGroup->width = widthValue;
HXDLIN(1496)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1496)											offsetX = (offsetX + widthValue);
HXDLIN(1496)											if ((endIndex == formatRange->end)) {
HXLINE(1108)												layoutGroup = null();
HXLINE(1496)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)													rangeIndex = (rangeIndex + 1);
HXDLIN(1496)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1496)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXLINE(1496)												{
HXLINE(1496)													if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1496)														bool _hx_tmp;
HXDLIN(1496)														if (::hx::IsNotNull( font )) {
HXLINE(1496)															_hx_tmp = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1496)															_hx_tmp = false;
            														}
HXDLIN(1496)														if (_hx_tmp) {
HXLINE( 945)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 951)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 955)													leading = ( (int)(currentFormat->leading) );
HXLINE( 957)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1496)													if ((heightValue > maxHeightValue)) {
HXLINE( 961)														maxHeightValue = heightValue;
            													}
HXLINE(1496)													if ((ascent > maxAscent)) {
HXLINE( 966)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1496)											while(true){
HXLINE(1496)												int tempRangeEnd;
HXDLIN(1496)												if ((endIndex < formatRange->end)) {
HXLINE(1496)													tempRangeEnd = endIndex;
            												}
            												else {
HXLINE(1496)													tempRangeEnd = formatRange->end;
            												}
HXDLIN(1496)												if ((textIndex != tempRangeEnd)) {
HXLINE(1496)													::String text = _gthis->text;
HXDLIN(1496)													Float letterSpacing = ((Float)0.0);
HXDLIN(1496)													if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)														letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1496)													if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)													if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1496)													bool positions1;
HXDLIN(1496)													if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)														positions1 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1496)														positions1 = true;
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1496)													 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1496)													_gthis1->set_text(text.substring(textIndex,tempRangeEnd));
HXDLIN(1496)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)													Float width = ((Float)0.0);
HXDLIN(1496)													int _g = 0;
HXDLIN(1496)													while((_g < positions->length)){
HXLINE(1496)														 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1496)														_g = (_g + 1);
HXDLIN(1496)														width = (width + position->advance->x);
            													}
HXDLIN(1496)													widthValue = width;
HXDLIN(1496)													bool _hx_tmp;
HXDLIN(1496)													if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1496)														_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1496)														_hx_tmp = true;
            													}
HXDLIN(1496)													if (_hx_tmp) {
HXLINE( 923)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd);
HXLINE(1496)														_gthis->layoutGroups->push(layoutGroup);
            													}
            													else {
HXLINE(1496)														layoutGroup->format = formatRange->format;
HXDLIN(1496)														layoutGroup->startIndex = textIndex;
HXDLIN(1496)														layoutGroup->endIndex = tempRangeEnd;
            													}
HXDLIN(1496)													layoutGroup->positions = positions;
HXDLIN(1496)													layoutGroup->offsetX = offsetX;
HXDLIN(1496)													layoutGroup->ascent = ascent;
HXDLIN(1496)													layoutGroup->descent = descent;
HXDLIN(1496)													layoutGroup->leading = leading;
HXDLIN(1496)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1496)													layoutGroup->offsetY = offsetY;
HXDLIN(1496)													layoutGroup->width = widthValue;
HXDLIN(1496)													layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1496)													offsetX = (offsetX + widthValue);
HXLINE(1140)													textIndex = tempRangeEnd;
            												}
HXLINE(1496)												if ((tempRangeEnd == formatRange->end)) {
HXLINE(1143)													layoutGroup = null();
            												}
HXLINE(1496)												if ((tempRangeEnd == endIndex)) {
HXLINE(1496)													goto _hx_goto_82;
            												}
HXDLIN(1496)												bool _hx_tmp;
HXDLIN(1496)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)													rangeIndex = (rangeIndex + 1);
HXDLIN(1496)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1496)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1496)													_hx_tmp = true;
            												}
            												else {
HXLINE(1496)													_hx_tmp = false;
            												}
HXDLIN(1496)												if (!(_hx_tmp)) {
HXLINE(1496)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1149,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1496)													goto _hx_goto_82;
            												}
HXDLIN(1496)												{
HXLINE(1496)													if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1496)														bool _hx_tmp;
HXDLIN(1496)														if (::hx::IsNotNull( font )) {
HXLINE(1496)															_hx_tmp = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1496)															_hx_tmp = false;
            														}
HXDLIN(1496)														if (_hx_tmp) {
HXLINE( 945)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 951)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 955)													leading = ( (int)(currentFormat->leading) );
HXLINE( 957)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1496)													if ((heightValue > maxHeightValue)) {
HXLINE( 961)														maxHeightValue = heightValue;
            													}
HXLINE(1496)													if ((ascent > maxAscent)) {
HXLINE( 966)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_82:;
            										}
HXLINE(1157)										textIndex = endIndex;
            									}
            								}
            								else {
HXLINE(1500)									int tempRangeEnd;
HXDLIN(1500)									if ((endIndex < formatRange->end)) {
HXLINE(1500)										tempRangeEnd = endIndex;
            									}
            									else {
HXLINE(1500)										tempRangeEnd = formatRange->end;
            									}
HXLINE(1502)									if ((tempRangeEnd < endIndex)) {
HXLINE(1504)										::String text = this->text;
HXDLIN(1504)										Float letterSpacing = ((Float)0.0);
HXDLIN(1504)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1504)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1504)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1504)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1504)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1504)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1504)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1504)										_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1504)										bool positions1;
HXDLIN(1504)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1504)											positions1 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1504)											positions1 = true;
            										}
HXDLIN(1504)										_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1504)										 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1504)										_gthis1->set_text(text.substring(textIndex,tempRangeEnd));
HXDLIN(1504)										positions = _gthis->_hx___textLayout->get_positions();
HXLINE(1505)										Float width = ((Float)0.0);
HXDLIN(1505)										int _g = 0;
HXDLIN(1505)										while((_g < positions->length)){
HXLINE(1505)											 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1505)											_g = (_g + 1);
HXDLIN(1505)											width = (width + position->advance->x);
            										}
HXDLIN(1505)										widthValue = width;
            									}
HXLINE(1508)									layoutGroup->endIndex = tempRangeEnd;
HXLINE(1509)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1510)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1510)									layoutGroup1->width = (layoutGroup1->width + widthValue);
HXLINE(1512)									offsetX = (offsetX + widthValue);
HXLINE(1514)									if ((tempRangeEnd == formatRange->end)) {
HXLINE(1516)										layoutGroup = null();
HXLINE(1517)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1517)											rangeIndex = (rangeIndex + 1);
HXDLIN(1517)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1517)											currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXLINE(1518)										{
HXLINE(1518)											if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1518)												bool _hx_tmp;
HXDLIN(1518)												if (::hx::IsNotNull( font )) {
HXLINE(1518)													_hx_tmp = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1518)													_hx_tmp = false;
            												}
HXDLIN(1518)												if (_hx_tmp) {
HXLINE( 945)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 951)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 955)											leading = ( (int)(currentFormat->leading) );
HXLINE( 957)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1518)											if ((heightValue > maxHeightValue)) {
HXLINE( 961)												maxHeightValue = heightValue;
            											}
HXLINE(1518)											if ((ascent > maxAscent)) {
HXLINE( 966)												maxAscent = ascent;
            											}
            										}
HXLINE(1520)										textIndex = tempRangeEnd;
HXLINE(1522)										if ((tempRangeEnd != endIndex)) {
HXLINE(1524)											if ((endIndex <= formatRange->end)) {
HXLINE(1524)												::String text = _gthis->text;
HXDLIN(1524)												Float letterSpacing = ((Float)0.0);
HXDLIN(1524)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1524)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1524)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1524)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1524)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1524)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1524)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1524)												_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1524)												bool positions1;
HXDLIN(1524)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1524)													positions1 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1524)													positions1 = true;
            												}
HXDLIN(1524)												_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1524)												 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1524)												_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1524)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1524)												Float width = ((Float)0.0);
HXDLIN(1524)												int _g = 0;
HXDLIN(1524)												while((_g < positions->length)){
HXLINE(1524)													 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1524)													_g = (_g + 1);
HXDLIN(1524)													width = (width + position->advance->x);
            												}
HXDLIN(1524)												widthValue = width;
HXDLIN(1524)												bool _hx_tmp;
HXDLIN(1524)												if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1524)													_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1524)													_hx_tmp = true;
            												}
HXDLIN(1524)												if (_hx_tmp) {
HXLINE( 923)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex);
HXLINE(1524)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1524)													layoutGroup->format = formatRange->format;
HXDLIN(1524)													layoutGroup->startIndex = textIndex;
HXDLIN(1524)													layoutGroup->endIndex = endIndex;
            												}
HXDLIN(1524)												layoutGroup->positions = positions;
HXDLIN(1524)												layoutGroup->offsetX = offsetX;
HXDLIN(1524)												layoutGroup->ascent = ascent;
HXDLIN(1524)												layoutGroup->descent = descent;
HXDLIN(1524)												layoutGroup->leading = leading;
HXDLIN(1524)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1524)												layoutGroup->offsetY = offsetY;
HXDLIN(1524)												layoutGroup->width = widthValue;
HXDLIN(1524)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1524)												offsetX = (offsetX + widthValue);
HXDLIN(1524)												if ((endIndex == formatRange->end)) {
HXLINE(1108)													layoutGroup = null();
HXLINE(1524)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1524)														rangeIndex = (rangeIndex + 1);
HXDLIN(1524)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1524)														currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXLINE(1524)													{
HXLINE(1524)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1524)															bool _hx_tmp;
HXDLIN(1524)															if (::hx::IsNotNull( font )) {
HXLINE(1524)																_hx_tmp = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1524)																_hx_tmp = false;
            															}
HXDLIN(1524)															if (_hx_tmp) {
HXLINE( 945)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 951)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 955)														leading = ( (int)(currentFormat->leading) );
HXLINE( 957)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1524)														if ((heightValue > maxHeightValue)) {
HXLINE( 961)															maxHeightValue = heightValue;
            														}
HXLINE(1524)														if ((ascent > maxAscent)) {
HXLINE( 966)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1524)												while(true){
HXLINE(1524)													int tempRangeEnd;
HXDLIN(1524)													if ((endIndex < formatRange->end)) {
HXLINE(1524)														tempRangeEnd = endIndex;
            													}
            													else {
HXLINE(1524)														tempRangeEnd = formatRange->end;
            													}
HXDLIN(1524)													if ((textIndex != tempRangeEnd)) {
HXLINE(1524)														::String text = _gthis->text;
HXDLIN(1524)														Float letterSpacing = ((Float)0.0);
HXDLIN(1524)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)															letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1524)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1524)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1524)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1524)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1524)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1524)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1524)														_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1524)														bool positions1;
HXDLIN(1524)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1524)															positions1 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1524)															positions1 = true;
            														}
HXDLIN(1524)														_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1524)														 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1524)														_gthis1->set_text(text.substring(textIndex,tempRangeEnd));
HXDLIN(1524)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1524)														Float width = ((Float)0.0);
HXDLIN(1524)														int _g = 0;
HXDLIN(1524)														while((_g < positions->length)){
HXLINE(1524)															 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1524)															_g = (_g + 1);
HXDLIN(1524)															width = (width + position->advance->x);
            														}
HXDLIN(1524)														widthValue = width;
HXDLIN(1524)														bool _hx_tmp;
HXDLIN(1524)														if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1524)															_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1524)															_hx_tmp = true;
            														}
HXDLIN(1524)														if (_hx_tmp) {
HXLINE( 923)															layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd);
HXLINE(1524)															_gthis->layoutGroups->push(layoutGroup);
            														}
            														else {
HXLINE(1524)															layoutGroup->format = formatRange->format;
HXDLIN(1524)															layoutGroup->startIndex = textIndex;
HXDLIN(1524)															layoutGroup->endIndex = tempRangeEnd;
            														}
HXDLIN(1524)														layoutGroup->positions = positions;
HXDLIN(1524)														layoutGroup->offsetX = offsetX;
HXDLIN(1524)														layoutGroup->ascent = ascent;
HXDLIN(1524)														layoutGroup->descent = descent;
HXDLIN(1524)														layoutGroup->leading = leading;
HXDLIN(1524)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1524)														layoutGroup->offsetY = offsetY;
HXDLIN(1524)														layoutGroup->width = widthValue;
HXDLIN(1524)														layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1524)														offsetX = (offsetX + widthValue);
HXLINE(1140)														textIndex = tempRangeEnd;
            													}
HXLINE(1524)													if ((tempRangeEnd == formatRange->end)) {
HXLINE(1143)														layoutGroup = null();
            													}
HXLINE(1524)													if ((tempRangeEnd == endIndex)) {
HXLINE(1524)														goto _hx_goto_86;
            													}
HXDLIN(1524)													bool _hx_tmp;
HXDLIN(1524)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1524)														rangeIndex = (rangeIndex + 1);
HXDLIN(1524)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1524)														currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1524)														_hx_tmp = true;
            													}
            													else {
HXLINE(1524)														_hx_tmp = false;
            													}
HXDLIN(1524)													if (!(_hx_tmp)) {
HXLINE(1524)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1149,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1524)														goto _hx_goto_86;
            													}
HXDLIN(1524)													{
HXLINE(1524)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1524)															bool _hx_tmp;
HXDLIN(1524)															if (::hx::IsNotNull( font )) {
HXLINE(1524)																_hx_tmp = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1524)																_hx_tmp = false;
            															}
HXDLIN(1524)															if (_hx_tmp) {
HXLINE( 945)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 951)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 955)														leading = ( (int)(currentFormat->leading) );
HXLINE( 957)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1524)														if ((heightValue > maxHeightValue)) {
HXLINE( 961)															maxHeightValue = heightValue;
            														}
HXLINE(1524)														if ((ascent > maxAscent)) {
HXLINE( 966)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_86:;
            											}
HXLINE(1157)											textIndex = endIndex;
            										}
            									}
HXLINE(1530)									if ((breakIndex == endIndex)) {
HXLINE(1530)										endIndex = (endIndex + 1);
            									}
HXLINE(1532)									textIndex = endIndex;
            								}
            							}
            						}
HXLINE(1536)						int nextSpaceIndex = this->text.indexOf(HX_(" ",20,00,00,00),textIndex);
HXLINE(1541)						if ((breakIndex == previousSpaceIndex)) {
HXLINE(1543)							layoutGroup->endIndex = breakIndex;
HXLINE(1545)							if ((((breakIndex - layoutGroup->startIndex) - layoutGroup->positions->length) < 0)) {
HXLINE(1548)								layoutGroup->positions->push(null());
            							}
HXLINE(1551)							textIndex = (breakIndex + 1);
            						}
HXLINE(1554)						previousSpaceIndex = spaceIndex;
HXLINE(1555)						spaceIndex = nextSpaceIndex;
HXLINE(1557)						bool _hx_tmp;
HXDLIN(1557)						bool _hx_tmp1;
HXDLIN(1557)						bool _hx_tmp2;
HXDLIN(1557)						if ((breakIndex > -1)) {
HXLINE(1557)							_hx_tmp2 = (breakIndex <= textIndex);
            						}
            						else {
HXLINE(1557)							_hx_tmp2 = false;
            						}
HXDLIN(1557)						if (_hx_tmp2) {
HXLINE(1557)							if ((spaceIndex <= breakIndex)) {
HXLINE(1557)								_hx_tmp1 = (spaceIndex == -1);
            							}
            							else {
HXLINE(1557)								_hx_tmp1 = true;
            							}
            						}
            						else {
HXLINE(1557)							_hx_tmp1 = false;
            						}
HXDLIN(1557)						if (!(_hx_tmp1)) {
HXLINE(1557)							_hx_tmp = (textIndex > this->text.length);
            						}
            						else {
HXLINE(1557)							_hx_tmp = true;
            						}
HXDLIN(1557)						if (_hx_tmp) {
HXLINE(1560)							goto _hx_goto_37;
            						}
            					}
            					_hx_goto_37:;
            				}
            				else {
HXLINE(1566)					if ((textIndex < this->text.length)) {
HXLINE(1570)						{
HXLINE(1570)							int endIndex = this->text.length;
HXDLIN(1570)							if ((endIndex <= formatRange->end)) {
HXLINE(1570)								::String text = _gthis->text;
HXDLIN(1570)								Float letterSpacing = ((Float)0.0);
HXDLIN(1570)								if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)									letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXLINE(1570)								if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1570)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1570)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1570)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1570)								if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1570)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1570)								_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1570)								bool positions1;
HXDLIN(1570)								if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1570)									positions1 = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1570)									positions1 = true;
            								}
HXDLIN(1570)								_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1570)								 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1570)								_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1570)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1570)								Float width = ((Float)0.0);
HXDLIN(1570)								int _g = 0;
HXDLIN(1570)								while((_g < positions->length)){
HXLINE(1570)									 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1570)									_g = (_g + 1);
HXDLIN(1570)									width = (width + position->advance->x);
            								}
HXDLIN(1570)								widthValue = width;
            							}
            							else {
HXLINE(1570)								int tempIndex = textIndex;
HXDLIN(1570)								int tempRangeEnd = formatRange->end;
HXDLIN(1570)								int countRanges = 0;
HXLINE(1046)								positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)								widthValue = ( (Float)(0) );
HXLINE(1570)								while(true){
HXLINE(1570)									if ((tempIndex != tempRangeEnd)) {
HXLINE(1570)										::String text = _gthis->text;
HXDLIN(1570)										Float letterSpacing = ((Float)0.0);
HXDLIN(1570)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1570)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1570)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1570)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1570)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1570)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1570)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1570)										_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1570)										bool _hx_tmp;
HXDLIN(1570)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1570)											_hx_tmp = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1570)											_hx_tmp = true;
            										}
HXDLIN(1570)										_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1570)										 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1570)										_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1570)										::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)										positions = positions->concat(tempPositions);
            									}
HXLINE(1570)									if ((tempRangeEnd != endIndex)) {
HXLINE(1570)										bool _hx_tmp;
HXDLIN(1570)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1570)											rangeIndex = (rangeIndex + 1);
HXDLIN(1570)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1570)											currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1570)											_hx_tmp = true;
            										}
            										else {
HXLINE(1570)											_hx_tmp = false;
            										}
HXDLIN(1570)										if (!(_hx_tmp)) {
HXLINE(1570)											::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1570)											goto _hx_goto_89;
            										}
HXLINE(1065)										tempIndex = tempRangeEnd;
HXLINE(1570)										if ((endIndex < formatRange->end)) {
HXLINE(1570)											tempRangeEnd = endIndex;
            										}
            										else {
HXLINE(1570)											tempRangeEnd = formatRange->end;
            										}
HXDLIN(1570)										countRanges = (countRanges + 1);
            									}
            									else {
HXLINE(1570)										Float width = ((Float)0.0);
HXDLIN(1570)										int _g = 0;
HXDLIN(1570)										while((_g < positions->length)){
HXLINE(1570)											 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1570)											_g = (_g + 1);
HXDLIN(1570)											width = (width + position->advance->x);
            										}
HXDLIN(1570)										widthValue = width;
HXDLIN(1570)										goto _hx_goto_89;
            									}
            								}
            								_hx_goto_89:;
HXDLIN(1570)								rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1570)								if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1570)									rangeIndex = (rangeIndex + 1);
HXDLIN(1570)									formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1570)									currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            								}
            							}
            						}
HXLINE(1571)						{
HXLINE(1571)							int endIndex1 = this->text.length;
HXDLIN(1571)							bool _hx_tmp;
HXDLIN(1571)							if ((_gthis->width >= 4)) {
HXLINE(1571)								_hx_tmp = _gthis->wordWrap;
            							}
            							else {
HXLINE(1571)								_hx_tmp = false;
            							}
HXDLIN(1571)							if (_hx_tmp) {
HXLINE(1571)								::Array< ::Dynamic> remainingPositions = positions;
HXDLIN(1571)								int i;
HXDLIN(1571)								int bufferCount;
HXDLIN(1571)								int placeIndex;
HXDLIN(1571)								Float positionWidth;
HXDLIN(1571)								 ::openfl::_internal::text::GlyphPosition currentPosition;
HXDLIN(1571)								Float width = ((Float)0.0);
HXDLIN(1571)								{
HXLINE(1571)									int _g = 0;
HXDLIN(1571)									while((_g < remainingPositions->length)){
HXLINE(1571)										 ::openfl::_internal::text::GlyphPosition position = remainingPositions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)										_g = (_g + 1);
HXDLIN(1571)										width = (width + position->advance->x);
            									}
            								}
HXDLIN(1571)								Float tempWidth = width;
HXDLIN(1571)								while(((offsetX + tempWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1202)									bufferCount = 0;
HXDLIN(1202)									i = bufferCount;
HXLINE(1203)									positionWidth = ((Float)0.0);
HXLINE(1571)									while(((offsetX + positionWidth) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1207)										currentPosition = remainingPositions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1571)										if ((currentPosition->advance->x == ((Float)0.0))) {
HXLINE(1571)											i = (i + 1);
HXDLIN(1571)											bufferCount = (bufferCount + 1);
            										}
            										else {
HXLINE(1571)											positionWidth = (positionWidth + currentPosition->advance->x);
HXDLIN(1571)											i = (i + 1);
            										}
            									}
HXDLIN(1571)									if ((positionWidth == ((Float)0.0))) {
HXLINE(1571)										goto _hx_goto_92;
            									}
            									else {
HXLINE(1571)										bool _hx_tmp;
HXDLIN(1571)										if ((i < 2)) {
HXLINE(1571)											_hx_tmp = ((positionWidth + offsetX) > (_gthis->width - ( (Float)(2) )));
            										}
            										else {
HXLINE(1571)											_hx_tmp = false;
            										}
HXDLIN(1571)										if (_hx_tmp) {
HXLINE(1571)											if ((((textIndex + i) - bufferCount) == endIndex1)) {
HXLINE(1571)												goto _hx_goto_92;
            											}
            										}
            										else {
HXLINE(1571)											while(((offsetX + positionWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1571)												i = (i - 1);
HXDLIN(1571)												if (((i - bufferCount) > 0)) {
HXLINE(1571)													{
HXLINE(1571)														int endIndex = ((textIndex + i) - bufferCount);
HXDLIN(1571)														if ((endIndex <= formatRange->end)) {
HXLINE(1571)															::String text = _gthis->text;
HXDLIN(1571)															Float letterSpacing = ((Float)0.0);
HXDLIN(1571)															if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1571)															if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)															if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1571)															bool positions1;
HXDLIN(1571)															if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)																positions1 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1571)																positions1 = true;
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1571)															 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1571)															_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1571)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)															Float width = ((Float)0.0);
HXDLIN(1571)															int _g = 0;
HXDLIN(1571)															while((_g < positions->length)){
HXLINE(1571)																 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)																_g = (_g + 1);
HXDLIN(1571)																width = (width + position->advance->x);
            															}
HXDLIN(1571)															widthValue = width;
            														}
            														else {
HXLINE(1571)															int tempIndex = textIndex;
HXDLIN(1571)															int tempRangeEnd = formatRange->end;
HXDLIN(1571)															int countRanges = 0;
HXLINE(1046)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)															widthValue = ( (Float)(0) );
HXLINE(1571)															while(true){
HXLINE(1571)																if ((tempIndex != tempRangeEnd)) {
HXLINE(1571)																	::String text = _gthis->text;
HXDLIN(1571)																	Float letterSpacing = ((Float)0.0);
HXDLIN(1571)																	if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																		letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXLINE(1571)																	if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)																	if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1571)																	bool _hx_tmp;
HXDLIN(1571)																	if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)																		_hx_tmp = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1571)																		_hx_tmp = true;
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1571)																	 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1571)																	_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1571)																	::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																	positions = positions->concat(tempPositions);
            																}
HXLINE(1571)																if ((tempRangeEnd != endIndex)) {
HXLINE(1571)																	bool _hx_tmp;
HXDLIN(1571)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1571)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1571)																		currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1571)																		_hx_tmp = true;
            																	}
            																	else {
HXLINE(1571)																		_hx_tmp = false;
            																	}
HXDLIN(1571)																	if (!(_hx_tmp)) {
HXLINE(1571)																		::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1571)																		goto _hx_goto_96;
            																	}
HXLINE(1065)																	tempIndex = tempRangeEnd;
HXLINE(1571)																	if ((endIndex < formatRange->end)) {
HXLINE(1571)																		tempRangeEnd = endIndex;
            																	}
            																	else {
HXLINE(1571)																		tempRangeEnd = formatRange->end;
            																	}
HXDLIN(1571)																	countRanges = (countRanges + 1);
            																}
            																else {
HXLINE(1571)																	Float width = ((Float)0.0);
HXDLIN(1571)																	int _g = 0;
HXDLIN(1571)																	while((_g < positions->length)){
HXLINE(1571)																		 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)																		_g = (_g + 1);
HXDLIN(1571)																		width = (width + position->advance->x);
            																	}
HXDLIN(1571)																	widthValue = width;
HXDLIN(1571)																	goto _hx_goto_96;
            																}
            															}
            															_hx_goto_96:;
HXDLIN(1571)															rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1571)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)																rangeIndex = (rangeIndex + 1);
HXDLIN(1571)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1571)																currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
HXLINE(1250)													positionWidth = widthValue;
            												}
            												else {
HXLINE(1256)													i = 1;
HXLINE(1257)													bufferCount = 0;
HXLINE(1571)													{
HXLINE(1571)														int endIndex = (textIndex + 1);
HXDLIN(1571)														if ((endIndex <= formatRange->end)) {
HXLINE(1571)															::String text = _gthis->text;
HXDLIN(1571)															Float letterSpacing = ((Float)0.0);
HXDLIN(1571)															if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1571)															if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)															if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1571)															bool positions1;
HXDLIN(1571)															if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)																positions1 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1571)																positions1 = true;
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1571)															 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1571)															_gthis1->set_text(text.substring(textIndex,endIndex));
HXDLIN(1571)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)															Float width = ((Float)0.0);
HXDLIN(1571)															int _g = 0;
HXDLIN(1571)															while((_g < positions->length)){
HXLINE(1571)																 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)																_g = (_g + 1);
HXDLIN(1571)																width = (width + position->advance->x);
            															}
HXDLIN(1571)															widthValue = width;
            														}
            														else {
HXLINE(1571)															int tempIndex = textIndex;
HXDLIN(1571)															int tempRangeEnd = formatRange->end;
HXDLIN(1571)															int countRanges = 0;
HXLINE(1046)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)															widthValue = ( (Float)(0) );
HXLINE(1571)															while(true){
HXLINE(1571)																if ((tempIndex != tempRangeEnd)) {
HXLINE(1571)																	::String text = _gthis->text;
HXDLIN(1571)																	Float letterSpacing = ((Float)0.0);
HXDLIN(1571)																	if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																		letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXLINE(1571)																	if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)																	if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1571)																	bool _hx_tmp;
HXDLIN(1571)																	if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)																		_hx_tmp = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1571)																		_hx_tmp = true;
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1571)																	 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1571)																	_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1571)																	::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																	positions = positions->concat(tempPositions);
            																}
HXLINE(1571)																if ((tempRangeEnd != endIndex)) {
HXLINE(1571)																	bool _hx_tmp;
HXDLIN(1571)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1571)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1571)																		currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1571)																		_hx_tmp = true;
            																	}
            																	else {
HXLINE(1571)																		_hx_tmp = false;
            																	}
HXDLIN(1571)																	if (!(_hx_tmp)) {
HXLINE(1571)																		::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1571)																		goto _hx_goto_99;
            																	}
HXLINE(1065)																	tempIndex = tempRangeEnd;
HXLINE(1571)																	if ((endIndex < formatRange->end)) {
HXLINE(1571)																		tempRangeEnd = endIndex;
            																	}
            																	else {
HXLINE(1571)																		tempRangeEnd = formatRange->end;
            																	}
HXDLIN(1571)																	countRanges = (countRanges + 1);
            																}
            																else {
HXLINE(1571)																	Float width = ((Float)0.0);
HXDLIN(1571)																	int _g = 0;
HXDLIN(1571)																	while((_g < positions->length)){
HXLINE(1571)																		 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)																		_g = (_g + 1);
HXDLIN(1571)																		width = (width + position->advance->x);
            																	}
HXDLIN(1571)																	widthValue = width;
HXDLIN(1571)																	goto _hx_goto_99;
            																}
            															}
            															_hx_goto_99:;
HXDLIN(1571)															rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1571)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)																rangeIndex = (rangeIndex + 1);
HXDLIN(1571)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1571)																currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
HXLINE(1260)													positionWidth = ( (Float)(0) );
            												}
            											}
            										}
            									}
HXLINE(1265)									placeIndex = ((textIndex + i) - bufferCount);
HXLINE(1571)									{
HXLINE(1571)										if ((placeIndex <= formatRange->end)) {
HXLINE(1571)											::String text = _gthis->text;
HXDLIN(1571)											Float letterSpacing = ((Float)0.0);
HXDLIN(1571)											if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)												letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1571)											if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)											if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1571)											bool positions1;
HXDLIN(1571)											if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)												positions1 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1571)												positions1 = true;
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1571)											 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1571)											_gthis1->set_text(text.substring(textIndex,placeIndex));
HXDLIN(1571)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)											Float width = ((Float)0.0);
HXDLIN(1571)											int _g = 0;
HXDLIN(1571)											while((_g < positions->length)){
HXLINE(1571)												 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)												_g = (_g + 1);
HXDLIN(1571)												width = (width + position->advance->x);
            											}
HXDLIN(1571)											widthValue = width;
HXDLIN(1571)											bool _hx_tmp;
HXDLIN(1571)											if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1571)												_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1571)												_hx_tmp = true;
            											}
HXDLIN(1571)											if (_hx_tmp) {
HXLINE( 923)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex);
HXLINE(1571)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1571)												layoutGroup->format = formatRange->format;
HXDLIN(1571)												layoutGroup->startIndex = textIndex;
HXDLIN(1571)												layoutGroup->endIndex = placeIndex;
            											}
HXDLIN(1571)											layoutGroup->positions = positions;
HXDLIN(1571)											layoutGroup->offsetX = offsetX;
HXDLIN(1571)											layoutGroup->ascent = ascent;
HXDLIN(1571)											layoutGroup->descent = descent;
HXDLIN(1571)											layoutGroup->leading = leading;
HXDLIN(1571)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1571)											layoutGroup->offsetY = offsetY;
HXDLIN(1571)											layoutGroup->width = widthValue;
HXDLIN(1571)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1571)											offsetX = (offsetX + widthValue);
HXDLIN(1571)											if ((placeIndex == formatRange->end)) {
HXLINE(1108)												layoutGroup = null();
HXLINE(1571)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)													rangeIndex = (rangeIndex + 1);
HXDLIN(1571)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1571)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXLINE(1571)												{
HXLINE(1571)													if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1571)														bool _hx_tmp;
HXDLIN(1571)														if (::hx::IsNotNull( font )) {
HXLINE(1571)															_hx_tmp = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1571)															_hx_tmp = false;
            														}
HXDLIN(1571)														if (_hx_tmp) {
HXLINE( 945)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 951)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 955)													leading = ( (int)(currentFormat->leading) );
HXLINE( 957)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1571)													if ((heightValue > maxHeightValue)) {
HXLINE( 961)														maxHeightValue = heightValue;
            													}
HXLINE(1571)													if ((ascent > maxAscent)) {
HXLINE( 966)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1571)											while(true){
HXLINE(1571)												int tempRangeEnd;
HXDLIN(1571)												if ((placeIndex < formatRange->end)) {
HXLINE(1571)													tempRangeEnd = placeIndex;
            												}
            												else {
HXLINE(1571)													tempRangeEnd = formatRange->end;
            												}
HXDLIN(1571)												if ((textIndex != tempRangeEnd)) {
HXLINE(1571)													::String text = _gthis->text;
HXDLIN(1571)													Float letterSpacing = ((Float)0.0);
HXDLIN(1571)													if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)														letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1571)													if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1571)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)													if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1571)													_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1571)													bool positions1;
HXDLIN(1571)													if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)														positions1 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1571)														positions1 = true;
            													}
HXDLIN(1571)													_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1571)													 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1571)													_gthis1->set_text(text.substring(textIndex,tempRangeEnd));
HXDLIN(1571)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)													Float width = ((Float)0.0);
HXDLIN(1571)													int _g = 0;
HXDLIN(1571)													while((_g < positions->length)){
HXLINE(1571)														 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)														_g = (_g + 1);
HXDLIN(1571)														width = (width + position->advance->x);
            													}
HXDLIN(1571)													widthValue = width;
HXDLIN(1571)													bool _hx_tmp;
HXDLIN(1571)													if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1571)														_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1571)														_hx_tmp = true;
            													}
HXDLIN(1571)													if (_hx_tmp) {
HXLINE( 923)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd);
HXLINE(1571)														_gthis->layoutGroups->push(layoutGroup);
            													}
            													else {
HXLINE(1571)														layoutGroup->format = formatRange->format;
HXDLIN(1571)														layoutGroup->startIndex = textIndex;
HXDLIN(1571)														layoutGroup->endIndex = tempRangeEnd;
            													}
HXDLIN(1571)													layoutGroup->positions = positions;
HXDLIN(1571)													layoutGroup->offsetX = offsetX;
HXDLIN(1571)													layoutGroup->ascent = ascent;
HXDLIN(1571)													layoutGroup->descent = descent;
HXDLIN(1571)													layoutGroup->leading = leading;
HXDLIN(1571)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1571)													layoutGroup->offsetY = offsetY;
HXDLIN(1571)													layoutGroup->width = widthValue;
HXDLIN(1571)													layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1571)													offsetX = (offsetX + widthValue);
HXLINE(1140)													textIndex = tempRangeEnd;
            												}
HXLINE(1571)												if ((tempRangeEnd == formatRange->end)) {
HXLINE(1143)													layoutGroup = null();
            												}
HXLINE(1571)												if ((tempRangeEnd == placeIndex)) {
HXLINE(1571)													goto _hx_goto_102;
            												}
HXDLIN(1571)												bool _hx_tmp;
HXDLIN(1571)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)													rangeIndex = (rangeIndex + 1);
HXDLIN(1571)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1571)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1571)													_hx_tmp = true;
            												}
            												else {
HXLINE(1571)													_hx_tmp = false;
            												}
HXDLIN(1571)												if (!(_hx_tmp)) {
HXLINE(1571)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1149,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1571)													goto _hx_goto_102;
            												}
HXDLIN(1571)												{
HXLINE(1571)													if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1571)														bool _hx_tmp;
HXDLIN(1571)														if (::hx::IsNotNull( font )) {
HXLINE(1571)															_hx_tmp = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1571)															_hx_tmp = false;
            														}
HXDLIN(1571)														if (_hx_tmp) {
HXLINE( 945)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 951)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 955)													leading = ( (int)(currentFormat->leading) );
HXLINE( 957)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1571)													if ((heightValue > maxHeightValue)) {
HXLINE( 961)														maxHeightValue = heightValue;
            													}
HXLINE(1571)													if ((ascent > maxAscent)) {
HXLINE( 966)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_102:;
            										}
HXLINE(1157)										textIndex = placeIndex;
            									}
HXLINE(1571)									{
HXLINE(1571)										{
HXLINE(1571)											if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1571)												bool _hx_tmp;
HXDLIN(1571)												if (::hx::IsNotNull( font )) {
HXLINE(1571)													_hx_tmp = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1571)													_hx_tmp = false;
            												}
HXDLIN(1571)												if (_hx_tmp) {
HXLINE( 945)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 951)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 955)											leading = ( (int)(currentFormat->leading) );
HXLINE( 957)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1571)											if ((heightValue > maxHeightValue)) {
HXLINE( 961)												maxHeightValue = heightValue;
            											}
HXLINE(1571)											if ((ascent > maxAscent)) {
HXLINE( 966)												maxAscent = ascent;
            											}
            										}
HXLINE(1571)										int i1 = _gthis->layoutGroups->get_length();
HXDLIN(1571)										while(true){
HXLINE(1571)											i1 = (i1 - 1);
HXDLIN(1571)											if (!((i1 > -1))) {
HXLINE(1571)												goto _hx_goto_104;
            											}
HXDLIN(1571)											 ::openfl::_internal::text::TextLayoutGroup lg = _gthis->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1571)											if ((lg->lineIndex < lineIndex)) {
HXLINE(1571)												goto _hx_goto_104;
            											}
HXDLIN(1571)											if ((lg->lineIndex > lineIndex)) {
HXLINE(1571)												continue;
            											}
HXDLIN(1571)											lg->ascent = maxAscent;
HXDLIN(1571)											lg->height = ( (Float)(maxHeightValue) );
            										}
            										_hx_goto_104:;
HXDLIN(1571)										offsetY = (offsetY + maxHeightValue);
HXLINE(1182)										maxAscent = ((Float)0.0);
HXLINE(1183)										maxHeightValue = 0;
HXLINE(1571)										lineIndex = (lineIndex + 1);
HXLINE(1186)										offsetX = ( (Float)(2) );
            									}
HXLINE(1571)									if ((endIndex1 <= formatRange->end)) {
HXLINE(1571)										::String text = _gthis->text;
HXDLIN(1571)										Float letterSpacing = ((Float)0.0);
HXDLIN(1571)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1571)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1571)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1571)										_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1571)										bool positions1;
HXDLIN(1571)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)											positions1 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1571)											positions1 = true;
            										}
HXDLIN(1571)										_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1571)										 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1571)										_gthis1->set_text(text.substring(placeIndex,endIndex1));
HXDLIN(1571)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)										Float width = ((Float)0.0);
HXDLIN(1571)										int _g = 0;
HXDLIN(1571)										while((_g < positions->length)){
HXLINE(1571)											 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)											_g = (_g + 1);
HXDLIN(1571)											width = (width + position->advance->x);
            										}
HXDLIN(1571)										widthValue = width;
            									}
            									else {
HXLINE(1571)										int tempIndex = placeIndex;
HXDLIN(1571)										int tempRangeEnd = formatRange->end;
HXDLIN(1571)										int countRanges = 0;
HXLINE(1046)										positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)										widthValue = ( (Float)(0) );
HXLINE(1571)										while(true){
HXLINE(1571)											if ((tempIndex != tempRangeEnd)) {
HXLINE(1571)												::String text = _gthis->text;
HXDLIN(1571)												Float letterSpacing = ((Float)0.0);
HXDLIN(1571)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1571)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1571)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1571)												_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1571)												bool _hx_tmp;
HXDLIN(1571)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)													_hx_tmp = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1571)													_hx_tmp = true;
            												}
HXDLIN(1571)												_gthis->_hx___textLayout->autoHint = _hx_tmp;
HXDLIN(1571)												 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1571)												_gthis1->set_text(text.substring(tempIndex,tempRangeEnd));
HXDLIN(1571)												::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)												positions = positions->concat(tempPositions);
            											}
HXLINE(1571)											if ((tempRangeEnd != endIndex1)) {
HXLINE(1571)												bool _hx_tmp;
HXDLIN(1571)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)													rangeIndex = (rangeIndex + 1);
HXDLIN(1571)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1571)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1571)													_hx_tmp = true;
            												}
            												else {
HXLINE(1571)													_hx_tmp = false;
            												}
HXDLIN(1571)												if (!(_hx_tmp)) {
HXLINE(1571)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1061,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1571)													goto _hx_goto_106;
            												}
HXLINE(1065)												tempIndex = tempRangeEnd;
HXLINE(1571)												if ((endIndex1 < formatRange->end)) {
HXLINE(1571)													tempRangeEnd = endIndex1;
            												}
            												else {
HXLINE(1571)													tempRangeEnd = formatRange->end;
            												}
HXDLIN(1571)												countRanges = (countRanges + 1);
            											}
            											else {
HXLINE(1571)												Float width = ((Float)0.0);
HXDLIN(1571)												int _g = 0;
HXDLIN(1571)												while((_g < positions->length)){
HXLINE(1571)													 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)													_g = (_g + 1);
HXDLIN(1571)													width = (width + position->advance->x);
            												}
HXDLIN(1571)												widthValue = width;
HXDLIN(1571)												goto _hx_goto_106;
            											}
            										}
            										_hx_goto_106:;
HXDLIN(1571)										rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1571)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)											rangeIndex = (rangeIndex + 1);
HXDLIN(1571)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1571)											currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
            									}
HXLINE(1271)									remainingPositions = positions;
HXLINE(1272)									tempWidth = widthValue;
            								}
            								_hx_goto_92:;
            							}
HXLINE(1571)							{
HXLINE(1571)								if ((endIndex1 <= formatRange->end)) {
HXLINE(1571)									::String text = _gthis->text;
HXDLIN(1571)									Float letterSpacing = ((Float)0.0);
HXDLIN(1571)									if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)										letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXLINE(1571)									if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1571)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)									if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1571)									_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1571)									bool positions1;
HXDLIN(1571)									if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)										positions1 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1571)										positions1 = true;
            									}
HXDLIN(1571)									_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1571)									 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1571)									_gthis1->set_text(text.substring(textIndex,endIndex1));
HXDLIN(1571)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)									Float width = ((Float)0.0);
HXDLIN(1571)									int _g = 0;
HXDLIN(1571)									while((_g < positions->length)){
HXLINE(1571)										 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)										_g = (_g + 1);
HXDLIN(1571)										width = (width + position->advance->x);
            									}
HXDLIN(1571)									widthValue = width;
HXDLIN(1571)									bool _hx_tmp;
HXDLIN(1571)									if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1571)										_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1571)										_hx_tmp = true;
            									}
HXDLIN(1571)									if (_hx_tmp) {
HXLINE( 923)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex1);
HXLINE(1571)										_gthis->layoutGroups->push(layoutGroup);
            									}
            									else {
HXLINE(1571)										layoutGroup->format = formatRange->format;
HXDLIN(1571)										layoutGroup->startIndex = textIndex;
HXDLIN(1571)										layoutGroup->endIndex = endIndex1;
            									}
HXDLIN(1571)									layoutGroup->positions = positions;
HXDLIN(1571)									layoutGroup->offsetX = offsetX;
HXDLIN(1571)									layoutGroup->ascent = ascent;
HXDLIN(1571)									layoutGroup->descent = descent;
HXDLIN(1571)									layoutGroup->leading = leading;
HXDLIN(1571)									layoutGroup->lineIndex = lineIndex;
HXDLIN(1571)									layoutGroup->offsetY = offsetY;
HXDLIN(1571)									layoutGroup->width = widthValue;
HXDLIN(1571)									layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1571)									offsetX = (offsetX + widthValue);
HXDLIN(1571)									if ((endIndex1 == formatRange->end)) {
HXLINE(1108)										layoutGroup = null();
HXLINE(1571)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)											rangeIndex = (rangeIndex + 1);
HXDLIN(1571)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1571)											currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXLINE(1571)										{
HXLINE(1571)											if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1571)												bool _hx_tmp;
HXDLIN(1571)												if (::hx::IsNotNull( font )) {
HXLINE(1571)													_hx_tmp = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1571)													_hx_tmp = false;
            												}
HXDLIN(1571)												if (_hx_tmp) {
HXLINE( 945)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 951)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 955)											leading = ( (int)(currentFormat->leading) );
HXLINE( 957)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1571)											if ((heightValue > maxHeightValue)) {
HXLINE( 961)												maxHeightValue = heightValue;
            											}
HXLINE(1571)											if ((ascent > maxAscent)) {
HXLINE( 966)												maxAscent = ascent;
            											}
            										}
            									}
            								}
            								else {
HXLINE(1571)									while(true){
HXLINE(1571)										int tempRangeEnd;
HXDLIN(1571)										if ((endIndex1 < formatRange->end)) {
HXLINE(1571)											tempRangeEnd = endIndex1;
            										}
            										else {
HXLINE(1571)											tempRangeEnd = formatRange->end;
            										}
HXDLIN(1571)										if ((textIndex != tempRangeEnd)) {
HXLINE(1571)											::String text = _gthis->text;
HXDLIN(1571)											Float letterSpacing = ((Float)0.0);
HXDLIN(1571)											if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)												letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1571)											if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)											if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1571)											bool positions1;
HXDLIN(1571)											if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)												positions1 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1571)												positions1 = true;
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1571)											 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1571)											_gthis1->set_text(text.substring(textIndex,tempRangeEnd));
HXDLIN(1571)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)											Float width = ((Float)0.0);
HXDLIN(1571)											int _g = 0;
HXDLIN(1571)											while((_g < positions->length)){
HXLINE(1571)												 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1571)												_g = (_g + 1);
HXDLIN(1571)												width = (width + position->advance->x);
            											}
HXDLIN(1571)											widthValue = width;
HXDLIN(1571)											bool _hx_tmp;
HXDLIN(1571)											if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1571)												_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1571)												_hx_tmp = true;
            											}
HXDLIN(1571)											if (_hx_tmp) {
HXLINE( 923)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd);
HXLINE(1571)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1571)												layoutGroup->format = formatRange->format;
HXDLIN(1571)												layoutGroup->startIndex = textIndex;
HXDLIN(1571)												layoutGroup->endIndex = tempRangeEnd;
            											}
HXDLIN(1571)											layoutGroup->positions = positions;
HXDLIN(1571)											layoutGroup->offsetX = offsetX;
HXDLIN(1571)											layoutGroup->ascent = ascent;
HXDLIN(1571)											layoutGroup->descent = descent;
HXDLIN(1571)											layoutGroup->leading = leading;
HXDLIN(1571)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1571)											layoutGroup->offsetY = offsetY;
HXDLIN(1571)											layoutGroup->width = widthValue;
HXDLIN(1571)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1571)											offsetX = (offsetX + widthValue);
HXLINE(1140)											textIndex = tempRangeEnd;
            										}
HXLINE(1571)										if ((tempRangeEnd == formatRange->end)) {
HXLINE(1143)											layoutGroup = null();
            										}
HXLINE(1571)										if ((tempRangeEnd == endIndex1)) {
HXLINE(1571)											goto _hx_goto_109;
            										}
HXDLIN(1571)										bool _hx_tmp;
HXDLIN(1571)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)											rangeIndex = (rangeIndex + 1);
HXDLIN(1571)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1571)											currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1571)											_hx_tmp = true;
            										}
            										else {
HXLINE(1571)											_hx_tmp = false;
            										}
HXDLIN(1571)										if (!(_hx_tmp)) {
HXLINE(1571)											::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1149,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1571)											goto _hx_goto_109;
            										}
HXDLIN(1571)										{
HXLINE(1571)											if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1571)												bool _hx_tmp;
HXDLIN(1571)												if (::hx::IsNotNull( font )) {
HXLINE(1571)													_hx_tmp = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1571)													_hx_tmp = false;
            												}
HXDLIN(1571)												if (_hx_tmp) {
HXLINE( 945)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 951)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 955)											leading = ( (int)(currentFormat->leading) );
HXLINE( 957)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1571)											if ((heightValue > maxHeightValue)) {
HXLINE( 961)												maxHeightValue = heightValue;
            											}
HXLINE(1571)											if ((ascent > maxAscent)) {
HXLINE( 966)												maxAscent = ascent;
            											}
            										}
            									}
            									_hx_goto_109:;
            								}
HXLINE(1157)								textIndex = endIndex1;
            							}
            						}
HXLINE(1573)						{
HXLINE(1573)							{
HXLINE(1573)								if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)									ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)									descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            								}
            								else {
HXLINE(1573)									bool _hx_tmp;
HXDLIN(1573)									if (::hx::IsNotNull( font )) {
HXLINE(1573)										_hx_tmp = (font->unitsPerEM != 0);
            									}
            									else {
HXLINE(1573)										_hx_tmp = false;
            									}
HXDLIN(1573)									if (_hx_tmp) {
HXLINE( 945)										ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)										descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            									}
            									else {
HXLINE( 951)										ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)										descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            									}
            								}
HXLINE( 955)								leading = ( (int)(currentFormat->leading) );
HXLINE( 957)								heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1573)								if ((heightValue > maxHeightValue)) {
HXLINE( 961)									maxHeightValue = heightValue;
            								}
HXLINE(1573)								if ((ascent > maxAscent)) {
HXLINE( 966)									maxAscent = ascent;
            								}
            							}
HXLINE(1573)							int i = _gthis->layoutGroups->get_length();
HXDLIN(1573)							while(true){
HXLINE(1573)								i = (i - 1);
HXDLIN(1573)								if (!((i > -1))) {
HXLINE(1573)									goto _hx_goto_111;
            								}
HXDLIN(1573)								 ::openfl::_internal::text::TextLayoutGroup lg = _gthis->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1573)								if ((lg->lineIndex < lineIndex)) {
HXLINE(1573)									goto _hx_goto_111;
            								}
HXDLIN(1573)								if ((lg->lineIndex > lineIndex)) {
HXLINE(1573)									continue;
            								}
HXDLIN(1573)								lg->ascent = maxAscent;
HXDLIN(1573)								lg->height = ( (Float)(maxHeightValue) );
            							}
            							_hx_goto_111:;
HXDLIN(1573)							offsetY = (offsetY + maxHeightValue);
HXLINE(1182)							maxAscent = ((Float)0.0);
HXLINE(1183)							maxHeightValue = 0;
HXLINE(1573)							lineIndex = (lineIndex + 1);
HXLINE(1186)							offsetX = ( (Float)(2) );
            						}
            					}
HXLINE(1576)					textIndex = (textIndex + 1);
            				}
            			}
            		}
HXLINE(1581)		bool _hx_tmp5;
HXDLIN(1581)		if ((previousBreakIndex == (textIndex - 2))) {
HXLINE(1581)			_hx_tmp5 = (previousBreakIndex > -1);
            		}
            		else {
HXLINE(1581)			_hx_tmp5 = false;
            		}
HXDLIN(1581)		if (_hx_tmp5) {
HXLINE(1583)			bool _hx_tmp;
HXDLIN(1583)			if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1583)				_hx_tmp = (layoutGroup->startIndex != layoutGroup->endIndex);
            			}
            			else {
HXLINE(1583)				_hx_tmp = true;
            			}
HXDLIN(1583)			if (_hx_tmp) {
HXLINE( 923)				layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,textIndex);
HXLINE(1583)				_gthis->layoutGroups->push(layoutGroup);
            			}
            			else {
HXLINE(1583)				layoutGroup->format = formatRange->format;
HXDLIN(1583)				layoutGroup->startIndex = textIndex;
HXDLIN(1583)				layoutGroup->endIndex = textIndex;
            			}
HXLINE(1585)			layoutGroup->positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1586)			layoutGroup->ascent = ascent;
HXLINE(1587)			layoutGroup->descent = descent;
HXLINE(1588)			layoutGroup->leading = leading;
HXLINE(1589)			layoutGroup->lineIndex = lineIndex;
HXLINE(1590)			layoutGroup->offsetX = ( (Float)(2) );
HXLINE(1591)			layoutGroup->offsetY = offsetY;
HXLINE(1592)			layoutGroup->width = ( (Float)(0) );
HXLINE(1593)			layoutGroup->height = ( (Float)(heightValue) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

::String TextEngine_obj::restrictText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1605_restrictText)
HXLINE(1606)		if (::hx::IsNull( value )) {
HXLINE(1608)			return value;
            		}
HXLINE(1611)		if (::hx::IsNotNull( this->_hx___restrictRegexp )) {
HXLINE(1613)			value = this->_hx___restrictRegexp->split(value)->join(HX_("",00,00,00,00));
            		}
HXLINE(1622)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,restrictText,return )

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1626_setTextAlignment)
HXLINE(1627)		int lineIndex = -1;
HXLINE(1628)		Float offsetX = ((Float)0.0);
HXLINE(1629)		Float totalWidth = (this->width - ( (Float)(4) ));
HXLINE(1630)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1630)		int lineLength;
HXLINE(1631)		bool lineMeasurementsDirty = false;
HXLINE(1633)		{
HXLINE(1633)			int _g = 0;
HXDLIN(1633)			int _g1 = this->layoutGroups->get_length();
HXDLIN(1633)			while((_g < _g1)){
HXLINE(1633)				_g = (_g + 1);
HXDLIN(1633)				int i = (_g - 1);
HXLINE(1635)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1637)				if ((group->lineIndex != lineIndex)) {
HXLINE(1639)					lineIndex = group->lineIndex;
HXLINE(1640)					totalWidth = ((this->width - ( (Float)(4) )) - ( (Float)(group->format->rightMargin) ));
HXLINE(1642)					 ::Dynamic _hx_switch_0 = group->format->align;
            					if (  (_hx_switch_0==0) ){
HXLINE(1645)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1647)							offsetX = ( (Float)(::Math_obj::round(((totalWidth - this->lineWidths->get(lineIndex)) / ( (Float)(2) )))) );
            						}
            						else {
HXLINE(1651)							offsetX = ( (Float)(0) );
            						}
HXLINE(1645)						goto _hx_goto_115;
            					}
            					if (  (_hx_switch_0==2) ){
HXLINE(1665)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1667)							lineLength = 1;
HXLINE(1669)							{
HXLINE(1669)								int _g = (i + 1);
HXDLIN(1669)								int _g1 = this->layoutGroups->get_length();
HXDLIN(1669)								while((_g < _g1)){
HXLINE(1669)									_g = (_g + 1);
HXDLIN(1669)									int j = (_g - 1);
HXLINE(1671)									if ((this->layoutGroups->get(j).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->lineIndex == lineIndex)) {
HXLINE(1673)										bool _hx_tmp;
HXDLIN(1673)										if ((j != 0)) {
HXLINE(1673)											::String _hx_tmp1 = this->text;
HXDLIN(1673)											_hx_tmp = ::hx::IsEq( _hx_tmp1.charCodeAt((this->layoutGroups->get(j).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->startIndex - 1)),32 );
            										}
            										else {
HXLINE(1673)											_hx_tmp = true;
            										}
HXDLIN(1673)										if (_hx_tmp) {
HXLINE(1675)											lineLength = (lineLength + 1);
            										}
            									}
            									else {
HXLINE(1680)										goto _hx_goto_116;
            									}
            								}
            								_hx_goto_116:;
            							}
HXLINE(1684)							if ((lineLength > 1)) {
HXLINE(1686)								group = this->layoutGroups->get(((i + lineLength) - 1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1688)								 ::Dynamic endChar = this->text.charCodeAt(group->endIndex);
HXLINE(1689)								bool _hx_tmp;
HXDLIN(1689)								bool _hx_tmp1;
HXDLIN(1689)								if ((group->endIndex < this->text.length)) {
HXLINE(1689)									_hx_tmp1 = ::hx::IsNotEq( endChar,10 );
            								}
            								else {
HXLINE(1689)									_hx_tmp1 = false;
            								}
HXDLIN(1689)								if (_hx_tmp1) {
HXLINE(1689)									_hx_tmp = ::hx::IsNotEq( endChar,13 );
            								}
            								else {
HXLINE(1689)									_hx_tmp = false;
            								}
HXDLIN(1689)								if (_hx_tmp) {
HXLINE(1691)									offsetX = ((totalWidth - this->lineWidths->get(lineIndex)) / ( (Float)((lineLength - 1)) ));
HXLINE(1692)									lineMeasurementsDirty = true;
HXLINE(1694)									int j = 1;
HXLINE(1695)									while(true){
HXLINE(1704)										 ::openfl::_internal::text::TextLayoutGroup _hx_tmp = this->layoutGroups->get((i + j)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1704)										_hx_tmp->offsetX = (_hx_tmp->offsetX + (offsetX * ( (Float)(j) )));
HXLINE(1706)										j = (j + 1);
HXLINE(1695)										if (!((j < lineLength))) {
HXLINE(1695)											goto _hx_goto_117;
            										}
            									}
            									_hx_goto_117:;
            								}
            							}
            						}
HXLINE(1711)						offsetX = ( (Float)(0) );
HXLINE(1664)						goto _hx_goto_115;
            					}
            					if (  (_hx_switch_0==4) ){
HXLINE(1655)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1657)							offsetX = ( (Float)(::Math_obj::round((totalWidth - this->lineWidths->get(lineIndex)))) );
            						}
            						else {
HXLINE(1661)							offsetX = ( (Float)(0) );
            						}
HXLINE(1655)						goto _hx_goto_115;
            					}
            					/* default */{
HXLINE(1714)						offsetX = ( (Float)(0) );
            					}
            					_hx_goto_115:;
            				}
HXLINE(1718)				if ((offsetX > 0)) {
HXLINE(1720)					 ::openfl::_internal::text::TextLayoutGroup group1 = group;
HXDLIN(1720)					group1->offsetX = (group1->offsetX + offsetX);
            				}
            			}
            		}
HXLINE(1724)		if (lineMeasurementsDirty) {
HXLINE(1728)			this->getLineMeasurements();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

::String TextEngine_obj::trimText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1733_trimText)
HXLINE(1734)		if (::hx::IsNull( value )) {
HXLINE(1736)			return value;
            		}
HXLINE(1739)		bool _hx_tmp;
HXDLIN(1739)		if ((this->maxChars > 0)) {
HXLINE(1739)			_hx_tmp = (value.length > this->maxChars);
            		}
            		else {
HXLINE(1739)			_hx_tmp = false;
            		}
HXDLIN(1739)		if (_hx_tmp) {
HXLINE(1741)			value = value.substr(0,this->maxChars);
            		}
HXLINE(1744)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,trimText,return )

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1748_update)
HXLINE(1749)		bool _hx_tmp;
HXDLIN(1749)		if (::hx::IsNotNull( this->text )) {
HXLINE(1749)			_hx_tmp = (this->textFormatRanges->get_length() == 0);
            		}
            		else {
HXLINE(1749)			_hx_tmp = true;
            		}
HXDLIN(1749)		if (_hx_tmp) {
HXLINE(1751)			this->lineAscents->set_length(0);
HXLINE(1752)			this->lineBreaks->set_length(0);
HXLINE(1753)			this->lineDescents->set_length(0);
HXLINE(1754)			this->lineLeadings->set_length(0);
HXLINE(1755)			this->lineHeights->set_length(0);
HXLINE(1756)			this->lineWidths->set_length(0);
HXLINE(1757)			this->layoutGroups->set_length(0);
HXLINE(1759)			this->textWidth = ( (Float)(0) );
HXLINE(1760)			this->textHeight = ( (Float)(0) );
HXLINE(1761)			this->numLines = 1;
HXLINE(1762)			this->maxScrollH = 0;
HXLINE(1763)			this->maxScrollV = 1;
HXLINE(1764)			this->bottomScrollV = 1;
            		}
            		else {
HXLINE(1768)			this->getLayoutGroups();
HXLINE(1769)			this->getLineMeasurements();
HXLINE(1770)			this->setTextAlignment();
            		}
HXLINE(1773)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

int TextEngine_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1780_get_bottomScrollV)
HXDLIN(1780)		bool _hx_tmp;
HXDLIN(1780)		if ((this->numLines != 1)) {
HXDLIN(1780)			_hx_tmp = ::hx::IsNull( this->lineHeights );
            		}
            		else {
HXDLIN(1780)			_hx_tmp = true;
            		}
HXDLIN(1780)		if (_hx_tmp) {
HXLINE(1782)			return 1;
            		}
            		else {
HXLINE(1786)			Float tempHeight = ((Float)0.0);
HXLINE(1787)			int ret = this->lineHeights->get_length();
HXLINE(1789)			{
HXLINE(1789)				int _g = (ret - 1);
HXDLIN(1789)				int _g1 = this->lineHeights->get_length();
HXDLIN(1789)				while((_g < _g1)){
HXLINE(1789)					_g = (_g + 1);
HXDLIN(1789)					int i = (_g - 1);
HXLINE(1791)					Float _hx_tmp = (tempHeight + this->lineHeights->get(i));
HXDLIN(1791)					if ((_hx_tmp <= (this->height - ( (Float)(4) )))) {
HXLINE(1793)						tempHeight = (tempHeight + this->lineHeights->get(i));
            					}
            					else {
HXLINE(1797)						ret = i;
HXLINE(1798)						goto _hx_goto_121;
            					}
            				}
            				_hx_goto_121:;
            			}
HXLINE(1802)			if ((ret < 1)) {
HXLINE(1802)				return 1;
            			}
HXLINE(1803)			return ret;
            		}
HXLINE(1780)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_bottomScrollV,return )

int TextEngine_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1810_get_maxScrollV)
HXDLIN(1810)		bool _hx_tmp;
HXDLIN(1810)		if ((this->numLines != 1)) {
HXDLIN(1810)			_hx_tmp = ::hx::IsNull( this->lineHeights );
            		}
            		else {
HXDLIN(1810)			_hx_tmp = true;
            		}
HXDLIN(1810)		if (_hx_tmp) {
HXLINE(1812)			return 1;
            		}
            		else {
HXLINE(1816)			int i = (this->numLines - 1);
HXDLIN(1816)			Float tempHeight = ((Float)0.0);
HXLINE(1818)			if (::hx::IsEq( this->text.charCodeAt((this->text.length - 1)),10 )) {
HXLINE(1818)				i = (i - 1);
            			}
HXLINE(1819)			int j = i;
HXLINE(1821)			while((i >= 0)){
HXLINE(1823)				Float _hx_tmp = (tempHeight + this->lineHeights->get(i));
HXDLIN(1823)				if ((_hx_tmp <= (this->height - ( (Float)(4) )))) {
HXLINE(1825)					tempHeight = (tempHeight + this->lineHeights->get(i));
HXLINE(1826)					i = (i - 1);
            				}
            				else {
HXLINE(1829)					goto _hx_goto_123;
            				}
            			}
            			_hx_goto_123:;
HXLINE(1832)			if ((i == j)) {
HXLINE(1832)				i = this->numLines;
            			}
            			else {
HXLINE(1835)				i = (i + 2);
            			}
HXLINE(1837)			if ((i < 1)) {
HXLINE(1837)				return 1;
            			}
HXLINE(1838)			return i;
            		}
HXLINE(1810)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_maxScrollV,return )

::String TextEngine_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1843_set_restrict)
HXLINE(1844)		if ((this->restrict == value)) {
HXLINE(1846)			return this->restrict;
            		}
HXLINE(1849)		this->restrict = value;
HXLINE(1851)		bool _hx_tmp;
HXDLIN(1851)		if (::hx::IsNotNull( this->restrict )) {
HXLINE(1851)			_hx_tmp = (this->restrict.length == 0);
            		}
            		else {
HXLINE(1851)			_hx_tmp = true;
            		}
HXDLIN(1851)		if (_hx_tmp) {
HXLINE(1853)			this->_hx___restrictRegexp = null();
            		}
            		else {
HXLINE(1857)			this->_hx___restrictRegexp = this->createRestrictRegexp(value);
            		}
HXLINE(1860)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_restrict,return )

int TextEngine_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1864_get_scrollV)
HXLINE(1865)		bool _hx_tmp;
HXDLIN(1865)		if ((this->numLines != 1)) {
HXLINE(1865)			_hx_tmp = ::hx::IsNull( this->lineHeights );
            		}
            		else {
HXLINE(1865)			_hx_tmp = true;
            		}
HXDLIN(1865)		if (_hx_tmp) {
HXLINE(1865)			return 1;
            		}
HXLINE(1867)		int max = this->get_maxScrollV();
HXLINE(1868)		if ((this->scrollV > max)) {
HXLINE(1868)			return max;
            		}
HXLINE(1869)		return this->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_scrollV,return )

int TextEngine_obj::set_scrollV(int value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1873_set_scrollV)
HXLINE(1874)		if ((value < 1)) {
HXLINE(1874)			value = 1;
            		}
HXLINE(1875)		return (this->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_scrollV,return )

::String TextEngine_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1880_set_text)
HXDLIN(1880)		return (this->text = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_text,return )

int TextEngine_obj::GUTTER;

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_176_findFont)
HXLINE( 180)		{
HXLINE( 180)			int _g = 0;
HXDLIN( 180)			::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 180)			while((_g < _g1->length)){
HXLINE( 180)				 ::openfl::text::Font registeredFont = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 180)				_g = (_g + 1);
HXLINE( 182)				if (::hx::IsNull( registeredFont )) {
HXLINE( 182)					continue;
            				}
HXLINE( 184)				bool _hx_tmp;
HXDLIN( 184)				if ((registeredFont->name != name)) {
HXLINE( 185)					if (::hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 186)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 184)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 184)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 184)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 184)					_hx_tmp = true;
            				}
HXDLIN( 184)				if (_hx_tmp) {
HXLINE( 188)					if (registeredFont->_hx___initialize()) {
HXLINE( 190)						return registeredFont;
            					}
            				}
            			}
            		}
HXLINE( 199)		 ::openfl::text::Font font = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 201)		if (::hx::IsNotNull( font )) {
HXLINE( 203)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 204)			return font;
            		}
HXLINE( 208)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

 ::openfl::text::Font TextEngine_obj::findFontVariant( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_212_findFontVariant)
HXLINE( 213)		::String fontName = format->font;
HXLINE( 214)		 ::Dynamic bold = format->bold;
HXLINE( 215)		 ::Dynamic italic = format->italic;
HXLINE( 217)		if (::hx::IsNull( fontName )) {
HXLINE( 217)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 218)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 220)		bool _hx_tmp;
HXDLIN( 220)		bool _hx_tmp1;
HXDLIN( 220)		if (( (bool)(bold) )) {
HXLINE( 220)			_hx_tmp1 = ( (bool)(italic) );
            		}
            		else {
HXLINE( 220)			_hx_tmp1 = false;
            		}
HXDLIN( 220)		if (_hx_tmp1) {
HXLINE( 220)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 220)			_hx_tmp = false;
            		}
HXDLIN( 220)		if (_hx_tmp) {
HXLINE( 222)			return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 224)			bool _hx_tmp;
HXDLIN( 224)			if (( (bool)(bold) )) {
HXLINE( 224)				_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 224)				_hx_tmp = false;
            			}
HXDLIN( 224)			if (_hx_tmp) {
HXLINE( 226)				return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 228)				bool _hx_tmp;
HXDLIN( 228)				if (( (bool)(italic) )) {
HXLINE( 228)					_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 228)					_hx_tmp = false;
            				}
HXDLIN( 228)				if (_hx_tmp) {
HXLINE( 230)					return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            			}
            		}
HXLINE( 233)		return ::openfl::_internal::text::TextEngine_obj::findFont(fontName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFontVariant,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_262_getFormatHeight)
HXLINE( 263)		Float ascent;
HXDLIN( 263)		Float descent;
HXLINE( 269)		 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(format);
HXLINE( 271)		if (::hx::IsNotNull( format->_hx___ascent )) {
HXLINE( 273)			ascent = (( (Float)(format->size) ) * ( (Float)(format->_hx___ascent) ));
HXLINE( 274)			descent = (( (Float)(format->size) ) * ( (Float)(format->_hx___descent) ));
            		}
            		else {
HXLINE( 276)			bool _hx_tmp;
HXDLIN( 276)			if (::hx::IsNotNull( font )) {
HXLINE( 276)				_hx_tmp = (font->unitsPerEM != 0);
            			}
            			else {
HXLINE( 276)				_hx_tmp = false;
            			}
HXDLIN( 276)			if (_hx_tmp) {
HXLINE( 279)				ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(format->size) ));
HXLINE( 280)				descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(format->size) )));
            			}
            			else {
HXLINE( 288)				ascent = ( (Float)(format->size) );
HXLINE( 289)				descent = (( (Float)(format->size) ) * ((Float)0.185));
            			}
            		}
HXLINE( 263)		int leading = ( (int)(format->leading) );
HXLINE( 294)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_298_getFont)
HXLINE( 299)		::String fontName = format->font;
HXLINE( 300)		 ::Dynamic bold = format->bold;
HXLINE( 301)		 ::Dynamic italic = format->italic;
HXLINE( 303)		if (::hx::IsNull( fontName )) {
HXLINE( 303)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 304)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 306)		bool _hx_tmp;
HXDLIN( 306)		bool _hx_tmp1;
HXDLIN( 306)		if (( (bool)(bold) )) {
HXLINE( 306)			_hx_tmp1 = ( (bool)(italic) );
            		}
            		else {
HXLINE( 306)			_hx_tmp1 = false;
            		}
HXDLIN( 306)		if (_hx_tmp1) {
HXLINE( 306)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 306)			_hx_tmp = false;
            		}
HXDLIN( 306)		if (_hx_tmp) {
HXLINE( 308)			fontName = (fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94));
HXLINE( 309)			bold = false;
HXLINE( 310)			italic = false;
            		}
            		else {
HXLINE( 312)			bool _hx_tmp;
HXDLIN( 312)			if (( (bool)(bold) )) {
HXLINE( 312)				_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 312)				_hx_tmp = false;
            			}
HXDLIN( 312)			if (_hx_tmp) {
HXLINE( 314)				fontName = (fontNamePrefix + HX_(" Bold",c5,3d,c7,98));
HXLINE( 315)				bold = false;
            			}
            			else {
HXLINE( 317)				bool _hx_tmp;
HXDLIN( 317)				if (( (bool)(italic) )) {
HXLINE( 317)					_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 317)					_hx_tmp = false;
            				}
HXDLIN( 317)				if (_hx_tmp) {
HXLINE( 319)					fontName = (fontNamePrefix + HX_(" Italic",30,7b,a7,6d));
HXLINE( 320)					italic = false;
            				}
            				else {
HXLINE( 326)					bool _hx_tmp;
HXDLIN( 326)					if (( (bool)(bold) )) {
HXLINE( 326)						if ((fontName.indexOf(HX_(" Bold ",bb,ce,8e,15),null()) <= -1)) {
HXLINE( 326)							_hx_tmp = ::StringTools_obj::endsWith(fontName,HX_(" Bold",c5,3d,c7,98));
            						}
            						else {
HXLINE( 326)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 326)						_hx_tmp = false;
            					}
HXDLIN( 326)					if (_hx_tmp) {
HXLINE( 328)						bold = false;
            					}
HXLINE( 331)					bool _hx_tmp1;
HXDLIN( 331)					if (( (bool)(italic) )) {
HXLINE( 331)						if ((fontName.indexOf(HX_(" Italic ",f0,4e,e4,84),null()) <= -1)) {
HXLINE( 331)							_hx_tmp1 = ::StringTools_obj::endsWith(fontName,HX_(" Italic",30,7b,a7,6d));
            						}
            						else {
HXLINE( 331)							_hx_tmp1 = true;
            						}
            					}
            					else {
HXLINE( 331)						_hx_tmp1 = false;
            					}
HXDLIN( 331)					if (_hx_tmp1) {
HXLINE( 333)						italic = false;
            					}
            				}
            			}
            		}
HXLINE( 337)		::String font;
HXDLIN( 337)		if (( (bool)(italic) )) {
HXLINE( 337)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 337)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 338)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 339)		::String font1;
HXDLIN( 339)		if (( (bool)(bold) )) {
HXLINE( 339)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 339)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 339)		font = (font + font1);
HXLINE( 340)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 341)		font = (font + ((HX_("/",2f,00,00,00) + ((format->leading + format->size) + 3)) + HX_("px ",18,65,55,00)));
HXLINE( 343)		::String font2;
HXDLIN( 343)		::String _hx_switch_0 = fontName;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 343)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 343)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 343)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 343)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 343)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 343)			goto _hx_goto_133;
            		}
            		/* default */{
HXLINE( 343)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(fontName,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_133:;
HXDLIN( 343)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 351)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_355_getFontInstance)
HXLINE( 359)		 ::openfl::text::Font instance = null();
HXLINE( 360)		::Array< ::String > fontList = null();
HXLINE( 362)		bool _hx_tmp;
HXDLIN( 362)		if (::hx::IsNotNull( format )) {
HXLINE( 362)			_hx_tmp = ::hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 362)			_hx_tmp = false;
            		}
HXDLIN( 362)		if (_hx_tmp) {
HXLINE( 364)			if (::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->exists(format->font)) {
HXLINE( 366)				return ( ( ::openfl::text::Font)(::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->get(format->font)) );
            			}
HXLINE( 369)			instance = ::openfl::_internal::text::TextEngine_obj::findFontVariant(format);
HXLINE( 370)			if (::hx::IsNotNull( instance )) {
HXLINE( 370)				return instance;
            			}
HXLINE( 372)			::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 374)			::String _hx_switch_0 = format->font;
            			if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 401)				fontList = ::Array_obj< ::String >::__new(9)->init(0,(systemFontDirectory + HX_("/Arial.ttf",0c,14,61,7a)))->init(1,(systemFontDirectory + HX_("/Helvetica.ttf",5a,6c,ff,0c)))->init(2,(systemFontDirectory + HX_("/Cache/Arial.ttf",5f,69,b5,54)))->init(3,(systemFontDirectory + HX_("/Cache/Helvetica.ttf",2d,67,e4,7a)))->init(4,(systemFontDirectory + HX_("/Core/Arial.ttf",ba,c6,65,25)))->init(5,(systemFontDirectory + HX_("/Core/Helvetica.ttf",08,0e,fe,0c)))->init(6,(systemFontDirectory + HX_("/CoreAddition/Arial.ttf",d6,48,2f,75)))->init(7,(systemFontDirectory + HX_("/CoreAddition/Helvetica.ttf",24,ce,e8,ab)))->init(8,HX_("/System/Library/Fonts/Supplemental/Arial.ttf",40,75,29,52));
HXDLIN( 401)				goto _hx_goto_135;
            			}
            			if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 420)				goto _hx_goto_135;
            			}
            			if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 449)				fontList = ::Array_obj< ::String >::__new(9)->init(0,(systemFontDirectory + HX_("/Courier New.ttf",d6,e1,80,a0)))->init(1,(systemFontDirectory + HX_("/Courier.ttf",b6,7e,38,40)))->init(2,(systemFontDirectory + HX_("/Cache/Courier New.ttf",69,77,b8,0d)))->init(3,(systemFontDirectory + HX_("/Cache/Courier.ttf",c9,0e,4b,98)))->init(4,(systemFontDirectory + HX_("/Core/Courier New.ttf",04,cb,ad,96)))->init(5,(systemFontDirectory + HX_("/Core/Courier.ttf",e4,b8,d1,3b)))->init(6,(systemFontDirectory + HX_("/CoreAddition/Courier New.ttf",20,ca,dd,d5)))->init(7,(systemFontDirectory + HX_("/CoreAddition/Courier.ttf",00,fa,94,32)))->init(8,HX_("/System/Library/Fonts/Supplemental/Courier New.ttf",0a,22,a4,92));
HXDLIN( 449)				goto _hx_goto_135;
            			}
            			/* default */{
HXLINE( 469)				fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            			}
            			_hx_goto_135:;
HXLINE( 472)			if (::hx::IsNotNull( fontList )) {
HXLINE( 474)				int _g = 0;
HXDLIN( 474)				while((_g < fontList->length)){
HXLINE( 474)					::String font = fontList->__get(_g);
HXDLIN( 474)					_g = (_g + 1);
HXLINE( 476)					instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 478)					if (::hx::IsNotNull( instance )) {
HXLINE( 480)						::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 481)						return instance;
            					}
            				}
            			}
HXLINE( 486)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 487)			if (::hx::IsNotNull( instance )) {
HXLINE( 487)				return instance;
            			}
            		}
HXLINE( 490)		::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 516)		fontList = ::Array_obj< ::String >::__new(13)->init(0,(systemFontDirectory + HX_("/Georgia.ttf",67,ae,93,4b)))->init(1,(systemFontDirectory + HX_("/Times.ttf",0f,38,17,67)))->init(2,(systemFontDirectory + HX_("/Times New Roman.ttf",2c,b8,6d,0c)))->init(3,(systemFontDirectory + HX_("/Cache/Georgia.ttf",7a,3e,a6,a3)))->init(4,(systemFontDirectory + HX_("/Cache/Times.ttf",62,8d,6b,41)))->init(5,(systemFontDirectory + HX_("/Cache/Times New Roman.ttf",3f,13,7b,39)))->init(6,(systemFontDirectory + HX_("/Core/Georgia.ttf",95,e8,2c,47)))->init(7,(systemFontDirectory + HX_("/Core/Times.ttf",bd,ea,1b,12)))->init(8,(systemFontDirectory + HX_("/Core/Times New Roman.ttf",5a,d0,31,62)))->init(9,(systemFontDirectory + HX_("/CoreAddition/Georgia.ttf",b1,29,f0,3d)))->init(10,(systemFontDirectory + HX_("/CoreAddition/Times.ttf",d9,6c,e5,61)))->init(11,(systemFontDirectory + HX_("/CoreAddition/Times New Roman.ttf",76,8d,05,b2)))->init(12,HX_("/System/Library/Fonts/Supplemental/Times New Roman.ttf",60,22,07,e2));
HXLINE( 534)		{
HXLINE( 534)			int _g = 0;
HXDLIN( 534)			while((_g < fontList->length)){
HXLINE( 534)				::String font = fontList->__get(_g);
HXDLIN( 534)				_g = (_g + 1);
HXLINE( 536)				instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 538)				if (::hx::IsNotNull( instance )) {
HXLINE( 540)					::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 541)					return instance;
            				}
            			}
            		}
HXLINE( 545)		{
HXLINE( 545)			 ::openfl::text::Font value = null();
HXDLIN( 545)			::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,value);
            		}
HXLINE( 548)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


::hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	::hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

::hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl._internal.text.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textBounds,"textBounds");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textBounds,"textBounds");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

::hx::Val TextEngine_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return ::hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return ::hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__font") ) { return ::hx::Val( _hx___font ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return ::hx::Val( scrollH ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_scrollV() : scrollV ); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return ::hx::Val( getLine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return ::hx::Val( autoSize ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return ::hx::Val( maxChars ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return ::hx::Val( numLines ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return ::hx::Val( restrict ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return ::hx::Val( wordWrap ); }
		if (HX_FIELD_EQ(inName,"trimText") ) { return ::hx::Val( trimText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return ::hx::Val( multiline ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return ::hx::Val( sharpness ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return ::hx::Val( textWidth ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return ::hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return ::hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return ::hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return ::hx::Val( caretIndex ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return ::hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return ::hx::Val( lineBreaks ); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return ::hx::Val( lineWidths ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return ::hx::Val( maxScrollH ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_maxScrollV() : maxScrollV ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"textBounds") ) { return ::hx::Val( textBounds ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return ::hx::Val( textHeight ); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return ::hx::Val( _hx___hasFocus ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return ::hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return ::hx::Val( gridFitType ); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return ::hx::Val( lineAscents ); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return ::hx::Val( lineHeights ); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return ::hx::Val( _hx___isKeyDown ); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return ::hx::Val( _hx___cairoFont ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return ::hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return ::hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return ::hx::Val( layoutGroups ); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return ::hx::Val( lineDescents ); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return ::hx::Val( lineLeadings ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return ::hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return ::hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return ::hx::Val( _hx___textLayout ); }
		if (HX_FIELD_EQ(inName,"restrictText") ) { return ::hx::Val( restrictText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return ::hx::Val( set_restrict_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return ::hx::Val( antiAliasType ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_bottomScrollV() : bottomScrollV ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return ::hx::Val( _hx___cursorTimer ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return ::hx::Val( get_maxScrollV_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return ::hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return ::hx::Val( _hx___measuredWidth ); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return ::hx::Val( getLayoutGroups_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return ::hx::Val( textFormatRanges ); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return ::hx::Val( _hx___measuredHeight ); }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { return ::hx::Val( _hx___restrictRegexp ); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return ::hx::Val( _hx___selectionStart ); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return ::hx::Val( _hx___useIntAdvances ); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return ::hx::Val( setTextAlignment_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return ::hx::Val( getLineBreakIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return ::hx::Val( get_bottomScrollV_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return ::hx::Val( getLineMeasurements_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createRestrictRegexp") ) { return ::hx::Val( createRestrictRegexp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = ( _hx___defaultFonts ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"findFontVariant") ) { outValue = findFontVariant_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

::hx::Val TextEngine_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollV(inValue.Cast< int >()) );scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_restrict(inValue.Cast< ::String >()) );restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textBounds") ) { textBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::openfl::_internal::text::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { _hx___restrictRegexp=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("antiAliasType",68,c4,fa,e7));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("bottomScrollV",fe,f7,87,8b));
	outFields->push(HX_("bounds",75,86,1d,66));
	outFields->push(HX_("caretIndex",8f,b6,5b,dd));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("gridFitType",05,f3,13,b4));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("layoutGroups",9e,a2,6c,37));
	outFields->push(HX_("lineAscents",45,0c,c2,3e));
	outFields->push(HX_("lineBreaks",e8,fd,5b,ea));
	outFields->push(HX_("lineDescents",0d,ad,64,49));
	outFields->push(HX_("lineLeadings",01,23,97,76));
	outFields->push(HX_("lineHeights",18,99,8e,3e));
	outFields->push(HX_("lineWidths",c1,8a,a4,20));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("maxScrollH",57,ad,fc,9a));
	outFields->push(HX_("maxScrollV",65,ad,fc,9a));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("scrollH",9b,33,d8,30));
	outFields->push(HX_("scrollV",a9,33,d8,30));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("sharpness",81,22,25,1b));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textBounds",02,07,0e,9d));
	outFields->push(HX_("textHeight",74,88,3c,39));
	outFields->push(HX_("textFormatRanges",fa,0e,49,a2));
	outFields->push(HX_("textWidth",19,46,50,63));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("__cursorTimer",ef,59,8f,e1));
	outFields->push(HX_("__hasFocus",3e,1d,1a,34));
	outFields->push(HX_("__isKeyDown",b7,2f,72,ce));
	outFields->push(HX_("__measuredHeight",ed,b6,23,42));
	outFields->push(HX_("__measuredWidth",c0,49,ec,02));
	outFields->push(HX_("__restrictRegexp",45,9f,ae,a9));
	outFields->push(HX_("__selectionStart",96,e3,b9,43));
	outFields->push(HX_("__showCursor",d3,ae,f0,e0));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	outFields->push(HX_("__textLayout",57,aa,3c,c8));
	outFields->push(HX_("__texture",bb,19,2f,20));
	outFields->push(HX_("__useIntAdvances",d9,17,72,7d));
	outFields->push(HX_("__cairoFont",57,e7,b5,28));
	outFields->push(HX_("__font",ef,c0,b8,f2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_("antiAliasType",68,c4,fa,e7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,autoSize),HX_("autoSize",d0,8f,79,2f)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_("backgroundColor",95,4e,47,0d)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_("border",ec,4c,1a,64)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_("borderColor",d7,3c,d5,d6)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_("bottomScrollV",fe,f7,87,8b)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextEngine_obj,bounds),HX_("bounds",75,86,1d,66)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_("caretIndex",8f,b6,5b,dd)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_("embedFonts",2b,c7,e1,8e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,gridFitType),HX_("gridFitType",05,f3,13,b4)},
	{::hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_("layoutGroups",9e,a2,6c,37)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineAscents),HX_("lineAscents",45,0c,c2,3e)},
	{::hx::fsObject /*  ::openfl::_Vector::IntVector */ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_("lineBreaks",e8,fd,5b,ea)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineDescents),HX_("lineDescents",0d,ad,64,49)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_("lineLeadings",01,23,97,76)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineHeights),HX_("lineHeights",18,99,8e,3e)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineWidths),HX_("lineWidths",c1,8a,a4,20)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_("maxChars",99,ef,d0,ef)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_("maxScrollH",57,ad,fc,9a)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_("maxScrollV",65,ad,fc,9a)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_("multiline",ed,d2,11,9e)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_("numLines",d9,f1,11,32)},
	{::hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_("restrict",3c,cb,9e,f1)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_("scrollH",9b,33,d8,30)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_("scrollV",a9,33,d8,30)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{::hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_("sharpness",81,22,25,1b)},
	{::hx::fsString,(int)offsetof(TextEngine_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextEngine_obj,textBounds),HX_("textBounds",02,07,0e,9d)},
	{::hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_("textHeight",74,88,3c,39)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_("textFormatRanges",fa,0e,49,a2)},
	{::hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_("textWidth",19,46,50,63)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_("wordWrap",b4,14,db,00)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TextEngine_obj,textField),HX_("textField",cd,24,81,99)},
	{::hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_("__cursorTimer",ef,59,8f,e1)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_("__hasFocus",3e,1d,1a,34)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_("__isKeyDown",b7,2f,72,ce)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_("__measuredHeight",ed,b6,23,42)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_("__measuredWidth",c0,49,ec,02)},
	{::hx::fsObject /*  ::EReg */ ,(int)offsetof(TextEngine_obj,_hx___restrictRegexp),HX_("__restrictRegexp",45,9f,ae,a9)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_("__selectionStart",96,e3,b9,43)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_("__showCursor",d3,ae,f0,e0)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{::hx::fsObject /*  ::openfl::_internal::text::TextLayout */ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_("__textLayout",57,aa,3c,c8)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_("__texture",bb,19,2f,20)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_("__useIntAdvances",d9,17,72,7d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_("__cairoFont",57,e7,b5,28)},
	{::hx::fsObject /*  ::openfl::text::Font */ ,(int)offsetof(TextEngine_obj,_hx___font),HX_("__font",ef,c0,b8,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &TextEngine_obj::GUTTER,HX_("GUTTER",1b,d3,2b,8c)},
	{::hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_("UTF8_TAB",07,d5,41,1d)},
	{::hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_("UTF8_ENDLINE",01,29,41,cf)},
	{::hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_("UTF8_SPACE",f8,7b,a9,c7)},
	{::hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_("UTF8_HYPHEN",60,3c,3f,bf)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_("__defaultFonts",63,76,ad,da)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_("antiAliasType",68,c4,fa,e7),
	HX_("autoSize",d0,8f,79,2f),
	HX_("background",ee,93,1d,26),
	HX_("backgroundColor",95,4e,47,0d),
	HX_("border",ec,4c,1a,64),
	HX_("borderColor",d7,3c,d5,d6),
	HX_("bottomScrollV",fe,f7,87,8b),
	HX_("bounds",75,86,1d,66),
	HX_("caretIndex",8f,b6,5b,dd),
	HX_("embedFonts",2b,c7,e1,8e),
	HX_("gridFitType",05,f3,13,b4),
	HX_("height",e7,07,4c,02),
	HX_("layoutGroups",9e,a2,6c,37),
	HX_("lineAscents",45,0c,c2,3e),
	HX_("lineBreaks",e8,fd,5b,ea),
	HX_("lineDescents",0d,ad,64,49),
	HX_("lineLeadings",01,23,97,76),
	HX_("lineHeights",18,99,8e,3e),
	HX_("lineWidths",c1,8a,a4,20),
	HX_("maxChars",99,ef,d0,ef),
	HX_("maxScrollH",57,ad,fc,9a),
	HX_("maxScrollV",65,ad,fc,9a),
	HX_("multiline",ed,d2,11,9e),
	HX_("numLines",d9,f1,11,32),
	HX_("restrict",3c,cb,9e,f1),
	HX_("scrollH",9b,33,d8,30),
	HX_("scrollV",a9,33,d8,30),
	HX_("selectable",96,b6,2a,c4),
	HX_("sharpness",81,22,25,1b),
	HX_("text",ad,cc,f9,4c),
	HX_("textBounds",02,07,0e,9d),
	HX_("textHeight",74,88,3c,39),
	HX_("textFormatRanges",fa,0e,49,a2),
	HX_("textWidth",19,46,50,63),
	HX_("type",ba,f2,08,4d),
	HX_("width",06,b6,62,ca),
	HX_("wordWrap",b4,14,db,00),
	HX_("textField",cd,24,81,99),
	HX_("__cursorTimer",ef,59,8f,e1),
	HX_("__hasFocus",3e,1d,1a,34),
	HX_("__isKeyDown",b7,2f,72,ce),
	HX_("__measuredHeight",ed,b6,23,42),
	HX_("__measuredWidth",c0,49,ec,02),
	HX_("__restrictRegexp",45,9f,ae,a9),
	HX_("__selectionStart",96,e3,b9,43),
	HX_("__showCursor",d3,ae,f0,e0),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("__textLayout",57,aa,3c,c8),
	HX_("__texture",bb,19,2f,20),
	HX_("__useIntAdvances",d9,17,72,7d),
	HX_("__cairoFont",57,e7,b5,28),
	HX_("__font",ef,c0,b8,f2),
	HX_("createRestrictRegexp",41,d0,6b,e1),
	HX_("getBounds",ab,0f,74,e2),
	HX_("getLine",aa,c7,35,1a),
	HX_("getLineBreakIndex",1d,16,36,36),
	HX_("getLineMeasurements",c1,9f,81,56),
	HX_("getLayoutGroups",54,f8,56,5a),
	HX_("restrictText",09,12,3e,34),
	HX_("setTextAlignment",74,0f,33,62),
	HX_("trimText",af,ae,63,65),
	HX_("update",09,86,05,87),
	HX_("get_bottomScrollV",55,03,f8,91),
	HX_("get_maxScrollV",ae,35,f2,10),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("get_scrollV",c0,93,d2,b6),
	HX_("set_scrollV",cc,9a,3f,c1),
	HX_("set_text",aa,e1,11,7b),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::GUTTER,"GUTTER");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::GUTTER,"GUTTER");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

::hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_("GUTTER",1b,d3,2b,8c),
	HX_("UTF8_TAB",07,d5,41,1d),
	HX_("UTF8_ENDLINE",01,29,41,cf),
	HX_("UTF8_SPACE",f8,7b,a9,c7),
	HX_("UTF8_HYPHEN",60,3c,3f,bf),
	HX_("__defaultFonts",63,76,ad,da),
	HX_("findFont",a8,6a,54,96),
	HX_("findFontVariant",bd,22,bb,b2),
	HX_("getFormatHeight",34,24,4b,62),
	HX_("getFont",85,0d,43,16),
	HX_("getFontInstance",3a,76,96,9e),
	::String(null())
};

void TextEngine_obj::__register()
{
	TextEngine_obj _hx_dummy;
	TextEngine_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.text.TextEngine",60,7a,88,a0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_34_boot)
HXDLIN(  34)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("__cairoFont",57,e7,b5,28), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))))
            			->setFixed(1,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_36_boot)
HXDLIN(  36)		GUTTER = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_37_boot)
HXDLIN(  37)		UTF8_TAB = 9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_38_boot)
HXDLIN(  38)		UTF8_ENDLINE = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_39_boot)
HXDLIN(  39)		UTF8_SPACE = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_40_boot)
HXDLIN(  40)		UTF8_HYPHEN = 45;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_41_boot)
HXDLIN(  41)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
