// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_html_HTMLParser
#include <openfl/_internal/formats/html/HTMLParser.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoDisplayObject
#include <openfl/_internal/renderer/cairo/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBitmap
#include <openfl/_internal/renderer/context3D/Context3DBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DShape
#include <openfl/_internal/renderer/context3D/Context3DShape.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DTextField
#include <openfl/_internal/renderer/context3D/Context3DTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_dom_DOMTextField
#include <openfl/_internal/renderer/dom/DOMTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_DynamicTextSymbol
#include <openfl/_internal/symbols/DynamicTextSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_FontSymbol
#include <openfl/_internal/symbols/FontSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_text_GlyphPosition
#include <openfl/_internal/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_824_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",824,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_870_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",870,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_897_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",897,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_923_getCharIndexAtPoint,"openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",923,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_973_getFirstCharInParagraph,"openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",973,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1028_getLineIndexAtPoint,"openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",1028,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1060_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",1060,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1084_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",1084,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1117_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",1117,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1148_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",1148,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1174_getLineText,"openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",1174,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1213_getParagraphLength,"openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",1213,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1252_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",1252,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1346_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",1346,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1367_replaceText,"openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",1367,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1384_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",1384,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1440_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",1440,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1523___allowMouseFocus,"openfl.text.TextField","__allowMouseFocus",0x70182198,"openfl.text.TextField.__allowMouseFocus","openfl/text/TextField.hx",1523,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1528___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",1528,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1539___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",1539,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1563___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",1563,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1570___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",1570,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1593___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",1593,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1600___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",1600,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1623___disableInput,"openfl.text.TextField","__disableInput",0xd160e346,"openfl.text.TextField.__disableInput","openfl/text/TextField.hx",1623,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1637___dispatch,"openfl.text.TextField","__dispatch",0x10db5efe,"openfl.text.TextField.__dispatch","openfl/text/TextField.hx",1637,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1667___enableInput,"openfl.text.TextField","__enableInput",0x9681fcc3,"openfl.text.TextField.__enableInput","openfl/text/TextField.hx",1667,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1689___fromSymbol,"openfl.text.TextField","__fromSymbol",0x5dd0dda6,"openfl.text.TextField.__fromSymbol","openfl/text/TextField.hx",1689,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1814___getAdvance,"openfl.text.TextField","__getAdvance",0x6a1cb7d0,"openfl.text.TextField.__getAdvance","openfl/text/TextField.hx",1814,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1819___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",1819,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1836___getCharBoundaries,"openfl.text.TextField","__getCharBoundaries",0x097fccb0,"openfl.text.TextField.__getCharBoundaries","openfl/text/TextField.hx",1836,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1868___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",1868,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1905___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1905,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1921___getGroup,"openfl.text.TextField","__getGroup",0xec43530d,"openfl.text.TextField.__getGroup","openfl/text/TextField.hx",1921,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1970___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",1970,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2002___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",2002,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2026___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",2026,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2042___renderCairo,"openfl.text.TextField","__renderCairo",0x1a5f4f8e,"openfl.text.TextField.__renderCairo","openfl/text/TextField.hx",2042,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2061___renderCanvas,"openfl.text.TextField","__renderCanvas",0xfc575b12,"openfl.text.TextField.__renderCanvas","openfl/text/TextField.hx",2061,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2120___renderDOM,"openfl.text.TextField","__renderDOM",0x037e5808,"openfl.text.TextField.__renderDOM","openfl/text/TextField.hx",2120,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2158___renderDOMClear,"openfl.text.TextField","__renderDOMClear",0x09e66c65,"openfl.text.TextField.__renderDOMClear","openfl/text/TextField.hx",2158,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2162___renderGL,"openfl.text.TextField","__renderGL",0xa5533b3f,"openfl.text.TextField.__renderGL","openfl/text/TextField.hx",2162,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2179___renderGLMask,"openfl.text.TextField","__renderGLMask",0x687ab3cb,"openfl.text.TextField.__renderGLMask","openfl/text/TextField.hx",2179,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2185___replaceSelectedText,"openfl.text.TextField","__replaceSelectedText",0x229f8d38,"openfl.text.TextField.__replaceSelectedText","openfl/text/TextField.hx",2185,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2216___replaceText,"openfl.text.TextField","__replaceText",0x6f2a5d3d,"openfl.text.TextField.__replaceText","openfl/text/TextField.hx",2216,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2292___shouldCacheHardware,"openfl.text.TextField","__shouldCacheHardware",0x836d1d13,"openfl.text.TextField.__shouldCacheHardware","openfl/text/TextField.hx",2292,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2296___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",2296,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2304___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",2304,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2320___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",2320,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2336___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",2336,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2346___updateCacheBitmap,"openfl.text.TextField","__updateCacheBitmap",0xf1f52f84,"openfl.text.TextField.__updateCacheBitmap","openfl/text/TextField.hx",2346,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2368___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",2368,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2398___updateScrollH,"openfl.text.TextField","__updateScrollH",0x4ea991ce,"openfl.text.TextField.__updateScrollH","openfl/text/TextField.hx",2398,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2439___updateScrollV,"openfl.text.TextField","__updateScrollV",0x4ea991dc,"openfl.text.TextField.__updateScrollV","openfl/text/TextField.hx",2439,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2480___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",2480,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2517___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",2517,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2525_get_antiAliasType,"openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",2525,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2529_set_antiAliasType,"openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",2529,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2540_get_autoSize,"openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",2540,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2544_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",2544,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2557_get_background,"openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",2557,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2561_set_background,"openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",2561,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2573_get_backgroundColor,"openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",2573,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2577_set_backgroundColor,"openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",2577,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2589_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",2589,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2593_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",2593,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2605_get_borderColor,"openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",2605,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2609_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",2609,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2620_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",2620,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2628_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",2628,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2633_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",2633,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2637_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",2637,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2649_get_displayAsPassword,"openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",2649,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2653_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",2653,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2669_get_embedFonts,"openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",2669,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2681_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",2681,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2686_get_gridFitType,"openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",2686,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2698_set_gridFitType,"openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",2698,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2702_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",2702,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2708_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",2708,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2727_get_htmlText,"openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",2727,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2732_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",2732,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2784_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",2784,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2795_get_maxChars,"openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",2795,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2799_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",2799,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2813_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",2813,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2820_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",2820,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2828_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",2828,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2833_set_mouseWheelEnabled,"openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",2833,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2838_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",2838,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2842_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",2842,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2857_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",2857,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2865_get_restrict,"openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",2865,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2869_set_restrict,"openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",2869,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2881_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2881,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2885_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2885,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2904_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2904,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2908_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2908,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2924_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",2924,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2928_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",2928,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2946_get_selectionBeginIndex,"openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",2946,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2951_get_selectionEndIndex,"openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",2951,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2956_get_sharpness,"openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",2956,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2960_set_sharpness,"openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",2960,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2972_get_tabEnabled,"openfl.text.TextField","get_tabEnabled",0x69fcfe19,"openfl.text.TextField.get_tabEnabled","openfl/text/TextField.hx",2972,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2977_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",2977,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2981_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",2981,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3014_get_textColor,"openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",3014,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3018_set_textColor,"openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",3018,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3034_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",3034,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3040_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",3040,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3047_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",3047,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3051_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",3051,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3078_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",3078,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3084_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",3084,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3100_get_wordWrap,"openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",3100,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3104_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",3104,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3117_get_x,"openfl.text.TextField","get_x",0xd93e9aab,"openfl.text.TextField.get_x","openfl/text/TextField.hx",3117,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3121_set_x,"openfl.text.TextField","set_x",0xc20d90b7,"openfl.text.TextField.set_x","openfl/text/TextField.hx",3121,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3128_get_y,"openfl.text.TextField","get_y",0xd93e9aac,"openfl.text.TextField.get_y","openfl/text/TextField.hx",3128,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3132_set_y,"openfl.text.TextField","set_y",0xc20d90b8,"openfl.text.TextField.set_y","openfl/text/TextField.hx",3132,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3139_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",3139,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3175_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",3175,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3215_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",3215,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3220_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",3220,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3227_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",3227,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3260_this_onKeyDown,"openfl.text.TextField","this_onKeyDown",0xebbe0505,"openfl.text.TextField.this_onKeyDown","openfl/text/TextField.hx",3260,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3271_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",3271,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3291_this_onMouseWheel,"openfl.text.TextField","this_onMouseWheel",0xdbfcc352,"openfl.text.TextField.this_onMouseWheel","openfl/text/TextField.hx",3291,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3299_this_onDoubleClick,"openfl.text.TextField","this_onDoubleClick",0xbfe820db,"openfl.text.TextField.this_onDoubleClick","openfl/text/TextField.hx",3299,0xccf02094)
static const ::String _hx_array_data_efd5a8ca_161[] = {
	HX_("\n",0a,00,00,00),HX_(".",2e,00,00,00),HX_("!",21,00,00,00),HX_("?",3f,00,00,00),HX_(",",2c,00,00,00),HX_(" ",20,00,00,00),HX_(";",3b,00,00,00),HX_(":",3a,00,00,00),HX_("(",28,00,00,00),HX_(")",29,00,00,00),HX_("-",2d,00,00,00),HX_("_",5f,00,00,00),HX_("/",2f,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3348_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",3348,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3589_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",3589,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_146_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",146,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_824_new)
HXLINE( 825)		super::__construct();
HXLINE( 827)		this->_hx___caretIndex = -1;
HXLINE( 828)		this->_hx___displayAsPassword = false;
HXLINE( 829)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 830)		this->_hx___textEngine =  ::openfl::_internal::text::TextEngine_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 831)		this->_hx___layoutDirty = true;
HXLINE( 832)		this->_hx___offsetX = ( (Float)(0) );
HXLINE( 833)		this->_hx___offsetY = ( (Float)(0) );
HXLINE( 834)		this->_hx___mouseWheelEnabled = true;
HXLINE( 835)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 837)		this->doubleClickEnabled = true;
HXLINE( 839)		if (::hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 841)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),12,0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),3,0,0,0,0);
HXLINE( 842)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = 0;
HXLINE( 843)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 844)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = 0;
HXLINE( 845)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 848)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 849)		{
HXLINE( 849)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 849)			( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,0,0));
            		}
HXLINE( 851)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
HXLINE( 852)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE( 853)		this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE( 854)		this->addEventListener(HX_("keyDown",a1,69,47,9c),this->this_onKeyDown_dyn(),null(),null(),null());
HXLINE( 855)		this->addEventListener(HX_("mouseWheel",36,28,87,e7),this->this_onMouseWheel_dyn(),null(),null(),null());
HXLINE( 857)		this->addEventListener(HX_("doubleClick",77,03,76,cd),this->this_onDoubleClick_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x0330636f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		return inClassId==(int)0x6b353933 || inClassId==(int)0x7f0de750;
	}
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_870_appendText)
HXLINE( 871)		bool _hx_tmp;
HXDLIN( 871)		if (::hx::IsNotNull( text )) {
HXLINE( 871)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 871)			_hx_tmp = true;
            		}
HXDLIN( 871)		if (_hx_tmp) {
HXLINE( 871)			return;
            		}
HXLINE( 873)		this->_hx___dirty = true;
HXLINE( 874)		this->_hx___layoutDirty = true;
HXLINE( 875)		if (!(this->_hx___renderDirty)) {
HXLINE( 875)			this->_hx___renderDirty = true;
HXDLIN( 875)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 877)		this->_hx___updateText((this->_hx___text + text));
HXLINE( 879)		::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 879)		( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = this->_hx___text.length;
HXLINE( 881)		this->_hx___updateScrollV();
HXLINE( 882)		this->_hx___updateScrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_897_getCharBoundaries)
HXLINE( 898)		bool _hx_tmp;
HXDLIN( 898)		if ((charIndex >= 0)) {
HXLINE( 898)			_hx_tmp = (charIndex > (this->_hx___text.length - 1));
            		}
            		else {
HXLINE( 898)			_hx_tmp = true;
            		}
HXDLIN( 898)		if (_hx_tmp) {
HXLINE( 898)			return null();
            		}
HXLINE( 900)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 902)		if (this->_hx___getCharBoundaries(charIndex,rect)) {
HXLINE( 904)			return rect;
            		}
            		else {
HXLINE( 908)			return null();
            		}
HXLINE( 902)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_923_getCharIndexAtPoint)
HXLINE( 924)		bool _hx_tmp;
HXDLIN( 924)		bool _hx_tmp1;
HXDLIN( 924)		bool _hx_tmp2;
HXDLIN( 924)		if (!((x <= 2))) {
HXLINE( 924)			_hx_tmp2 = (x > (this->get_width() + 4));
            		}
            		else {
HXLINE( 924)			_hx_tmp2 = true;
            		}
HXDLIN( 924)		if (!(_hx_tmp2)) {
HXLINE( 924)			_hx_tmp1 = (y <= 0);
            		}
            		else {
HXLINE( 924)			_hx_tmp1 = true;
            		}
HXDLIN( 924)		if (!(_hx_tmp1)) {
HXLINE( 924)			_hx_tmp = (y > (this->get_height() + 4));
            		}
            		else {
HXLINE( 924)			_hx_tmp = true;
            		}
HXDLIN( 924)		if (_hx_tmp) {
HXLINE( 924)			return -1;
            		}
HXLINE( 926)		this->_hx___updateLayout();
HXLINE( 928)		x = (x + this->get_scrollH());
HXLINE( 930)		{
HXLINE( 930)			int _g = 0;
HXDLIN( 930)			int _g1 = (this->get_scrollV() - 1);
HXDLIN( 930)			while((_g < _g1)){
HXLINE( 930)				_g = (_g + 1);
HXDLIN( 930)				int i = (_g - 1);
HXLINE( 932)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 935)		{
HXLINE( 935)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN( 935)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 935)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 937)				bool _hx_tmp;
HXDLIN( 937)				if ((y >= group1->offsetY)) {
HXLINE( 937)					_hx_tmp = (y <= (group1->offsetY + group1->height));
            				}
            				else {
HXLINE( 937)					_hx_tmp = false;
            				}
HXDLIN( 937)				if (_hx_tmp) {
HXLINE( 939)					bool _hx_tmp;
HXDLIN( 939)					if ((x >= group1->offsetX)) {
HXLINE( 939)						_hx_tmp = (x <= (group1->offsetX + group1->width));
            					}
            					else {
HXLINE( 939)						_hx_tmp = false;
            					}
HXDLIN( 939)					if (_hx_tmp) {
HXLINE( 941)						Float advance = ((Float)0.0);
HXLINE( 943)						{
HXLINE( 943)							int _g = 0;
HXDLIN( 943)							int _g1 = group1->positions->length;
HXDLIN( 943)							while((_g < _g1)){
HXLINE( 943)								_g = (_g + 1);
HXDLIN( 943)								int i = (_g - 1);
HXLINE( 945)								Float advance1;
HXDLIN( 945)								bool advance2;
HXDLIN( 945)								if ((i >= 0)) {
HXLINE( 945)									advance2 = (i < group1->positions->length);
            								}
            								else {
HXLINE( 945)									advance2 = false;
            								}
HXDLIN( 945)								if (advance2) {
HXLINE( 945)									advance1 = group1->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE( 945)									advance1 = ( (Float)(0) );
            								}
HXDLIN( 945)								advance = (advance + advance1);
HXLINE( 947)								if ((x <= (group1->offsetX + advance))) {
HXLINE( 949)									return (group1->startIndex + i);
            								}
            							}
            						}
HXLINE( 953)						return group1->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 958)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

int TextField_obj::getFirstCharInParagraph(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_973_getFirstCharInParagraph)
HXLINE( 974)		bool _hx_tmp;
HXDLIN( 974)		if ((charIndex >= 0)) {
HXLINE( 974)			_hx_tmp = (charIndex > this->get_text().length);
            		}
            		else {
HXLINE( 974)			_hx_tmp = true;
            		}
HXDLIN( 974)		if (_hx_tmp) {
HXLINE( 974)			return -1;
            		}
HXLINE( 976)		int index = this->_hx___textEngine->getLineBreakIndex(null());
HXLINE( 977)		int startIndex = 0;
HXLINE( 979)		while((index > -1)){
HXLINE( 981)			if ((index < charIndex)) {
HXLINE( 983)				startIndex = (index + 1);
            			}
            			else {
HXLINE( 985)				if ((index >= charIndex)) {
HXLINE( 987)					goto _hx_goto_7;
            				}
            			}
HXLINE( 990)			index = this->_hx___textEngine->getLineBreakIndex((index + 1));
            		}
            		_hx_goto_7:;
HXLINE( 993)		return startIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1028_getLineIndexAtPoint)
HXLINE(1029)		this->_hx___updateLayout();
HXLINE(1031)		bool _hx_tmp;
HXDLIN(1031)		bool _hx_tmp1;
HXDLIN(1031)		bool _hx_tmp2;
HXDLIN(1031)		if (!((x <= 2))) {
HXLINE(1031)			_hx_tmp2 = (x > (this->get_width() + 4));
            		}
            		else {
HXLINE(1031)			_hx_tmp2 = true;
            		}
HXDLIN(1031)		if (!(_hx_tmp2)) {
HXLINE(1031)			_hx_tmp1 = (y <= 0);
            		}
            		else {
HXLINE(1031)			_hx_tmp1 = true;
            		}
HXDLIN(1031)		if (!(_hx_tmp1)) {
HXLINE(1031)			_hx_tmp = (y > (this->get_height() + 4));
            		}
            		else {
HXLINE(1031)			_hx_tmp = true;
            		}
HXDLIN(1031)		if (_hx_tmp) {
HXLINE(1031)			return -1;
            		}
HXLINE(1033)		{
HXLINE(1033)			int _g = 0;
HXDLIN(1033)			int _g1 = (this->get_scrollV() - 1);
HXDLIN(1033)			while((_g < _g1)){
HXLINE(1033)				_g = (_g + 1);
HXDLIN(1033)				int i = (_g - 1);
HXLINE(1035)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1038)		{
HXLINE(1038)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1038)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1038)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1040)				bool _hx_tmp;
HXDLIN(1040)				if ((y >= group1->offsetY)) {
HXLINE(1040)					_hx_tmp = (y <= (group1->offsetY + group1->height));
            				}
            				else {
HXLINE(1040)					_hx_tmp = false;
            				}
HXDLIN(1040)				if (_hx_tmp) {
HXLINE(1042)					return group1->lineIndex;
            				}
            			}
            		}
HXLINE(1046)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1060_getLineIndexOfChar)
HXLINE(1061)		bool _hx_tmp;
HXDLIN(1061)		if ((charIndex >= 0)) {
HXLINE(1061)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1061)			_hx_tmp = true;
            		}
HXDLIN(1061)		if (_hx_tmp) {
HXLINE(1061)			return -1;
            		}
HXLINE(1063)		this->_hx___updateLayout();
HXLINE(1065)		{
HXLINE(1065)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1065)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1065)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1067)				bool _hx_tmp;
HXDLIN(1067)				if ((group1->startIndex <= charIndex)) {
HXLINE(1067)					_hx_tmp = (group1->endIndex >= charIndex);
            				}
            				else {
HXLINE(1067)					_hx_tmp = false;
            				}
HXDLIN(1067)				if (_hx_tmp) {
HXLINE(1069)					return group1->lineIndex;
            				}
            			}
            		}
HXLINE(1073)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1084_getLineLength)
HXLINE(1085)		this->_hx___updateLayout();
HXLINE(1087)		bool _hx_tmp;
HXDLIN(1087)		if ((lineIndex >= 0)) {
HXLINE(1087)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1087)			_hx_tmp = true;
            		}
HXDLIN(1087)		if (_hx_tmp) {
HXLINE(1087)			return 0;
            		}
HXLINE(1089)		int startIndex = -1;
HXLINE(1090)		int endIndex = -1;
HXLINE(1092)		{
HXLINE(1092)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1092)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1092)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1094)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1096)					if ((startIndex == -1)) {
HXLINE(1096)						startIndex = group1->startIndex;
            					}
            				}
            				else {
HXLINE(1098)					if ((group1->lineIndex == (lineIndex + 1))) {
HXLINE(1100)						endIndex = group1->startIndex;
HXLINE(1101)						goto _hx_goto_14;
            					}
            				}
            			}
            			_hx_goto_14:;
            		}
HXLINE(1105)		if ((endIndex == -1)) {
HXLINE(1105)			endIndex = this->_hx___text.length;
            		}
HXLINE(1106)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1117_getLineMetrics)
HXLINE(1118)		this->_hx___updateLayout();
HXLINE(1120)		Float ascender = this->_hx___textEngine->lineAscents->get(lineIndex);
HXLINE(1121)		Float descender = this->_hx___textEngine->lineDescents->get(lineIndex);
HXLINE(1122)		Float leading = this->_hx___textEngine->lineLeadings->get(lineIndex);
HXLINE(1123)		Float lineHeight = this->_hx___textEngine->lineHeights->get(lineIndex);
HXLINE(1124)		Float lineWidth = this->_hx___textEngine->lineWidths->get(lineIndex);
HXLINE(1128)		Float margin;
HXDLIN(1128)		 ::Dynamic _hx_switch_0 = this->_hx___textFormat->align;
            		if (  (_hx_switch_0==0) ){
HXLINE(1128)			margin = ((this->_hx___textEngine->width - lineWidth) / ( (Float)(2) ));
HXDLIN(1128)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==1) ||  (_hx_switch_0==4) ){
HXLINE(1128)			margin = ((this->_hx___textEngine->width - lineWidth) - ( (Float)(2) ));
HXDLIN(1128)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==2) ||  (_hx_switch_0==3) ||  (_hx_switch_0==5) ){
HXLINE(1128)			margin = ( (Float)(2) );
HXDLIN(1128)			goto _hx_goto_16;
            		}
            		_hx_goto_16:;
HXLINE(1135)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1148_getLineOffset)
HXLINE(1149)		this->_hx___updateLayout();
HXLINE(1151)		bool _hx_tmp;
HXDLIN(1151)		if ((lineIndex >= 0)) {
HXLINE(1151)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1151)			_hx_tmp = true;
            		}
HXDLIN(1151)		if (_hx_tmp) {
HXLINE(1151)			return -1;
            		}
HXLINE(1153)		{
HXLINE(1153)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1153)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1153)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1155)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1157)					return group1->startIndex;
            				}
            			}
            		}
HXLINE(1161)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1174_getLineText)
HXLINE(1175)		this->_hx___updateLayout();
HXLINE(1177)		bool _hx_tmp;
HXDLIN(1177)		if ((lineIndex >= 0)) {
HXLINE(1177)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1177)			_hx_tmp = true;
            		}
HXDLIN(1177)		if (_hx_tmp) {
HXLINE(1177)			return null();
            		}
HXLINE(1179)		int startIndex = -1;
HXLINE(1180)		int endIndex = -1;
HXLINE(1182)		{
HXLINE(1182)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1182)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1182)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1184)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1186)					if ((startIndex == -1)) {
HXLINE(1186)						startIndex = group1->startIndex;
            					}
            				}
            				else {
HXLINE(1188)					if ((group1->lineIndex == (lineIndex + 1))) {
HXLINE(1190)						endIndex = group1->startIndex;
HXLINE(1191)						goto _hx_goto_20;
            					}
            				}
            			}
            			_hx_goto_20:;
            		}
HXLINE(1195)		if ((endIndex == -1)) {
HXLINE(1195)			endIndex = this->_hx___text.length;
            		}
HXLINE(1197)		return this->_hx___textEngine->text.substring(startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

int TextField_obj::getParagraphLength(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1213_getParagraphLength)
HXLINE(1214)		bool _hx_tmp;
HXDLIN(1214)		if ((charIndex >= 0)) {
HXLINE(1214)			_hx_tmp = (charIndex > this->get_text().length);
            		}
            		else {
HXLINE(1214)			_hx_tmp = true;
            		}
HXDLIN(1214)		if (_hx_tmp) {
HXLINE(1214)			return -1;
            		}
HXLINE(1216)		int startIndex = this->getFirstCharInParagraph(charIndex);
HXLINE(1218)		if ((charIndex >= this->get_text().length)) {
HXLINE(1218)			return ((this->get_text().length - startIndex) + 1);
            		}
HXLINE(1220)		int endIndex = (this->_hx___textEngine->getLineBreakIndex(charIndex) + 1);
HXLINE(1222)		if ((endIndex == 0)) {
HXLINE(1222)			endIndex = this->_hx___text.length;
            		}
HXLINE(1223)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(-1);
            		int endIndex = __o_endIndex.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1252_getTextFormat)
HXLINE(1253)		 ::openfl::text::TextFormat format = null();
HXLINE(1255)		bool _hx_tmp;
HXDLIN(1255)		bool _hx_tmp1;
HXDLIN(1255)		bool _hx_tmp2;
HXDLIN(1255)		if ((beginIndex < this->get_text().length)) {
HXLINE(1255)			_hx_tmp2 = (beginIndex < -1);
            		}
            		else {
HXLINE(1255)			_hx_tmp2 = true;
            		}
HXDLIN(1255)		if (!(_hx_tmp2)) {
HXLINE(1255)			_hx_tmp1 = (endIndex > this->get_text().length);
            		}
            		else {
HXLINE(1255)			_hx_tmp1 = true;
            		}
HXDLIN(1255)		if (!(_hx_tmp1)) {
HXLINE(1255)			_hx_tmp = (endIndex < -1);
            		}
            		else {
HXLINE(1255)			_hx_tmp = true;
            		}
HXDLIN(1255)		if (_hx_tmp) {
HXLINE(1256)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds",37,5a,d3,87))));
            		}
HXLINE(1258)		if ((beginIndex == -1)) {
HXLINE(1258)			beginIndex = 0;
            		}
HXLINE(1259)		if ((endIndex == -1)) {
HXLINE(1259)			endIndex = this->get_text().length;
            		}
HXLINE(1261)		if ((beginIndex >= endIndex)) {
HXLINE(1261)			return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1263)		{
HXLINE(1263)			 ::Dynamic group = this->_hx___textEngine->textFormatRanges->iterator();
HXDLIN(1263)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1263)				 ::openfl::_internal::text::TextFormatRange group1 = ( ( ::openfl::_internal::text::TextFormatRange)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1265)				bool _hx_tmp;
HXDLIN(1265)				bool _hx_tmp1;
HXDLIN(1265)				if ((group1->start <= beginIndex)) {
HXLINE(1265)					_hx_tmp1 = (group1->end > beginIndex);
            				}
            				else {
HXLINE(1265)					_hx_tmp1 = false;
            				}
HXDLIN(1265)				if (!(_hx_tmp1)) {
HXLINE(1265)					if ((group1->start < endIndex)) {
HXLINE(1265)						_hx_tmp = (group1->end >= endIndex);
            					}
            					else {
HXLINE(1265)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(1265)					_hx_tmp = true;
            				}
HXDLIN(1265)				if (_hx_tmp) {
HXLINE(1267)					if (::hx::IsNull( format )) {
HXLINE(1269)						format = group1->format->clone();
            					}
            					else {
HXLINE(1273)						if ((group1->format->font != format->font)) {
HXLINE(1273)							format->font = null();
            						}
HXLINE(1274)						if (::hx::IsNotEq( group1->format->size,format->size )) {
HXLINE(1274)							format->size = null();
            						}
HXLINE(1275)						if (::hx::IsNotEq( group1->format->color,format->color )) {
HXLINE(1275)							format->color = null();
            						}
HXLINE(1276)						if (::hx::IsNotEq( group1->format->bold,format->bold )) {
HXLINE(1276)							format->bold = null();
            						}
HXLINE(1277)						if (::hx::IsNotEq( group1->format->italic,format->italic )) {
HXLINE(1277)							format->italic = null();
            						}
HXLINE(1278)						if (::hx::IsNotEq( group1->format->underline,format->underline )) {
HXLINE(1278)							format->underline = null();
            						}
HXLINE(1279)						if ((group1->format->url != format->url)) {
HXLINE(1279)							format->url = null();
            						}
HXLINE(1280)						if ((group1->format->target != format->target)) {
HXLINE(1280)							format->target = null();
            						}
HXLINE(1281)						if (::hx::IsNotEq( group1->format->align,format->align )) {
HXLINE(1281)							format->align = null();
            						}
HXLINE(1282)						if (::hx::IsNotEq( group1->format->leftMargin,format->leftMargin )) {
HXLINE(1282)							format->leftMargin = null();
            						}
HXLINE(1283)						if (::hx::IsNotEq( group1->format->rightMargin,format->rightMargin )) {
HXLINE(1283)							format->rightMargin = null();
            						}
HXLINE(1284)						if (::hx::IsNotEq( group1->format->indent,format->indent )) {
HXLINE(1284)							format->indent = null();
            						}
HXLINE(1285)						if (::hx::IsNotEq( group1->format->leading,format->leading )) {
HXLINE(1285)							format->leading = null();
            						}
HXLINE(1286)						if (::hx::IsNotEq( group1->format->blockIndent,format->blockIndent )) {
HXLINE(1286)							format->blockIndent = null();
            						}
HXLINE(1287)						if (::hx::IsNotEq( group1->format->bullet,format->bullet )) {
HXLINE(1287)							format->bullet = null();
            						}
HXLINE(1288)						if (::hx::IsNotEq( group1->format->kerning,format->kerning )) {
HXLINE(1288)							format->kerning = null();
            						}
HXLINE(1289)						if (::hx::IsNotEq( group1->format->letterSpacing,format->letterSpacing )) {
HXLINE(1289)							format->letterSpacing = null();
            						}
HXLINE(1290)						if (::hx::IsPointerNotEq( group1->format->tabStops,format->tabStops )) {
HXLINE(1290)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE(1295)		if (::hx::IsNull( format )) {
HXLINE(1295)			format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1296)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1346_replaceSelectedText)
HXDLIN(1346)		this->_hx___replaceSelectedText(value,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1367_replaceText)
HXDLIN(1367)		this->_hx___replaceText(beginIndex,endIndex,newText,false);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1384_setSelection)
HXLINE(1385)		this->_hx___selectionIndex = beginIndex;
HXLINE(1386)		this->_hx___caretIndex = endIndex;
HXLINE(1388)		this->_hx___updateScrollV();
HXLINE(1390)		this->_hx___stopCursorTimer();
HXLINE(1391)		this->_hx___startCursorTimer();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(0);
            		int endIndex = __o_endIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1440_setTextFormat)
HXLINE(1441)		int max = this->get_text().length;
HXLINE(1442)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE(1444)		if ((beginIndex < 0)) {
HXLINE(1444)			beginIndex = 0;
            		}
HXLINE(1445)		if ((endIndex < 0)) {
HXLINE(1445)			endIndex = 0;
            		}
HXLINE(1447)		if ((endIndex == 0)) {
HXLINE(1449)			if ((beginIndex == 0)) {
HXLINE(1451)				endIndex = max;
            			}
            			else {
HXLINE(1455)				endIndex = (beginIndex + 1);
            			}
            		}
HXLINE(1459)		if ((endIndex < beginIndex)) {
HXLINE(1459)			return;
            		}
HXLINE(1461)		bool _hx_tmp;
HXDLIN(1461)		if ((beginIndex == 0)) {
HXLINE(1461)			_hx_tmp = (endIndex >= max);
            		}
            		else {
HXLINE(1461)			_hx_tmp = false;
            		}
HXDLIN(1461)		if (_hx_tmp) {
HXLINE(1464)			this->_hx___textFormat->_hx___merge(format);
HXLINE(1466)			{
HXLINE(1466)				int _g = 0;
HXDLIN(1466)				int _g1 = this->_hx___textEngine->textFormatRanges->get_length();
HXDLIN(1466)				while((_g < _g1)){
HXLINE(1466)					_g = (_g + 1);
HXDLIN(1466)					int i = (_g - 1);
HXLINE(1468)					range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1469)					range->format->_hx___merge(format);
            				}
            			}
            		}
            		else {
HXLINE(1474)			int index = 0;
HXLINE(1475)			 ::openfl::_internal::text::TextFormatRange newRange;
HXLINE(1477)			while((index < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(1479)				range = this->_hx___textEngine->textFormatRanges->get(index).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1481)				bool _hx_tmp;
HXDLIN(1481)				if ((range->start == beginIndex)) {
HXLINE(1481)					_hx_tmp = (range->end == endIndex);
            				}
            				else {
HXLINE(1481)					_hx_tmp = false;
            				}
HXDLIN(1481)				if (_hx_tmp) {
HXLINE(1484)					range->format->_hx___merge(format);
HXLINE(1485)					goto _hx_goto_29;
            				}
            				else {
HXLINE(1487)					bool _hx_tmp;
HXDLIN(1487)					if ((range->start >= beginIndex)) {
HXLINE(1487)						_hx_tmp = (range->end <= endIndex);
            					}
            					else {
HXLINE(1487)						_hx_tmp = false;
            					}
HXDLIN(1487)					if (_hx_tmp) {
HXLINE(1490)						range->format->_hx___merge(format);
            					}
            					else {
HXLINE(1492)						bool _hx_tmp;
HXDLIN(1492)						bool _hx_tmp1;
HXDLIN(1492)						if ((range->start >= beginIndex)) {
HXLINE(1492)							_hx_tmp1 = (range->start < endIndex);
            						}
            						else {
HXLINE(1492)							_hx_tmp1 = false;
            						}
HXDLIN(1492)						if (_hx_tmp1) {
HXLINE(1492)							_hx_tmp = (range->end > beginIndex);
            						}
            						else {
HXLINE(1492)							_hx_tmp = false;
            						}
HXDLIN(1492)						if (_hx_tmp) {
HXLINE(1495)							 ::openfl::text::TextFormat newRange1 = range->format->clone();
HXDLIN(1495)							newRange =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,newRange1,range->start,endIndex);
HXLINE(1496)							newRange->format->_hx___merge(format);
HXLINE(1497)							this->_hx___textEngine->textFormatRanges->insertAt(index,newRange);
HXLINE(1498)							range->start = endIndex;
HXLINE(1499)							index = (index + 1);
            						}
            						else {
HXLINE(1501)							bool _hx_tmp;
HXDLIN(1501)							bool _hx_tmp1;
HXDLIN(1501)							if ((range->start < beginIndex)) {
HXLINE(1501)								_hx_tmp1 = (range->end > beginIndex);
            							}
            							else {
HXLINE(1501)								_hx_tmp1 = false;
            							}
HXDLIN(1501)							if (_hx_tmp1) {
HXLINE(1501)								_hx_tmp = (range->end >= endIndex);
            							}
            							else {
HXLINE(1501)								_hx_tmp = false;
            							}
HXDLIN(1501)							if (_hx_tmp) {
HXLINE(1504)								 ::openfl::text::TextFormat newRange1 = range->format->clone();
HXDLIN(1504)								newRange =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,newRange1,beginIndex,range->end);
HXLINE(1505)								newRange->format->_hx___merge(format);
HXLINE(1506)								this->_hx___textEngine->textFormatRanges->insertAt((index + 1),newRange);
HXLINE(1507)								range->end = beginIndex;
HXLINE(1508)								index = (index + 1);
            							}
            						}
            					}
            				}
HXLINE(1511)				index = (index + 1);
            			}
            			_hx_goto_29:;
            		}
HXLINE(1516)		this->_hx___dirty = true;
HXLINE(1517)		this->_hx___layoutDirty = true;
HXLINE(1518)		if (!(this->_hx___renderDirty)) {
HXLINE(1518)			this->_hx___renderDirty = true;
HXDLIN(1518)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

bool TextField_obj::_hx___allowMouseFocus(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1523___allowMouseFocus)
HXDLIN(1523)		bool _hx_tmp;
HXDLIN(1523)		if (::hx::IsNotEq( this->_hx___textEngine->type,1 )) {
HXDLIN(1523)			_hx_tmp = this->get_tabEnabled();
            		}
            		else {
HXDLIN(1523)			_hx_tmp = true;
            		}
HXDLIN(1523)		if (!(_hx_tmp)) {
HXDLIN(1523)			return this->get_selectable();
            		}
            		else {
HXDLIN(1523)			return true;
            		}
HXDLIN(1523)		return false;
            	}


void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1528___caretBeginningOfLine)
HXDLIN(1528)		bool _hx_tmp;
HXDLIN(1528)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXDLIN(1528)			_hx_tmp = (this->_hx___caretIndex < this->_hx___selectionIndex);
            		}
            		else {
HXDLIN(1528)			_hx_tmp = true;
            		}
HXDLIN(1528)		if (_hx_tmp) {
HXLINE(1530)			this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            		}
            		else {
HXLINE(1534)			this->_hx___selectionIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___selectionIndex));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1539___caretEndOfLine)
HXLINE(1540)		int lineIndex;
HXLINE(1542)		if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(1544)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
            		else {
HXLINE(1548)			lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) ))));
            		}
HXLINE(1551)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1553)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + 1)) - 1);
            		}
            		else {
HXLINE(1557)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1563___caretNextCharacter)
HXDLIN(1563)		if ((this->_hx___caretIndex < this->_hx___text.length)) {
HXLINE(1565)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1570___caretNextLine)
HXLINE(1571)		if (::hx::IsNull( lineIndex )) {
HXLINE(1573)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE(1576)		if (::hx::IsLess( lineIndex,(this->_hx___textEngine->numLines - 1) )) {
HXLINE(1578)			if (::hx::IsNull( caretIndex )) {
HXLINE(1580)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE(1583)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(( (int)(caretIndex) ),(lineIndex + 1));
            		}
            		else {
HXLINE(1587)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1593___caretPreviousCharacter)
HXDLIN(1593)		if ((this->_hx___caretIndex > 0)) {
HXLINE(1595)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1600___caretPreviousLine)
HXLINE(1601)		if (::hx::IsNull( lineIndex )) {
HXLINE(1603)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE(1606)		if (::hx::IsGreater( lineIndex,0 )) {
HXLINE(1608)			if (::hx::IsNull( caretIndex )) {
HXLINE(1610)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE(1613)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(( (int)(caretIndex) ),(( (int)(lineIndex) ) - 1));
            		}
            		else {
HXLINE(1617)			this->_hx___caretIndex = 0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretPreviousLine,(void))

void TextField_obj::_hx___disableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1623___disableInput)
HXDLIN(1623)		bool _hx_tmp;
HXDLIN(1623)		if (this->_hx___inputEnabled) {
HXDLIN(1623)			_hx_tmp = ::hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(1623)			_hx_tmp = false;
            		}
HXDLIN(1623)		if (_hx_tmp) {
HXLINE(1626)			this->stage->window->_hx___backend->setTextInputEnabled(false);
HXLINE(1627)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(1628)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE(1631)			this->_hx___inputEnabled = false;
HXLINE(1632)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___disableInput,(void))

bool TextField_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1637___dispatch)
HXLINE(1638)		bool _hx_tmp;
HXDLIN(1638)		if ((event->eventPhase == 2)) {
HXLINE(1638)			_hx_tmp = (event->type == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE(1638)			_hx_tmp = false;
            		}
HXDLIN(1638)		if (_hx_tmp) {
HXLINE(1640)			 ::openfl::events::MouseEvent event1 = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE(1641)			Float group = this->get_mouseX();
HXDLIN(1641)			 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1643)			if (::hx::IsNotNull( group1 )) {
HXLINE(1645)				::String url = group1->format->url;
HXLINE(1647)				bool _hx_tmp;
HXDLIN(1647)				if (::hx::IsNotNull( url )) {
HXLINE(1647)					_hx_tmp = (url != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(1647)					_hx_tmp = false;
            				}
HXDLIN(1647)				if (_hx_tmp) {
HXLINE(1649)					if (::StringTools_obj::startsWith(url,HX_("event:",e0,4e,6a,96))) {
HXLINE(1651)						this->dispatchEvent( ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("link",fa,17,b3,47),false,false,url.substr(6,null())));
            					}
            					else {
HXLINE(1655)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),null());
            					}
            				}
            			}
            		}
HXLINE(1661)		return this->super::_hx___dispatch(event);
            	}


void TextField_obj::_hx___enableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1667___enableInput)
HXDLIN(1667)		if (::hx::IsNotNull( this->stage )) {
HXLINE(1669)			this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1671)			if (!(this->_hx___inputEnabled)) {
HXLINE(1673)				this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1675)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE(1677)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE(1678)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE(1681)				this->_hx___inputEnabled = true;
HXLINE(1682)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___enableInput,(void))

void TextField_obj::_hx___fromSymbol( ::openfl::_internal::formats::swf::SWFLite swf, ::openfl::_internal::symbols::DynamicTextSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1689___fromSymbol)
HXLINE(1690)		this->_hx___symbol = symbol;
HXLINE(1692)		this->set_width(symbol->width);
HXLINE(1693)		this->set_height(symbol->height);
HXLINE(1695)		this->_hx___offsetX = symbol->x;
HXLINE(1696)		this->_hx___offsetY = symbol->y;
HXLINE(1698)		this->set_multiline(symbol->multiline);
HXLINE(1699)		this->set_wordWrap(symbol->wordWrap);
HXLINE(1700)		this->set_displayAsPassword(symbol->password);
HXLINE(1702)		if (symbol->border) {
HXLINE(1704)			this->set_border(true);
HXLINE(1705)			this->set_background(true);
            		}
HXLINE(1708)		this->set_selectable(symbol->selectable);
HXLINE(1710)		if (symbol->input) {
HXLINE(1712)			this->set_type(1);
            		}
HXLINE(1715)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(1716)		if (::hx::IsNotNull( symbol->color )) {
HXLINE(1716)			format->color = (( (int)(symbol->color) ) & 16777215);
            		}
HXLINE(1717)		format->size = ::Math_obj::round((( (Float)(symbol->fontHeight) ) / ( (Float)(20) )));
HXLINE(1719)		 ::openfl::_internal::symbols::FontSymbol font = ( ( ::openfl::_internal::symbols::FontSymbol)(swf->symbols->get(symbol->fontID)) );
HXLINE(1721)		if (::hx::IsNotNull( font )) {
HXLINE(1731)			format->_hx___ascent = ((( (Float)(font->ascent) ) / ( (Float)(20) )) / ( (Float)(1024) ));
HXLINE(1732)			format->_hx___descent = ((( (Float)(font->descent) ) / ( (Float)(20) )) / ( (Float)(1024) ));
            		}
HXLINE(1735)		format->font = symbol->fontName;
HXLINE(1737)		bool found = false;
HXLINE(1739)		{
HXLINE(1739)			::String _g = format->font;
HXDLIN(1739)			if (::hx::IsNull( _g )) {
HXLINE(1742)				found = true;
            			}
            			else {
HXLINE(1739)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ||  (_hx_switch_0==HX_("_serif",be,66,15,76)) ||  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE(1742)					found = true;
HXDLIN(1742)					goto _hx_goto_42;
            				}
            				/* default */{
HXLINE(1745)					int _g = 0;
HXDLIN(1745)					::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1745)					while((_g < _g1->length)){
HXLINE(1745)						 ::openfl::text::Font font = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN(1745)						_g = (_g + 1);
HXLINE(1747)						if ((font->name == format->font)) {
HXLINE(1749)							found = true;
HXLINE(1750)							goto _hx_goto_41;
            						}
            					}
            					_hx_goto_41:;
            				}
            				_hx_goto_42:;
            			}
            		}
HXLINE(1755)		if (!(found)) {
HXLINE(1757)			 ::EReg alpha =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z]+",51,38,19,1d),HX_("g",67,00,00,00));
HXLINE(1759)			{
HXLINE(1759)				int _g = 0;
HXDLIN(1759)				::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1759)				while((_g < _g1->length)){
HXLINE(1759)					 ::openfl::text::Font font = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN(1759)					_g = (_g + 1);
HXLINE(1761)					::String _hx_tmp = alpha->replace(font->name,HX_("",00,00,00,00)).substr(0,symbol->fontName.length);
HXDLIN(1761)					if ((_hx_tmp == symbol->fontName)) {
HXLINE(1763)						format->font = font->name;
HXLINE(1764)						found = true;
HXLINE(1765)						goto _hx_goto_43;
            					}
            				}
            				_hx_goto_43:;
            			}
            		}
HXLINE(1770)		if (found) {
HXLINE(1772)			this->set_embedFonts(true);
            		}
            		else {
HXLINE(1774)			if (!(::openfl::text::TextField_obj::_hx___missingFontWarning->exists(format->font))) {
HXLINE(1776)				::openfl::text::TextField_obj::_hx___missingFontWarning->set(format->font,true);
HXLINE(1777)				::lime::utils::Log_obj::warn(((HX_("Could not find required font \"",97,15,e8,5b) + format->font) + HX_("\", it has not been embedded",4c,66,7a,0a)),::hx::SourceInfo(HX_("openfl/text/TextField.hx",94,20,f0,cc),1777,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__fromSymbol",82,2f,b5,6a)));
            			}
            		}
HXLINE(1780)		if (::hx::IsNotNull( symbol->align )) {
HXLINE(1782)			if ((symbol->align == HX_("center",d5,25,db,05))) {
HXLINE(1782)				format->align = 0;
            			}
            			else {
HXLINE(1783)				if ((symbol->align == HX_("right",dc,0b,64,e9))) {
HXLINE(1783)					format->align = 4;
            				}
            				else {
HXLINE(1784)					if ((symbol->align == HX_("justify",50,df,b5,83))) {
HXLINE(1784)						format->align = 2;
            					}
            				}
            			}
HXLINE(1786)			format->leftMargin = ::Std_obj::_hx_int((( (Float)(symbol->leftMargin) ) / ( (Float)(20) )));
HXLINE(1787)			format->rightMargin = ::Std_obj::_hx_int((( (Float)(symbol->rightMargin) ) / ( (Float)(20) )));
HXLINE(1788)			format->indent = ::Std_obj::_hx_int((( (Float)(symbol->indent) ) / ( (Float)(20) )));
HXLINE(1789)			format->leading = ::Std_obj::_hx_int((( (Float)(symbol->leading) ) / ( (Float)(20) )));
            		}
HXLINE(1792)		this->set_defaultTextFormat(format);
HXLINE(1794)		if (::hx::IsNotNull( symbol->text )) {
HXLINE(1796)			if (symbol->html) {
HXLINE(1798)				this->set_htmlText(symbol->text);
            			}
            			else {
HXLINE(1802)				this->set_text(symbol->text);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___fromSymbol,(void))

Float TextField_obj::_hx___getAdvance( ::Dynamic position){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1814___getAdvance)
HXDLIN(1814)		return ( (Float)( ::Dynamic(position->__Field(HX_("advance",82,08,0c,ef),::hx::paccDynamic))->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___getAdvance,return )

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1819___getBounds)
HXLINE(1820)		this->_hx___updateLayout();
HXLINE(1822)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(1823)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(1825)		 ::openfl::geom::Matrix matrix1 = matrix;
HXDLIN(1825)		matrix1->tx = (matrix1->tx + this->_hx___offsetX);
HXLINE(1826)		 ::openfl::geom::Matrix matrix2 = matrix;
HXDLIN(1826)		matrix2->ty = (matrix2->ty + this->_hx___offsetY);
HXLINE(1828)		bounds->_hx___transform(bounds,matrix);
HXLINE(1830)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1832)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


bool TextField_obj::_hx___getCharBoundaries(int charIndex, ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1836___getCharBoundaries)
HXLINE(1837)		bool _hx_tmp;
HXDLIN(1837)		if ((charIndex >= 0)) {
HXLINE(1837)			_hx_tmp = (charIndex > (this->_hx___text.length - 1));
            		}
            		else {
HXLINE(1837)			_hx_tmp = true;
            		}
HXDLIN(1837)		if (_hx_tmp) {
HXLINE(1837)			return false;
            		}
HXLINE(1839)		this->_hx___updateLayout();
HXLINE(1841)		{
HXLINE(1841)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1841)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1841)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1843)				bool _hx_tmp;
HXDLIN(1843)				if ((charIndex >= group1->startIndex)) {
HXLINE(1843)					_hx_tmp = (charIndex < group1->endIndex);
            				}
            				else {
HXLINE(1843)					_hx_tmp = false;
            				}
HXDLIN(1843)				if (_hx_tmp) {
HXLINE(1845)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1847)						Float x = group1->offsetX;
HXLINE(1849)						{
HXLINE(1849)							int _g = 0;
HXDLIN(1849)							int _g1 = (charIndex - group1->startIndex);
HXDLIN(1849)							while((_g < _g1)){
HXLINE(1849)								_g = (_g + 1);
HXDLIN(1849)								int i = (_g - 1);
HXLINE(1851)								Float x1;
HXDLIN(1851)								bool x2;
HXDLIN(1851)								if ((i >= 0)) {
HXLINE(1851)									x2 = (i < group1->positions->length);
            								}
            								else {
HXLINE(1851)									x2 = false;
            								}
HXDLIN(1851)								if (x2) {
HXLINE(1851)									x1 = group1->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1851)									x1 = ( (Float)(0) );
            								}
HXDLIN(1851)								x = (x + x1);
            							}
            						}
HXLINE(1855)						int index = (charIndex - group1->startIndex);
HXDLIN(1855)						Float lastPosition;
HXDLIN(1855)						bool lastPosition1;
HXDLIN(1855)						if ((index >= 0)) {
HXLINE(1855)							lastPosition1 = (index < group1->positions->length);
            						}
            						else {
HXLINE(1855)							lastPosition1 = false;
            						}
HXDLIN(1855)						if (lastPosition1) {
HXLINE(1855)							lastPosition = group1->positions->__get(index).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            						}
            						else {
HXLINE(1855)							lastPosition = ( (Float)(0) );
            						}
HXLINE(1857)						rect->setTo(x,group1->offsetY,lastPosition,(group1->ascent + group1->descent));
HXLINE(1858)						return true;
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g = _hx_e;
HXLINE(   1)							{
HXLINE(   1)								null();
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE(1864)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharBoundaries,return )

int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1868___getCharIndexOnDifferentLine)
HXLINE(1869)		bool _hx_tmp;
HXDLIN(1869)		if ((charIndex >= 0)) {
HXLINE(1869)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1869)			_hx_tmp = true;
            		}
HXDLIN(1869)		if (_hx_tmp) {
HXLINE(1869)			return -1;
            		}
HXLINE(1870)		bool _hx_tmp1;
HXDLIN(1870)		if ((lineIndex >= 0)) {
HXLINE(1870)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1870)			_hx_tmp1 = true;
            		}
HXDLIN(1870)		if (_hx_tmp1) {
HXLINE(1870)			return -1;
            		}
HXLINE(1872)		 ::Dynamic x = null();
HXDLIN(1872)		 ::Dynamic y = null();
HXLINE(1874)		{
HXLINE(1874)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1874)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1874)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1876)				bool _hx_tmp;
HXDLIN(1876)				if ((charIndex >= group1->startIndex)) {
HXLINE(1876)					_hx_tmp = (charIndex <= group1->endIndex);
            				}
            				else {
HXLINE(1876)					_hx_tmp = false;
            				}
HXDLIN(1876)				if (_hx_tmp) {
HXLINE(1878)					x = group1->offsetX;
HXLINE(1880)					{
HXLINE(1880)						int _g = 0;
HXDLIN(1880)						int _g1 = (charIndex - group1->startIndex);
HXDLIN(1880)						while((_g < _g1)){
HXLINE(1880)							_g = (_g + 1);
HXDLIN(1880)							int i = (_g - 1);
HXLINE(1882)							Float x1;
HXDLIN(1882)							bool x2;
HXDLIN(1882)							if ((i >= 0)) {
HXLINE(1882)								x2 = (i < group1->positions->length);
            							}
            							else {
HXLINE(1882)								x2 = false;
            							}
HXDLIN(1882)							if (x2) {
HXLINE(1882)								x1 = group1->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1882)								x1 = ( (Float)(0) );
            							}
HXDLIN(1882)							x = (x + x1);
            						}
            					}
HXLINE(1885)					if (::hx::IsNotNull( y )) {
HXLINE(1885)						return this->_hx___getPosition(( (Float)(x) ),( (Float)(y) ));
            					}
            				}
HXLINE(1888)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1890)					y = (group1->offsetY + (group1->height / ( (Float)(2) )));
HXLINE(1892)					{
HXLINE(1892)						int _g = 0;
HXDLIN(1892)						int _g1 = (this->get_scrollV() - 1);
HXDLIN(1892)						while((_g < _g1)){
HXLINE(1892)							_g = (_g + 1);
HXDLIN(1892)							int i = (_g - 1);
HXLINE(1894)							y = (y - this->_hx___textEngine->lineHeights->get(i));
            						}
            					}
HXLINE(1897)					if (::hx::IsNotNull( x )) {
HXLINE(1897)						return this->_hx___getPosition(( (Float)(x) ),( (Float)(y) ));
            					}
            				}
            			}
            		}
HXLINE(1901)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

::String TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1905___getCursor)
HXLINE(1906)		Float group = this->get_mouseX();
HXDLIN(1906)		 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1908)		bool _hx_tmp;
HXDLIN(1908)		if (::hx::IsNotNull( group1 )) {
HXLINE(1908)			_hx_tmp = (group1->format->url != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1908)			_hx_tmp = false;
            		}
HXDLIN(1908)		if (_hx_tmp) {
HXLINE(1910)			return HX_("button",f2,61,e0,d9);
            		}
            		else {
HXLINE(1912)			if (this->_hx___textEngine->selectable) {
HXLINE(1914)				return HX_("ibeam",58,ca,26,b6);
            			}
            		}
HXLINE(1917)		return null();
            	}


 ::openfl::_internal::text::TextLayoutGroup TextField_obj::_hx___getGroup(Float x,Float y,::hx::Null< bool >  __o_precise){
            		bool precise = __o_precise.Default(false);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1921___getGroup)
HXLINE(1922)		this->_hx___updateLayout();
HXLINE(1924)		x = (x + this->get_scrollH());
HXLINE(1926)		{
HXLINE(1926)			int _g = 0;
HXDLIN(1926)			int _g1 = (this->get_scrollV() - 1);
HXDLIN(1926)			while((_g < _g1)){
HXLINE(1926)				_g = (_g + 1);
HXDLIN(1926)				int i = (_g - 1);
HXLINE(1928)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1931)		bool _hx_tmp;
HXDLIN(1931)		if (!(precise)) {
HXLINE(1931)			_hx_tmp = (y > this->_hx___textEngine->textHeight);
            		}
            		else {
HXLINE(1931)			_hx_tmp = false;
            		}
HXDLIN(1931)		if (_hx_tmp) {
HXLINE(1931)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1933)		bool firstGroup = true;
HXLINE(1934)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1934)		 ::openfl::_internal::text::TextLayoutGroup nextGroup;
HXLINE(1936)		{
HXLINE(1936)			int _g2 = 0;
HXDLIN(1936)			int _g3 = this->_hx___textEngine->layoutGroups->get_length();
HXDLIN(1936)			while((_g2 < _g3)){
HXLINE(1936)				_g2 = (_g2 + 1);
HXDLIN(1936)				int i = (_g2 - 1);
HXLINE(1938)				group = this->_hx___textEngine->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1940)				if ((i < (this->_hx___textEngine->layoutGroups->get_length() - 1))) {
HXLINE(1942)					nextGroup = this->_hx___textEngine->layoutGroups->get((i + 1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            				}
            				else {
HXLINE(1946)					nextGroup = null();
            				}
HXLINE(1949)				if (firstGroup) {
HXLINE(1951)					if ((y < group->offsetY)) {
HXLINE(1951)						y = group->offsetY;
            					}
HXLINE(1952)					if ((x < group->offsetX)) {
HXLINE(1952)						x = group->offsetX;
            					}
HXLINE(1953)					firstGroup = false;
            				}
HXLINE(1956)				bool _hx_tmp;
HXDLIN(1956)				bool _hx_tmp1;
HXDLIN(1956)				if ((y >= group->offsetY)) {
HXLINE(1956)					_hx_tmp1 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(1956)					_hx_tmp1 = false;
            				}
HXDLIN(1956)				if (!(_hx_tmp1)) {
HXLINE(1956)					if (!(precise)) {
HXLINE(1956)						_hx_tmp = ::hx::IsNull( nextGroup );
            					}
            					else {
HXLINE(1956)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(1956)					_hx_tmp = true;
            				}
HXDLIN(1956)				if (_hx_tmp) {
HXLINE(1958)					bool _hx_tmp;
HXDLIN(1958)					bool _hx_tmp1;
HXDLIN(1958)					if ((x >= group->offsetX)) {
HXLINE(1958)						_hx_tmp1 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(1958)						_hx_tmp1 = false;
            					}
HXDLIN(1958)					if (!(_hx_tmp1)) {
HXLINE(1959)						if (!(precise)) {
HXLINE(1959)							if (::hx::IsNotNull( nextGroup )) {
HXLINE(1958)								_hx_tmp = (nextGroup->lineIndex != group->lineIndex);
            							}
            							else {
HXLINE(1958)								_hx_tmp = true;
            							}
            						}
            						else {
HXLINE(1958)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE(1958)						_hx_tmp = true;
            					}
HXDLIN(1958)					if (_hx_tmp) {
HXLINE(1961)						return group;
            					}
            				}
            			}
            		}
HXLINE(1966)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getGroup,return )

int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1970___getPosition)
HXLINE(1971)		 ::openfl::_internal::text::TextLayoutGroup group = this->_hx___getGroup(x,y,null());
HXLINE(1973)		if (::hx::IsNull( group )) {
HXLINE(1975)			return this->_hx___text.length;
            		}
HXLINE(1978)		Float advance = ((Float)0.0);
HXLINE(1980)		{
HXLINE(1980)			int _g = 0;
HXDLIN(1980)			int _g1 = group->positions->length;
HXDLIN(1980)			while((_g < _g1)){
HXLINE(1980)				_g = (_g + 1);
HXDLIN(1980)				int i = (_g - 1);
HXLINE(1982)				Float advance1;
HXDLIN(1982)				bool advance2;
HXDLIN(1982)				if ((i >= 0)) {
HXLINE(1982)					advance2 = (i < group->positions->length);
            				}
            				else {
HXLINE(1982)					advance2 = false;
            				}
HXDLIN(1982)				if (advance2) {
HXLINE(1982)					advance1 = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            				}
            				else {
HXLINE(1982)					advance1 = ( (Float)(0) );
            				}
HXDLIN(1982)				advance = (advance + advance1);
HXLINE(1984)				if ((x <= (group->offsetX + advance))) {
HXLINE(1986)					Float _hx_tmp;
HXDLIN(1986)					bool _hx_tmp1;
HXDLIN(1986)					if ((i >= 0)) {
HXLINE(1986)						_hx_tmp1 = (i < group->positions->length);
            					}
            					else {
HXLINE(1986)						_hx_tmp1 = false;
            					}
HXDLIN(1986)					if (_hx_tmp1) {
HXLINE(1986)						_hx_tmp = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1986)						_hx_tmp = ( (Float)(0) );
            					}
HXDLIN(1986)					Float _hx_tmp2;
HXDLIN(1986)					bool _hx_tmp3;
HXDLIN(1986)					if ((i >= 0)) {
HXLINE(1986)						_hx_tmp3 = (i < group->positions->length);
            					}
            					else {
HXLINE(1986)						_hx_tmp3 = false;
            					}
HXDLIN(1986)					if (_hx_tmp3) {
HXLINE(1986)						_hx_tmp2 = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1986)						_hx_tmp2 = ( (Float)(0) );
            					}
HXDLIN(1986)					if ((x <= ((group->offsetX + (advance - _hx_tmp)) + (_hx_tmp2 / ( (Float)(2) ))))) {
HXLINE(1988)						return (group->startIndex + i);
            					}
            					else {
HXLINE(1992)						if (((group->startIndex + i) < group->endIndex)) {
HXLINE(1992)							return ((group->startIndex + i) + 1);
            						}
            						else {
HXLINE(1992)							return group->endIndex;
            						}
            					}
            				}
            			}
            		}
HXLINE(1997)		return group->endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2002___hitTest)
HXLINE(2003)		bool _hx_tmp;
HXDLIN(2003)		bool _hx_tmp1;
HXDLIN(2003)		if (hitObject->get_visible()) {
HXLINE(2003)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(2003)			_hx_tmp1 = true;
            		}
HXDLIN(2003)		if (!(_hx_tmp1)) {
HXLINE(2003)			if (interactiveOnly) {
HXLINE(2003)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(2003)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(2003)			_hx_tmp = true;
            		}
HXDLIN(2003)		if (_hx_tmp) {
HXLINE(2003)			return false;
            		}
HXLINE(2004)		bool _hx_tmp2;
HXDLIN(2004)		if (::hx::IsNotNull( this->get_mask() )) {
HXLINE(2004)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(2004)			_hx_tmp2 = false;
            		}
HXDLIN(2004)		if (_hx_tmp2) {
HXLINE(2004)			return false;
            		}
HXLINE(2006)		this->_hx___getRenderTransform();
HXLINE(2007)		this->_hx___updateLayout();
HXLINE(2009)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2009)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(2009)		Float px;
HXDLIN(2009)		if ((norm == 0)) {
HXLINE(2009)			px = -(_this->tx);
            		}
            		else {
HXLINE(2009)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(2010)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(2010)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(2010)		Float py;
HXDLIN(2010)		if ((norm1 == 0)) {
HXLINE(2010)			py = -(_this1->ty);
            		}
            		else {
HXLINE(2010)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(2012)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(2014)			if (::hx::IsNotNull( stack )) {
HXLINE(2016)				stack->push(hitObject);
            			}
HXLINE(2019)			return true;
            		}
HXLINE(2022)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2026___hitTestMask)
HXLINE(2027)		this->_hx___getRenderTransform();
HXLINE(2028)		this->_hx___updateLayout();
HXLINE(2030)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2030)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(2030)		Float px;
HXDLIN(2030)		if ((norm == 0)) {
HXLINE(2030)			px = -(_this->tx);
            		}
            		else {
HXLINE(2030)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(2031)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(2031)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(2031)		Float py;
HXDLIN(2031)		if ((norm1 == 0)) {
HXLINE(2031)			py = -(_this1->ty);
            		}
            		else {
HXLINE(2031)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(2033)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(2035)			return true;
            		}
HXLINE(2038)		return false;
            	}


void TextField_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2042___renderCairo)
HXLINE(2044)		this->_hx___updateCacheBitmap(renderer,this->_hx___dirty);
HXLINE(2046)		bool _hx_tmp;
HXDLIN(2046)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(2046)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(2046)			_hx_tmp = false;
            		}
HXDLIN(2046)		if (_hx_tmp) {
HXLINE(2048)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
HXDLIN(2048)			if (bitmap->_hx___renderable) {
HXLINE(2048)				Float alpha = renderer->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN(2048)				bool _hx_tmp;
HXDLIN(2048)				bool _hx_tmp1;
HXDLIN(2048)				if ((alpha > 0)) {
HXLINE(2048)					_hx_tmp1 = ::hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE(2048)					_hx_tmp1 = false;
            				}
HXDLIN(2048)				if (_hx_tmp1) {
HXLINE(2048)					_hx_tmp = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE(2048)					_hx_tmp = false;
            				}
HXDLIN(2048)				if (_hx_tmp) {
HXLINE(2048)					 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXDLIN(2048)					renderer->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN(2048)					renderer->_hx___pushMaskObject(bitmap,null());
HXDLIN(2048)					renderer->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN(2048)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN(2048)					if (::hx::IsNotNull( surface )) {
HXLINE(2048)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN(2048)						int _hx_tmp;
HXDLIN(2048)						bool _hx_tmp1;
HXDLIN(2048)						if (renderer->_hx___allowSmoothing) {
HXLINE(2048)							_hx_tmp1 = bitmap->smoothing;
            						}
            						else {
HXLINE(2048)							_hx_tmp1 = false;
            						}
HXDLIN(2048)						if (_hx_tmp1) {
HXLINE(2048)							_hx_tmp = 1;
            						}
            						else {
HXLINE(2048)							_hx_tmp = 3;
            						}
HXDLIN(2048)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp);
HXDLIN(2048)						cairo->set_source(pattern);
HXDLIN(2048)						if ((alpha == 1)) {
HXLINE(2048)							cairo->paint();
            						}
            						else {
HXLINE(2048)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN(2048)					renderer->_hx___popMaskObject(bitmap,null());
HXDLIN(2048)					renderer->_hx___setBlendMode(10);
            				}
            			}
            		}
            		else {
HXLINE(2052)			::openfl::_internal::renderer::cairo::CairoTextField_obj::render(::hx::ObjectPtr<OBJ_>(this),renderer,this->_hx___worldTransform);
HXLINE(2053)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(::hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE(2056)		this->_hx___renderEvent(renderer);
            	}


void TextField_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2061___renderCanvas)
            	}


void TextField_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2120___renderDOM)
            	}


void TextField_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2158___renderDOMClear)
HXDLIN(2158)		::openfl::_internal::renderer::dom::DOMTextField_obj::clear(::hx::ObjectPtr<OBJ_>(this),renderer);
            	}


void TextField_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2162___renderGL)
HXLINE(2163)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE(2165)		bool _hx_tmp;
HXDLIN(2165)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(2165)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(2165)			_hx_tmp = false;
            		}
HXDLIN(2165)		if (_hx_tmp) {
HXLINE(2167)			::openfl::_internal::renderer::context3D::Context3DBitmap_obj::render(this->_hx___cacheBitmap,renderer);
            		}
            		else {
HXLINE(2171)			::openfl::_internal::renderer::context3D::Context3DTextField_obj::render(::hx::ObjectPtr<OBJ_>(this),renderer);
HXLINE(2172)			bool _hx_tmp;
HXDLIN(2172)			if (::hx::IsNull( this->opaqueBackground )) {
HXLINE(2172)				_hx_tmp = ::hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE(2172)				_hx_tmp = false;
            			}
HXDLIN(2172)			if (!(_hx_tmp)) {
HXLINE(2172)				bool _hx_tmp;
HXDLIN(2172)				if (this->_hx___renderable) {
HXLINE(2172)					_hx_tmp = (this->_hx___worldAlpha <= 0);
            				}
            				else {
HXLINE(2172)					_hx_tmp = true;
            				}
HXDLIN(2172)				if (!(_hx_tmp)) {
HXLINE(2172)					bool _hx_tmp;
HXDLIN(2172)					bool _hx_tmp1;
HXDLIN(2172)					bool _hx_tmp2;
HXDLIN(2172)					if (::hx::IsNotNull( this->opaqueBackground )) {
HXLINE(2172)						_hx_tmp2 = !(this->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE(2172)						_hx_tmp2 = false;
            					}
HXDLIN(2172)					if (_hx_tmp2) {
HXLINE(2172)						_hx_tmp1 = (this->get_width() > 0);
            					}
            					else {
HXLINE(2172)						_hx_tmp1 = false;
            					}
HXDLIN(2172)					if (_hx_tmp1) {
HXLINE(2172)						_hx_tmp = (this->get_height() > 0);
            					}
            					else {
HXLINE(2172)						_hx_tmp = false;
            					}
HXDLIN(2172)					if (_hx_tmp) {
HXLINE(2172)						renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXDLIN(2172)						renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXDLIN(2172)						 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXDLIN(2172)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXDLIN(2172)						Float _hx_tmp = this->get_width();
HXDLIN(2172)						rect->setTo(( (Float)(0) ),( (Float)(0) ),_hx_tmp,this->get_height());
HXDLIN(2172)						renderer->_hx___pushMaskRect(rect,this->_hx___renderTransform);
HXDLIN(2172)						int color = ( (int)(this->opaqueBackground) );
HXDLIN(2172)						context->clear((( (Float)((::hx::UShr(color,16) & 255)) ) / ( (Float)(255) )),(( (Float)((::hx::UShr(color,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color & 255)) ) / ( (Float)(255) )),1,0,0,1);
HXDLIN(2172)						renderer->_hx___popMaskRect();
HXDLIN(2172)						renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXDLIN(2172)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN(2172)					if (::hx::IsNotNull( this->_hx___graphics )) {
HXLINE(2172)						::openfl::_internal::renderer::context3D::Context3DShape_obj::render(::hx::ObjectPtr<OBJ_>(this),renderer);
            					}
            				}
            			}
            		}
HXLINE(2175)		this->_hx___renderEvent(renderer);
            	}


void TextField_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2179___renderGLMask)
HXLINE(2180)		::openfl::_internal::renderer::context3D::Context3DTextField_obj::renderMask(::hx::ObjectPtr<OBJ_>(this),renderer);
HXLINE(2181)		this->super::_hx___renderGLMask(renderer);
            	}


void TextField_obj::_hx___replaceSelectedText(::String value,::hx::Null< bool >  __o_restrict){
            		bool restrict = __o_restrict.Default(true);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2185___replaceSelectedText)
HXLINE(2186)		if (::hx::IsNull( value )) {
HXLINE(2186)			value = HX_("",00,00,00,00);
            		}
HXLINE(2187)		bool _hx_tmp;
HXDLIN(2187)		if ((value == HX_("",00,00,00,00))) {
HXLINE(2187)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE(2187)			_hx_tmp = false;
            		}
HXDLIN(2187)		if (_hx_tmp) {
HXLINE(2187)			return;
            		}
HXLINE(2189)		int startIndex;
HXDLIN(2189)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE(2189)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2189)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE(2190)		int endIndex;
HXDLIN(2190)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE(2190)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2190)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE(2192)		bool _hx_tmp1;
HXDLIN(2192)		bool _hx_tmp2;
HXDLIN(2192)		if ((startIndex == endIndex)) {
HXLINE(2192)			_hx_tmp2 = (this->_hx___textEngine->maxChars > 0);
            		}
            		else {
HXLINE(2192)			_hx_tmp2 = false;
            		}
HXDLIN(2192)		if (_hx_tmp2) {
HXLINE(2192)			_hx_tmp1 = (this->_hx___text.length == this->_hx___textEngine->maxChars);
            		}
            		else {
HXLINE(2192)			_hx_tmp1 = false;
            		}
HXDLIN(2192)		if (_hx_tmp1) {
HXLINE(2192)			return;
            		}
HXLINE(2194)		if ((startIndex > this->_hx___text.length)) {
HXLINE(2194)			startIndex = this->_hx___text.length;
            		}
HXLINE(2195)		if ((endIndex > this->_hx___text.length)) {
HXLINE(2195)			endIndex = this->_hx___text.length;
            		}
HXLINE(2196)		if ((endIndex < startIndex)) {
HXLINE(2198)			int cache = endIndex;
HXLINE(2199)			endIndex = startIndex;
HXLINE(2200)			startIndex = cache;
            		}
HXLINE(2202)		if ((startIndex < 0)) {
HXLINE(2202)			startIndex = 0;
            		}
HXLINE(2204)		this->_hx___replaceText(startIndex,endIndex,value,restrict);
HXLINE(2206)		int i = (startIndex + value.length);
HXLINE(2207)		if ((i > this->_hx___text.length)) {
HXLINE(2207)			i = this->_hx___text.length;
            		}
HXLINE(2209)		this->setSelection(i,i);
HXLINE(2212)		this->_hx___updateScrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___replaceSelectedText,(void))

void TextField_obj::_hx___replaceText(int beginIndex,int endIndex,::String newText,bool restrict){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2216___replaceText)
HXLINE(2217)		bool _hx_tmp;
HXDLIN(2217)		bool _hx_tmp1;
HXDLIN(2217)		bool _hx_tmp2;
HXDLIN(2217)		if ((endIndex >= beginIndex)) {
HXLINE(2217)			_hx_tmp2 = (beginIndex < 0);
            		}
            		else {
HXLINE(2217)			_hx_tmp2 = true;
            		}
HXDLIN(2217)		if (!(_hx_tmp2)) {
HXLINE(2217)			_hx_tmp1 = (endIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(2217)			_hx_tmp1 = true;
            		}
HXDLIN(2217)		if (!(_hx_tmp1)) {
HXLINE(2217)			_hx_tmp = ::hx::IsNull( newText );
            		}
            		else {
HXLINE(2217)			_hx_tmp = true;
            		}
HXDLIN(2217)		if (_hx_tmp) {
HXLINE(2217)			return;
            		}
HXLINE(2219)		if (restrict) {
HXLINE(2221)			newText = this->_hx___textEngine->restrictText(newText);
HXLINE(2223)			if ((this->_hx___textEngine->maxChars > 0)) {
HXLINE(2225)				int removeLength = (endIndex - beginIndex);
HXLINE(2226)				int maxLength = ((this->_hx___textEngine->maxChars - this->_hx___text.length) + removeLength);
HXLINE(2228)				if ((maxLength <= 0)) {
HXLINE(2230)					newText = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(2232)					if ((maxLength < newText.length)) {
HXLINE(2234)						newText = newText.substr(0,maxLength);
            					}
            				}
            			}
            		}
HXLINE(2239)		::String _hx_tmp3 = (this->_hx___text.substring(0,beginIndex) + newText);
HXDLIN(2239)		this->_hx___updateText((_hx_tmp3 + this->_hx___text.substring(endIndex,null())));
HXLINE(2240)		if ((endIndex > this->_hx___text.length)) {
HXLINE(2240)			endIndex = this->_hx___text.length;
            		}
HXLINE(2242)		int offset = (newText.length - (endIndex - beginIndex));
HXLINE(2244)		int i = 0;
HXLINE(2245)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE(2247)		while((i < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(2249)			range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(2251)			bool _hx_tmp;
HXDLIN(2251)			if ((range->start <= beginIndex)) {
HXLINE(2251)				_hx_tmp = (range->end >= endIndex);
            			}
            			else {
HXLINE(2251)				_hx_tmp = false;
            			}
HXDLIN(2251)			if (_hx_tmp) {
HXLINE(2253)				 ::openfl::_internal::text::TextFormatRange range1 = range;
HXDLIN(2253)				range1->end = (range1->end + offset);
HXLINE(2254)				i = (i + 1);
            			}
            			else {
HXLINE(2256)				bool _hx_tmp;
HXDLIN(2256)				if ((range->start >= beginIndex)) {
HXLINE(2256)					_hx_tmp = (range->end <= endIndex);
            				}
            				else {
HXLINE(2256)					_hx_tmp = false;
            				}
HXDLIN(2256)				if (_hx_tmp) {
HXLINE(2258)					if ((i > 0)) {
HXLINE(2260)						this->_hx___textEngine->textFormatRanges->splice(i,1);
            					}
            					else {
HXLINE(2264)						range->start = 0;
HXLINE(2265)						range->end = (beginIndex + newText.length);
HXLINE(2266)						i = (i + 1);
            					}
HXLINE(2269)					offset = (offset - (range->end - range->start));
            				}
            				else {
HXLINE(2271)					bool _hx_tmp;
HXDLIN(2271)					if ((range->start > beginIndex)) {
HXLINE(2271)						_hx_tmp = (range->start <= endIndex);
            					}
            					else {
HXLINE(2271)						_hx_tmp = false;
            					}
HXDLIN(2271)					if (_hx_tmp) {
HXLINE(2273)						 ::openfl::_internal::text::TextFormatRange range1 = range;
HXDLIN(2273)						range1->start = (range1->start + offset);
HXLINE(2274)						i = (i + 1);
            					}
            					else {
HXLINE(2278)						i = (i + 1);
            					}
            				}
            			}
            		}
HXLINE(2282)		this->_hx___updateScrollV();
HXLINE(2283)		this->_hx___updateScrollH();
HXLINE(2285)		this->_hx___dirty = true;
HXLINE(2286)		this->_hx___layoutDirty = true;
HXLINE(2287)		if (!(this->_hx___renderDirty)) {
HXLINE(2287)			this->_hx___renderDirty = true;
HXDLIN(2287)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(TextField_obj,_hx___replaceText,(void))

 ::Dynamic TextField_obj::_hx___shouldCacheHardware( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2292___shouldCacheHardware)
HXDLIN(2292)		if (::hx::IsEq( value,true )) {
HXDLIN(2292)			return true;
            		}
            		else {
HXDLIN(2292)			return false;
            		}
HXDLIN(2292)		return false;
            	}


void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2296___startCursorTimer)
HXLINE(2297)		this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),600);
HXLINE(2298)		this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE(2299)		this->_hx___dirty = true;
HXLINE(2300)		if (!(this->_hx___renderDirty)) {
HXLINE(2300)			this->_hx___renderDirty = true;
HXDLIN(2300)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2304___startTextInput)
HXLINE(2305)		if ((this->_hx___caretIndex < 0)) {
HXLINE(2307)			this->_hx___caretIndex = this->_hx___text.length;
HXLINE(2308)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(2311)		bool enableInput = true;
HXLINE(2313)		if (enableInput) {
HXLINE(2315)			this->_hx___enableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2320___stopCursorTimer)
HXLINE(2321)		if (::hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(2323)			this->_hx___cursorTimer->stop();
HXLINE(2324)			this->_hx___cursorTimer = null();
            		}
HXLINE(2327)		if (this->_hx___showCursor) {
HXLINE(2329)			this->_hx___showCursor = false;
HXLINE(2330)			this->_hx___dirty = true;
HXLINE(2331)			if (!(this->_hx___renderDirty)) {
HXLINE(2331)				this->_hx___renderDirty = true;
HXDLIN(2331)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2336___stopTextInput)
HXLINE(2337)		bool disableInput = true;
HXLINE(2339)		if (disableInput) {
HXLINE(2341)			this->_hx___disableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

bool TextField_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObjectRenderer renderer,bool force){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2346___updateCacheBitmap)
HXLINE(2348)		bool _hx_tmp;
HXDLIN(2348)		bool _hx_tmp1;
HXDLIN(2348)		bool _hx_tmp2;
HXDLIN(2348)		if (::hx::IsNull( this->_hx___filters )) {
HXLINE(2348)			_hx_tmp2 = (renderer->_hx___type == HX_("opengl",6f,64,94,21));
            		}
            		else {
HXLINE(2348)			_hx_tmp2 = false;
            		}
HXDLIN(2348)		if (_hx_tmp2) {
HXLINE(2348)			_hx_tmp1 = ::hx::IsNull( this->_hx___cacheBitmap );
            		}
            		else {
HXLINE(2348)			_hx_tmp1 = false;
            		}
HXDLIN(2348)		if (_hx_tmp1) {
HXLINE(2348)			_hx_tmp = !(this->_hx___domRender);
            		}
            		else {
HXLINE(2348)			_hx_tmp = false;
            		}
HXDLIN(2348)		if (_hx_tmp) {
HXLINE(2348)			return false;
            		}
HXLINE(2350)		if (force) {
HXLINE(2350)			this->_hx___renderDirty = true;
            		}
HXLINE(2351)		bool _hx_tmp3;
HXDLIN(2351)		if (!(force)) {
HXLINE(2351)			_hx_tmp3 = this->_hx___dirty;
            		}
            		else {
HXLINE(2351)			_hx_tmp3 = true;
            		}
HXDLIN(2351)		if (this->super::_hx___updateCacheBitmap(renderer,_hx_tmp3)) {
HXLINE(2353)			if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(2355)				 ::openfl::geom::Matrix _hx_tmp = this->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN(2355)				_hx_tmp->tx = (_hx_tmp->tx - this->_hx___offsetX);
HXLINE(2356)				 ::openfl::geom::Matrix _hx_tmp1 = this->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN(2356)				_hx_tmp1->ty = (_hx_tmp1->ty - this->_hx___offsetY);
            			}
HXLINE(2359)			return true;
            		}
HXLINE(2363)		return false;
            	}


void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2368___updateLayout)
HXDLIN(2368)		if (this->_hx___layoutDirty) {
HXLINE(2370)			Float cacheWidth = this->_hx___textEngine->width;
HXLINE(2371)			this->_hx___textEngine->update();
HXLINE(2373)			if (::hx::IsNotEq( this->_hx___textEngine->autoSize,2 )) {
HXLINE(2375)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(2377)					 ::Dynamic _hx_switch_0 = this->_hx___textEngine->autoSize;
            					if (  (_hx_switch_0==0) ){
HXLINE(2383)						 ::openfl::text::TextField _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2383)						Float _hx_tmp = _g->get_x();
HXDLIN(2383)						_g->set_x((_hx_tmp + ((cacheWidth - this->_hx___textEngine->width) / ( (Float)(2) ))));
HXDLIN(2383)						goto _hx_goto_77;
            					}
            					if (  (_hx_switch_0==3) ){
HXLINE(2380)						 ::openfl::text::TextField _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2380)						Float _hx_tmp = _g->get_x();
HXDLIN(2380)						_g->set_x((_hx_tmp + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(2380)						goto _hx_goto_77;
            					}
            					/* default */{
            					}
            					_hx_goto_77:;
            				}
HXLINE(2389)				this->_hx___textEngine->getBounds();
            			}
HXLINE(2392)			this->_hx___layoutDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2398___updateScrollH)
HXDLIN(2398)		bool _hx_tmp;
HXDLIN(2398)		if (!(this->get_multiline())) {
HXDLIN(2398)			_hx_tmp = ::hx::IsEq( this->get_type(),1 );
            		}
            		else {
HXDLIN(2398)			_hx_tmp = false;
            		}
HXDLIN(2398)		if (_hx_tmp) {
HXLINE(2400)			this->_hx___layoutDirty = true;
HXLINE(2401)			this->_hx___updateLayout();
HXLINE(2403)			Float offsetX = ((this->_hx___textEngine->textWidth - this->_hx___textEngine->width) + 4);
HXLINE(2405)			if ((offsetX > 0)) {
HXLINE(2410)				int _hx_tmp = this->_hx___caretIndex;
HXDLIN(2410)				if ((_hx_tmp >= this->get_text().length)) {
HXLINE(2412)					this->set_scrollH(::Math_obj::ceil(offsetX));
            				}
            				else {
HXLINE(2416)					 ::openfl::geom::Rectangle caret = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2417)					this->_hx___getCharBoundaries(this->_hx___caretIndex,caret);
HXLINE(2419)					Float caret1 = caret->x;
HXDLIN(2419)					if ((caret1 < this->get_scrollH())) {
HXLINE(2421)						this->set_scrollH(::Math_obj::floor((caret->x - ( (Float)(2) ))));
            					}
            					else {
HXLINE(2423)						Float caret1 = caret->x;
HXDLIN(2423)						int _hx_tmp = this->get_scrollH();
HXDLIN(2423)						if ((caret1 > (_hx_tmp + this->_hx___textEngine->width))) {
HXLINE(2425)							this->set_scrollH(::Math_obj::ceil(((caret->x - this->_hx___textEngine->width) - ( (Float)(2) ))));
            						}
            					}
HXLINE(2428)					::openfl::geom::Rectangle_obj::_hx___pool->release(caret);
            				}
            			}
            			else {
HXLINE(2433)				this->set_scrollH(0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollH,(void))

void TextField_obj::_hx___updateScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2439___updateScrollV)
HXLINE(2440)		this->_hx___layoutDirty = true;
HXLINE(2441)		this->_hx___updateLayout();
HXLINE(2443)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(2445)		bool _hx_tmp;
HXDLIN(2445)		if ((lineIndex == -1)) {
HXLINE(2445)			_hx_tmp = (this->_hx___caretIndex > 0);
            		}
            		else {
HXLINE(2445)			_hx_tmp = false;
            		}
HXDLIN(2445)		if (_hx_tmp) {
HXLINE(2448)			lineIndex = (this->getLineIndexOfChar((this->_hx___caretIndex - 1)) + 1);
            		}
HXLINE(2451)		if (((lineIndex + 1) < this->get_scrollV())) {
HXLINE(2453)			this->set_scrollV((lineIndex + 1));
            		}
            		else {
HXLINE(2455)			if (((lineIndex + 1) > this->get_bottomScrollV())) {
HXLINE(2457)				int i = lineIndex;
HXDLIN(2457)				Float tempHeight = ((Float)0.0);
HXLINE(2459)				while((i >= 0)){
HXLINE(2461)					Float _hx_tmp = (tempHeight + this->_hx___textEngine->lineHeights->get(i));
HXDLIN(2461)					if ((_hx_tmp <= (this->get_height() - ( (Float)(4) )))) {
HXLINE(2463)						tempHeight = (tempHeight + this->_hx___textEngine->lineHeights->get(i));
HXLINE(2464)						i = (i - 1);
            					}
            					else {
HXLINE(2467)						goto _hx_goto_80;
            					}
            				}
            				_hx_goto_80:;
HXLINE(2470)				this->set_scrollV((i + 2));
            			}
            			else {
HXLINE(2475)				this->set_scrollV(this->get_scrollV());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollV,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2480___updateText)
HXLINE(2490)		this->_hx___textEngine->set_text(value);
HXLINE(2491)		this->_hx___text = this->_hx___textEngine->text;
HXLINE(2493)		if ((this->_hx___text.length < this->_hx___caretIndex)) {
HXLINE(2495)			this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            		}
HXLINE(2498)		if (!(this->_hx___displayAsPassword)) {
HXLINE(2500)			this->_hx___textEngine->set_text(this->_hx___text);
            		}
            		else {
HXLINE(2504)			int length = this->get_text().length;
HXLINE(2505)			::String mask = HX_("",00,00,00,00);
HXLINE(2507)			{
HXLINE(2507)				int _g = 0;
HXDLIN(2507)				int _g1 = length;
HXDLIN(2507)				while((_g < _g1)){
HXLINE(2507)					_g = (_g + 1);
HXDLIN(2507)					int i = (_g - 1);
HXLINE(2509)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(2512)			this->_hx___textEngine->set_text(mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2517___updateTransforms)
HXLINE(2518)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(2519)		{
HXLINE(2519)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2519)			Float px = this->_hx___offsetX;
HXDLIN(2519)			Float py = this->_hx___offsetY;
HXDLIN(2519)			_this->tx = (((px * _this->a) + (py * _this->c)) + _this->tx);
HXDLIN(2519)			_this->ty = (((px * _this->b) + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2525_get_antiAliasType)
HXDLIN(2525)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2529_set_antiAliasType)
HXLINE(2530)		bool _hx_tmp = ::hx::IsNotEq( value,this->_hx___textEngine->antiAliasType );
HXLINE(2535)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2540_get_autoSize)
HXDLIN(2540)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2544_set_autoSize)
HXLINE(2545)		if (::hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(2547)			this->_hx___dirty = true;
HXLINE(2548)			this->_hx___layoutDirty = true;
HXLINE(2549)			if (!(this->_hx___renderDirty)) {
HXLINE(2549)				this->_hx___renderDirty = true;
HXDLIN(2549)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2552)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2557_get_background)
HXDLIN(2557)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

bool TextField_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2561_set_background)
HXLINE(2562)		if ((value != this->_hx___textEngine->background)) {
HXLINE(2564)			this->_hx___dirty = true;
HXLINE(2565)			if (!(this->_hx___renderDirty)) {
HXLINE(2565)				this->_hx___renderDirty = true;
HXDLIN(2565)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2568)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

int TextField_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2573_get_backgroundColor)
HXDLIN(2573)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

int TextField_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2577_set_backgroundColor)
HXLINE(2578)		if ((value != this->_hx___textEngine->backgroundColor)) {
HXLINE(2580)			this->_hx___dirty = true;
HXLINE(2581)			if (!(this->_hx___renderDirty)) {
HXLINE(2581)				this->_hx___renderDirty = true;
HXDLIN(2581)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2584)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2589_get_border)
HXDLIN(2589)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2593_set_border)
HXLINE(2594)		if ((value != this->_hx___textEngine->border)) {
HXLINE(2596)			this->_hx___dirty = true;
HXLINE(2597)			if (!(this->_hx___renderDirty)) {
HXLINE(2597)				this->_hx___renderDirty = true;
HXDLIN(2597)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2600)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::get_borderColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2605_get_borderColor)
HXDLIN(2605)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2609_set_borderColor)
HXLINE(2610)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(2612)			this->_hx___dirty = true;
HXLINE(2613)			if (!(this->_hx___renderDirty)) {
HXLINE(2613)				this->_hx___renderDirty = true;
HXDLIN(2613)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2616)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2620_get_bottomScrollV)
HXLINE(2621)		this->_hx___updateLayout();
HXLINE(2623)		return this->_hx___textEngine->get_bottomScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2628_get_caretIndex)
HXDLIN(2628)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2633_get_defaultTextFormat)
HXDLIN(2633)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2637_set_defaultTextFormat)
HXLINE(2638)		this->_hx___textFormat->_hx___merge(value);
HXLINE(2640)		this->_hx___layoutDirty = true;
HXLINE(2641)		this->_hx___dirty = true;
HXLINE(2642)		if (!(this->_hx___renderDirty)) {
HXLINE(2642)			this->_hx___renderDirty = true;
HXDLIN(2642)			this->_hx___setParentRenderDirty();
            		}
HXLINE(2644)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2649_get_displayAsPassword)
HXDLIN(2649)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2653_set_displayAsPassword)
HXLINE(2654)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(2656)			this->_hx___dirty = true;
HXLINE(2657)			this->_hx___layoutDirty = true;
HXLINE(2658)			if (!(this->_hx___renderDirty)) {
HXLINE(2658)				this->_hx___renderDirty = true;
HXDLIN(2658)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2660)			this->_hx___displayAsPassword = value;
HXLINE(2661)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2664)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2669_get_embedFonts)
HXDLIN(2669)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2681_set_embedFonts)
HXDLIN(2681)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2686_get_gridFitType)
HXDLIN(2686)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2698_set_gridFitType)
HXDLIN(2698)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2702_get_height)
HXLINE(2703)		this->_hx___updateLayout();
HXLINE(2704)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2704)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2708_set_height)
HXLINE(2709)		if ((value != this->_hx___textEngine->height)) {
HXLINE(2711)			this->_hx___setTransformDirty();
HXLINE(2712)			this->_hx___dirty = true;
HXLINE(2713)			this->_hx___layoutDirty = true;
HXLINE(2714)			if (!(this->_hx___renderDirty)) {
HXLINE(2714)				this->_hx___renderDirty = true;
HXDLIN(2714)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2716)			this->_hx___textEngine->height = value;
            		}
HXLINE(2719)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2719)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2727_get_htmlText)
HXDLIN(2727)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2732_set_htmlText)
HXLINE(2733)		bool _hx_tmp;
HXDLIN(2733)		if (this->_hx___isHTML) {
HXLINE(2733)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2733)			_hx_tmp = true;
            		}
HXDLIN(2733)		if (_hx_tmp) {
HXLINE(2735)			this->_hx___dirty = true;
HXLINE(2736)			this->_hx___layoutDirty = true;
HXLINE(2737)			if (!(this->_hx___renderDirty)) {
HXLINE(2737)				this->_hx___renderDirty = true;
HXDLIN(2737)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2740)		this->_hx___isHTML = true;
HXLINE(2746)		value = ::openfl::_internal::formats::html::HTMLParser_obj::parse(value,this->_hx___textFormat,this->_hx___textEngine->textFormatRanges);
HXLINE(2776)		this->_hx___updateText(value);
HXLINE(2778)		this->_hx___updateScrollV();
HXLINE(2780)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2784_get_length)
HXLINE(2785)		if (::hx::IsNotNull( this->_hx___text )) {
HXLINE(2787)			return this->_hx___text.length;
            		}
HXLINE(2790)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2795_get_maxChars)
HXDLIN(2795)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2799_set_maxChars)
HXLINE(2800)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(2802)			this->_hx___textEngine->maxChars = value;
HXLINE(2804)			this->_hx___dirty = true;
HXLINE(2805)			this->_hx___layoutDirty = true;
HXLINE(2806)			if (!(this->_hx___renderDirty)) {
HXLINE(2806)				this->_hx___renderDirty = true;
HXDLIN(2806)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2809)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2813_get_maxScrollH)
HXLINE(2814)		this->_hx___updateLayout();
HXLINE(2816)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2820_get_maxScrollV)
HXLINE(2821)		this->_hx___updateLayout();
HXLINE(2823)		return this->_hx___textEngine->get_maxScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2828_get_mouseWheelEnabled)
HXDLIN(2828)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::set_mouseWheelEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2833_set_mouseWheelEnabled)
HXDLIN(2833)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2838_get_multiline)
HXDLIN(2838)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2842_set_multiline)
HXLINE(2843)		if ((value != this->_hx___textEngine->multiline)) {
HXLINE(2845)			this->_hx___dirty = true;
HXLINE(2846)			this->_hx___layoutDirty = true;
HXLINE(2847)			this->_hx___updateText(this->_hx___text);
HXLINE(2849)			this->_hx___updateScrollH();
HXLINE(2850)			if (!(this->_hx___renderDirty)) {
HXLINE(2850)				this->_hx___renderDirty = true;
HXDLIN(2850)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2853)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2857_get_numLines)
HXLINE(2858)		this->_hx___updateLayout();
HXLINE(2860)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2865_get_restrict)
HXDLIN(2865)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2869_set_restrict)
HXLINE(2870)		if ((this->_hx___textEngine->restrict != value)) {
HXLINE(2872)			this->_hx___textEngine->set_restrict(value);
HXLINE(2873)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2876)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2881_get_scrollH)
HXDLIN(2881)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2885_set_scrollH)
HXLINE(2886)		this->_hx___updateLayout();
HXLINE(2888)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2888)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2889)		if ((value < 0)) {
HXLINE(2889)			value = 0;
            		}
HXLINE(2891)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2893)			this->_hx___dirty = true;
HXLINE(2894)			if (!(this->_hx___renderDirty)) {
HXLINE(2894)				this->_hx___renderDirty = true;
HXDLIN(2894)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2895)			this->_hx___textEngine->scrollH = value;
HXLINE(2896)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2899)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2904_get_scrollV)
HXDLIN(2904)		return this->_hx___textEngine->get_scrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2908_set_scrollV)
HXLINE(2909)		this->_hx___updateLayout();
HXLINE(2911)		bool _hx_tmp;
HXDLIN(2911)		if ((value > 0)) {
HXLINE(2911)			_hx_tmp = (value != this->_hx___textEngine->get_scrollV());
            		}
            		else {
HXLINE(2911)			_hx_tmp = false;
            		}
HXDLIN(2911)		if (_hx_tmp) {
HXLINE(2913)			this->_hx___dirty = true;
HXLINE(2914)			if (!(this->_hx___renderDirty)) {
HXLINE(2914)				this->_hx___renderDirty = true;
HXDLIN(2914)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2915)			this->_hx___textEngine->set_scrollV(value);
HXLINE(2916)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2919)		return this->_hx___textEngine->get_scrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2924_get_selectable)
HXDLIN(2924)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2928_set_selectable)
HXLINE(2929)		bool _hx_tmp;
HXDLIN(2929)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(2929)			_hx_tmp = ::hx::IsEq( this->get_type(),1 );
            		}
            		else {
HXLINE(2929)			_hx_tmp = false;
            		}
HXDLIN(2929)		if (_hx_tmp) {
HXLINE(2931)			bool _hx_tmp;
HXDLIN(2931)			if (::hx::IsNotNull( this->stage )) {
HXLINE(2931)				_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(2931)				_hx_tmp = false;
            			}
HXDLIN(2931)			if (_hx_tmp) {
HXLINE(2933)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(2935)				if (!(value)) {
HXLINE(2937)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(2941)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

int TextField_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2946_get_selectionBeginIndex)
HXDLIN(2946)		return ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

int TextField_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2951_get_selectionEndIndex)
HXDLIN(2951)		return ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2956_get_sharpness)
HXDLIN(2956)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2960_set_sharpness)
HXLINE(2961)		if ((value != this->_hx___textEngine->sharpness)) {
HXLINE(2963)			this->_hx___dirty = true;
HXLINE(2964)			if (!(this->_hx___renderDirty)) {
HXLINE(2964)				this->_hx___renderDirty = true;
HXDLIN(2964)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2967)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

bool TextField_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2972_get_tabEnabled)
HXDLIN(2972)		if (::hx::IsNull( this->_hx___tabEnabled )) {
HXDLIN(2972)			return ::hx::IsEq( this->_hx___textEngine->type,1 );
            		}
            		else {
HXDLIN(2972)			return ( (bool)(this->_hx___tabEnabled) );
            		}
HXDLIN(2972)		return false;
            	}


::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2977_get_text)
HXDLIN(2977)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2981_set_text)
HXLINE(2982)		bool _hx_tmp;
HXDLIN(2982)		if (!(this->_hx___isHTML)) {
HXLINE(2982)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2982)			_hx_tmp = true;
            		}
HXDLIN(2982)		if (_hx_tmp) {
HXLINE(2984)			this->_hx___dirty = true;
HXLINE(2985)			this->_hx___layoutDirty = true;
HXLINE(2986)			if (!(this->_hx___renderDirty)) {
HXLINE(2986)				this->_hx___renderDirty = true;
HXDLIN(2986)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(2990)			return value;
            		}
HXLINE(2993)		if ((this->_hx___textEngine->textFormatRanges->get_length() > 1)) {
HXLINE(2995)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2995)			( ( ::openfl::_Vector::ObjectVector)(this1) )->splice(1,(this->_hx___textEngine->textFormatRanges->get_length() - 1));
            		}
HXLINE(2998)		::String utfValue = value;
HXLINE(2999)		 ::openfl::_internal::text::TextFormatRange range = this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(3000)		range->format = this->_hx___textFormat;
HXLINE(3001)		range->start = 0;
HXLINE(3002)		range->end = utfValue.length;
HXLINE(3004)		this->_hx___isHTML = false;
HXLINE(3006)		this->_hx___updateText(value);
HXLINE(3007)		this->_hx___updateScrollV();
HXLINE(3009)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

int TextField_obj::get_textColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3014_get_textColor)
HXDLIN(3014)		return ( (int)(this->_hx___textFormat->color) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

int TextField_obj::set_textColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3018_set_textColor)
HXLINE(3019)		if (::hx::IsNotEq( value,this->_hx___textFormat->color )) {
HXLINE(3021)			this->_hx___dirty = true;
HXLINE(3022)			if (!(this->_hx___renderDirty)) {
HXLINE(3022)				this->_hx___renderDirty = true;
HXDLIN(3022)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3025)		{
HXLINE(3025)			 ::Dynamic range = this->_hx___textEngine->textFormatRanges->iterator();
HXDLIN(3025)			while(( (bool)(range->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3025)				 ::openfl::_internal::text::TextFormatRange range1 = ( ( ::openfl::_internal::text::TextFormatRange)(range->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3027)				range1->format->color = value;
            			}
            		}
HXLINE(3030)		return ( (int)((this->_hx___textFormat->color = value)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3034_get_textWidth)
HXLINE(3035)		this->_hx___updateLayout();
HXLINE(3036)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3040_get_textHeight)
HXLINE(3041)		this->_hx___updateLayout();
HXLINE(3042)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3047_get_type)
HXDLIN(3047)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3051_set_type)
HXLINE(3052)		if (::hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(3054)			if (::hx::IsEq( value,1 )) {
HXLINE(3056)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(3058)				this->this_onFocusIn(null());
HXLINE(3059)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(3063)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(3065)				this->_hx___stopTextInput();
HXLINE(3066)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(3069)			this->_hx___dirty = true;
HXLINE(3070)			this->_hx___layoutDirty = true;
HXLINE(3071)			if (!(this->_hx___renderDirty)) {
HXLINE(3071)				this->_hx___renderDirty = true;
HXDLIN(3071)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3074)		return (this->_hx___textEngine->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3078_get_width)
HXLINE(3079)		this->_hx___updateLayout();
HXLINE(3080)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3084_set_width)
HXLINE(3085)		if ((value != this->_hx___textEngine->width)) {
HXLINE(3087)			this->_hx___setTransformDirty();
HXLINE(3088)			this->_hx___dirty = true;
HXLINE(3089)			this->_hx___layoutDirty = true;
HXLINE(3090)			if (!(this->_hx___renderDirty)) {
HXLINE(3090)				this->_hx___renderDirty = true;
HXDLIN(3090)				this->_hx___setParentRenderDirty();
            			}
HXLINE(3092)			this->_hx___textEngine->width = value;
            		}
HXLINE(3095)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3100_get_wordWrap)
HXDLIN(3100)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3104_set_wordWrap)
HXLINE(3105)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(3107)			this->_hx___dirty = true;
HXLINE(3108)			this->_hx___layoutDirty = true;
HXLINE(3109)			if (!(this->_hx___renderDirty)) {
HXLINE(3109)				this->_hx___renderDirty = true;
HXDLIN(3109)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3112)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

Float TextField_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3117_get_x)
HXDLIN(3117)		return (this->_hx___transform->tx + this->_hx___offsetX);
            	}


Float TextField_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3121_set_x)
HXLINE(3122)		if ((value != (this->_hx___transform->tx + this->_hx___offsetX))) {
HXLINE(3122)			this->_hx___setTransformDirty();
            		}
HXLINE(3123)		return (this->_hx___transform->tx = (value - this->_hx___offsetX));
            	}


Float TextField_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3128_get_y)
HXDLIN(3128)		return (this->_hx___transform->ty + this->_hx___offsetY);
            	}


Float TextField_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3132_set_y)
HXLINE(3133)		if ((value != (this->_hx___transform->ty + this->_hx___offsetY))) {
HXLINE(3133)			this->_hx___setTransformDirty();
            		}
HXLINE(3134)		return (this->_hx___transform->ty = (value - this->_hx___offsetY));
            	}


void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3139_stage_onMouseMove)
HXLINE(3140)		if (::hx::IsNull( this->stage )) {
HXLINE(3140)			return;
            		}
HXLINE(3142)		bool _hx_tmp;
HXDLIN(3142)		if (this->get_selectable()) {
HXLINE(3142)			_hx_tmp = (this->_hx___selectionIndex >= 0);
            		}
            		else {
HXLINE(3142)			_hx_tmp = false;
            		}
HXDLIN(3142)		if (_hx_tmp) {
HXLINE(3144)			this->_hx___updateLayout();
HXLINE(3146)			Float position = this->get_mouseX();
HXDLIN(3146)			Float position1 = (position + this->get_scrollH());
HXDLIN(3146)			int position2 = this->_hx___getPosition(position1,this->get_mouseY());
HXLINE(3148)			if ((position2 != this->_hx___caretIndex)) {
HXLINE(3150)				this->_hx___caretIndex = position2;
HXLINE(3152)				bool setDirty = true;
HXLINE(3165)				if (setDirty) {
HXLINE(3167)					this->_hx___dirty = true;
HXLINE(3168)					if (!(this->_hx___renderDirty)) {
HXLINE(3168)						this->_hx___renderDirty = true;
HXDLIN(3168)						this->_hx___setParentRenderDirty();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3175_stage_onMouseUp)
HXLINE(3176)		if (::hx::IsNull( this->stage )) {
HXLINE(3176)			return;
            		}
HXLINE(3178)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(3179)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(3181)		if (::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(3183)			this->_hx___getWorldTransform();
HXLINE(3184)			this->_hx___updateLayout();
HXLINE(3186)			Float upPos = this->get_mouseX();
HXDLIN(3186)			Float upPos1 = (upPos + this->get_scrollH());
HXDLIN(3186)			int upPos2 = this->_hx___getPosition(upPos1,this->get_mouseY());
HXLINE(3187)			int leftPos = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___selectionIndex) ),( (Float)(upPos2) )));
HXLINE(3188)			int rightPos = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___selectionIndex) ),( (Float)(upPos2) )));
HXLINE(3193)			this->_hx___selectionIndex = leftPos;
HXLINE(3194)			this->_hx___caretIndex = rightPos;
HXLINE(3196)			if (this->_hx___inputEnabled) {
HXLINE(3198)				this->this_onFocusIn(null());
HXLINE(3200)				this->_hx___stopCursorTimer();
HXLINE(3201)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3215_this_onAddedToStage)
HXDLIN(3215)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3220_this_onFocusIn)
HXDLIN(3220)		bool _hx_tmp;
HXDLIN(3220)		bool _hx_tmp1;
HXDLIN(3220)		if (::hx::IsEq( this->get_type(),1 )) {
HXDLIN(3220)			_hx_tmp1 = ::hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(3220)			_hx_tmp1 = false;
            		}
HXDLIN(3220)		if (_hx_tmp1) {
HXDLIN(3220)			_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN(3220)			_hx_tmp = false;
            		}
HXDLIN(3220)		if (_hx_tmp) {
HXLINE(3222)			this->_hx___startTextInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3227_this_onFocusOut)
HXLINE(3228)		this->_hx___stopCursorTimer();
HXLINE(3232)		bool _hx_tmp;
HXDLIN(3232)		if (::hx::IsNotNull( event->relatedObject )) {
HXLINE(3232)			_hx_tmp = !(::Std_obj::isOfType(event->relatedObject,( ( ::Dynamic)(::hx::ClassOf< ::openfl::text::TextField >()) )));
            		}
            		else {
HXLINE(3232)			_hx_tmp = true;
            		}
HXDLIN(3232)		if (_hx_tmp) {
HXLINE(3234)			this->_hx___stopTextInput();
            		}
            		else {
HXLINE(3238)			if (::hx::IsNotNull( this->stage )) {
HXLINE(3241)				this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(3242)				this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
            			}
HXLINE(3246)			this->_hx___inputEnabled = false;
            		}
HXLINE(3249)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3251)			this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3252)			this->_hx___dirty = true;
HXLINE(3253)			if (!(this->_hx___renderDirty)) {
HXLINE(3253)				this->_hx___renderDirty = true;
HXDLIN(3253)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3260_this_onKeyDown)
HXDLIN(3260)		bool _hx_tmp;
HXDLIN(3260)		bool _hx_tmp1;
HXDLIN(3260)		bool _hx_tmp2;
HXDLIN(3260)		if (this->get_selectable()) {
HXDLIN(3260)			_hx_tmp2 = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXDLIN(3260)			_hx_tmp2 = false;
            		}
HXDLIN(3260)		if (_hx_tmp2) {
HXDLIN(3260)			_hx_tmp1 = (event->keyCode == 67);
            		}
            		else {
HXDLIN(3260)			_hx_tmp1 = false;
            		}
HXDLIN(3260)		if (_hx_tmp1) {
HXDLIN(3260)			if (!(event->commandKey)) {
HXDLIN(3260)				_hx_tmp = event->ctrlKey;
            			}
            			else {
HXDLIN(3260)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN(3260)			_hx_tmp = false;
            		}
HXDLIN(3260)		if (_hx_tmp) {
HXLINE(3262)			if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3264)				::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onKeyDown,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3271_this_onMouseDown)
HXLINE(3272)		bool _hx_tmp;
HXDLIN(3272)		if (!(this->get_selectable())) {
HXLINE(3272)			_hx_tmp = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXLINE(3272)			_hx_tmp = false;
            		}
HXDLIN(3272)		if (_hx_tmp) {
HXLINE(3272)			return;
            		}
HXLINE(3274)		this->_hx___updateLayout();
HXLINE(3276)		Float _hx_tmp1 = this->get_mouseX();
HXDLIN(3276)		Float _hx_tmp2 = (_hx_tmp1 + this->get_scrollH());
HXDLIN(3276)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp2,this->get_mouseY());
HXLINE(3277)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3280)		{
HXLINE(3281)			this->_hx___dirty = true;
HXLINE(3282)			if (!(this->_hx___renderDirty)) {
HXLINE(3282)				this->_hx___renderDirty = true;
HXDLIN(3282)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3285)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(3286)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::this_onMouseWheel( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3291_this_onMouseWheel)
HXDLIN(3291)		if (this->get_mouseWheelEnabled()) {
HXLINE(3293)			 ::openfl::text::TextField _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3293)			int _hx_tmp = _g->get_scrollV();
HXDLIN(3293)			_g->set_scrollV((_hx_tmp - event->delta));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseWheel,(void))

void TextField_obj::this_onDoubleClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3299_this_onDoubleClick)
HXDLIN(3299)		if (this->get_selectable()) {
HXLINE(3300)			this->_hx___updateLayout();
HXLINE(3302)			::Array< ::String > delimiters = ::Array_obj< ::String >::fromData( _hx_array_data_efd5a8ca_161,13);
HXLINE(3304)			::String txtStr = this->_hx___text;
HXLINE(3305)			int leftPos = -1;
HXLINE(3306)			int rightPos = txtStr.length;
HXLINE(3307)			int pos = 0;
HXLINE(3308)			int startPos = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(1) )));
HXLINE(3309)			bool _hx_tmp;
HXDLIN(3309)			bool _hx_tmp1;
HXDLIN(3309)			if ((txtStr.length > 0)) {
HXLINE(3309)				_hx_tmp1 = (this->_hx___caretIndex >= 0);
            			}
            			else {
HXLINE(3309)				_hx_tmp1 = false;
            			}
HXDLIN(3309)			if (_hx_tmp1) {
HXLINE(3309)				_hx_tmp = (rightPos >= this->_hx___caretIndex);
            			}
            			else {
HXLINE(3309)				_hx_tmp = false;
            			}
HXDLIN(3309)			if (_hx_tmp) {
HXLINE(3311)				{
HXLINE(3311)					int _g = 0;
HXDLIN(3311)					while((_g < delimiters->length)){
HXLINE(3311)						::String c = delimiters->__get(_g);
HXDLIN(3311)						_g = (_g + 1);
HXLINE(3313)						pos = txtStr.lastIndexOf(c,(startPos - 1));
HXLINE(3314)						if ((pos > leftPos)) {
HXLINE(3314)							leftPos = (pos + 1);
            						}
HXLINE(3316)						pos = txtStr.indexOf(c,startPos);
HXLINE(3317)						bool _hx_tmp;
HXDLIN(3317)						if ((pos < rightPos)) {
HXLINE(3317)							_hx_tmp = (pos != -1);
            						}
            						else {
HXLINE(3317)							_hx_tmp = false;
            						}
HXDLIN(3317)						if (_hx_tmp) {
HXLINE(3317)							rightPos = pos;
            						}
            					}
            				}
HXLINE(3320)				if ((leftPos != rightPos)) {
HXLINE(3322)					this->setSelection(leftPos,rightPos);
HXLINE(3324)					bool setDirty = true;
HXLINE(3335)					if (setDirty) {
HXLINE(3336)						this->_hx___dirty = true;
HXLINE(3337)						if (!(this->_hx___renderDirty)) {
HXLINE(3337)							this->_hx___renderDirty = true;
HXDLIN(3337)							this->_hx___setParentRenderDirty();
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onDoubleClick,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3348_window_onKeyDown)
HXDLIN(3348)		switch((int)(key)){
            			case (int)8: {
HXLINE(3366)				bool _hx_tmp;
HXDLIN(3366)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3366)					_hx_tmp = (this->_hx___caretIndex > 0);
            				}
            				else {
HXLINE(3366)					_hx_tmp = false;
            				}
HXDLIN(3366)				if (_hx_tmp) {
HXLINE(3368)					this->_hx___selectionIndex = (this->_hx___caretIndex - 1);
            				}
HXLINE(3371)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3373)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3374)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3376)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(3576)				if (this->get_selectable()) {
HXLINE(3577)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(3579)						this->_hx___caretIndex = this->_hx___text.length;
HXLINE(3580)						this->_hx___selectionIndex = 0;
            					}
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(3526)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(3528)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3530)						::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            					}
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(3552)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(3554)					if (::hx::IsNotNull( ::lime::_hx_system::Clipboard_obj::get_text() )) {
HXLINE(3556)						 ::openfl::events::TextEvent te =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,::lime::_hx_system::Clipboard_obj::get_text());
HXLINE(3558)						this->dispatchEvent(te);
HXLINE(3560)						if (!(te->isDefaultPrevented())) {
HXLINE(3562)							this->_hx___replaceSelectedText(::lime::_hx_system::Clipboard_obj::get_text(),true);
HXLINE(3564)							this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            						}
            					}
            				}
            				else {
HXLINE(3571)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3571)					( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = this->_hx___text.length;
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(3537)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(3539)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3541)						::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(3543)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3544)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(3380)				bool _hx_tmp;
HXDLIN(3380)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3380)					_hx_tmp = (this->_hx___caretIndex < this->_hx___text.length);
            				}
            				else {
HXLINE(3380)					_hx_tmp = false;
            				}
HXDLIN(3380)				if (_hx_tmp) {
HXLINE(3382)					this->_hx___selectionIndex = (this->_hx___caretIndex + 1);
            				}
HXLINE(3385)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3387)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3388)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3390)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(3514)				if (this->get_selectable()) {
HXLINE(3515)					this->_hx___caretBeginningOfLine();
HXLINE(3516)					this->_hx___stopCursorTimer();
HXLINE(3517)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741901: {
HXLINE(3519)				if (this->get_selectable()) {
HXLINE(3520)					this->_hx___caretEndOfLine();
HXLINE(3521)					this->_hx___stopCursorTimer();
HXLINE(3522)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741903: {
HXLINE(3426)				if (this->get_selectable()) {
HXLINE(3427)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(3429)						this->_hx___caretEndOfLine();
HXLINE(3431)						if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3433)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
            					else {
HXLINE(3436)						if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3438)							this->_hx___caretNextCharacter();
            						}
            						else {
HXLINE(3442)							if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3444)								this->_hx___caretNextCharacter();
            							}
            							else {
HXLINE(3448)								this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            							}
HXLINE(3451)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
HXLINE(3454)					this->_hx___updateScrollH();
HXLINE(3455)					this->_hx___updateScrollV();
HXLINE(3457)					this->_hx___stopCursorTimer();
HXLINE(3458)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741904: {
HXLINE(3393)				if (this->get_selectable()) {
HXLINE(3394)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(3396)						this->_hx___caretBeginningOfLine();
HXLINE(3398)						if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3400)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
            					else {
HXLINE(3403)						if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3405)							this->_hx___caretPreviousCharacter();
            						}
            						else {
HXLINE(3409)							if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3411)								this->_hx___caretPreviousCharacter();
            							}
            							else {
HXLINE(3415)								this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            							}
HXLINE(3418)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
HXLINE(3421)					this->_hx___updateScrollH();
HXLINE(3422)					this->_hx___updateScrollV();
HXLINE(3423)					this->_hx___stopCursorTimer();
HXLINE(3424)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741905: {
HXLINE(3460)				if (this->get_selectable()) {
HXLINE(3461)					if (!(this->_hx___textEngine->multiline)) {
HXLINE(3461)						return;
            					}
HXLINE(3463)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3465)						this->_hx___caretNextLine(null(),null());
            					}
            					else {
HXLINE(3469)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3471)							this->_hx___caretNextLine(null(),null());
            						}
            						else {
HXLINE(3475)							int lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) ))));
HXLINE(3476)							this->_hx___caretNextLine(lineIndex,::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) ))));
            						}
HXLINE(3479)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3482)					this->_hx___updateScrollV();
HXLINE(3484)					this->_hx___stopCursorTimer();
HXLINE(3485)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741906: {
HXLINE(3487)				if (this->get_selectable()) {
HXLINE(3488)					if (!(this->_hx___textEngine->multiline)) {
HXLINE(3488)						return;
            					}
HXLINE(3490)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3492)						this->_hx___caretPreviousLine(null(),null());
            					}
            					else {
HXLINE(3496)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3498)							this->_hx___caretPreviousLine(null(),null());
            						}
            						else {
HXLINE(3502)							int lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) ))));
HXLINE(3503)							this->_hx___caretPreviousLine(lineIndex,::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) ))));
            						}
HXLINE(3506)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3509)					this->_hx___updateScrollV();
HXLINE(3511)					this->_hx___stopCursorTimer();
HXLINE(3512)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(3351)				if (this->_hx___textEngine->multiline) {
HXLINE(3353)					 ::openfl::events::TextEvent te =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,HX_("\n",0a,00,00,00));
HXLINE(3355)					this->dispatchEvent(te);
HXLINE(3357)					if (!(te->isDefaultPrevented())) {
HXLINE(3359)						this->_hx___replaceSelectedText(HX_("\n",0a,00,00,00),true);
HXLINE(3361)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3589_window_onTextInput)
HXLINE(3590)		this->_hx___replaceSelectedText(value,true);
HXLINE(3593)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::haxe::ds::StringMap TextField_obj::_hx___missingFontWarning;


::hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	::hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextField_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return ::hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return ::hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_border() ); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"__text") ) { return ::hx::Val( _hx___text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollH() ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollV() ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return ::hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_htmlText() ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxChars() ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_numLines() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return ::hx::Val( _hx___bounds ); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return ::hx::Val( _hx___isHTML ); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return ::hx::Val( _hx___symbol ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return ::hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_sharpness() ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textColor() ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textWidth() ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return ::hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return ::hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return ::hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_background() ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_caretIndex() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollH() ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollV() ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textHeight() ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return ::hx::Val( _hx___htmlText ); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return ::hx::Val( appendText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return ::hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGroup") ) { return ::hx::Val( _hx___getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return ::hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return ::hx::Val( get_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return ::hx::Val( set_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_borderColor() ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_gridFitType() ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { return ::hx::Val( _hx___domRender ); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return ::hx::Val( getLineText_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return ::hx::Val( replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return ::hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return ::hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return ::hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return ::hx::Val( get_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return ::hx::Val( set_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return ::hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return ::hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return ::hx::Val( _hx___caretIndex ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return ::hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return ::hx::Val( _hx___textEngine ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return ::hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return ::hx::Val( setSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return ::hx::Val( _hx___fromSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getAdvance") ) { return ::hx::Val( _hx___getAdvance_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return ::hx::Val( _hx___updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return ::hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return ::hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return ::hx::Val( get_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return ::hx::Val( set_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return ::hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return ::hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return ::hx::Val( get_numLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return ::hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return ::hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return ::hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return ::hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_antiAliasType() ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottomScrollV() ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return ::hx::Val( _hx___cursorTimer ); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return ::hx::Val( _hx___layoutDirty ); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return ::hx::Val( getLineLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return ::hx::Val( getLineOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return ::hx::Val( getTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return ::hx::Val( setTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enableInput") ) { return ::hx::Val( _hx___enableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return ::hx::Val( _hx___getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return ::hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return ::hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__replaceText") ) { return ::hx::Val( _hx___replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return ::hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return ::hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return ::hx::Val( get_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return ::hx::Val( set_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return ::hx::Val( get_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return ::hx::Val( set_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return ::hx::Val( get_textWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return ::hx::Val( _hx___inputEnabled ); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return ::hx::Val( getLineMetrics_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disableInput") ) { return ::hx::Val( _hx___disableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return ::hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return ::hx::Val( _hx___renderGLMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return ::hx::Val( _hx___updateLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return ::hx::Val( get_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return ::hx::Val( set_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return ::hx::Val( get_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return ::hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return ::hx::Val( get_maxScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return ::hx::Val( get_maxScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return ::hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return ::hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return ::hx::Val( get_tabEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return ::hx::Val( get_textHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return ::hx::Val( this_onFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onKeyDown") ) { return ::hx::Val( this_onKeyDown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_backgroundColor() ); }
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return ::hx::Val( _hx___caretNextLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return ::hx::Val( _hx___stopTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollH") ) { return ::hx::Val( _hx___updateScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollV") ) { return ::hx::Val( _hx___updateScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return ::hx::Val( get_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return ::hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return ::hx::Val( get_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return ::hx::Val( set_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return ::hx::Val( stage_onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return ::hx::Val( this_onFocusOut_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return ::hx::Val( _hx___selectionIndex ); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return ::hx::Val( _hx___caretEndOfLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return ::hx::Val( _hx___renderDOMClear_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return ::hx::Val( _hx___startTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return ::hx::Val( this_onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return ::hx::Val( window_onKeyDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_defaultTextFormat() ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_mouseWheelEnabled() ); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionEndIndex() ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return ::hx::Val( getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__allowMouseFocus") ) { return ::hx::Val( _hx___allowMouseFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return ::hx::Val( _hx___stopCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return ::hx::Val( get_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return ::hx::Val( set_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return ::hx::Val( get_bottomScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return ::hx::Val( stage_onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseWheel") ) { return ::hx::Val( this_onMouseWheel_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return ::hx::Val( getLineIndexOfChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return ::hx::Val( getParagraphLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return ::hx::Val( _hx___startCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return ::hx::Val( _hx___updateTransforms_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onDoubleClick") ) { return ::hx::Val( this_onDoubleClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return ::hx::Val( window_onTextInput_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionBeginIndex() ); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return ::hx::Val( _hx___displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return ::hx::Val( _hx___mouseWheelEnabled ); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return ::hx::Val( getCharIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return ::hx::Val( getLineIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return ::hx::Val( replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return ::hx::Val( _hx___caretPreviousLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCharBoundaries") ) { return ::hx::Val( _hx___getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return ::hx::Val( _hx___updateCacheBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return ::hx::Val( get_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return ::hx::Val( set_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return ::hx::Val( this_onAddedToStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return ::hx::Val( _hx___caretNextCharacter_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__replaceSelectedText") ) { return ::hx::Val( _hx___replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return ::hx::Val( _hx___shouldCacheHardware_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return ::hx::Val( get_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return ::hx::Val( set_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return ::hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return ::hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return ::hx::Val( get_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return ::hx::Val( set_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return ::hx::Val( get_selectionEndIndex_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return ::hx::Val( _hx___caretBeginningOfLine_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return ::hx::Val( getFirstCharInParagraph_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return ::hx::Val( get_selectionBeginIndex_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return ::hx::Val( _hx___caretPreviousCharacter_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return ::hx::Val( _hx___getCharIndexOnDifferentLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = ( _hx___defaultTextFormat ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { outValue = ( _hx___missingFontWarning ); return true; }
	}
	return false;
}

::hx::Val TextField_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_border(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollH(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollV(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoSize(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_htmlText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::DynamicTextSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_sharpness(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_background(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_borderColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_gridFitType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { _hx___domRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::_internal::text::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_antiAliasType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_backgroundColor(inValue.Cast< int >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_defaultTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_mouseWheelEnabled(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { _hx___missingFontWarning=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("antiAliasType",68,c4,fa,e7));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("bottomScrollV",fe,f7,87,8b));
	outFields->push(HX_("caretIndex",8f,b6,5b,dd));
	outFields->push(HX_("defaultTextFormat",e5,c7,e0,0a));
	outFields->push(HX_("displayAsPassword",0f,cb,96,ea));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("gridFitType",05,f3,13,b4));
	outFields->push(HX_("htmlText",b8,1f,38,10));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("maxScrollH",57,ad,fc,9a));
	outFields->push(HX_("maxScrollV",65,ad,fc,9a));
	outFields->push(HX_("mouseWheelEnabled",eb,16,54,65));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("scrollH",9b,33,d8,30));
	outFields->push(HX_("scrollV",a9,33,d8,30));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("selectionBeginIndex",95,7f,17,d7));
	outFields->push(HX_("selectionEndIndex",a3,0d,42,4b));
	outFields->push(HX_("sharpness",81,22,25,1b));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textColor",76,01,4a,e3));
	outFields->push(HX_("textHeight",74,88,3c,39));
	outFields->push(HX_("textWidth",19,46,50,63));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("__bounds",95,f1,4c,0e));
	outFields->push(HX_("__caretIndex",af,31,ef,15));
	outFields->push(HX_("__cursorTimer",ef,59,8f,e1));
	outFields->push(HX_("__dirty",f2,a8,2e,44));
	outFields->push(HX_("__displayAsPassword",ef,f3,86,9d));
	outFields->push(HX_("__domRender",58,38,ba,4f));
	outFields->push(HX_("__inputEnabled",b7,e0,1d,37));
	outFields->push(HX_("__isHTML",75,61,94,0a));
	outFields->push(HX_("__layoutDirty",e8,e9,31,d3));
	outFields->push(HX_("__mouseWheelEnabled",cb,3f,44,18));
	outFields->push(HX_("__offsetX",45,5a,b3,58));
	outFields->push(HX_("__offsetY",46,5a,b3,58));
	outFields->push(HX_("__selectionIndex",46,0a,c3,7d));
	outFields->push(HX_("__showCursor",d3,ae,f0,e0));
	outFields->push(HX_("__symbol",78,1a,0d,97));
	outFields->push(HX_("__text",cd,2f,f2,fb));
	outFields->push(HX_("__htmlText",d8,92,70,b3));
	outFields->push(HX_("__textEngine",6f,43,08,6c));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextField_obj,_hx___bounds),HX_("__bounds",95,f1,4c,0e)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_("__caretIndex",af,31,ef,15)},
	{::hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_("__cursorTimer",ef,59,8f,e1)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_("__dirty",f2,a8,2e,44)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_("__displayAsPassword",ef,f3,86,9d)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___domRender),HX_("__domRender",58,38,ba,4f)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_("__inputEnabled",b7,e0,1d,37)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_("__isHTML",75,61,94,0a)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_("__layoutDirty",e8,e9,31,d3)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_("__mouseWheelEnabled",cb,3f,44,18)},
	{::hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_("__offsetX",45,5a,b3,58)},
	{::hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_("__offsetY",46,5a,b3,58)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_("__selectionIndex",46,0a,c3,7d)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_("__showCursor",d3,ae,f0,e0)},
	{::hx::fsObject /*  ::openfl::_internal::symbols::DynamicTextSymbol */ ,(int)offsetof(TextField_obj,_hx___symbol),HX_("__symbol",78,1a,0d,97)},
	{::hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_("__text",cd,2f,f2,fb)},
	{::hx::fsString,(int)offsetof(TextField_obj,_hx___htmlText),HX_("__htmlText",d8,92,70,b3)},
	{::hx::fsObject /*  ::openfl::_internal::text::TextEngine */ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_("__textEngine",6f,43,08,6c)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_("__defaultTextFormat",c5,f0,d0,bd)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &TextField_obj::_hx___missingFontWarning,HX_("__missingFontWarning",a7,0d,0e,1a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_("__bounds",95,f1,4c,0e),
	HX_("__caretIndex",af,31,ef,15),
	HX_("__cursorTimer",ef,59,8f,e1),
	HX_("__dirty",f2,a8,2e,44),
	HX_("__displayAsPassword",ef,f3,86,9d),
	HX_("__domRender",58,38,ba,4f),
	HX_("__inputEnabled",b7,e0,1d,37),
	HX_("__isHTML",75,61,94,0a),
	HX_("__layoutDirty",e8,e9,31,d3),
	HX_("__mouseWheelEnabled",cb,3f,44,18),
	HX_("__offsetX",45,5a,b3,58),
	HX_("__offsetY",46,5a,b3,58),
	HX_("__selectionIndex",46,0a,c3,7d),
	HX_("__showCursor",d3,ae,f0,e0),
	HX_("__symbol",78,1a,0d,97),
	HX_("__text",cd,2f,f2,fb),
	HX_("__htmlText",d8,92,70,b3),
	HX_("__textEngine",6f,43,08,6c),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("appendText",a7,cf,05,5b),
	HX_("getCharBoundaries",74,85,a1,8b),
	HX_("getCharIndexAtPoint",17,ee,9c,aa),
	HX_("getFirstCharInParagraph",f9,5c,3d,08),
	HX_("getLineIndexAtPoint",35,dc,50,98),
	HX_("getLineIndexOfChar",b5,68,99,a1),
	HX_("getLineLength",30,ec,21,d0),
	HX_("getLineMetrics",b9,ab,c6,f2),
	HX_("getLineOffset",dd,ee,59,91),
	HX_("getLineText",77,dd,16,b0),
	HX_("getParagraphLength",fe,0e,4e,c4),
	HX_("getTextFormat",fa,6b,f1,90),
	HX_("replaceSelectedText",fc,fe,33,bb),
	HX_("replaceText",01,6b,95,61),
	HX_("setSelection",4a,b8,6a,b2),
	HX_("setTextFormat",06,4e,f7,d5),
	HX_("__allowMouseFocus",3c,92,71,07),
	HX_("__caretBeginningOfLine",45,c9,47,fd),
	HX_("__caretEndOfLine",03,74,b1,5c),
	HX_("__caretNextCharacter",d3,7b,4f,ea),
	HX_("__caretNextLine",0a,68,ad,0d),
	HX_("__caretPreviousCharacter",8f,ce,6c,11),
	HX_("__caretPreviousLine",ce,0e,89,48),
	HX_("__disableInput",22,64,62,1d),
	HX_("__dispatch",da,41,9c,c1),
	HX_("__enableInput",67,4b,65,d1),
	HX_("__fromSymbol",82,2f,b5,6a),
	HX_("__getAdvance",ac,09,01,77),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__getCharBoundaries",54,ae,91,3e),
	HX_("__getCharIndexOnDifferentLine",08,76,0f,0a),
	HX_("__getCursor",ec,60,6b,e9),
	HX_("__getGroup",e9,35,04,9d),
	HX_("__getPosition",3f,a4,66,39),
	HX_("__hitTest",25,b1,cd,63),
	HX_("__hitTestMask",b1,14,fd,3b),
	HX_("__renderCairo",32,9e,42,55),
	HX_("__renderCanvas",ee,db,58,48),
	HX_("__renderDOM",ac,f5,83,fb),
	HX_("__renderDOMClear",41,dc,ee,79),
	HX_("__renderGL",1b,1e,14,56),
	HX_("__renderGLMask",a7,34,7c,b4),
	HX_("__replaceSelectedText",dc,1f,28,29),
	HX_("__replaceText",e1,ab,0d,aa),
	HX_("__shouldCacheHardware",b7,af,f5,89),
	HX_("__startCursorTimer",ed,46,a3,83),
	HX_("__startTextInput",7b,ae,85,aa),
	HX_("__stopCursorTimer",0d,cd,6c,26),
	HX_("__stopTextInput",9b,6c,cb,a1),
	HX_("__updateCacheBitmap",28,11,07,27),
	HX_("__updateLayout",b3,d8,3c,79),
	HX_("__updateScrollH",72,d1,f8,83),
	HX_("__updateScrollV",80,d1,f8,83),
	HX_("__updateText",76,32,42,3e),
	HX_("__updateTransforms",10,f4,b0,50),
	HX_("get_antiAliasType",bf,cf,6a,ee),
	HX_("set_antiAliasType",cb,a7,d8,11),
	HX_("get_autoSize",d9,43,93,e4),
	HX_("set_autoSize",4d,67,8c,f9),
	HX_("get_background",37,1c,13,9c),
	HX_("set_background",ab,04,33,bc),
	HX_("get_backgroundColor",ac,1d,52,98),
	HX_("set_backgroundColor",b8,10,ef,d4),
	HX_("get_border",b5,bc,a1,54),
	HX_("set_border",29,5b,1f,58),
	HX_("get_borderColor",6e,f4,b6,97),
	HX_("set_borderColor",7a,71,82,93),
	HX_("get_bottomScrollV",55,03,f8,91),
	HX_("get_caretIndex",d8,3e,51,53),
	HX_("get_defaultTextFormat",bc,ca,8e,89),
	HX_("set_defaultTextFormat",c8,98,97,dd),
	HX_("get_displayAsPassword",e6,cd,44,69),
	HX_("set_displayAsPassword",f2,9b,4d,bd),
	HX_("get_embedFonts",74,4f,d7,04),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("get_gridFitType",9c,aa,f5,74),
	HX_("set_gridFitType",a8,27,c1,70),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("get_htmlText",c1,d3,51,c5),
	HX_("set_htmlText",35,f7,4a,da),
	HX_("get_length",af,04,8f,8f),
	HX_("get_maxChars",a2,a3,ea,a4),
	HX_("set_maxChars",16,c7,e3,b9),
	HX_("get_maxScrollH",a0,35,f2,10),
	HX_("get_maxScrollV",ae,35,f2,10),
	HX_("get_mouseWheelEnabled",c2,19,02,e4),
	HX_("set_mouseWheelEnabled",ce,e7,0a,38),
	HX_("get_multiline",c4,a6,75,5f),
	HX_("set_multiline",d0,88,7b,a4),
	HX_("get_numLines",e2,a5,2b,e7),
	HX_("get_restrict",45,7f,b8,a6),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("get_scrollH",b2,93,d2,b6),
	HX_("set_scrollH",be,9a,3f,c1),
	HX_("get_scrollV",c0,93,d2,b6),
	HX_("set_scrollV",cc,9a,3f,c1),
	HX_("get_selectable",df,3e,20,3a),
	HX_("set_selectable",53,27,40,5a),
	HX_("get_selectionBeginIndex",2c,26,6d,df),
	HX_("get_selectionEndIndex",7a,10,f0,c9),
	HX_("get_sharpness",58,f6,88,dc),
	HX_("set_sharpness",64,d8,8e,21),
	HX_("get_tabEnabled",f5,7e,fe,b5),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("get_textColor",4d,d5,ad,a4),
	HX_("set_textColor",59,b7,b3,e9),
	HX_("get_textWidth",f0,19,b4,24),
	HX_("get_textHeight",bd,10,32,af),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	HX_("get_wordWrap",bd,c8,f4,b5),
	HX_("set_wordWrap",31,ec,ed,ca),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	HX_("stage_onMouseMove",76,bc,61,de),
	HX_("stage_onMouseUp",80,ac,07,d1),
	HX_("this_onAddedToStage",23,9e,ce,72),
	HX_("this_onFocusIn",1d,62,fb,dc),
	HX_("this_onFocusOut",56,0b,ff,7e),
	HX_("this_onKeyDown",e1,85,bf,37),
	HX_("this_onMouseDown",67,5d,aa,6d),
	HX_("this_onMouseWheel",f6,33,56,73),
	HX_("this_onDoubleClick",b7,3f,d1,96),
	HX_("window_onKeyDown",f3,7d,3b,d1),
	HX_("window_onTextInput",ef,a0,6a,c0),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#endif

::hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_("__defaultTextFormat",c5,f0,d0,bd),
	HX_("__missingFontWarning",a7,0d,0e,1a),
	::String(null())
};

void TextField_obj::__register()
{
	TextField_obj _hx_dummy;
	TextField_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.text.TextField",ca,a8,d5,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_146_boot)
HXDLIN( 146)		_hx___missingFontWarning =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace text
