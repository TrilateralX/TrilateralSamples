// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_org_poly2tri_Edge
#include <org/poly2tri/Edge.h>
#endif
#ifndef INCLUDED_org_poly2tri_Orientation
#include <org/poly2tri/Orientation.h>
#endif
#ifndef INCLUDED_org_poly2tri_Point
#include <org/poly2tri/Point.h>
#endif
#ifndef INCLUDED_org_poly2tri_Triangle
#include <org/poly2tri/Triangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_22_new,"org.poly2tri.Triangle","new",0x7fba6b59,"org.poly2tri.Triangle.new","org/poly2tri/Triangle.hx",22,0x6636d657)
static const bool _hx_array_data_f9c1cae7_1[] = {
	0,0,0,
};
static const bool _hx_array_data_f9c1cae7_2[] = {
	0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_54_containsPoint,"org.poly2tri.Triangle","containsPoint",0xb2ad25ea,"org.poly2tri.Triangle.containsPoint","org/poly2tri/Triangle.hx",54,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_60_containsEdgePoints,"org.poly2tri.Triangle","containsEdgePoints",0xcc331a66,"org.poly2tri.Triangle.containsEdgePoints","org/poly2tri/Triangle.hx",60,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_73_markNeighbor,"org.poly2tri.Triangle","markNeighbor",0x3b5b8406,"org.poly2tri.Triangle.markNeighbor","org/poly2tri/Triangle.hx",73,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_91_markNeighborTriangle,"org.poly2tri.Triangle","markNeighborTriangle",0x619f74ee,"org.poly2tri.Triangle.markNeighborTriangle","org/poly2tri/Triangle.hx",91,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_117_getPointIndexOffset,"org.poly2tri.Triangle","getPointIndexOffset",0xb5432b84,"org.poly2tri.Triangle.getPointIndexOffset","org/poly2tri/Triangle.hx",117,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_152_pointCW,"org.poly2tri.Triangle","pointCW",0x8fa3ae7d,"org.poly2tri.Triangle.pointCW","org/poly2tri/Triangle.hx",152,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_157_pointCCW,"org.poly2tri.Triangle","pointCCW",0x1f94edce,"org.poly2tri.Triangle.pointCCW","org/poly2tri/Triangle.hx",157,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_162_neighborCW,"org.poly2tri.Triangle","neighborCW",0x2a3af64d,"org.poly2tri.Triangle.neighborCW","org/poly2tri/Triangle.hx",162,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_167_neighborCCW,"org.poly2tri.Triangle","neighborCCW",0xc95c7bfe,"org.poly2tri.Triangle.neighborCCW","org/poly2tri/Triangle.hx",167,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_170_getConstrainedEdgeCW,"org.poly2tri.Triangle","getConstrainedEdgeCW",0xe7bd9c98,"org.poly2tri.Triangle.getConstrainedEdgeCW","org/poly2tri/Triangle.hx",170,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_171_setConstrainedEdgeCW,"org.poly2tri.Triangle","setConstrainedEdgeCW",0xb475540c,"org.poly2tri.Triangle.setConstrainedEdgeCW","org/poly2tri/Triangle.hx",171,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_173_getConstrainedEdgeCCW,"org.poly2tri.Triangle","getConstrainedEdgeCCW",0xde2b5753,"org.poly2tri.Triangle.getConstrainedEdgeCCW","org/poly2tri/Triangle.hx",173,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_174_setConstrainedEdgeCCW,"org.poly2tri.Triangle","setConstrainedEdgeCCW",0x3234255f,"org.poly2tri.Triangle.setConstrainedEdgeCCW","org/poly2tri/Triangle.hx",174,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_176_getDelaunayEdgeCW,"org.poly2tri.Triangle","getDelaunayEdgeCW",0x897b2a47,"org.poly2tri.Triangle.getDelaunayEdgeCW","org/poly2tri/Triangle.hx",176,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_177_setDelaunayEdgeCW,"org.poly2tri.Triangle","setDelaunayEdgeCW",0xace90253,"org.poly2tri.Triangle.setDelaunayEdgeCW","org/poly2tri/Triangle.hx",177,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_179_getDelaunayEdgeCCW,"org.poly2tri.Triangle","getDelaunayEdgeCCW",0xc249c2c4,"org.poly2tri.Triangle.getDelaunayEdgeCCW","org/poly2tri/Triangle.hx",179,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_180_setDelaunayEdgeCCW,"org.poly2tri.Triangle","setDelaunayEdgeCCW",0x9ef8f538,"org.poly2tri.Triangle.setDelaunayEdgeCCW","org/poly2tri/Triangle.hx",180,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_186_neighborAcross,"org.poly2tri.Triangle","neighborAcross",0x1f8fcfb8,"org.poly2tri.Triangle.neighborAcross","org/poly2tri/Triangle.hx",186,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_190_oppositePoint,"org.poly2tri.Triangle","oppositePoint",0xaf361222,"org.poly2tri.Triangle.oppositePoint","org/poly2tri/Triangle.hx",190,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_200_legalize,"org.poly2tri.Triangle","legalize",0x4cdb8f22,"org.poly2tri.Triangle.legalize","org/poly2tri/Triangle.hx",200,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_231_index,"org.poly2tri.Triangle","index",0xd892a64b,"org.poly2tri.Triangle.index","org/poly2tri/Triangle.hx",231,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_242_edgeIndex,"org.poly2tri.Triangle","edgeIndex",0x6b19e14e,"org.poly2tri.Triangle.edgeIndex","org/poly2tri/Triangle.hx",242,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_269_markConstrainedEdgeByIndex,"org.poly2tri.Triangle","markConstrainedEdgeByIndex",0x37782c5c,"org.poly2tri.Triangle.markConstrainedEdgeByIndex","org/poly2tri/Triangle.hx",269,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_274_markConstrainedEdgeByEdge,"org.poly2tri.Triangle","markConstrainedEdgeByEdge",0x059c6e33,"org.poly2tri.Triangle.markConstrainedEdgeByEdge","org/poly2tri/Triangle.hx",274,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_278_markConstrainedEdgeByPoints,"org.poly2tri.Triangle","markConstrainedEdgeByPoints",0xb4e9a199,"org.poly2tri.Triangle.markConstrainedEdgeByPoints","org/poly2tri/Triangle.hx",278,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_306_isEdgeSide,"org.poly2tri.Triangle","isEdgeSide",0xab719ca5,"org.poly2tri.Triangle.isEdgeSide","org/poly2tri/Triangle.hx",306,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_378_clearNeigbors,"org.poly2tri.Triangle","clearNeigbors",0xd99d7c09,"org.poly2tri.Triangle.clearNeigbors","org/poly2tri/Triangle.hx",378,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_385_clearDelunayEdges,"org.poly2tri.Triangle","clearDelunayEdges",0x7de91b00,"org.poly2tri.Triangle.clearDelunayEdges","org/poly2tri/Triangle.hx",385,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_394_toString,"org.poly2tri.Triangle","toString",0xabb6cf13,"org.poly2tri.Triangle.toString","org/poly2tri/Triangle.hx",394,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_332_rotateTrianglePair,"org.poly2tri.Triangle","rotateTrianglePair",0x7eaa9f24,"org.poly2tri.Triangle.rotateTrianglePair","org/poly2tri/Triangle.hx",332,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_147_boot,"org.poly2tri.Triangle","boot",0x3b7c8319,"org.poly2tri.Triangle.boot","org/poly2tri/Triangle.hx",147,0x6636d657)
HX_LOCAL_STACK_FRAME(_hx_pos_ded5b50bd3f88bd1_148_boot,"org.poly2tri.Triangle","boot",0x3b7c8319,"org.poly2tri.Triangle.boot","org/poly2tri/Triangle.hx",148,0x6636d657)
namespace org{
namespace poly2tri{

void Triangle_obj::__construct( ::org::poly2tri::Point p1, ::org::poly2tri::Point p2, ::org::poly2tri::Point p3,::hx::Null< bool >  __o_fixOrientation,::hx::Null< bool >  __o_checkOrientation){
            		bool fixOrientation = __o_fixOrientation.Default(false);
            		bool checkOrientation = __o_checkOrientation.Default(true);
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_22_new)
HXLINE(  23)		if (fixOrientation) {
HXLINE(  25)			if ((::org::poly2tri::Orientation_obj::orient2d(p1,p2,p3) == 1)) {
HXLINE(  27)				 ::org::poly2tri::Point pt = p3;
HXLINE(  28)				p3 = p2;
HXLINE(  29)				p2 = pt;
            			}
            		}
HXLINE(  33)		bool _hx_tmp;
HXDLIN(  33)		if (checkOrientation) {
HXLINE(  33)			_hx_tmp = (::org::poly2tri::Orientation_obj::orient2d(p3,p2,p1) != 1);
            		}
            		else {
HXLINE(  33)			_hx_tmp = false;
            		}
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  34)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Triangle::Triangle must defined with Orientation.CW",ae,79,c3,09)));
            		}
HXLINE(  36)		this->points = ::Array_obj< ::Dynamic>::__new(3)->init(0,p1)->init(1,p2)->init(2,p3);
HXLINE(  40)		this->neighbors = ::Array_obj< ::Dynamic>::__new(3)->init(0,null())->init(1,null())->init(2,null());
HXLINE(  41)		this->constrained_edge = ::Array_obj< bool >::fromData( _hx_array_data_f9c1cae7_1,3);
HXLINE(  42)		this->delaunay_edge = ::Array_obj< bool >::fromData( _hx_array_data_f9c1cae7_2,3);
            	}

Dynamic Triangle_obj::__CreateEmpty() { return new Triangle_obj; }

void *Triangle_obj::_hx_vtable = 0;

Dynamic Triangle_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Triangle_obj > _hx_result = new Triangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Triangle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x334f3e51;
}

bool Triangle_obj::containsPoint( ::org::poly2tri::Point point){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_54_containsPoint)
HXDLIN(  54)		bool _hx_tmp;
HXDLIN(  54)		if (!(point->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >()))) {
HXDLIN(  54)			_hx_tmp = point->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >());
            		}
            		else {
HXDLIN(  54)			_hx_tmp = true;
            		}
HXDLIN(  54)		if (!(_hx_tmp)) {
HXDLIN(  54)			return point->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >());
            		}
            		else {
HXDLIN(  54)			return true;
            		}
HXDLIN(  54)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,containsPoint,return )

bool Triangle_obj::containsEdgePoints( ::org::poly2tri::Point p1, ::org::poly2tri::Point p2){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_60_containsEdgePoints)
HXDLIN(  60)		if (this->containsPoint(p1)) {
HXDLIN(  60)			return this->containsPoint(p2);
            		}
            		else {
HXDLIN(  60)			return false;
            		}
HXDLIN(  60)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,containsEdgePoints,return )

void Triangle_obj::markNeighbor( ::org::poly2tri::Triangle t, ::org::poly2tri::Point p1, ::org::poly2tri::Point p2){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_73_markNeighbor)
HXLINE(  74)		bool _hx_tmp;
HXDLIN(  74)		bool _hx_tmp1;
HXDLIN(  74)		if (p1->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE(  74)			_hx_tmp1 = p2->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >());
            		}
            		else {
HXLINE(  74)			_hx_tmp1 = false;
            		}
HXDLIN(  74)		if (!(_hx_tmp1)) {
HXLINE(  74)			if (p1->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE(  74)				_hx_tmp = p2->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >());
            			}
            			else {
HXLINE(  74)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(  74)			_hx_tmp = true;
            		}
HXDLIN(  74)		if (_hx_tmp) {
HXLINE(  76)			this->neighbors[0] = t;
HXDLIN(  76)			return;
            		}
HXLINE(  78)		bool _hx_tmp2;
HXDLIN(  78)		bool _hx_tmp3;
HXDLIN(  78)		if (p1->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE(  78)			_hx_tmp3 = p2->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >());
            		}
            		else {
HXLINE(  78)			_hx_tmp3 = false;
            		}
HXDLIN(  78)		if (!(_hx_tmp3)) {
HXLINE(  78)			if (p1->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE(  78)				_hx_tmp2 = p2->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >());
            			}
            			else {
HXLINE(  78)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE(  78)			_hx_tmp2 = true;
            		}
HXDLIN(  78)		if (_hx_tmp2) {
HXLINE(  80)			this->neighbors[1] = t;
HXDLIN(  80)			return;
            		}
HXLINE(  82)		bool _hx_tmp4;
HXDLIN(  82)		bool _hx_tmp5;
HXDLIN(  82)		if (p1->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE(  82)			_hx_tmp5 = p2->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >());
            		}
            		else {
HXLINE(  82)			_hx_tmp5 = false;
            		}
HXDLIN(  82)		if (!(_hx_tmp5)) {
HXLINE(  82)			if (p1->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE(  82)				_hx_tmp4 = p2->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >());
            			}
            			else {
HXLINE(  82)				_hx_tmp4 = false;
            			}
            		}
            		else {
HXLINE(  82)			_hx_tmp4 = true;
            		}
HXDLIN(  82)		if (_hx_tmp4) {
HXLINE(  84)			this->neighbors[2] = t;
HXDLIN(  84)			return;
            		}
HXLINE(  86)		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid markNeighbor call (1)!",cb,24,e3,cf)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Triangle_obj,markNeighbor,(void))

void Triangle_obj::markNeighborTriangle( ::org::poly2tri::Triangle that){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_91_markNeighborTriangle)
HXLINE(  93)		if (that->containsEdgePoints(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >(),this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE(  95)			this->neighbors[0] = that;
HXLINE(  96)			that->markNeighbor(::hx::ObjectPtr<OBJ_>(this),this->points->__get(1).StaticCast<  ::org::poly2tri::Point >(),this->points->__get(2).StaticCast<  ::org::poly2tri::Point >());
HXLINE(  97)			return;
            		}
HXLINE( 100)		if (that->containsEdgePoints(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >(),this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 101)			this->neighbors[1] = that;
HXLINE( 102)			that->markNeighbor(::hx::ObjectPtr<OBJ_>(this),this->points->__get(0).StaticCast<  ::org::poly2tri::Point >(),this->points->__get(2).StaticCast<  ::org::poly2tri::Point >());
HXLINE( 103)			return;
            		}
HXLINE( 106)		if (that->containsEdgePoints(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >(),this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 107)			this->neighbors[2] = that;
HXLINE( 108)			that->markNeighbor(::hx::ObjectPtr<OBJ_>(this),this->points->__get(0).StaticCast<  ::org::poly2tri::Point >(),this->points->__get(1).StaticCast<  ::org::poly2tri::Point >());
HXLINE( 109)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,markNeighborTriangle,(void))

int Triangle_obj::getPointIndexOffset( ::org::poly2tri::Point p,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_117_getPointIndexOffset)
HXLINE( 118)		int no = offset;
HXLINE( 119)		{
HXLINE( 120)			{
HXLINE( 121)				while((no < 0)){
HXLINE( 121)					no = (no + 3);
            				}
HXLINE( 122)				while((no > 2)){
HXLINE( 122)					no = (no - 3);
            				}
HXLINE( 123)				if (p->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 123)					return no;
            				}
HXLINE( 124)				no = (no + 1);
            			}
HXLINE( 120)			{
HXLINE( 121)				while((no < 0)){
HXLINE( 121)					no = (no + 3);
            				}
HXLINE( 122)				while((no > 2)){
HXLINE( 122)					no = (no - 3);
            				}
HXLINE( 123)				if (p->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 123)					return no;
            				}
HXLINE( 124)				no = (no + 1);
            			}
HXLINE( 120)			{
HXLINE( 121)				while((no < 0)){
HXLINE( 121)					no = (no + 3);
            				}
HXLINE( 122)				while((no > 2)){
HXLINE( 122)					no = (no - 3);
            				}
HXLINE( 123)				if (p->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 123)					return no;
            				}
HXLINE( 124)				no = (no + 1);
            			}
            		}
HXLINE( 127)		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Triangle::Point not in triangle",3e,9b,3b,0f)));
HXDLIN( 127)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,getPointIndexOffset,return )

 ::org::poly2tri::Point Triangle_obj::pointCW( ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_152_pointCW)
HXDLIN( 152)		return this->points->__get(this->getPointIndexOffset(p,-1)).StaticCast<  ::org::poly2tri::Point >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,pointCW,return )

 ::org::poly2tri::Point Triangle_obj::pointCCW( ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_157_pointCCW)
HXDLIN( 157)		return this->points->__get(this->getPointIndexOffset(p,1)).StaticCast<  ::org::poly2tri::Point >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,pointCCW,return )

 ::org::poly2tri::Triangle Triangle_obj::neighborCW( ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_162_neighborCW)
HXDLIN( 162)		return this->neighbors->__get(this->getPointIndexOffset(p,1)).StaticCast<  ::org::poly2tri::Triangle >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,neighborCW,return )

 ::org::poly2tri::Triangle Triangle_obj::neighborCCW( ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_167_neighborCCW)
HXDLIN( 167)		return this->neighbors->__get(this->getPointIndexOffset(p,-1)).StaticCast<  ::org::poly2tri::Triangle >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,neighborCCW,return )

bool Triangle_obj::getConstrainedEdgeCW( ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_170_getConstrainedEdgeCW)
HXDLIN( 170)		return this->constrained_edge->__get(this->getPointIndexOffset(p,1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,getConstrainedEdgeCW,return )

bool Triangle_obj::setConstrainedEdgeCW( ::org::poly2tri::Point p,bool ce){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_171_setConstrainedEdgeCW)
HXDLIN( 171)		return (this->constrained_edge[this->getPointIndexOffset(p,1)] = ce);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,setConstrainedEdgeCW,return )

bool Triangle_obj::getConstrainedEdgeCCW( ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_173_getConstrainedEdgeCCW)
HXDLIN( 173)		return this->constrained_edge->__get(this->getPointIndexOffset(p,-1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,getConstrainedEdgeCCW,return )

bool Triangle_obj::setConstrainedEdgeCCW( ::org::poly2tri::Point p,bool ce){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_174_setConstrainedEdgeCCW)
HXDLIN( 174)		return (this->constrained_edge[this->getPointIndexOffset(p,-1)] = ce);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,setConstrainedEdgeCCW,return )

bool Triangle_obj::getDelaunayEdgeCW( ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_176_getDelaunayEdgeCW)
HXDLIN( 176)		return this->delaunay_edge->__get(this->getPointIndexOffset(p,1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,getDelaunayEdgeCW,return )

bool Triangle_obj::setDelaunayEdgeCW( ::org::poly2tri::Point p,bool e){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_177_setDelaunayEdgeCW)
HXDLIN( 177)		return (this->delaunay_edge[this->getPointIndexOffset(p,1)] = e);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,setDelaunayEdgeCW,return )

bool Triangle_obj::getDelaunayEdgeCCW( ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_179_getDelaunayEdgeCCW)
HXDLIN( 179)		return this->delaunay_edge->__get(this->getPointIndexOffset(p,-1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,getDelaunayEdgeCCW,return )

bool Triangle_obj::setDelaunayEdgeCCW( ::org::poly2tri::Point p,bool e){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_180_setDelaunayEdgeCCW)
HXDLIN( 180)		return (this->delaunay_edge[this->getPointIndexOffset(p,-1)] = e);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,setDelaunayEdgeCCW,return )

 ::org::poly2tri::Triangle Triangle_obj::neighborAcross( ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_186_neighborAcross)
HXDLIN( 186)		return this->neighbors->__get(this->getPointIndexOffset(p,0)).StaticCast<  ::org::poly2tri::Triangle >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,neighborAcross,return )

 ::org::poly2tri::Point Triangle_obj::oppositePoint( ::org::poly2tri::Triangle t, ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_190_oppositePoint)
HXDLIN( 190)		return this->pointCW(t->pointCW(p));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,oppositePoint,return )

void Triangle_obj::legalize( ::org::poly2tri::Point opoint, ::org::poly2tri::Point npoint){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_200_legalize)
HXLINE( 201)		if (::hx::IsNull( npoint )) {
HXLINE( 203)			this->legalize(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >(),opoint);
HXLINE( 204)			return;
            		}
HXLINE( 207)		if (opoint->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 208)			this->points[1] = this->points->__get(0).StaticCast<  ::org::poly2tri::Point >();
HXLINE( 209)			this->points[0] = this->points->__get(2).StaticCast<  ::org::poly2tri::Point >();
HXLINE( 210)			this->points[2] = npoint;
            		}
            		else {
HXLINE( 211)			if (opoint->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 212)				this->points[2] = this->points->__get(1).StaticCast<  ::org::poly2tri::Point >();
HXLINE( 213)				this->points[1] = this->points->__get(0).StaticCast<  ::org::poly2tri::Point >();
HXLINE( 214)				this->points[0] = npoint;
            			}
            			else {
HXLINE( 215)				if (opoint->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 216)					this->points[0] = this->points->__get(2).StaticCast<  ::org::poly2tri::Point >();
HXLINE( 217)					this->points[2] = this->points->__get(1).StaticCast<  ::org::poly2tri::Point >();
HXLINE( 218)					this->points[1] = npoint;
            				}
            				else {
HXLINE( 220)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid js.poly2tri.Triangle.Legalize call!",17,06,66,d3)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,legalize,(void))

int Triangle_obj::index( ::org::poly2tri::Point p){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_231_index)
HXLINE( 232)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 233)			return this->getPointIndexOffset(p,0);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic _g1 = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE( 232)				if (::Std_obj::isOfType(_g1,::hx::ClassOf< ::String >())) {
HXLINE(   1)					::String msg = ( (::String)(_g1) );
HXLINE( 235)					::haxe::Log_obj::trace(msg,::hx::SourceInfo(HX_("org/poly2tri/Triangle.hx",57,d6,36,66),235,HX_("org.poly2tri.Triangle",e7,ca,c1,f9),HX_("index",12,9b,14,be)));
            				}
            				else {
HXLINE( 232)					HX_STACK_DO_THROW(_g);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 237)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,index,return )

int Triangle_obj::edgeIndex( ::org::poly2tri::Point p1, ::org::poly2tri::Point p2){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_242_edgeIndex)
HXLINE( 243)		if (p1->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 245)			if (p2->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 245)				return 2;
            			}
HXLINE( 246)			if (p2->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 246)				return 1;
            			}
            		}
            		else {
HXLINE( 248)			if (p1->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 250)				if (p2->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 250)					return 0;
            				}
HXLINE( 251)				if (p2->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 251)					return 2;
            				}
            			}
            			else {
HXLINE( 253)				if (p1->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 255)					if (p2->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 255)						return 1;
            					}
HXLINE( 256)					if (p2->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 256)						return 0;
            					}
            				}
            			}
            		}
HXLINE( 258)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,edgeIndex,return )

void Triangle_obj::markConstrainedEdgeByIndex(int index){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_269_markConstrainedEdgeByIndex)
HXDLIN( 269)		this->constrained_edge[index] = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,markConstrainedEdgeByIndex,(void))

void Triangle_obj::markConstrainedEdgeByEdge( ::org::poly2tri::Edge edge){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_274_markConstrainedEdgeByEdge)
HXDLIN( 274)		this->markConstrainedEdgeByPoints(edge->p,edge->q);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Triangle_obj,markConstrainedEdgeByEdge,(void))

void Triangle_obj::markConstrainedEdgeByPoints( ::org::poly2tri::Point p, ::org::poly2tri::Point q){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_278_markConstrainedEdgeByPoints)
HXLINE( 279)		bool _hx_tmp;
HXDLIN( 279)		bool _hx_tmp1;
HXDLIN( 279)		if (q->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 279)			_hx_tmp1 = p->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >());
            		}
            		else {
HXLINE( 279)			_hx_tmp1 = false;
            		}
HXDLIN( 279)		if (!(_hx_tmp1)) {
HXLINE( 279)			if (q->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 279)				_hx_tmp = p->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >());
            			}
            			else {
HXLINE( 279)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 279)			_hx_tmp = true;
            		}
HXDLIN( 279)		if (_hx_tmp) {
HXLINE( 280)			this->constrained_edge[2] = true;
HXLINE( 281)			return;
            		}
HXLINE( 284)		bool _hx_tmp2;
HXDLIN( 284)		bool _hx_tmp3;
HXDLIN( 284)		if (q->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 284)			_hx_tmp3 = p->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >());
            		}
            		else {
HXLINE( 284)			_hx_tmp3 = false;
            		}
HXDLIN( 284)		if (!(_hx_tmp3)) {
HXLINE( 284)			if (q->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 284)				_hx_tmp2 = p->equals(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >());
            			}
            			else {
HXLINE( 284)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE( 284)			_hx_tmp2 = true;
            		}
HXDLIN( 284)		if (_hx_tmp2) {
HXLINE( 285)			this->constrained_edge[1] = true;
HXLINE( 286)			return;
            		}
HXLINE( 289)		bool _hx_tmp4;
HXDLIN( 289)		bool _hx_tmp5;
HXDLIN( 289)		if (q->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 289)			_hx_tmp5 = p->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >());
            		}
            		else {
HXLINE( 289)			_hx_tmp5 = false;
            		}
HXDLIN( 289)		if (!(_hx_tmp5)) {
HXLINE( 289)			if (q->equals(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) {
HXLINE( 289)				_hx_tmp4 = p->equals(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >());
            			}
            			else {
HXLINE( 289)				_hx_tmp4 = false;
            			}
            		}
            		else {
HXLINE( 289)			_hx_tmp4 = true;
            		}
HXDLIN( 289)		if (_hx_tmp4) {
HXLINE( 290)			this->constrained_edge[0] = true;
HXLINE( 291)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,markConstrainedEdgeByPoints,(void))

bool Triangle_obj::isEdgeSide( ::org::poly2tri::Point ep, ::org::poly2tri::Point eq){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_306_isEdgeSide)
HXLINE( 307)		int index = this->edgeIndex(ep,eq);
HXLINE( 308)		if ((index == -1)) {
HXLINE( 308)			return false;
            		}
HXLINE( 310)		this->markConstrainedEdgeByIndex(index);
HXLINE( 311)		 ::org::poly2tri::Triangle that = this->neighbors->__get(index).StaticCast<  ::org::poly2tri::Triangle >();
HXLINE( 312)		if (::hx::IsNotNull( that )) {
HXLINE( 312)			that->markConstrainedEdgeByPoints(ep,eq);
            		}
HXLINE( 313)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Triangle_obj,isEdgeSide,return )

void Triangle_obj::clearNeigbors(){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_378_clearNeigbors)
HXLINE( 379)		this->neighbors[0] = null();
HXLINE( 380)		this->neighbors[1] = null();
HXLINE( 381)		this->neighbors[2] = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Triangle_obj,clearNeigbors,(void))

void Triangle_obj::clearDelunayEdges(){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_385_clearDelunayEdges)
HXLINE( 386)		this->delaunay_edge[0] = false;
HXLINE( 387)		this->delaunay_edge[1] = false;
HXLINE( 388)		this->delaunay_edge[2] = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Triangle_obj,clearDelunayEdges,(void))

::String Triangle_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_394_toString)
HXDLIN( 394)		::String _hx_tmp = ((HX_("Triangle(",40,10,14,21) + ::Std_obj::string(this->points->__get(0).StaticCast<  ::org::poly2tri::Point >())) + HX_(", ",74,26,00,00));
HXDLIN( 394)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->points->__get(1).StaticCast<  ::org::poly2tri::Point >())) + HX_(", ",74,26,00,00));
HXDLIN( 394)		return ((_hx_tmp1 + ::Std_obj::string(this->points->__get(2).StaticCast<  ::org::poly2tri::Point >())) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Triangle_obj,toString,return )

int Triangle_obj::CW_OFFSET;

int Triangle_obj::CCW_OFFSET;

void Triangle_obj::rotateTrianglePair( ::org::poly2tri::Triangle t, ::org::poly2tri::Point p, ::org::poly2tri::Triangle ot, ::org::poly2tri::Point op){
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_332_rotateTrianglePair)
HXLINE( 333)		 ::org::poly2tri::Triangle n1 = t->neighborCCW(p);
HXLINE( 334)		 ::org::poly2tri::Triangle n2 = t->neighborCW(p);
HXLINE( 335)		 ::org::poly2tri::Triangle n3 = ot->neighborCCW(op);
HXLINE( 336)		 ::org::poly2tri::Triangle n4 = ot->neighborCW(op);
HXLINE( 338)		bool ce1 = t->getConstrainedEdgeCCW(p);
HXLINE( 339)		bool ce2 = t->getConstrainedEdgeCW(p);
HXLINE( 340)		bool ce3 = ot->getConstrainedEdgeCCW(op);
HXLINE( 341)		bool ce4 = ot->getConstrainedEdgeCW(op);
HXLINE( 343)		bool de1 = t->getDelaunayEdgeCCW(p);
HXLINE( 344)		bool de2 = t->getDelaunayEdgeCW(p);
HXLINE( 345)		bool de3 = ot->getDelaunayEdgeCCW(op);
HXLINE( 346)		bool de4 = ot->getDelaunayEdgeCW(op);
HXLINE( 348)		t->legalize(p,op);
HXLINE( 349)		ot->legalize(op,p);
HXLINE( 352)		ot->setDelaunayEdgeCCW(p,de1);
HXLINE( 353)		t->setDelaunayEdgeCW(p,de2);
HXLINE( 354)		t->setDelaunayEdgeCCW(op,de3);
HXLINE( 355)		ot->setDelaunayEdgeCW(op,de4);
HXLINE( 358)		ot->setConstrainedEdgeCCW(p,ce1);
HXLINE( 359)		t->setConstrainedEdgeCW(p,ce2);
HXLINE( 360)		t->setConstrainedEdgeCCW(op,ce3);
HXLINE( 361)		ot->setConstrainedEdgeCW(op,ce4);
HXLINE( 368)		t->clearNeigbors();
HXLINE( 369)		ot->clearNeigbors();
HXLINE( 370)		if (::hx::IsNotNull( n1 )) {
HXLINE( 370)			ot->markNeighborTriangle(n1);
            		}
HXLINE( 371)		if (::hx::IsNotNull( n2 )) {
HXLINE( 371)			t->markNeighborTriangle(n2);
            		}
HXLINE( 372)		if (::hx::IsNotNull( n3 )) {
HXLINE( 372)			t->markNeighborTriangle(n3);
            		}
HXLINE( 373)		if (::hx::IsNotNull( n4 )) {
HXLINE( 373)			ot->markNeighborTriangle(n4);
            		}
HXLINE( 374)		t->markNeighborTriangle(ot);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Triangle_obj,rotateTrianglePair,(void))


::hx::ObjectPtr< Triangle_obj > Triangle_obj::__new( ::org::poly2tri::Point p1, ::org::poly2tri::Point p2, ::org::poly2tri::Point p3,::hx::Null< bool >  __o_fixOrientation,::hx::Null< bool >  __o_checkOrientation) {
	::hx::ObjectPtr< Triangle_obj > __this = new Triangle_obj();
	__this->__construct(p1,p2,p3,__o_fixOrientation,__o_checkOrientation);
	return __this;
}

::hx::ObjectPtr< Triangle_obj > Triangle_obj::__alloc(::hx::Ctx *_hx_ctx, ::org::poly2tri::Point p1, ::org::poly2tri::Point p2, ::org::poly2tri::Point p3,::hx::Null< bool >  __o_fixOrientation,::hx::Null< bool >  __o_checkOrientation) {
	Triangle_obj *__this = (Triangle_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Triangle_obj), true, "org.poly2tri.Triangle"));
	*(void **)__this = Triangle_obj::_hx_vtable;
	__this->__construct(p1,p2,p3,__o_fixOrientation,__o_checkOrientation);
	return __this;
}

Triangle_obj::Triangle_obj()
{
}

void Triangle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Triangle);
	HX_MARK_MEMBER_NAME(points,"points");
	HX_MARK_MEMBER_NAME(neighbors,"neighbors");
	HX_MARK_MEMBER_NAME(interior,"interior");
	HX_MARK_MEMBER_NAME(constrained_edge,"constrained_edge");
	HX_MARK_MEMBER_NAME(delaunay_edge,"delaunay_edge");
	HX_MARK_END_CLASS();
}

void Triangle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(points,"points");
	HX_VISIT_MEMBER_NAME(neighbors,"neighbors");
	HX_VISIT_MEMBER_NAME(interior,"interior");
	HX_VISIT_MEMBER_NAME(constrained_edge,"constrained_edge");
	HX_VISIT_MEMBER_NAME(delaunay_edge,"delaunay_edge");
}

::hx::Val Triangle_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return ::hx::Val( index_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { return ::hx::Val( points ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pointCW") ) { return ::hx::Val( pointCW_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"interior") ) { return ::hx::Val( interior ); }
		if (HX_FIELD_EQ(inName,"pointCCW") ) { return ::hx::Val( pointCCW_dyn() ); }
		if (HX_FIELD_EQ(inName,"legalize") ) { return ::hx::Val( legalize_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"neighbors") ) { return ::hx::Val( neighbors ); }
		if (HX_FIELD_EQ(inName,"edgeIndex") ) { return ::hx::Val( edgeIndex_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"neighborCW") ) { return ::hx::Val( neighborCW_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEdgeSide") ) { return ::hx::Val( isEdgeSide_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"neighborCCW") ) { return ::hx::Val( neighborCCW_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"markNeighbor") ) { return ::hx::Val( markNeighbor_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"delaunay_edge") ) { return ::hx::Val( delaunay_edge ); }
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return ::hx::Val( containsPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"oppositePoint") ) { return ::hx::Val( oppositePoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearNeigbors") ) { return ::hx::Val( clearNeigbors_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"neighborAcross") ) { return ::hx::Val( neighborAcross_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"constrained_edge") ) { return ::hx::Val( constrained_edge ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getDelaunayEdgeCW") ) { return ::hx::Val( getDelaunayEdgeCW_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDelaunayEdgeCW") ) { return ::hx::Val( setDelaunayEdgeCW_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearDelunayEdges") ) { return ::hx::Val( clearDelunayEdges_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"containsEdgePoints") ) { return ::hx::Val( containsEdgePoints_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDelaunayEdgeCCW") ) { return ::hx::Val( getDelaunayEdgeCCW_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDelaunayEdgeCCW") ) { return ::hx::Val( setDelaunayEdgeCCW_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getPointIndexOffset") ) { return ::hx::Val( getPointIndexOffset_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"markNeighborTriangle") ) { return ::hx::Val( markNeighborTriangle_dyn() ); }
		if (HX_FIELD_EQ(inName,"getConstrainedEdgeCW") ) { return ::hx::Val( getConstrainedEdgeCW_dyn() ); }
		if (HX_FIELD_EQ(inName,"setConstrainedEdgeCW") ) { return ::hx::Val( setConstrainedEdgeCW_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getConstrainedEdgeCCW") ) { return ::hx::Val( getConstrainedEdgeCCW_dyn() ); }
		if (HX_FIELD_EQ(inName,"setConstrainedEdgeCCW") ) { return ::hx::Val( setConstrainedEdgeCCW_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"markConstrainedEdgeByEdge") ) { return ::hx::Val( markConstrainedEdgeByEdge_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"markConstrainedEdgeByIndex") ) { return ::hx::Val( markConstrainedEdgeByIndex_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"markConstrainedEdgeByPoints") ) { return ::hx::Val( markConstrainedEdgeByPoints_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Triangle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"rotateTrianglePair") ) { outValue = rotateTrianglePair_dyn(); return true; }
	}
	return false;
}

::hx::Val Triangle_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { points=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"interior") ) { interior=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"neighbors") ) { neighbors=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"delaunay_edge") ) { delaunay_edge=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"constrained_edge") ) { constrained_edge=inValue.Cast< ::Array< bool > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Triangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("points",23,12,2e,f7));
	outFields->push(HX_("neighbors",41,df,79,94));
	outFields->push(HX_("interior",30,a8,72,28));
	outFields->push(HX_("constrained_edge",06,28,26,19));
	outFields->push(HX_("delaunay_edge",f5,83,b6,7e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Triangle_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Triangle_obj,points),HX_("points",23,12,2e,f7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Triangle_obj,neighbors),HX_("neighbors",41,df,79,94)},
	{::hx::fsBool,(int)offsetof(Triangle_obj,interior),HX_("interior",30,a8,72,28)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(Triangle_obj,constrained_edge),HX_("constrained_edge",06,28,26,19)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(Triangle_obj,delaunay_edge),HX_("delaunay_edge",f5,83,b6,7e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Triangle_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Triangle_obj::CW_OFFSET,HX_("CW_OFFSET",fe,98,8c,26)},
	{::hx::fsInt,(void *) &Triangle_obj::CCW_OFFSET,HX_("CCW_OFFSET",5b,f8,09,7a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Triangle_obj_sMemberFields[] = {
	HX_("points",23,12,2e,f7),
	HX_("neighbors",41,df,79,94),
	HX_("interior",30,a8,72,28),
	HX_("constrained_edge",06,28,26,19),
	HX_("delaunay_edge",f5,83,b6,7e),
	HX_("containsPoint",b1,b9,eb,92),
	HX_("containsEdgePoints",3f,75,44,52),
	HX_("markNeighbor",1f,c6,f6,02),
	HX_("markNeighborTriangle",07,f8,df,92),
	HX_("getPointIndexOffset",8b,4e,61,7e),
	HX_("pointCW",04,a3,21,51),
	HX_("pointCCW",67,ef,4c,ac),
	HX_("neighborCW",26,50,29,56),
	HX_("neighborCCW",05,c0,fc,0d),
	HX_("getConstrainedEdgeCW",b1,1f,fe,18),
	HX_("setConstrainedEdgeCW",25,d7,b5,e5),
	HX_("getConstrainedEdgeCCW",1a,8a,5d,c5),
	HX_("setConstrainedEdgeCCW",26,58,66,19),
	HX_("getDelaunayEdgeCW",8e,ad,bc,dc),
	HX_("setDelaunayEdgeCW",9a,85,2a,00),
	HX_("getDelaunayEdgeCCW",9d,1d,5b,48),
	HX_("setDelaunayEdgeCCW",11,50,0a,25),
	HX_("neighborAcross",11,8a,12,76),
	HX_("oppositePoint",e9,a5,74,8f),
	HX_("legalize",bb,90,93,d9),
	HX_("index",12,9b,14,be),
	HX_("edgeIndex",95,45,63,ff),
	HX_("markConstrainedEdgeByIndex",35,88,15,64),
	HX_("markConstrainedEdgeByEdge",7a,10,8d,0b),
	HX_("markConstrainedEdgeByPoints",a0,a3,fc,91),
	HX_("isEdgeSide",7e,f6,5f,d7),
	HX_("clearNeigbors",d0,0f,dc,b9),
	HX_("clearDelunayEdges",47,9e,2a,d1),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void Triangle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Triangle_obj::CW_OFFSET,"CW_OFFSET");
	HX_MARK_MEMBER_NAME(Triangle_obj::CCW_OFFSET,"CCW_OFFSET");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Triangle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Triangle_obj::CW_OFFSET,"CW_OFFSET");
	HX_VISIT_MEMBER_NAME(Triangle_obj::CCW_OFFSET,"CCW_OFFSET");
};

#endif

::hx::Class Triangle_obj::__mClass;

static ::String Triangle_obj_sStaticFields[] = {
	HX_("CW_OFFSET",fe,98,8c,26),
	HX_("CCW_OFFSET",5b,f8,09,7a),
	HX_("rotateTrianglePair",fd,f9,bb,04),
	::String(null())
};

void Triangle_obj::__register()
{
	Triangle_obj _hx_dummy;
	Triangle_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("org.poly2tri.Triangle",e7,ca,c1,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Triangle_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Triangle_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Triangle_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Triangle_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Triangle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Triangle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Triangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Triangle_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Triangle_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_147_boot)
HXDLIN( 147)		CW_OFFSET = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ded5b50bd3f88bd1_148_boot)
HXDLIN( 148)		CCW_OFFSET = -1;
            	}
}

} // end namespace org
} // end namespace poly2tri
