// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_org_poly2tri_Edge
#include <org/poly2tri/Edge.h>
#endif
#ifndef INCLUDED_org_poly2tri_Point
#include <org/poly2tri/Point.h>
#endif
#ifndef INCLUDED_org_poly2tri_Sweep
#include <org/poly2tri/Sweep.h>
#endif
#ifndef INCLUDED_org_poly2tri_SweepContext
#include <org/poly2tri/SweepContext.h>
#endif
#ifndef INCLUDED_org_poly2tri_Triangle
#include <org/poly2tri/Triangle.h>
#endif
#ifndef INCLUDED_org_poly2tri_VisiblePolygon
#include <org/poly2tri/VisiblePolygon.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9a896aa21c6cdd7b_13_new,"org.poly2tri.VisiblePolygon","new",0xaefa61f9,"org.poly2tri.VisiblePolygon.new","org/poly2tri/VisiblePolygon.hx",13,0xa8826bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_9a896aa21c6cdd7b_19_addPolyline,"org.poly2tri.VisiblePolygon","addPolyline",0xf45e361a,"org.poly2tri.VisiblePolygon.addPolyline","org/poly2tri/VisiblePolygon.hx",19,0xa8826bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_9a896aa21c6cdd7b_23_addPolylineFromFloats,"org.poly2tri.VisiblePolygon","addPolylineFromFloats",0xd25fc71b,"org.poly2tri.VisiblePolygon.addPolylineFromFloats","org/poly2tri/VisiblePolygon.hx",23,0xa8826bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_9a896aa21c6cdd7b_34_reset,"org.poly2tri.VisiblePolygon","reset",0x796933a8,"org.poly2tri.VisiblePolygon.reset","org/poly2tri/VisiblePolygon.hx",34,0xa8826bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_9a896aa21c6cdd7b_41_performTriangulationOnce,"org.poly2tri.VisiblePolygon","performTriangulationOnce",0x635a4356,"org.poly2tri.VisiblePolygon.performTriangulationOnce","org/poly2tri/VisiblePolygon.hx",41,0xa8826bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_9a896aa21c6cdd7b_49_getVerticesAndTriangles,"org.poly2tri.VisiblePolygon","getVerticesAndTriangles",0xa157703c,"org.poly2tri.VisiblePolygon.getVerticesAndTriangles","org/poly2tri/VisiblePolygon.hx",49,0xa8826bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_9a896aa21c6cdd7b_79_getNumTriangles,"org.poly2tri.VisiblePolygon","getNumTriangles",0x1062a254,"org.poly2tri.VisiblePolygon.getNumTriangles","org/poly2tri/VisiblePolygon.hx",79,0xa8826bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_9a896aa21c6cdd7b_85_drawShape,"org.poly2tri.VisiblePolygon","drawShape",0xf5e562d6,"org.poly2tri.VisiblePolygon.drawShape","org/poly2tri/VisiblePolygon.hx",85,0xa8826bb7)
namespace org{
namespace poly2tri{

void VisiblePolygon_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9a896aa21c6cdd7b_13_new)
HXDLIN(  13)		this->reset();
            	}

Dynamic VisiblePolygon_obj::__CreateEmpty() { return new VisiblePolygon_obj; }

void *VisiblePolygon_obj::_hx_vtable = 0;

Dynamic VisiblePolygon_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VisiblePolygon_obj > _hx_result = new VisiblePolygon_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VisiblePolygon_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2062d071;
}

void VisiblePolygon_obj::addPolyline(::Array< ::Dynamic> polyline){
            	HX_STACKFRAME(&_hx_pos_9a896aa21c6cdd7b_19_addPolyline)
HXDLIN(  19)		this->sweepContext->addPolyline(polyline);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VisiblePolygon_obj,addPolyline,(void))

void VisiblePolygon_obj::addPolylineFromFloats(::Array< Float > pos){
            	HX_GC_STACKFRAME(&_hx_pos_9a896aa21c6cdd7b_23_addPolylineFromFloats)
HXLINE(  24)		::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new();
HXLINE(  25)		{
HXLINE(  25)			int _g = 0;
HXDLIN(  25)			int _g1 = pos->length;
HXDLIN(  25)			while((_g < _g1)){
HXLINE(  25)				_g = (_g + 1);
HXDLIN(  25)				int i = (_g - 1);
HXLINE(  27)				if ((::hx::Mod(i,2) == 1)) {
HXLINE(  27)					continue;
            				}
HXLINE(  28)				a->push( ::org::poly2tri::Point_obj::__alloc( HX_CTX ,pos->__get(i),pos->__get((i + 1))));
            			}
            		}
HXLINE(  30)		this->addPolyline(a);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VisiblePolygon_obj,addPolylineFromFloats,(void))

void VisiblePolygon_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_9a896aa21c6cdd7b_34_reset)
HXLINE(  35)		this->sweepContext =  ::org::poly2tri::SweepContext_obj::__alloc( HX_CTX );
HXLINE(  36)		this->sweep =  ::org::poly2tri::Sweep_obj::__alloc( HX_CTX ,this->sweepContext);
HXLINE(  37)		this->triangulated = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VisiblePolygon_obj,reset,(void))

void VisiblePolygon_obj::performTriangulationOnce(){
            	HX_STACKFRAME(&_hx_pos_9a896aa21c6cdd7b_41_performTriangulationOnce)
HXLINE(  42)		if (this->triangulated) {
HXLINE(  42)			return;
            		}
HXLINE(  43)		this->triangulated = true;
HXLINE(  44)		this->sweep->triangulate();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VisiblePolygon_obj,performTriangulationOnce,(void))

 ::Dynamic VisiblePolygon_obj::getVerticesAndTriangles(){
            	HX_STACKFRAME(&_hx_pos_9a896aa21c6cdd7b_49_getVerticesAndTriangles)
HXLINE(  50)		if (!(this->triangulated)) {
HXLINE(  50)			return null();
            		}
HXLINE(  52)		::Array< Float > vertices = ::Array_obj< Float >::__new();
HXLINE(  53)		::Array< int > ids = ::Array_obj< int >::__new();
HXLINE(  55)		{
HXLINE(  55)			int _g = 0;
HXDLIN(  55)			int _g1 = this->sweepContext->points->length;
HXDLIN(  55)			while((_g < _g1)){
HXLINE(  55)				_g = (_g + 1);
HXDLIN(  55)				int i = (_g - 1);
HXLINE(  57)				 ::org::poly2tri::Point p = this->sweepContext->points->__get(i).StaticCast<  ::org::poly2tri::Point >();
HXLINE(  58)				vertices->push(p->x);
HXLINE(  59)				vertices->push(p->y);
HXLINE(  60)				vertices->push(0);
HXLINE(  61)				ids[p->id] = i;
            			}
            		}
HXLINE(  64)		::Array< int > tris = ::Array_obj< int >::__new();
HXLINE(  65)		{
HXLINE(  65)			int _g2 = 0;
HXDLIN(  65)			::Array< ::Dynamic> _g3 = this->sweepContext->triangles;
HXDLIN(  65)			while((_g2 < _g3->length)){
HXLINE(  65)				 ::org::poly2tri::Triangle t = _g3->__get(_g2).StaticCast<  ::org::poly2tri::Triangle >();
HXDLIN(  65)				_g2 = (_g2 + 1);
HXLINE(  68)				{
HXLINE(  70)					tris->push(ids->__get(t->points->__get(0).StaticCast<  ::org::poly2tri::Point >()->id));
HXDLIN(  70)					tris->push(ids->__get(t->points->__get(1).StaticCast<  ::org::poly2tri::Point >()->id));
HXDLIN(  70)					tris->push(ids->__get(t->points->__get(2).StaticCast<  ::org::poly2tri::Point >()->id));
            				}
            			}
            		}
HXLINE(  74)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("vertices",f9,bf,15,6a),vertices)
            			->setFixed(1,HX_("triangles",ab,30,41,7f),tris));
            	}


HX_DEFINE_DYNAMIC_FUNC0(VisiblePolygon_obj,getVerticesAndTriangles,return )

int VisiblePolygon_obj::getNumTriangles(){
            	HX_STACKFRAME(&_hx_pos_9a896aa21c6cdd7b_79_getNumTriangles)
HXDLIN(  79)		return this->sweepContext->triangles->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VisiblePolygon_obj,getNumTriangles,return )

void VisiblePolygon_obj::drawShape( ::openfl::display::Graphics g){
            	HX_STACKFRAME(&_hx_pos_9a896aa21c6cdd7b_85_drawShape)
HXLINE(  86)		 ::org::poly2tri::Triangle t;
HXLINE(  87)		::Array< ::Dynamic> pl;
HXLINE(  89)		this->performTriangulationOnce();
HXLINE(  91)		{
HXLINE(  91)			int _g = 0;
HXDLIN(  91)			::Array< ::Dynamic> _g1 = this->sweepContext->triangles;
HXDLIN(  91)			while((_g < _g1->length)){
HXLINE(  91)				 ::org::poly2tri::Triangle t = _g1->__get(_g).StaticCast<  ::org::poly2tri::Triangle >();
HXDLIN(  91)				_g = (_g + 1);
HXLINE(  93)				pl = t->points;
HXLINE(  95)				g->beginFill(15710269,((Float).9));
HXLINE(  96)				g->moveTo(pl->__get(0).StaticCast<  ::org::poly2tri::Point >()->x,pl->__get(0).StaticCast<  ::org::poly2tri::Point >()->y);
HXLINE(  97)				g->lineTo(pl->__get(1).StaticCast<  ::org::poly2tri::Point >()->x,pl->__get(1).StaticCast<  ::org::poly2tri::Point >()->y);
HXLINE(  98)				g->lineTo(pl->__get(2).StaticCast<  ::org::poly2tri::Point >()->x,pl->__get(2).StaticCast<  ::org::poly2tri::Point >()->y);
HXLINE(  99)				g->lineTo(pl->__get(0).StaticCast<  ::org::poly2tri::Point >()->x,pl->__get(0).StaticCast<  ::org::poly2tri::Point >()->y);
HXLINE( 100)				g->endFill();
            			}
            		}
HXLINE( 103)		g->lineStyle(1,13832709,1,null(),null(),null(),null(),null());
HXLINE( 105)		{
HXLINE( 105)			int _g2 = 0;
HXDLIN( 105)			::Array< ::Dynamic> _g3 = this->sweepContext->triangles;
HXDLIN( 105)			while((_g2 < _g3->length)){
HXLINE( 105)				 ::org::poly2tri::Triangle t = _g3->__get(_g2).StaticCast<  ::org::poly2tri::Triangle >();
HXDLIN( 105)				_g2 = (_g2 + 1);
HXLINE( 107)				pl = t->points;
HXLINE( 109)				g->moveTo(pl->__get(0).StaticCast<  ::org::poly2tri::Point >()->x,pl->__get(0).StaticCast<  ::org::poly2tri::Point >()->y);
HXLINE( 110)				g->lineTo(pl->__get(1).StaticCast<  ::org::poly2tri::Point >()->x,pl->__get(1).StaticCast<  ::org::poly2tri::Point >()->y);
HXLINE( 111)				g->lineTo(pl->__get(2).StaticCast<  ::org::poly2tri::Point >()->x,pl->__get(2).StaticCast<  ::org::poly2tri::Point >()->y);
HXLINE( 112)				g->lineTo(pl->__get(0).StaticCast<  ::org::poly2tri::Point >()->x,pl->__get(0).StaticCast<  ::org::poly2tri::Point >()->y);
            			}
            		}
HXLINE( 115)		g->lineStyle(2,9722146,2,null(),null(),null(),null(),null());
HXLINE( 117)		{
HXLINE( 117)			int _g4 = 0;
HXDLIN( 117)			::Array< ::Dynamic> _g5 = this->sweepContext->edge_list;
HXDLIN( 117)			while((_g4 < _g5->length)){
HXLINE( 117)				 ::org::poly2tri::Edge e = _g5->__get(_g4).StaticCast<  ::org::poly2tri::Edge >();
HXDLIN( 117)				_g4 = (_g4 + 1);
HXLINE( 119)				g->moveTo(e->p->x,e->p->y);
HXLINE( 120)				g->lineTo(e->q->x,e->q->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VisiblePolygon_obj,drawShape,(void))


::hx::ObjectPtr< VisiblePolygon_obj > VisiblePolygon_obj::__new() {
	::hx::ObjectPtr< VisiblePolygon_obj > __this = new VisiblePolygon_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< VisiblePolygon_obj > VisiblePolygon_obj::__alloc(::hx::Ctx *_hx_ctx) {
	VisiblePolygon_obj *__this = (VisiblePolygon_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VisiblePolygon_obj), true, "org.poly2tri.VisiblePolygon"));
	*(void **)__this = VisiblePolygon_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VisiblePolygon_obj::VisiblePolygon_obj()
{
}

void VisiblePolygon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VisiblePolygon);
	HX_MARK_MEMBER_NAME(sweepContext,"sweepContext");
	HX_MARK_MEMBER_NAME(sweep,"sweep");
	HX_MARK_MEMBER_NAME(triangulated,"triangulated");
	HX_MARK_END_CLASS();
}

void VisiblePolygon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sweepContext,"sweepContext");
	HX_VISIT_MEMBER_NAME(sweep,"sweep");
	HX_VISIT_MEMBER_NAME(triangulated,"triangulated");
}

::hx::Val VisiblePolygon_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"sweep") ) { return ::hx::Val( sweep ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawShape") ) { return ::hx::Val( drawShape_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addPolyline") ) { return ::hx::Val( addPolyline_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sweepContext") ) { return ::hx::Val( sweepContext ); }
		if (HX_FIELD_EQ(inName,"triangulated") ) { return ::hx::Val( triangulated ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getNumTriangles") ) { return ::hx::Val( getNumTriangles_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"addPolylineFromFloats") ) { return ::hx::Val( addPolylineFromFloats_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getVerticesAndTriangles") ) { return ::hx::Val( getVerticesAndTriangles_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"performTriangulationOnce") ) { return ::hx::Val( performTriangulationOnce_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VisiblePolygon_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"sweep") ) { sweep=inValue.Cast<  ::org::poly2tri::Sweep >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sweepContext") ) { sweepContext=inValue.Cast<  ::org::poly2tri::SweepContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triangulated") ) { triangulated=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VisiblePolygon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sweepContext",63,7d,dc,73));
	outFields->push(HX_("sweep",ec,15,0a,86));
	outFields->push(HX_("triangulated",b8,21,1b,80));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VisiblePolygon_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::org::poly2tri::SweepContext */ ,(int)offsetof(VisiblePolygon_obj,sweepContext),HX_("sweepContext",63,7d,dc,73)},
	{::hx::fsObject /*  ::org::poly2tri::Sweep */ ,(int)offsetof(VisiblePolygon_obj,sweep),HX_("sweep",ec,15,0a,86)},
	{::hx::fsBool,(int)offsetof(VisiblePolygon_obj,triangulated),HX_("triangulated",b8,21,1b,80)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VisiblePolygon_obj_sStaticStorageInfo = 0;
#endif

static ::String VisiblePolygon_obj_sMemberFields[] = {
	HX_("sweepContext",63,7d,dc,73),
	HX_("sweep",ec,15,0a,86),
	HX_("triangulated",b8,21,1b,80),
	HX_("addPolyline",81,e3,f6,60),
	HX_("addPolylineFromFloats",42,db,ef,14),
	HX_("reset",cf,49,c8,e6),
	HX_("performTriangulationOnce",8f,01,d6,6c),
	HX_("getVerticesAndTriangles",23,1c,32,b7),
	HX_("getNumTriangles",3b,8f,9b,49),
	HX_("drawShape",7d,18,28,44),
	::String(null()) };

::hx::Class VisiblePolygon_obj::__mClass;

void VisiblePolygon_obj::__register()
{
	VisiblePolygon_obj _hx_dummy;
	VisiblePolygon_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("org.poly2tri.VisiblePolygon",87,f1,d9,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VisiblePolygon_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VisiblePolygon_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VisiblePolygon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VisiblePolygon_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace poly2tri
