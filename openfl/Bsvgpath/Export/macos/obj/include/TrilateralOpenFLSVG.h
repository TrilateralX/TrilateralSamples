// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_TrilateralOpenFLSVG
#define INCLUDED_TrilateralOpenFLSVG

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_trilateral3_target_openfl_AppOpenFL
#include <trilateral3/target/openfl/AppOpenFL.h>
#endif
HX_DECLARE_CLASS0(TrilateralOpenFLSVG)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS3(trilateral3,target,openfl,AppOpenFL)



class HXCPP_CLASS_ATTRIBUTES TrilateralOpenFLSVG_obj : public  ::trilateral3::target::openfl::AppOpenFL_obj
{
	public:
		typedef  ::trilateral3::target::openfl::AppOpenFL_obj super;
		typedef TrilateralOpenFLSVG_obj OBJ_;
		TrilateralOpenFLSVG_obj();

	public:
		enum { _hx_ClassId = 0x76d5d788 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="TrilateralOpenFLSVG")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"TrilateralOpenFLSVG"); }
		static ::hx::ObjectPtr< TrilateralOpenFLSVG_obj > __new();
		static ::hx::ObjectPtr< TrilateralOpenFLSVG_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TrilateralOpenFLSVG_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TrilateralOpenFLSVG",48,52,33,03); }

		::String quadtest_d;
		::String cubictest_d;
		void draw();

		void cubicSVG();
		::Dynamic cubicSVG_dyn();

		void quadSVG();
		::Dynamic quadSVG_dyn();

		void renderDraw();

};


#endif /* INCLUDED_TrilateralOpenFLSVG */ 
