// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_pallette_utils__ColorHelper_ColorHelper_Fields_
#define INCLUDED_pallette_utils__ColorHelper_ColorHelper_Fields_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(pallette,utils,_ColorHelper,ColorHelper_Fields_)

namespace pallette{
namespace utils{
namespace _ColorHelper{


class HXCPP_CLASS_ATTRIBUTES ColorHelper_Fields__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ColorHelper_Fields__obj OBJ_;
		ColorHelper_Fields__obj();

	public:
		enum { _hx_ClassId = 0x4e482f66 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pallette.utils._ColorHelper.ColorHelper_Fields_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pallette.utils._ColorHelper.ColorHelper_Fields_"); }

		inline static ::hx::ObjectPtr< ColorHelper_Fields__obj > __new() {
			::hx::ObjectPtr< ColorHelper_Fields__obj > __this = new ColorHelper_Fields__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ColorHelper_Fields__obj > __alloc(::hx::Ctx *_hx_ctx) {
			ColorHelper_Fields__obj *__this = (ColorHelper_Fields__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ColorHelper_Fields__obj), false, "pallette.utils._ColorHelper.ColorHelper_Fields_"));
			*(void **)__this = ColorHelper_Fields__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ColorHelper_Fields__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ColorHelper_Fields_",38,3d,68,74); }

		static ::String htmlRGBA(Float r_,Float g_,Float b_,Float a_);
		static ::Dynamic htmlRGBA_dyn();

		static ::String htmlHex(Float r,Float g,Float b);
		static ::Dynamic htmlHex_dyn();

		static Float getBlack(Float r,Float g,Float b);
		static ::Dynamic getBlack_dyn();

		static int from_cymka(Float c,Float y,Float m,Float k,Float a);
		static ::Dynamic from_cymka_dyn();

		static int from_cymk(Float c,Float y,Float m,Float k);
		static ::Dynamic from_cymk_dyn();

		static int from_argb(Float a,Float r,Float g,Float b);
		static ::Dynamic from_argb_dyn();

		static int from_rgb(Float r,Float g,Float b);
		static ::Dynamic from_rgb_dyn();

		static int toHexInt(Float c);
		static ::Dynamic toHexInt_dyn();

		static Float rgbConvert(Float color,Float k);
		static ::Dynamic rgbConvert_dyn();

		static Float cymkConvert(Float color,Float black);
		static ::Dynamic cymkConvert_dyn();

		static Float alphaChannel(int _hx_int);
		static ::Dynamic alphaChannel_dyn();

		static Float redChannel(int _hx_int);
		static ::Dynamic redChannel_dyn();

		static Float greenChannel(int _hx_int);
		static ::Dynamic greenChannel_dyn();

		static Float blueChannel(int _hx_int);
		static ::Dynamic blueChannel_dyn();

		static int argbInt(int a,int r,int g,int b);
		static ::Dynamic argbInt_dyn();

		static ::Array< int > percentHex;
		static ::Array< int > get_percentHex();
		static ::Dynamic get_percentHex_dyn();

		static int percentWhite(int percent);
		static ::Dynamic percentWhite_dyn();

		static int percentBlack(int percent);
		static ::Dynamic percentBlack_dyn();

		static int rgbPercent(int rPercent,int gPercent,int bPercent);
		static ::Dynamic rgbPercent_dyn();

		static int percentColor(int rPercent,int gPercent,int bPercent);
		static ::Dynamic percentColor_dyn();

		static int percentDarkColor(int rPercent,int gPercent,int bPercent);
		static ::Dynamic percentDarkColor_dyn();

		static int percentRed(int rPercent);
		static ::Dynamic percentRed_dyn();

		static int percentGreen(int gPercent);
		static ::Dynamic percentGreen_dyn();

		static int percentBlue(int bPercent);
		static ::Dynamic percentBlue_dyn();

		static int percentRedSoft(int rPercent,int percentSoft);
		static ::Dynamic percentRedSoft_dyn();

		static int percentGreenSoft(int gPercent,int percentSoft);
		static ::Dynamic percentGreenSoft_dyn();

		static int percentBlueSoft(int bPercent,int percentSoft);
		static ::Dynamic percentBlueSoft_dyn();

		static int percentYellowSoft(int bPercent,int percentSoft);
		static ::Dynamic percentYellowSoft_dyn();

		static int percentMagentaSoft(int bPercent,int percentSoft);
		static ::Dynamic percentMagentaSoft_dyn();

		static int percentCyanSoft(int bPercent,int percentSoft);
		static ::Dynamic percentCyanSoft_dyn();

};

} // end namespace pallette
} // end namespace utils
} // end namespace _ColorHelper

#endif /* INCLUDED_pallette_utils__ColorHelper_ColorHelper_Fields_ */ 
