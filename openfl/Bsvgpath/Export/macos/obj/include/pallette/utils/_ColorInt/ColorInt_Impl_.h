// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_pallette_utils__ColorInt_ColorInt_Impl_
#define INCLUDED_pallette_utils__ColorInt_ColorInt_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(pallette,utils,ARGB)
HX_DECLARE_CLASS2(pallette,utils,CYMK)
HX_DECLARE_CLASS2(pallette,utils,CYMKA)
HX_DECLARE_CLASS2(pallette,utils,RGB)
HX_DECLARE_CLASS3(pallette,utils,_ColorInt,ColorInt_Impl_)

namespace pallette{
namespace utils{
namespace _ColorInt{


class HXCPP_CLASS_ATTRIBUTES ColorInt_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ColorInt_Impl__obj OBJ_;
		ColorInt_Impl__obj();

	public:
		enum { _hx_ClassId = 0x67eeb23b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pallette.utils._ColorInt.ColorInt_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pallette.utils._ColorInt.ColorInt_Impl_"); }

		inline static ::hx::ObjectPtr< ColorInt_Impl__obj > __new() {
			::hx::ObjectPtr< ColorInt_Impl__obj > __this = new ColorInt_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ColorInt_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			ColorInt_Impl__obj *__this = (ColorInt_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ColorInt_Impl__obj), false, "pallette.utils._ColorInt.ColorInt_Impl_"));
			*(void **)__this = ColorInt_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ColorInt_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ColorInt_Impl_",0c,65,f6,4e); }

		static int _new(int v);
		static ::Dynamic _new_dyn();

		static int fromARGB( ::pallette::utils::ARGB argb);
		static ::Dynamic fromARGB_dyn();

		static int fromRGB( ::pallette::utils::RGB argb);
		static ::Dynamic fromRGB_dyn();

		static ::String htmlStyleRGBA(int this1);
		static ::Dynamic htmlStyleRGBA_dyn();

		static ::String htmlStyleHex(int this1);
		static ::Dynamic htmlStyleHex_dyn();

		static  ::pallette::utils::ARGB toARGB(int this1);
		static ::Dynamic toARGB_dyn();

		static  ::pallette::utils::RGB toRGB(int this1);
		static ::Dynamic toRGB_dyn();

		static int fromCYMKA( ::pallette::utils::CYMKA c);
		static ::Dynamic fromCYMKA_dyn();

		static int fromCYMK( ::pallette::utils::CYMK c);
		static ::Dynamic fromCYMK_dyn();

		static  ::pallette::utils::CYMKA toCYMKA(int this1);
		static ::Dynamic toCYMKA_dyn();

		static  ::pallette::utils::CYMK toCYMK(int this1);
		static ::Dynamic toCYMK_dyn();

		static Float get_cyan(int this1);
		static ::Dynamic get_cyan_dyn();

		static Float set_cyan(int this1,Float v);
		static ::Dynamic set_cyan_dyn();

		static Float get_yellow(int this1);
		static ::Dynamic get_yellow_dyn();

		static Float set_yellow(int this1,Float v);
		static ::Dynamic set_yellow_dyn();

		static Float get_magenta(int this1);
		static ::Dynamic get_magenta_dyn();

		static Float set_magenta(int this1,Float v);
		static ::Dynamic set_magenta_dyn();

		static Float get_black(int this1);
		static ::Dynamic get_black_dyn();

		static Float set_black(int this1,Float v);
		static ::Dynamic set_black_dyn();

		static Float get_alpha(int this1);
		static ::Dynamic get_alpha_dyn();

		static Float set_alpha(int this1,Float v);
		static ::Dynamic set_alpha_dyn();

		static Float get_red(int this1);
		static ::Dynamic get_red_dyn();

		static Float set_red(int this1,Float v);
		static ::Dynamic set_red_dyn();

		static Float get_green(int this1);
		static ::Dynamic get_green_dyn();

		static Float set_green(int this1,Float v);
		static ::Dynamic set_green_dyn();

		static Float get_blue(int this1);
		static ::Dynamic get_blue_dyn();

		static Float set_blue(int this1,Float v);
		static ::Dynamic set_blue_dyn();

		static int aiCYMKA(::Array< ::String > arr,::hx::Null< Float >  alpha);
		static ::Dynamic aiCYMKA_dyn();

		static int aiARGB(::Array< ::String > arr,::hx::Null< Float >  alpha);
		static ::Dynamic aiARGB_dyn();

		static int aiGreyA(::String s,::hx::Null< Float >  alpha);
		static ::Dynamic aiGreyA_dyn();

		static  ::pallette::utils::CYMKA ARGB_CYMKA( ::pallette::utils::ARGB v);
		static ::Dynamic ARGB_CYMKA_dyn();

		static  ::pallette::utils::ARGB CYMKA_ARGB( ::pallette::utils::CYMKA v);
		static ::Dynamic CYMKA_ARGB_dyn();

		static Float luminosityGrey(int this1,::hx::Null< Float >  scale);
		static ::Dynamic luminosityGrey_dyn();

		static int blendARGB(int this1,int colB,Float t);
		static ::Dynamic blendARGB_dyn();

		static int blendRGB(int this1,int colB,Float t);
		static ::Dynamic blendRGB_dyn();

		static Float blend(int this1,Float a,Float b,Float t);
		static ::Dynamic blend_dyn();

		static Float smootherStep(int this1,Float t);
		static ::Dynamic smootherStep_dyn();

		static int whitePercent(int percent);
		static ::Dynamic whitePercent_dyn();

		static int whiteRatio(Float ratio);
		static ::Dynamic whiteRatio_dyn();

		static int blackPercent(int percent);
		static ::Dynamic blackPercent_dyn();

		static int blackRatio(Float ratio);
		static ::Dynamic blackRatio_dyn();

		static int colorPercent(int rPercent,int gPercent,int bPercent);
		static ::Dynamic colorPercent_dyn();

		static int colorRatio(Float rRatio,Float gRatio,Float bRatio);
		static ::Dynamic colorRatio_dyn();

		static int darkColorPercent(int rPercent,int gPercent,int bPercent);
		static ::Dynamic darkColorPercent_dyn();

		static int darkColorRatio(Float rRatio,Float gRatio,Float bRatio);
		static ::Dynamic darkColorRatio_dyn();

		static int redPercent(int percent);
		static ::Dynamic redPercent_dyn();

		static int redRatio(Float ratio);
		static ::Dynamic redRatio_dyn();

		static int greenPercent(int percent);
		static ::Dynamic greenPercent_dyn();

		static int greenRatio(Float ratio);
		static ::Dynamic greenRatio_dyn();

		static int bluePercent(int percent);
		static ::Dynamic bluePercent_dyn();

		static int blueRatio(Float ratio);
		static ::Dynamic blueRatio_dyn();

		static int redSoftPercent(int percent,int percentSoft);
		static ::Dynamic redSoftPercent_dyn();

		static int redSoftRatio(Float ratio,Float ratioSoft);
		static ::Dynamic redSoftRatio_dyn();

		static int greenSoftPercent(int percent,int percentSoft);
		static ::Dynamic greenSoftPercent_dyn();

		static int greenSoftRatio(Float ratio,Float ratioSoft);
		static ::Dynamic greenSoftRatio_dyn();

		static int blueSoftPercent(int percent,int percentSoft);
		static ::Dynamic blueSoftPercent_dyn();

		static int blueSoftRatio(Float ratio,Float ratioSoft);
		static ::Dynamic blueSoftRatio_dyn();

		static int yellowSoftPercent(int percent,int percentSoft);
		static ::Dynamic yellowSoftPercent_dyn();

		static int yellowSoftRatio(Float ratio,Float ratioSoft);
		static ::Dynamic yellowSoftRatio_dyn();

		static int magentaSoftPercent(int percent,int percentSoft);
		static ::Dynamic magentaSoftPercent_dyn();

		static int magentaSoftRatio(Float ratio,Float ratioSoft);
		static ::Dynamic magentaSoftRatio_dyn();

		static int cyanSoftPercent(int percent,int percentSoft);
		static ::Dynamic cyanSoftPercent_dyn();

		static int cyanSoftRatio(Float ratio,Float ratioSoft);
		static ::Dynamic cyanSoftRatio_dyn();

};

} // end namespace pallette
} // end namespace utils
} // end namespace _ColorInt

#endif /* INCLUDED_pallette_utils__ColorInt_ColorInt_Impl_ */ 
