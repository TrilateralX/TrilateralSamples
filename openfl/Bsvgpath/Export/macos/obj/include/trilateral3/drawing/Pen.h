// Generated by Haxe 4.2.0-rc.1+7dc565e63
#ifndef INCLUDED_trilateral3_drawing_Pen
#define INCLUDED_trilateral3_drawing_Pen

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(trilateral3,drawing,Pen)
HX_DECLARE_CLASS2(trilateral3,matrix,MatrixDozen)
HX_DECLARE_CLASS2(trilateral3,matrix,Vertex)
HX_DECLARE_CLASS2(trilateral3,structure,StartEnd)

namespace trilateral3{
namespace drawing{


class HXCPP_CLASS_ATTRIBUTES Pen_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Pen_obj OBJ_;
		Pen_obj();

	public:
		enum { _hx_ClassId = 0x33d0c03e };

		void __construct( ::Dynamic drawType_, ::Dynamic colorType_);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="trilateral3.drawing.Pen")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"trilateral3.drawing.Pen"); }
		static ::hx::ObjectPtr< Pen_obj > __new( ::Dynamic drawType_, ::Dynamic colorType_);
		static ::hx::ObjectPtr< Pen_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic drawType_, ::Dynamic colorType_);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Pen_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Pen",b9,0c,3d,00); }

		Float rounded;
		Float dz;
		int currentColor;
		 ::Dynamic drawType;
		 ::Dynamic colorType;
		 ::Dynamic translateX;
		Dynamic translateX_dyn() { return translateX;}
		 ::Dynamic translateY;
		Dynamic translateY_dyn() { return translateY;}
		 ::Dynamic translateZ;
		Dynamic translateZ_dyn() { return translateZ;}
		 ::Dynamic rotateX;
		Dynamic rotateX_dyn() { return rotateX;}
		 ::Dynamic rotateY;
		Dynamic rotateY_dyn() { return rotateY;}
		 ::Dynamic rotateZ;
		Dynamic rotateZ_dyn() { return rotateZ;}
		::Array< int > indices;
		void transformRange( ::trilateral3::matrix::MatrixDozen trans, ::trilateral3::structure::StartEnd ir);
		::Dynamic transformRange_dyn();

		void up( ::trilateral3::structure::StartEnd ir);
		::Dynamic up_dyn();

		void down( ::trilateral3::structure::StartEnd ir);
		::Dynamic down_dyn();

		void back( ::trilateral3::structure::StartEnd ir);
		::Dynamic back_dyn();

		 ::trilateral3::matrix::MatrixDozen transBack();
		::Dynamic transBack_dyn();

		void cornerColor(::hx::Null< int >  color);
		::Dynamic cornerColor_dyn();

		void cornerColors(int colorA,int colorB,int colorC);
		::Dynamic cornerColors_dyn();

		void middleColor(int color,int colorCentre);
		::Dynamic middleColor_dyn();

		void middleColors(int color,int colorCentre,int times);
		::Dynamic middleColors_dyn();

		void colorTriangles(int color,int times);
		::Dynamic colorTriangles_dyn();

		void addTriangle(float ax,float ay,float az,float bx,float by,float bz,float cx,float cy,float cz);
		::Dynamic addTriangle_dyn();

		int triangle2DFill(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< int >  color);
		::Dynamic triangle2DFill_dyn();

		Float get_pos();
		::Dynamic get_pos_dyn();

		Float set_pos(Float v);
		::Dynamic set_pos_dyn();

		 ::Dynamic get_triangleCurrent();
		::Dynamic get_triangleCurrent_dyn();

		 ::Dynamic get_color3Current();
		::Dynamic get_color3Current_dyn();

		 ::trilateral3::structure::StartEnd copyRange( ::trilateral3::drawing::Pen otherPen, ::trilateral3::structure::StartEnd startEnd, ::trilateral3::matrix::Vertex vec);
		::Dynamic copyRange_dyn();

};

} // end namespace trilateral3
} // end namespace drawing

#endif /* INCLUDED_trilateral3_drawing_Pen */ 
