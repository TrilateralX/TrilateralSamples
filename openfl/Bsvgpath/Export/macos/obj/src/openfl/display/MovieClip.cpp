// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_FilterType
#include <openfl/_internal/formats/swf/FilterType.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SpriteSymbol
#include <openfl/_internal/symbols/SpriteSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_timeline_Frame
#include <openfl/_internal/symbols/timeline/Frame.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_timeline_FrameObject
#include <openfl/_internal/symbols/timeline/FrameObject.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_timeline_FrameObjectType
#include <openfl/_internal/symbols/timeline/FrameObjectType.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_FrameLabel
#include <openfl/display/FrameLabel.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display__MovieClip_FrameSymbolInstance
#include <openfl/display/_MovieClip/FrameSymbolInstance.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BlurFilter
#include <openfl/filters/BlurFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_217_new,"openfl.display.MovieClip","new",0xe16984e8,"openfl.display.MovieClip.new","openfl/display/MovieClip.hx",217,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_239_addFrameScript,"openfl.display.MovieClip","addFrameScript",0xff5029ef,"openfl.display.MovieClip.addFrameScript","openfl/display/MovieClip.hx",239,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_273_gotoAndPlay,"openfl.display.MovieClip","gotoAndPlay",0x3bade190,"openfl.display.MovieClip.gotoAndPlay","openfl/display/MovieClip.hx",273,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_296_gotoAndStop,"openfl.display.MovieClip","gotoAndStop",0x3dafa39e,"openfl.display.MovieClip.gotoAndStop","openfl/display/MovieClip.hx",296,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_307_nextFrame,"openfl.display.MovieClip","nextFrame",0x3b845cc2,"openfl.display.MovieClip.nextFrame","openfl/display/MovieClip.hx",307,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_319_play,"openfl.display.MovieClip","play",0x5c42706c,"openfl.display.MovieClip.play","openfl/display/MovieClip.hx",319,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_337_prevFrame,"openfl.display.MovieClip","prevFrame",0x7f95e2c2,"openfl.display.MovieClip.prevFrame","openfl/display/MovieClip.hx",337,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_350_stop,"openfl.display.MovieClip","stop",0x5e44327a,"openfl.display.MovieClip.stop","openfl/display/MovieClip.hx",350,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_354___enterFrame,"openfl.display.MovieClip","__enterFrame",0x9306f98d,"openfl.display.MovieClip.__enterFrame","openfl/display/MovieClip.hx",354,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_363___updateFrameScript,"openfl.display.MovieClip","__updateFrameScript",0x594733f7,"openfl.display.MovieClip.__updateFrameScript","openfl/display/MovieClip.hx",363,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_401___updateSymbol,"openfl.display.MovieClip","__updateSymbol",0x5332e1d9,"openfl.display.MovieClip.__updateSymbol","openfl/display/MovieClip.hx",401,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_548___evaluateFrameScripts,"openfl.display.MovieClip","__evaluateFrameScripts",0xeeb7ecec,"openfl.display.MovieClip.__evaluateFrameScripts","openfl/display/MovieClip.hx",548,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_578___fromSymbol,"openfl.display.MovieClip","__fromSymbol",0xc2d8a9fa,"openfl.display.MovieClip.__fromSymbol","openfl/display/MovieClip.hx",578,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_812___getNextFrame,"openfl.display.MovieClip","__getNextFrame",0x21b0ba5c,"openfl.display.MovieClip.__getNextFrame","openfl/display/MovieClip.hx",812,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_833___goto,"openfl.display.MovieClip","__goto",0x81b9cd3b,"openfl.display.MovieClip.__goto","openfl/display/MovieClip.hx",833,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_845___resolveFrameReference,"openfl.display.MovieClip","__resolveFrameReference",0x22812f52,"openfl.display.MovieClip.__resolveFrameReference","openfl/display/MovieClip.hx",845,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_871___sortDepths,"openfl.display.MovieClip","__sortDepths",0x5b255da6,"openfl.display.MovieClip.__sortDepths","openfl/display/MovieClip.hx",871,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_875___stopAllMovieClips,"openfl.display.MovieClip","__stopAllMovieClips",0x702dce5a,"openfl.display.MovieClip.__stopAllMovieClips","openfl/display/MovieClip.hx",875,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_881___tabTest,"openfl.display.MovieClip","__tabTest",0x5479b8af,"openfl.display.MovieClip.__tabTest","openfl/display/MovieClip.hx",881,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_887___updateDisplayObject,"openfl.display.MovieClip","__updateDisplayObject",0x83a2ca40,"openfl.display.MovieClip.__updateDisplayObject","openfl/display/MovieClip.hx",887,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_959___updateFrameLabel,"openfl.display.MovieClip","__updateFrameLabel",0x555c4988,"openfl.display.MovieClip.__updateFrameLabel","openfl/display/MovieClip.hx",959,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_986___updateInstanceFields,"openfl.display.MovieClip","__updateInstanceFields",0x2ea09b6f,"openfl.display.MovieClip.__updateInstanceFields","openfl/display/MovieClip.hx",986,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1001___onMouseDown,"openfl.display.MovieClip","__onMouseDown",0x20658370,"openfl.display.MovieClip.__onMouseDown","openfl/display/MovieClip.hx",1001,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1012___onMouseUp,"openfl.display.MovieClip","__onMouseUp",0x127371e9,"openfl.display.MovieClip.__onMouseUp","openfl/display/MovieClip.hx",1012,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1036___onRollOut,"openfl.display.MovieClip","__onRollOut",0xaf12771a,"openfl.display.MovieClip.__onRollOut","openfl/display/MovieClip.hx",1036,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1051___onRollOver,"openfl.display.MovieClip","__onRollOver",0x81167548,"openfl.display.MovieClip.__onRollOver","openfl/display/MovieClip.hx",1051,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1059_set_buttonMode,"openfl.display.MovieClip","set_buttonMode",0x8c3dbbaa,"openfl.display.MovieClip.set_buttonMode","openfl/display/MovieClip.hx",1059,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1104_get_currentFrame,"openfl.display.MovieClip","get_currentFrame",0xf2ac6035,"openfl.display.MovieClip.get_currentFrame","openfl/display/MovieClip.hx",1104,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1109_get_currentFrameLabel,"openfl.display.MovieClip","get_currentFrameLabel",0x543e3d7f,"openfl.display.MovieClip.get_currentFrameLabel","openfl/display/MovieClip.hx",1109,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1114_get_currentLabel,"openfl.display.MovieClip","get_currentLabel",0x5bd7f5fc,"openfl.display.MovieClip.get_currentLabel","openfl/display/MovieClip.hx",1114,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1119_get_currentLabels,"openfl.display.MovieClip","get_currentLabels",0x011f46f7,"openfl.display.MovieClip.get_currentLabels","openfl/display/MovieClip.hx",1119,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1124_get_enabled,"openfl.display.MovieClip","get_enabled",0x5054e120,"openfl.display.MovieClip.get_enabled","openfl/display/MovieClip.hx",1124,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1129_set_enabled,"openfl.display.MovieClip","set_enabled",0x5ac1e82c,"openfl.display.MovieClip.set_enabled","openfl/display/MovieClip.hx",1129,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1134_get_framesLoaded,"openfl.display.MovieClip","get_framesLoaded",0xb37eaf4c,"openfl.display.MovieClip.get_framesLoaded","openfl/display/MovieClip.hx",1134,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1139_get_isPlaying,"openfl.display.MovieClip","get_isPlaying",0x16620f03,"openfl.display.MovieClip.get_isPlaying","openfl/display/MovieClip.hx",1139,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1144_get_totalFrames,"openfl.display.MovieClip","get_totalFrames",0x46b3baa9,"openfl.display.MovieClip.get_totalFrames","openfl/display/MovieClip.hx",1144,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_82_boot,"openfl.display.MovieClip","boot",0x5303c6aa,"openfl.display.MovieClip.boot","openfl/display/MovieClip.hx",82,0x2b84738a)
namespace openfl{
namespace display{

void MovieClip_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_217_new)
HXLINE( 218)		super::__construct();
HXLINE( 220)		this->_hx___currentFrame = 1;
HXLINE( 221)		this->_hx___currentLabels = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 222)		this->_hx___instanceFields = ::Array_obj< ::String >::__new(0);
HXLINE( 223)		this->_hx___totalFrames = 0;
HXLINE( 224)		this->_hx___enabled = true;
HXLINE( 226)		if (::hx::IsNotNull( ::openfl::display::MovieClip_obj::_hx___initSymbol )) {
HXLINE( 228)			this->_hx___swf = ::openfl::display::MovieClip_obj::_hx___initSWF;
HXLINE( 229)			this->_hx___symbol = ::openfl::display::MovieClip_obj::_hx___initSymbol;
HXLINE( 231)			::openfl::display::MovieClip_obj::_hx___initSWF = null();
HXLINE( 232)			::openfl::display::MovieClip_obj::_hx___initSymbol = null();
HXLINE( 234)			this->_hx___fromSymbol(this->_hx___swf,this->_hx___symbol);
            		}
            	}

Dynamic MovieClip_obj::__CreateEmpty() { return new MovieClip_obj; }

void *MovieClip_obj::_hx_vtable = 0;

Dynamic MovieClip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MovieClip_obj > _hx_result = new MovieClip_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MovieClip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17c2d032) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x17c2d032;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void MovieClip_obj::addFrameScript(int index, ::Dynamic method){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_239_addFrameScript)
HXLINE( 240)		if ((index < 0)) {
HXLINE( 240)			return;
            		}
HXLINE( 241)		int frame = (index + 1);
HXLINE( 243)		if (::hx::IsNotNull( method )) {
HXLINE( 245)			if (::hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 247)				this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 250)			this->_hx___frameScripts->set(frame,method);
            		}
            		else {
HXLINE( 252)			if (::hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE( 254)				this->_hx___frameScripts->remove(frame);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,addFrameScript,(void))

void MovieClip_obj::gotoAndPlay( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_273_gotoAndPlay)
HXLINE( 274)		this->play();
HXLINE( 275)		this->_hx___goto(this->_hx___resolveFrameReference(frame));
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndPlay,(void))

void MovieClip_obj::gotoAndStop( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_296_gotoAndStop)
HXLINE( 297)		this->stop();
HXLINE( 298)		this->_hx___goto(this->_hx___resolveFrameReference(frame));
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndStop,(void))

void MovieClip_obj::nextFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_307_nextFrame)
HXLINE( 308)		this->stop();
HXLINE( 309)		this->_hx___goto((this->_hx___currentFrame + 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,nextFrame,(void))

void MovieClip_obj::play(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_319_play)
HXLINE( 320)		bool _hx_tmp;
HXDLIN( 320)		bool _hx_tmp1;
HXDLIN( 320)		if (::hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 320)			_hx_tmp1 = this->_hx___playing;
            		}
            		else {
HXLINE( 320)			_hx_tmp1 = true;
            		}
HXDLIN( 320)		if (!(_hx_tmp1)) {
HXLINE( 320)			_hx_tmp = (this->_hx___totalFrames < 2);
            		}
            		else {
HXLINE( 320)			_hx_tmp = true;
            		}
HXDLIN( 320)		if (_hx_tmp) {
HXLINE( 320)			return;
            		}
HXLINE( 322)		this->_hx___playing = true;
HXLINE( 325)		{
HXLINE( 326)			this->_hx___frameTime = ::Std_obj::_hx_int((( (Float)(1000) ) / this->_hx___swf->frameRate));
HXLINE( 327)			this->_hx___timeElapsed = 0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,play,(void))

void MovieClip_obj::prevFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_337_prevFrame)
HXLINE( 338)		this->stop();
HXLINE( 339)		this->_hx___goto((this->_hx___currentFrame - 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,prevFrame,(void))

void MovieClip_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_350_stop)
HXDLIN( 350)		this->_hx___playing = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,stop,(void))

void MovieClip_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_354___enterFrame)
HXLINE( 355)		this->_hx___updateFrameScript(deltaTime);
HXLINE( 356)		this->_hx___updateSymbol(this->_hx___currentFrame);
HXLINE( 358)		this->super::_hx___enterFrame(deltaTime);
            	}


void MovieClip_obj::_hx___updateFrameScript(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_363___updateFrameScript)
HXDLIN( 363)		bool _hx_tmp;
HXDLIN( 363)		if (::hx::IsNotNull( this->_hx___symbol )) {
HXDLIN( 363)			_hx_tmp = this->_hx___playing;
            		}
            		else {
HXDLIN( 363)			_hx_tmp = false;
            		}
HXDLIN( 363)		if (_hx_tmp) {
HXLINE( 365)			int nextFrame = this->_hx___getNextFrame(deltaTime);
HXLINE( 367)			if ((this->_hx___lastFrameScriptEval == nextFrame)) {
HXLINE( 369)				this->super::_hx___enterFrame(deltaTime);
HXLINE( 370)				return;
            			}
HXLINE( 373)			if (::hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE( 375)				if ((nextFrame < this->_hx___currentFrame)) {
HXLINE( 377)					if (!(this->_hx___evaluateFrameScripts(this->_hx___totalFrames))) {
HXLINE( 379)						this->super::_hx___enterFrame(deltaTime);
HXLINE( 380)						return;
            					}
HXLINE( 383)					this->_hx___currentFrame = 1;
            				}
HXLINE( 386)				if (!(this->_hx___evaluateFrameScripts(nextFrame))) {
HXLINE( 388)					this->super::_hx___enterFrame(deltaTime);
HXLINE( 389)					return;
            				}
            			}
            			else {
HXLINE( 394)				this->_hx___currentFrame = nextFrame;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___updateFrameScript,(void))

void MovieClip_obj::_hx___updateSymbol(int targetFrame){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_401___updateSymbol)
HXDLIN( 401)		bool _hx_tmp;
HXDLIN( 401)		if (::hx::IsNotNull( this->_hx___symbol )) {
HXDLIN( 401)			_hx_tmp = (this->_hx___currentFrame != this->_hx___lastFrameUpdate);
            		}
            		else {
HXDLIN( 401)			_hx_tmp = false;
            		}
HXDLIN( 401)		if (_hx_tmp) {
HXLINE( 403)			this->_hx___updateFrameLabel();
HXLINE( 405)			 ::haxe::ds::IntMap currentInstancesByFrameObjectID =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 407)			int frame;
HXLINE( 408)			 ::openfl::_internal::symbols::timeline::Frame frameData;
HXLINE( 409)			 ::openfl::display::_MovieClip::FrameSymbolInstance instance;
HXLINE( 413)			{
HXLINE( 413)				int _g = 0;
HXDLIN( 413)				int _g1 = targetFrame;
HXDLIN( 413)				while((_g < _g1)){
HXLINE( 413)					_g = (_g + 1);
HXDLIN( 413)					int i = (_g - 1);
HXLINE( 415)					frame = (i + 1);
HXLINE( 416)					frameData = this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::symbols::timeline::Frame >();
HXLINE( 418)					if (::hx::IsNull( frameData->objects )) {
HXLINE( 418)						continue;
            					}
HXLINE( 420)					{
HXLINE( 420)						int _g1 = 0;
HXDLIN( 420)						::Array< ::Dynamic> _g2 = frameData->objects;
HXDLIN( 420)						while((_g1 < _g2->length)){
HXLINE( 420)							 ::openfl::_internal::symbols::timeline::FrameObject frameObject = _g2->__get(_g1).StaticCast<  ::openfl::_internal::symbols::timeline::FrameObject >();
HXDLIN( 420)							_g1 = (_g1 + 1);
HXLINE( 422)							switch((int)(frameObject->type->_hx_getIndex())){
            								case (int)0: {
HXLINE( 425)									instance = ( ( ::openfl::display::_MovieClip::FrameSymbolInstance)(this->_hx___activeInstancesByFrameObjectID->get(frameObject->id)) );
HXLINE( 427)									if (::hx::IsNotNull( instance )) {
HXLINE( 429)										currentInstancesByFrameObjectID->set(frameObject->id,instance);
HXLINE( 430)										this->_hx___updateDisplayObject(instance->displayObject,frameObject,true);
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 434)									instance = ( ( ::openfl::display::_MovieClip::FrameSymbolInstance)(currentInstancesByFrameObjectID->get(frameObject->id)) );
HXLINE( 436)									bool _hx_tmp;
HXDLIN( 436)									if (::hx::IsNotNull( instance )) {
HXLINE( 436)										_hx_tmp = ::hx::IsNotNull( instance->displayObject );
            									}
            									else {
HXLINE( 436)										_hx_tmp = false;
            									}
HXDLIN( 436)									if (_hx_tmp) {
HXLINE( 438)										this->_hx___updateDisplayObject(instance->displayObject,frameObject,null());
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 442)									currentInstancesByFrameObjectID->remove(frameObject->id);
            								}
            								break;
            							}
            						}
            					}
            				}
            			}
HXLINE( 449)			::Array< ::Dynamic> currentInstances = ::Array_obj< ::Dynamic>::__new();
HXLINE( 450)			::Array< ::Dynamic> currentMasks = ::Array_obj< ::Dynamic>::__new();
HXLINE( 452)			{
HXLINE( 452)				 ::Dynamic instance1 = currentInstancesByFrameObjectID->iterator();
HXDLIN( 452)				while(( (bool)(instance1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 452)					 ::openfl::display::_MovieClip::FrameSymbolInstance instance = ( ( ::openfl::display::_MovieClip::FrameSymbolInstance)(instance1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 454)					if ((currentInstances->indexOf(instance,null()) == -1)) {
HXLINE( 456)						currentInstances->push(instance);
HXLINE( 458)						if ((instance->clipDepth > 0)) {
HXLINE( 460)							currentMasks->push(instance);
            						}
            					}
            				}
            			}
HXLINE( 465)			currentInstances->sort(this->_hx___sortDepths_dyn());
HXLINE( 467)			 ::openfl::display::DisplayObject existingChild;
HXLINE( 468)			int targetDepth;
HXLINE( 469)			 ::openfl::display::DisplayObject targetChild;
HXLINE( 470)			 ::openfl::display::DisplayObject child;
HXLINE( 471)			bool maskApplied;
HXLINE( 473)			{
HXLINE( 473)				int _g2 = 0;
HXDLIN( 473)				int _g3 = currentInstances->length;
HXDLIN( 473)				while((_g2 < _g3)){
HXLINE( 473)					_g2 = (_g2 + 1);
HXDLIN( 473)					int i = (_g2 - 1);
HXLINE( 475)					existingChild = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 476)					instance = currentInstances->__get(i).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXLINE( 478)					targetDepth = instance->depth;
HXLINE( 479)					targetChild = instance->displayObject;
HXLINE( 481)					if (::hx::IsInstanceNotEq( existingChild,targetChild )) {
HXLINE( 483)						child = targetChild;
HXLINE( 484)						this->addChildAt(targetChild,i);
            					}
            					else {
HXLINE( 488)						child = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
            					}
HXLINE( 491)					maskApplied = false;
HXLINE( 493)					{
HXLINE( 493)						int _g = 0;
HXDLIN( 493)						while((_g < currentMasks->length)){
HXLINE( 493)							 ::openfl::display::_MovieClip::FrameSymbolInstance mask = currentMasks->__get(_g).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXDLIN( 493)							_g = (_g + 1);
HXLINE( 495)							bool _hx_tmp;
HXDLIN( 495)							if ((targetDepth > mask->depth)) {
HXLINE( 495)								_hx_tmp = (targetDepth <= mask->clipDepth);
            							}
            							else {
HXLINE( 495)								_hx_tmp = false;
            							}
HXDLIN( 495)							if (_hx_tmp) {
HXLINE( 497)								child->set_mask(mask->displayObject);
HXLINE( 498)								maskApplied = true;
HXLINE( 499)								goto _hx_goto_14;
            							}
            						}
            						_hx_goto_14:;
            					}
HXLINE( 503)					bool _hx_tmp;
HXDLIN( 503)					bool _hx_tmp1;
HXDLIN( 503)					if ((currentMasks->length > 0)) {
HXLINE( 503)						_hx_tmp1 = !(maskApplied);
            					}
            					else {
HXLINE( 503)						_hx_tmp1 = false;
            					}
HXDLIN( 503)					if (_hx_tmp1) {
HXLINE( 503)						_hx_tmp = ::hx::IsNotNull( child->get_mask() );
            					}
            					else {
HXLINE( 503)						_hx_tmp = false;
            					}
HXDLIN( 503)					if (_hx_tmp) {
HXLINE( 505)						child->set_mask(null());
            					}
            				}
            			}
HXLINE( 509)			 ::openfl::display::DisplayObject child1;
HXLINE( 510)			int i = currentInstances->length;
HXLINE( 511)			int length = this->_hx___children->length;
HXLINE( 513)			while((i < length)){
HXLINE( 515)				child1 = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 519)				{
HXLINE( 519)					int _g = 0;
HXDLIN( 519)					::Array< ::Dynamic> _g1 = this->_hx___activeInstances;
HXDLIN( 519)					while((_g < _g1->length)){
HXLINE( 519)						 ::openfl::display::_MovieClip::FrameSymbolInstance instance = _g1->__get(_g).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXDLIN( 519)						_g = (_g + 1);
HXLINE( 521)						if (::hx::IsInstanceEq( instance->displayObject,child1 )) {
HXLINE( 524)							if (::Std_obj::isOfType(child1,( ( ::Dynamic)(::hx::ClassOf< ::openfl::display::MovieClip >()) ))) {
HXLINE( 526)								 ::openfl::display::MovieClip movie = ( ( ::openfl::display::MovieClip)(child1) );
HXLINE( 527)								movie->gotoAndPlay(1,null());
            							}
HXLINE( 530)							this->removeChild(child1);
HXLINE( 531)							i = (i - 1);
HXLINE( 532)							length = (length - 1);
            						}
            					}
            				}
HXLINE( 536)				i = (i + 1);
            			}
HXLINE( 539)			this->_hx___lastFrameUpdate = this->_hx___currentFrame;
HXLINE( 542)			this->_hx___updateInstanceFields();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___updateSymbol,(void))

bool MovieClip_obj::_hx___evaluateFrameScripts(int advanceToFrame){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_548___evaluateFrameScripts)
HXLINE( 549)		{
HXLINE( 549)			int _g = this->_hx___currentFrame;
HXDLIN( 549)			int _g1 = (advanceToFrame + 1);
HXDLIN( 549)			while((_g < _g1)){
HXLINE( 549)				_g = (_g + 1);
HXDLIN( 549)				int frame = (_g - 1);
HXLINE( 551)				if ((frame == this->_hx___lastFrameScriptEval)) {
HXLINE( 551)					continue;
            				}
HXLINE( 553)				this->_hx___lastFrameScriptEval = frame;
HXLINE( 554)				this->_hx___currentFrame = frame;
HXLINE( 556)				if (this->_hx___frameScripts->exists(frame)) {
HXLINE( 558)					this->_hx___updateSymbol(frame);
HXLINE( 559)					 ::Dynamic script = this->_hx___frameScripts->get(frame);
HXLINE( 560)					script();
HXLINE( 562)					if ((this->_hx___currentFrame != frame)) {
HXLINE( 564)						return false;
            					}
            				}
HXLINE( 568)				if (!(this->_hx___playing)) {
HXLINE( 570)					return false;
            				}
            			}
            		}
HXLINE( 574)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___evaluateFrameScripts,return )

void MovieClip_obj::_hx___fromSymbol( ::openfl::_internal::formats::swf::SWFLite swf, ::openfl::_internal::symbols::SpriteSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_578___fromSymbol)
HXLINE( 579)		if (::hx::IsNotNull( this->_hx___activeInstances )) {
HXLINE( 579)			return;
            		}
HXLINE( 581)		this->_hx___swf = swf;
HXLINE( 582)		this->_hx___symbol = symbol;
HXLINE( 584)		this->_hx___activeInstances = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 585)		this->_hx___activeInstancesByFrameObjectID =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 586)		this->_hx___currentFrame = 1;
HXLINE( 587)		this->_hx___lastFrameScriptEval = -1;
HXLINE( 588)		this->_hx___lastFrameUpdate = -1;
HXLINE( 589)		this->_hx___totalFrames = this->_hx___symbol->frames->length;
HXLINE( 591)		int frame;
HXLINE( 592)		 ::openfl::_internal::symbols::timeline::Frame frameData;
HXLINE( 598)		{
HXLINE( 598)			int _g = 0;
HXDLIN( 598)			int _g1 = this->_hx___symbol->frames->length;
HXDLIN( 598)			while((_g < _g1)){
HXLINE( 598)				_g = (_g + 1);
HXDLIN( 598)				int i = (_g - 1);
HXLINE( 600)				frame = (i + 1);
HXLINE( 601)				frameData = this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::symbols::timeline::Frame >();
HXLINE( 603)				if (::hx::IsNotNull( frameData->label )) {
HXLINE( 605)					::Array< ::Dynamic> _hx_tmp = this->_hx___currentLabels;
HXDLIN( 605)					_hx_tmp->push( ::openfl::display::FrameLabel_obj::__alloc( HX_CTX ,frameData->label,(i + 1)));
            				}
HXLINE( 608)				if (::hx::IsNotNull( frameData->script )) {
HXLINE( 610)					if (::hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 612)						this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            					}
HXLINE( 615)					this->_hx___frameScripts->set(frame,frameData->script);
            				}
            				else {
HXLINE( 617)					if (::hx::IsNotNull( frameData->scriptSource )) {
HXLINE( 619)						if (::hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 621)							this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            						}
HXLINE( 624)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g = _hx_e;
HXLINE(   1)								{
HXLINE(   1)									null();
            								}
HXLINE( 673)								if (::hx::IsNotNull( this->_hx___symbol->className )) {
HXLINE( 675)									::lime::utils::Log_obj::warn((((((HX_("Unable to evaluate frame script source for symbol \"",a3,42,39,7c) + this->_hx___symbol->className) + HX_("\" frame ",91,af,e7,77)) + frame) + HX_("\n",0a,00,00,00)) + frameData->scriptSource),::hx::SourceInfo(HX_("openfl/display/MovieClip.hx",8a,73,84,2b),675,HX_("openfl.display.MovieClip",f6,30,c3,c4),HX_("__fromSymbol",82,2f,b5,6a)));
            								}
            								else {
HXLINE( 680)									::lime::utils::Log_obj::warn((HX_("Unable to evaluate frame script source:\n",1e,90,6f,3e) + frameData->scriptSource),::hx::SourceInfo(HX_("openfl/display/MovieClip.hx",8a,73,84,2b),680,HX_("openfl.display.MovieClip",f6,30,c3,c4),HX_("__fromSymbol",82,2f,b5,6a)));
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 686)		int frame1;
HXLINE( 687)		 ::openfl::_internal::symbols::timeline::Frame frameData1;
HXLINE( 688)		 ::openfl::display::_MovieClip::FrameSymbolInstance instance;
HXLINE( 689)		bool duplicate;
HXLINE( 690)		 ::openfl::_internal::symbols::SWFSymbol symbol1;
HXLINE( 691)		 ::openfl::display::DisplayObject displayObject;
HXLINE( 695)		{
HXLINE( 695)			int _g2 = 0;
HXDLIN( 695)			int _g3 = this->_hx___totalFrames;
HXDLIN( 695)			while((_g2 < _g3)){
HXLINE( 695)				_g2 = (_g2 + 1);
HXDLIN( 695)				int i = (_g2 - 1);
HXLINE( 697)				frame1 = (i + 1);
HXLINE( 698)				frameData1 = this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::symbols::timeline::Frame >();
HXLINE( 700)				if (::hx::IsNull( frameData1->objects )) {
HXLINE( 700)					continue;
            				}
HXLINE( 702)				{
HXLINE( 702)					int _g = 0;
HXDLIN( 702)					::Array< ::Dynamic> _g1 = frameData1->objects;
HXDLIN( 702)					while((_g < _g1->length)){
HXLINE( 702)						 ::openfl::_internal::symbols::timeline::FrameObject frameObject = _g1->__get(_g).StaticCast<  ::openfl::_internal::symbols::timeline::FrameObject >();
HXDLIN( 702)						_g = (_g + 1);
HXLINE( 704)						if (::hx::IsPointerEq( frameObject->type,::openfl::_internal::symbols::timeline::FrameObjectType_obj::CREATE_dyn() )) {
HXLINE( 706)							if (this->_hx___activeInstancesByFrameObjectID->exists(frameObject->id)) {
HXLINE( 708)								continue;
            							}
            							else {
HXLINE( 712)								instance = null();
HXLINE( 713)								duplicate = false;
HXLINE( 715)								{
HXLINE( 715)									int _g = 0;
HXDLIN( 715)									::Array< ::Dynamic> _g1 = this->_hx___activeInstances;
HXDLIN( 715)									while((_g < _g1->length)){
HXLINE( 715)										 ::openfl::display::_MovieClip::FrameSymbolInstance activeInstance = _g1->__get(_g).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXDLIN( 715)										_g = (_g + 1);
HXLINE( 717)										bool _hx_tmp;
HXDLIN( 717)										bool _hx_tmp1;
HXDLIN( 717)										if (::hx::IsNotNull( activeInstance->displayObject )) {
HXLINE( 717)											_hx_tmp1 = (activeInstance->characterID == frameObject->symbol);
            										}
            										else {
HXLINE( 717)											_hx_tmp1 = false;
            										}
HXDLIN( 717)										if (_hx_tmp1) {
HXLINE( 717)											_hx_tmp = (activeInstance->depth == frameObject->depth);
            										}
            										else {
HXLINE( 717)											_hx_tmp = false;
            										}
HXDLIN( 717)										if (_hx_tmp) {
HXLINE( 722)											instance = activeInstance;
HXLINE( 723)											duplicate = true;
HXLINE( 724)											goto _hx_goto_23;
            										}
            									}
            									_hx_goto_23:;
            								}
            							}
HXLINE( 729)							if (::hx::IsNull( instance )) {
HXLINE( 731)								symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(this->_hx___swf->symbols->get(frameObject->symbol)) );
HXLINE( 733)								if (::hx::IsNotNull( symbol1 )) {
HXLINE( 735)									displayObject = symbol1->_hx___createObject(this->_hx___swf);
HXLINE( 737)									if (::hx::IsNotNull( displayObject )) {
HXLINE( 739)										displayObject->parent = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 740)										displayObject->stage = this->stage;
HXLINE( 742)										if (::hx::IsNotNull( this->stage )) {
HXLINE( 742)											displayObject->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false));
            										}
HXLINE( 744)										instance =  ::openfl::display::_MovieClip::FrameSymbolInstance_obj::__alloc( HX_CTX ,frame1,frameObject->id,frameObject->symbol,frameObject->depth,displayObject,frameObject->clipDepth);
            									}
            								}
            							}
HXLINE( 750)							if (::hx::IsNotNull( instance )) {
HXLINE( 752)								this->_hx___activeInstancesByFrameObjectID->set(frameObject->id,instance);
HXLINE( 754)								if (!(duplicate)) {
HXLINE( 756)									this->_hx___activeInstances->push(instance);
HXLINE( 757)									this->_hx___updateDisplayObject(instance->displayObject,frameObject,null());
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 798)		if ((this->_hx___totalFrames > 1)) {
HXLINE( 800)			this->play();
            		}
HXLINE( 803)		this->_hx___enterFrame(0);
HXLINE( 806)		this->_hx___instanceFields = ::Type_obj::getInstanceFields(::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this)));
HXLINE( 807)		this->_hx___updateInstanceFields();
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___fromSymbol,(void))

int MovieClip_obj::_hx___getNextFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_812___getNextFrame)
HXLINE( 813)		int nextFrame = 0;
HXLINE( 816)		{
HXLINE( 817)			 ::openfl::display::MovieClip _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 817)			_hx_tmp->_hx___timeElapsed = (_hx_tmp->_hx___timeElapsed + deltaTime);
HXLINE( 818)			nextFrame = (this->_hx___currentFrame + ::Math_obj::floor((( (Float)(this->_hx___timeElapsed) ) / ( (Float)(this->_hx___frameTime) ))));
HXLINE( 819)			if ((nextFrame < 1)) {
HXLINE( 819)				nextFrame = 1;
            			}
HXLINE( 820)			if ((nextFrame > this->_hx___totalFrames)) {
HXLINE( 820)				nextFrame = (::Math_obj::floor(( (Float)(::hx::Mod((nextFrame - 1),this->_hx___totalFrames)) )) + 1);
            			}
HXLINE( 821)			this->_hx___timeElapsed = ::hx::Mod(this->_hx___timeElapsed,this->_hx___frameTime);
            		}
HXLINE( 829)		return nextFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___getNextFrame,return )

void MovieClip_obj::_hx___goto(int frame){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_833___goto)
HXLINE( 834)		if (::hx::IsNull( this->_hx___symbol )) {
HXLINE( 834)			return;
            		}
HXLINE( 836)		if ((frame < 1)) {
HXLINE( 836)			frame = 1;
            		}
            		else {
HXLINE( 837)			if ((frame > this->_hx___totalFrames)) {
HXLINE( 837)				frame = this->_hx___totalFrames;
            			}
            		}
HXLINE( 839)		this->_hx___currentFrame = frame;
HXLINE( 840)		this->_hx___enterFrame(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___goto,(void))

int MovieClip_obj::_hx___resolveFrameReference( ::Dynamic frame){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_845___resolveFrameReference)
HXDLIN( 845)		if (::Std_obj::isOfType(frame,( ( ::Dynamic)(::hx::ClassOf< int >()) ))) {
HXLINE( 847)			return ( (int)(frame) );
            		}
            		else {
HXLINE( 849)			if (::Std_obj::isOfType(frame,( ( ::Dynamic)(::hx::ClassOf< ::String >()) ))) {
HXLINE( 851)				::String label = ( (::String)(frame) );
HXLINE( 853)				{
HXLINE( 853)					int _g = 0;
HXDLIN( 853)					::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN( 853)					while((_g < _g1->length)){
HXLINE( 853)						 ::openfl::display::FrameLabel frameLabel = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 853)						_g = (_g + 1);
HXLINE( 855)						if ((frameLabel->get_name() == label)) {
HXLINE( 857)							return frameLabel->get_frame();
            						}
            					}
            				}
HXLINE( 861)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,((HX_("Error #2109: Frame label ",f8,f0,5a,8a) + label) + HX_(" not found in scene.",b2,87,08,ff)))));
            			}
            			else {
HXLINE( 865)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Invalid type for frame ",e7,83,86,d5) + ::Type_obj::getClassName(frame))));
            			}
            		}
HXLINE( 845)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___resolveFrameReference,return )

int MovieClip_obj::_hx___sortDepths( ::openfl::display::_MovieClip::FrameSymbolInstance a, ::openfl::display::_MovieClip::FrameSymbolInstance b){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_871___sortDepths)
HXDLIN( 871)		return (a->depth - b->depth);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___sortDepths,return )

void MovieClip_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_875___stopAllMovieClips)
HXLINE( 876)		this->super::_hx___stopAllMovieClips();
HXLINE( 877)		this->stop();
            	}


void MovieClip_obj::_hx___tabTest(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_881___tabTest)
HXLINE( 882)		if (!(this->_hx___enabled)) {
HXLINE( 882)			return;
            		}
HXLINE( 883)		this->super::_hx___tabTest(stack);
            	}


void MovieClip_obj::_hx___updateDisplayObject( ::openfl::display::DisplayObject displayObject, ::openfl::_internal::symbols::timeline::FrameObject frameObject,::hx::Null< bool >  __o_reset){
            		bool reset = __o_reset.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_887___updateDisplayObject)
HXLINE( 888)		if (::hx::IsNull( displayObject )) {
HXLINE( 888)			return;
            		}
HXLINE( 890)		if (::hx::IsNotNull( frameObject->name )) {
HXLINE( 892)			displayObject->set_name(frameObject->name);
            		}
HXLINE( 895)		if (::hx::IsNotNull( frameObject->matrix )) {
HXLINE( 897)			displayObject->get_transform()->set_matrix(frameObject->matrix);
            		}
HXLINE( 900)		if (::hx::IsNotNull( frameObject->colorTransform )) {
HXLINE( 902)			displayObject->get_transform()->set_colorTransform(frameObject->colorTransform);
            		}
            		else {
HXLINE( 904)			bool _hx_tmp;
HXDLIN( 904)			if (reset) {
HXLINE( 904)				_hx_tmp = !(displayObject->get_transform()->get_colorTransform()->_hx___isDefault(true));
            			}
            			else {
HXLINE( 904)				_hx_tmp = false;
            			}
HXDLIN( 904)			if (_hx_tmp) {
HXLINE( 906)				 ::openfl::geom::Transform _hx_tmp = displayObject->get_transform();
HXDLIN( 906)				_hx_tmp->set_colorTransform( ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
            			}
            		}
HXLINE( 909)		if (::hx::IsNotNull( frameObject->filters )) {
HXLINE( 911)			::Array< ::Dynamic> filters = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 913)			{
HXLINE( 913)				int _g = 0;
HXDLIN( 913)				::Array< ::Dynamic> _g1 = frameObject->filters;
HXDLIN( 913)				while((_g < _g1->length)){
HXLINE( 913)					 ::openfl::_internal::formats::swf::FilterType filter = _g1->__get(_g).StaticCast<  ::openfl::_internal::formats::swf::FilterType >();
HXDLIN( 913)					_g = (_g + 1);
HXLINE( 915)					switch((int)(filter->_hx_getIndex())){
            						case (int)0: {
HXLINE( 917)							int quality = filter->_hx_getInt(2);
HXDLIN( 917)							Float blurY = filter->_hx_getFloat(1);
HXDLIN( 917)							Float blurX = filter->_hx_getFloat(0);
HXLINE( 918)							filters->push( ::openfl::filters::BlurFilter_obj::__alloc( HX_CTX ,blurX,blurY,quality));
            						}
            						break;
            						case (int)1: {
HXLINE( 920)							::Array< Float > matrix = filter->_hx_getObject(0).StaticCast< ::Array< Float > >();
HXLINE( 921)							filters->push( ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,matrix));
            						}
            						break;
            						case (int)2: {
HXLINE( 923)							bool hideObject = filter->_hx_getBool(10);
HXDLIN( 923)							bool knockout = filter->_hx_getBool(9);
HXDLIN( 923)							bool inner = filter->_hx_getBool(8);
HXDLIN( 923)							int quality = filter->_hx_getInt(7);
HXDLIN( 923)							Float strength = filter->_hx_getFloat(6);
HXDLIN( 923)							Float blurY = filter->_hx_getFloat(5);
HXDLIN( 923)							Float blurX = filter->_hx_getFloat(4);
HXDLIN( 923)							Float alpha = filter->_hx_getFloat(3);
HXDLIN( 923)							int color = filter->_hx_getInt(2);
HXDLIN( 923)							Float angle = filter->_hx_getFloat(1);
HXDLIN( 923)							Float distance = filter->_hx_getFloat(0);
HXLINE( 924)							filters->push( ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject));
            						}
            						break;
            						case (int)3: {
HXLINE( 926)							bool knockout = filter->_hx_getBool(7);
HXDLIN( 926)							bool inner = filter->_hx_getBool(6);
HXDLIN( 926)							int quality = filter->_hx_getInt(5);
HXDLIN( 926)							Float strength = filter->_hx_getFloat(4);
HXDLIN( 926)							Float blurY = filter->_hx_getFloat(3);
HXDLIN( 926)							Float blurX = filter->_hx_getFloat(2);
HXDLIN( 926)							Float alpha = filter->_hx_getFloat(1);
HXDLIN( 926)							int color = filter->_hx_getInt(0);
HXLINE( 927)							filters->push( ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,color,alpha,blurX,blurY,strength,quality,inner,knockout));
            						}
            						break;
            					}
            				}
            			}
HXLINE( 931)			displayObject->set_filters(filters);
            		}
            		else {
HXLINE( 935)			displayObject->set_filters(null());
            		}
HXLINE( 938)		if (::hx::IsNotNull( frameObject->visible )) {
HXLINE( 940)			displayObject->set_visible(( (bool)(frameObject->visible) ));
            		}
HXLINE( 943)		if (::hx::IsNotNull( frameObject->blendMode )) {
HXLINE( 945)			displayObject->set_blendMode(frameObject->blendMode);
            		}
HXLINE( 948)		if (::hx::IsNotNull( frameObject->cacheAsBitmap )) {
HXLINE( 950)			displayObject->set_cacheAsBitmap(( (bool)(frameObject->cacheAsBitmap) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(MovieClip_obj,_hx___updateDisplayObject,(void))

void MovieClip_obj::_hx___updateFrameLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_959___updateFrameLabel)
HXLINE( 960)		this->_hx___currentFrameLabel = this->_hx___symbol->frames->__get((this->_hx___currentFrame - 1)).StaticCast<  ::openfl::_internal::symbols::timeline::Frame >()->label;
HXLINE( 962)		if (::hx::IsNotNull( this->_hx___currentFrameLabel )) {
HXLINE( 964)			this->_hx___currentLabel = this->_hx___currentFrameLabel;
            		}
            		else {
HXLINE( 968)			this->_hx___currentLabel = null();
HXLINE( 970)			{
HXLINE( 970)				int _g = 0;
HXDLIN( 970)				::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN( 970)				while((_g < _g1->length)){
HXLINE( 970)					 ::openfl::display::FrameLabel label = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 970)					_g = (_g + 1);
HXLINE( 972)					int _hx_tmp = label->get_frame();
HXDLIN( 972)					if ((_hx_tmp < this->_hx___currentFrame)) {
HXLINE( 974)						this->_hx___currentLabel = label->get_name();
            					}
            					else {
HXLINE( 978)						goto _hx_goto_34;
            					}
            				}
            				_hx_goto_34:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,_hx___updateFrameLabel,(void))

void MovieClip_obj::_hx___updateInstanceFields(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_986___updateInstanceFields)
HXDLIN( 986)		int _g = 0;
HXDLIN( 986)		::Array< ::String > _g1 = this->_hx___instanceFields;
HXDLIN( 986)		while((_g < _g1->length)){
HXDLIN( 986)			::String field = _g1->__get(_g);
HXDLIN( 986)			_g = (_g + 1);
HXLINE( 988)			{
HXLINE( 988)				int _g2 = 0;
HXDLIN( 988)				::Array< ::Dynamic> _g3 = this->_hx___children;
HXDLIN( 988)				while((_g2 < _g3->length)){
HXLINE( 988)					 ::openfl::display::DisplayObject child = _g3->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 988)					_g2 = (_g2 + 1);
HXLINE( 990)					if ((child->get_name() == field)) {
HXLINE( 992)						::Reflect_obj::setField(::hx::ObjectPtr<OBJ_>(this),field,child);
HXLINE( 993)						goto _hx_goto_37;
            					}
            				}
            				_hx_goto_37:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,_hx___updateInstanceFields,(void))

void MovieClip_obj::_hx___onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1001___onMouseDown)
HXLINE(1002)		bool _hx_tmp;
HXDLIN(1002)		if (this->_hx___enabled) {
HXLINE(1002)			_hx_tmp = this->_hx___hasDown;
            		}
            		else {
HXLINE(1002)			_hx_tmp = false;
            		}
HXDLIN(1002)		if (_hx_tmp) {
HXLINE(1004)			this->gotoAndStop(HX_("_down",41,14,7f,f5),null());
            		}
HXLINE(1007)		this->_hx___mouseIsDown = true;
HXLINE(1008)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->_hx___onMouseUp_dyn(),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onMouseDown,(void))

void MovieClip_obj::_hx___onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1012___onMouseUp)
HXLINE(1013)		this->_hx___mouseIsDown = false;
HXLINE(1015)		if (::hx::IsNotNull( this->stage )) {
HXLINE(1017)			this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->_hx___onMouseUp_dyn(),null());
            		}
HXLINE(1020)		if (!(this->_hx___buttonMode)) {
HXLINE(1022)			return;
            		}
HXLINE(1025)		bool _hx_tmp;
HXDLIN(1025)		bool _hx_tmp1;
HXDLIN(1025)		if (::hx::IsInstanceEq( ( ( ::openfl::display::MovieClip)(event->target) ),::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1025)			_hx_tmp1 = this->_hx___enabled;
            		}
            		else {
HXLINE(1025)			_hx_tmp1 = false;
            		}
HXDLIN(1025)		if (_hx_tmp1) {
HXLINE(1025)			_hx_tmp = this->_hx___hasOver;
            		}
            		else {
HXLINE(1025)			_hx_tmp = false;
            		}
HXDLIN(1025)		if (_hx_tmp) {
HXLINE(1027)			this->gotoAndStop(HX_("_over",33,ad,c9,fc),null());
            		}
            		else {
HXLINE(1029)			bool _hx_tmp;
HXDLIN(1029)			if (this->_hx___enabled) {
HXLINE(1029)				_hx_tmp = this->_hx___hasUp;
            			}
            			else {
HXLINE(1029)				_hx_tmp = false;
            			}
HXDLIN(1029)			if (_hx_tmp) {
HXLINE(1031)				this->gotoAndStop(HX_("_up",7a,7c,48,00),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onMouseUp,(void))

void MovieClip_obj::_hx___onRollOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1036___onRollOut)
HXLINE(1037)		if (!(this->_hx___enabled)) {
HXLINE(1037)			return;
            		}
HXLINE(1039)		bool _hx_tmp;
HXDLIN(1039)		if (this->_hx___mouseIsDown) {
HXLINE(1039)			_hx_tmp = this->_hx___hasOver;
            		}
            		else {
HXLINE(1039)			_hx_tmp = false;
            		}
HXDLIN(1039)		if (_hx_tmp) {
HXLINE(1041)			this->gotoAndStop(HX_("_over",33,ad,c9,fc),null());
            		}
            		else {
HXLINE(1043)			if (this->_hx___hasUp) {
HXLINE(1045)				this->gotoAndStop(HX_("_up",7a,7c,48,00),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onRollOut,(void))

void MovieClip_obj::_hx___onRollOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1051___onRollOver)
HXDLIN(1051)		bool _hx_tmp;
HXDLIN(1051)		if (this->_hx___enabled) {
HXDLIN(1051)			_hx_tmp = this->_hx___hasOver;
            		}
            		else {
HXDLIN(1051)			_hx_tmp = false;
            		}
HXDLIN(1051)		if (_hx_tmp) {
HXLINE(1053)			this->gotoAndStop(HX_("_over",33,ad,c9,fc),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onRollOver,(void))

bool MovieClip_obj::set_buttonMode(bool value){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1059_set_buttonMode)
HXLINE(1060)		if ((this->_hx___buttonMode != value)) {
HXLINE(1062)			if (value) {
HXLINE(1064)				this->_hx___hasDown = false;
HXLINE(1065)				this->_hx___hasOver = false;
HXLINE(1066)				this->_hx___hasUp = false;
HXLINE(1068)				{
HXLINE(1068)					int _g = 0;
HXDLIN(1068)					::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN(1068)					while((_g < _g1->length)){
HXLINE(1068)						 ::openfl::display::FrameLabel frameLabel = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN(1068)						_g = (_g + 1);
HXLINE(1070)						::String _hx_switch_0 = frameLabel->get_name();
            						if (  (_hx_switch_0==HX_("_down",41,14,7f,f5)) ){
HXLINE(1077)							this->_hx___hasDown = true;
HXDLIN(1077)							goto _hx_goto_44;
            						}
            						if (  (_hx_switch_0==HX_("_over",33,ad,c9,fc)) ){
HXLINE(1075)							this->_hx___hasOver = true;
HXDLIN(1075)							goto _hx_goto_44;
            						}
            						if (  (_hx_switch_0==HX_("_up",7a,7c,48,00)) ){
HXLINE(1073)							this->_hx___hasUp = true;
HXDLIN(1073)							goto _hx_goto_44;
            						}
            						/* default */{
            						}
            						_hx_goto_44:;
            					}
            				}
HXLINE(1082)				bool _hx_tmp;
HXDLIN(1082)				bool _hx_tmp1;
HXDLIN(1082)				if (!(this->_hx___hasDown)) {
HXLINE(1082)					_hx_tmp1 = this->_hx___hasOver;
            				}
            				else {
HXLINE(1082)					_hx_tmp1 = true;
            				}
HXDLIN(1082)				if (!(_hx_tmp1)) {
HXLINE(1082)					_hx_tmp = this->_hx___hasUp;
            				}
            				else {
HXLINE(1082)					_hx_tmp = true;
            				}
HXDLIN(1082)				if (_hx_tmp) {
HXLINE(1084)					this->addEventListener(HX_("rollOver",71,ab,a8,12),this->_hx___onRollOver_dyn(),null(),null(),null());
HXLINE(1085)					this->addEventListener(HX_("rollOut",11,f9,11,5d),this->_hx___onRollOut_dyn(),null(),null(),null());
HXLINE(1086)					this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->_hx___onMouseDown_dyn(),null(),null(),null());
            				}
            			}
            			else {
HXLINE(1091)				this->removeEventListener(HX_("rollOver",71,ab,a8,12),this->_hx___onRollOver_dyn(),null());
HXLINE(1092)				this->removeEventListener(HX_("rollOut",11,f9,11,5d),this->_hx___onRollOut_dyn(),null());
HXLINE(1093)				this->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->_hx___onMouseDown_dyn(),null());
            			}
HXLINE(1096)			this->_hx___buttonMode = value;
            		}
HXLINE(1099)		return value;
            	}


int MovieClip_obj::get_currentFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1104_get_currentFrame)
HXDLIN(1104)		return this->_hx___currentFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrame,return )

::String MovieClip_obj::get_currentFrameLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1109_get_currentFrameLabel)
HXDLIN(1109)		return this->_hx___currentFrameLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrameLabel,return )

::String MovieClip_obj::get_currentLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1114_get_currentLabel)
HXDLIN(1114)		return this->_hx___currentLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabel,return )

::Array< ::Dynamic> MovieClip_obj::get_currentLabels(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1119_get_currentLabels)
HXDLIN(1119)		return this->_hx___currentLabels;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabels,return )

bool MovieClip_obj::get_enabled(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1124_get_enabled)
HXDLIN(1124)		return this->_hx___enabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_enabled,return )

bool MovieClip_obj::set_enabled(bool value){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1129_set_enabled)
HXDLIN(1129)		return (this->_hx___enabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,set_enabled,return )

int MovieClip_obj::get_framesLoaded(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1134_get_framesLoaded)
HXDLIN(1134)		return this->_hx___totalFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_framesLoaded,return )

bool MovieClip_obj::get_isPlaying(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1139_get_isPlaying)
HXDLIN(1139)		return this->_hx___playing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_isPlaying,return )

int MovieClip_obj::get_totalFrames(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1144_get_totalFrames)
HXDLIN(1144)		return this->_hx___totalFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_totalFrames,return )

 ::openfl::_internal::formats::swf::SWFLite MovieClip_obj::_hx___initSWF;

 ::openfl::_internal::symbols::SpriteSymbol MovieClip_obj::_hx___initSymbol;

bool MovieClip_obj::_hx___useParentFPS;


::hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__new() {
	::hx::ObjectPtr< MovieClip_obj > __this = new MovieClip_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MovieClip_obj *__this = (MovieClip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MovieClip_obj), true, "openfl.display.MovieClip"));
	*(void **)__this = MovieClip_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MovieClip_obj::MovieClip_obj()
{
}

void MovieClip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MovieClip);
	HX_MARK_MEMBER_NAME(_hx___activeInstances,"__activeInstances");
	HX_MARK_MEMBER_NAME(_hx___activeInstancesByFrameObjectID,"__activeInstancesByFrameObjectID");
	HX_MARK_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_MARK_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_MARK_MEMBER_NAME(_hx___enabled,"__enabled");
	HX_MARK_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_MARK_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_MARK_MEMBER_NAME(_hx___hasDown,"__hasDown");
	HX_MARK_MEMBER_NAME(_hx___hasOver,"__hasOver");
	HX_MARK_MEMBER_NAME(_hx___hasUp,"__hasUp");
	HX_MARK_MEMBER_NAME(_hx___instanceFields,"__instanceFields");
	HX_MARK_MEMBER_NAME(_hx___lastFrameScriptEval,"__lastFrameScriptEval");
	HX_MARK_MEMBER_NAME(_hx___lastFrameUpdate,"__lastFrameUpdate");
	HX_MARK_MEMBER_NAME(_hx___mouseIsDown,"__mouseIsDown");
	HX_MARK_MEMBER_NAME(_hx___playing,"__playing");
	HX_MARK_MEMBER_NAME(_hx___swf,"__swf");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_MARK_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MovieClip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___activeInstances,"__activeInstances");
	HX_VISIT_MEMBER_NAME(_hx___activeInstancesByFrameObjectID,"__activeInstancesByFrameObjectID");
	HX_VISIT_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_VISIT_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_VISIT_MEMBER_NAME(_hx___enabled,"__enabled");
	HX_VISIT_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_VISIT_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_VISIT_MEMBER_NAME(_hx___hasDown,"__hasDown");
	HX_VISIT_MEMBER_NAME(_hx___hasOver,"__hasOver");
	HX_VISIT_MEMBER_NAME(_hx___hasUp,"__hasUp");
	HX_VISIT_MEMBER_NAME(_hx___instanceFields,"__instanceFields");
	HX_VISIT_MEMBER_NAME(_hx___lastFrameScriptEval,"__lastFrameScriptEval");
	HX_VISIT_MEMBER_NAME(_hx___lastFrameUpdate,"__lastFrameUpdate");
	HX_VISIT_MEMBER_NAME(_hx___mouseIsDown,"__mouseIsDown");
	HX_VISIT_MEMBER_NAME(_hx___playing,"__playing");
	HX_VISIT_MEMBER_NAME(_hx___swf,"__swf");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_VISIT_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MovieClip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"__swf") ) { return ::hx::Val( _hx___swf ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__goto") ) { return ::hx::Val( _hx___goto_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_enabled() ); }
		if (HX_FIELD_EQ(inName,"__hasUp") ) { return ::hx::Val( _hx___hasUp ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { return ::hx::Val( _hx___symbol ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPlaying") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_isPlaying() ); }
		if (HX_FIELD_EQ(inName,"__enabled") ) { return ::hx::Val( _hx___enabled ); }
		if (HX_FIELD_EQ(inName,"__hasDown") ) { return ::hx::Val( _hx___hasDown ); }
		if (HX_FIELD_EQ(inName,"__hasOver") ) { return ::hx::Val( _hx___hasOver ); }
		if (HX_FIELD_EQ(inName,"__playing") ) { return ::hx::Val( _hx___playing ); }
		if (HX_FIELD_EQ(inName,"nextFrame") ) { return ::hx::Val( nextFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"prevFrame") ) { return ::hx::Val( prevFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"__tabTest") ) { return ::hx::Val( _hx___tabTest_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_totalFrames() ); }
		if (HX_FIELD_EQ(inName,"__frameTime") ) { return ::hx::Val( _hx___frameTime ); }
		if (HX_FIELD_EQ(inName,"gotoAndPlay") ) { return ::hx::Val( gotoAndPlay_dyn() ); }
		if (HX_FIELD_EQ(inName,"gotoAndStop") ) { return ::hx::Val( gotoAndStop_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseUp") ) { return ::hx::Val( _hx___onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onRollOut") ) { return ::hx::Val( _hx___onRollOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_enabled") ) { return ::hx::Val( get_enabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_enabled") ) { return ::hx::Val( set_enabled_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentFrame") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentFrame() ); }
		if (HX_FIELD_EQ(inName,"currentLabel") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentLabel() ); }
		if (HX_FIELD_EQ(inName,"framesLoaded") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_framesLoaded() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return ::hx::Val( _hx___enterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return ::hx::Val( _hx___fromSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__sortDepths") ) { return ::hx::Val( _hx___sortDepths_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onRollOver") ) { return ::hx::Val( _hx___onRollOver_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentLabels") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentLabels() ); }
		if (HX_FIELD_EQ(inName,"__mouseIsDown") ) { return ::hx::Val( _hx___mouseIsDown ); }
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { return ::hx::Val( _hx___timeElapsed ); }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { return ::hx::Val( _hx___totalFrames ); }
		if (HX_FIELD_EQ(inName,"__onMouseDown") ) { return ::hx::Val( _hx___onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isPlaying") ) { return ::hx::Val( get_isPlaying_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { return ::hx::Val( _hx___currentFrame ); }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { return ::hx::Val( _hx___currentLabel ); }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { return ::hx::Val( _hx___frameScripts ); }
		if (HX_FIELD_EQ(inName,"addFrameScript") ) { return ::hx::Val( addFrameScript_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateSymbol") ) { return ::hx::Val( _hx___updateSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getNextFrame") ) { return ::hx::Val( _hx___getNextFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_buttonMode") ) { return ::hx::Val( set_buttonMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { return ::hx::Val( _hx___currentLabels ); }
		if (HX_FIELD_EQ(inName,"get_totalFrames") ) { return ::hx::Val( get_totalFrames_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__instanceFields") ) { return ::hx::Val( _hx___instanceFields ); }
		if (HX_FIELD_EQ(inName,"get_currentFrame") ) { return ::hx::Val( get_currentFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_currentLabel") ) { return ::hx::Val( get_currentLabel_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_framesLoaded") ) { return ::hx::Val( get_framesLoaded_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentFrameLabel") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentFrameLabel() ); }
		if (HX_FIELD_EQ(inName,"__activeInstances") ) { return ::hx::Val( _hx___activeInstances ); }
		if (HX_FIELD_EQ(inName,"__lastFrameUpdate") ) { return ::hx::Val( _hx___lastFrameUpdate ); }
		if (HX_FIELD_EQ(inName,"get_currentLabels") ) { return ::hx::Val( get_currentLabels_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__updateFrameLabel") ) { return ::hx::Val( _hx___updateFrameLabel_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { return ::hx::Val( _hx___currentFrameLabel ); }
		if (HX_FIELD_EQ(inName,"__updateFrameScript") ) { return ::hx::Val( _hx___updateFrameScript_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return ::hx::Val( _hx___stopAllMovieClips_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__lastFrameScriptEval") ) { return ::hx::Val( _hx___lastFrameScriptEval ); }
		if (HX_FIELD_EQ(inName,"__updateDisplayObject") ) { return ::hx::Val( _hx___updateDisplayObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_currentFrameLabel") ) { return ::hx::Val( get_currentFrameLabel_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__evaluateFrameScripts") ) { return ::hx::Val( _hx___evaluateFrameScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateInstanceFields") ) { return ::hx::Val( _hx___updateInstanceFields_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__resolveFrameReference") ) { return ::hx::Val( _hx___resolveFrameReference_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"__activeInstancesByFrameObjectID") ) { return ::hx::Val( _hx___activeInstancesByFrameObjectID ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MovieClip_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { outValue = ( _hx___initSWF ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { outValue = ( _hx___initSymbol ); return true; }
	}
	return false;
}

::hx::Val MovieClip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"__swf") ) { _hx___swf=inValue.Cast<  ::openfl::_internal::formats::swf::SWFLite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_enabled(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__hasUp") ) { _hx___hasUp=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__enabled") ) { _hx___enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasDown") ) { _hx___hasDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasOver") ) { _hx___hasOver=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__playing") ) { _hx___playing=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__frameTime") ) { _hx___frameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__mouseIsDown") ) { _hx___mouseIsDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { _hx___timeElapsed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { _hx___totalFrames=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { _hx___currentFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { _hx___currentLabel=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { _hx___frameScripts=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { _hx___currentLabels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__instanceFields") ) { _hx___instanceFields=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__activeInstances") ) { _hx___activeInstances=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastFrameUpdate") ) { _hx___lastFrameUpdate=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { _hx___currentFrameLabel=inValue.Cast< ::String >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__lastFrameScriptEval") ) { _hx___lastFrameScriptEval=inValue.Cast< int >(); return inValue; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"__activeInstancesByFrameObjectID") ) { _hx___activeInstancesByFrameObjectID=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MovieClip_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { _hx___initSWF=ioValue.Cast<  ::openfl::_internal::formats::swf::SWFLite >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { _hx___initSymbol=ioValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return true; }
	}
	return false;
}

void MovieClip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("currentFrame",34,5d,8f,4d));
	outFields->push(HX_("currentFrameLabel",20,c4,0a,2a));
	outFields->push(HX_("currentLabel",fb,f2,ba,b6));
	outFields->push(HX_("currentLabels",18,a9,d9,2c));
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("framesLoaded",4b,ac,61,0e));
	outFields->push(HX_("isPlaying",a4,8c,16,8e));
	outFields->push(HX_("totalFrames",8a,a2,bb,72));
	outFields->push(HX_("__activeInstances",78,e9,49,03));
	outFields->push(HX_("__activeInstancesByFrameObjectID",b8,3a,9c,5b));
	outFields->push(HX_("__currentFrame",54,e0,4f,6e));
	outFields->push(HX_("__currentFrameLabel",00,ed,fa,dc));
	outFields->push(HX_("__currentLabel",1b,76,7b,d7));
	outFields->push(HX_("__currentLabels",f8,e1,8b,b4));
	outFields->push(HX_("__enabled",61,55,7f,ff));
	outFields->push(HX_("__frameScripts",7b,3e,2f,ee));
	outFields->push(HX_("__frameTime",ba,d3,a9,68));
	outFields->push(HX_("__hasDown",bc,69,00,93));
	outFields->push(HX_("__hasOver",ae,02,4b,9a));
	outFields->push(HX_("__hasUp",35,ed,7f,8c));
	outFields->push(HX_("__instanceFields",0e,0b,63,af));
	outFields->push(HX_("__lastFrameScriptEval",fe,cc,8c,81));
	outFields->push(HX_("__lastFrameUpdate",40,24,e4,8a));
	outFields->push(HX_("__mouseIsDown",51,32,d5,9d));
	outFields->push(HX_("__playing",4e,60,66,0b));
	outFields->push(HX_("__swf",22,0c,34,f2));
	outFields->push(HX_("__symbol",78,1a,0d,97));
	outFields->push(HX_("__timeElapsed",8f,80,8e,75));
	outFields->push(HX_("__totalFrames",6a,e3,33,bb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MovieClip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MovieClip_obj,_hx___activeInstances),HX_("__activeInstances",78,e9,49,03)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(MovieClip_obj,_hx___activeInstancesByFrameObjectID),HX_("__activeInstancesByFrameObjectID",b8,3a,9c,5b)},
	{::hx::fsInt,(int)offsetof(MovieClip_obj,_hx___currentFrame),HX_("__currentFrame",54,e0,4f,6e)},
	{::hx::fsString,(int)offsetof(MovieClip_obj,_hx___currentFrameLabel),HX_("__currentFrameLabel",00,ed,fa,dc)},
	{::hx::fsString,(int)offsetof(MovieClip_obj,_hx___currentLabel),HX_("__currentLabel",1b,76,7b,d7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MovieClip_obj,_hx___currentLabels),HX_("__currentLabels",f8,e1,8b,b4)},
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___enabled),HX_("__enabled",61,55,7f,ff)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(MovieClip_obj,_hx___frameScripts),HX_("__frameScripts",7b,3e,2f,ee)},
	{::hx::fsInt,(int)offsetof(MovieClip_obj,_hx___frameTime),HX_("__frameTime",ba,d3,a9,68)},
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___hasDown),HX_("__hasDown",bc,69,00,93)},
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___hasOver),HX_("__hasOver",ae,02,4b,9a)},
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___hasUp),HX_("__hasUp",35,ed,7f,8c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MovieClip_obj,_hx___instanceFields),HX_("__instanceFields",0e,0b,63,af)},
	{::hx::fsInt,(int)offsetof(MovieClip_obj,_hx___lastFrameScriptEval),HX_("__lastFrameScriptEval",fe,cc,8c,81)},
	{::hx::fsInt,(int)offsetof(MovieClip_obj,_hx___lastFrameUpdate),HX_("__lastFrameUpdate",40,24,e4,8a)},
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___mouseIsDown),HX_("__mouseIsDown",51,32,d5,9d)},
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___playing),HX_("__playing",4e,60,66,0b)},
	{::hx::fsObject /*  ::openfl::_internal::formats::swf::SWFLite */ ,(int)offsetof(MovieClip_obj,_hx___swf),HX_("__swf",22,0c,34,f2)},
	{::hx::fsObject /*  ::openfl::_internal::symbols::SpriteSymbol */ ,(int)offsetof(MovieClip_obj,_hx___symbol),HX_("__symbol",78,1a,0d,97)},
	{::hx::fsInt,(int)offsetof(MovieClip_obj,_hx___timeElapsed),HX_("__timeElapsed",8f,80,8e,75)},
	{::hx::fsInt,(int)offsetof(MovieClip_obj,_hx___totalFrames),HX_("__totalFrames",6a,e3,33,bb)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MovieClip_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::_internal::formats::swf::SWFLite */ ,(void *) &MovieClip_obj::_hx___initSWF,HX_("__initSWF",f2,a6,dc,4c)},
	{::hx::fsObject /*  ::openfl::_internal::symbols::SpriteSymbol */ ,(void *) &MovieClip_obj::_hx___initSymbol,HX_("__initSymbol",a8,85,b6,2b)},
	{::hx::fsBool,(void *) &MovieClip_obj::_hx___useParentFPS,HX_("__useParentFPS",b8,6a,a7,0f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MovieClip_obj_sMemberFields[] = {
	HX_("__activeInstances",78,e9,49,03),
	HX_("__activeInstancesByFrameObjectID",b8,3a,9c,5b),
	HX_("__currentFrame",54,e0,4f,6e),
	HX_("__currentFrameLabel",00,ed,fa,dc),
	HX_("__currentLabel",1b,76,7b,d7),
	HX_("__currentLabels",f8,e1,8b,b4),
	HX_("__enabled",61,55,7f,ff),
	HX_("__frameScripts",7b,3e,2f,ee),
	HX_("__frameTime",ba,d3,a9,68),
	HX_("__hasDown",bc,69,00,93),
	HX_("__hasOver",ae,02,4b,9a),
	HX_("__hasUp",35,ed,7f,8c),
	HX_("__instanceFields",0e,0b,63,af),
	HX_("__lastFrameScriptEval",fe,cc,8c,81),
	HX_("__lastFrameUpdate",40,24,e4,8a),
	HX_("__mouseIsDown",51,32,d5,9d),
	HX_("__playing",4e,60,66,0b),
	HX_("__swf",22,0c,34,f2),
	HX_("__symbol",78,1a,0d,97),
	HX_("__timeElapsed",8f,80,8e,75),
	HX_("__totalFrames",6a,e3,33,bb),
	HX_("addFrameScript",77,21,7f,bb),
	HX_("gotoAndPlay",08,65,84,ef),
	HX_("gotoAndStop",16,27,86,f1),
	HX_("nextFrame",3a,92,c8,ad),
	HX_("play",f4,2d,5a,4a),
	HX_("prevFrame",3a,18,da,f1),
	HX_("stop",02,f0,5b,4c),
	HX_("__enterFrame",15,7f,e3,3a),
	HX_("__updateFrameScript",6f,ef,01,3d),
	HX_("__updateSymbol",61,d9,61,0f),
	HX_("__evaluateFrameScripts",74,ac,75,85),
	HX_("__fromSymbol",82,2f,b5,6a),
	HX_("__getNextFrame",e4,b1,df,dd),
	HX_("__goto",c3,fc,61,f3),
	HX_("__resolveFrameReference",ca,06,cb,71),
	HX_("__sortDepths",2e,e3,01,03),
	HX_("__stopAllMovieClips",d2,89,e8,53),
	HX_("__tabTest",27,ee,bd,c6),
	HX_("__updateDisplayObject",b8,53,1d,d8),
	HX_("__updateFrameLabel",10,a5,51,08),
	HX_("__updateInstanceFields",f7,5a,5e,c5),
	HX_("__onMouseDown",e8,d4,7d,59),
	HX_("__onMouseUp",61,f5,49,c6),
	HX_("__onRollOut",92,fa,e8,62),
	HX_("__onRollOver",d0,fa,f2,28),
	HX_("set_buttonMode",32,b3,6c,48),
	HX_("get_currentFrame",bd,49,2e,52),
	HX_("get_currentFrameLabel",f7,c6,b8,a8),
	HX_("get_currentLabel",84,df,59,bb),
	HX_("get_currentLabels",6f,b4,49,33),
	HX_("get_enabled",98,64,2b,04),
	HX_("set_enabled",a4,6b,98,0e),
	HX_("get_framesLoaded",d4,98,00,13),
	HX_("get_isPlaying",7b,60,7a,4f),
	HX_("get_totalFrames",21,5a,9d,33),
	::String(null()) };

static void MovieClip_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___initSWF,"__initSWF");
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___initSymbol,"__initSymbol");
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___useParentFPS,"__useParentFPS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MovieClip_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___initSWF,"__initSWF");
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___initSymbol,"__initSymbol");
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___useParentFPS,"__useParentFPS");
};

#endif

::hx::Class MovieClip_obj::__mClass;

static ::String MovieClip_obj_sStaticFields[] = {
	HX_("__initSWF",f2,a6,dc,4c),
	HX_("__initSymbol",a8,85,b6,2b),
	HX_("__useParentFPS",b8,6a,a7,0f),
	::String(null())
};

void MovieClip_obj::__register()
{
	MovieClip_obj _hx_dummy;
	MovieClip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display.MovieClip",f6,30,c3,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MovieClip_obj::__GetStatic;
	__mClass->mSetStaticField = &MovieClip_obj::__SetStatic;
	__mClass->mMarkFunc = MovieClip_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MovieClip_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MovieClip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MovieClip_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MovieClip_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MovieClip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MovieClip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MovieClip_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_82_boot)
HXDLIN(  82)		_hx___useParentFPS = false;
            	}
}

} // end namespace openfl
} // end namespace display
