// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_org_poly2tri_Constants
#include <org/poly2tri/Constants.h>
#endif
#ifndef INCLUDED_org_poly2tri_Point
#include <org/poly2tri/Point.h>
#endif
#ifndef INCLUDED_org_poly2tri_Utils
#include <org/poly2tri/Utils.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1361ae801e9bcdcc_30_insideIncircle,"org.poly2tri.Utils","insideIncircle",0x1dd0080d,"org.poly2tri.Utils.insideIncircle","org/poly2tri/Utils.hx",30,0xc3ffb12c)
HX_LOCAL_STACK_FRAME(_hx_pos_1361ae801e9bcdcc_63_inScanArea,"org.poly2tri.Utils","inScanArea",0x92da56eb,"org.poly2tri.Utils.inScanArea","org/poly2tri/Utils.hx",63,0xc3ffb12c)
namespace org{
namespace poly2tri{

void Utils_obj::__construct() { }

Dynamic Utils_obj::__CreateEmpty() { return new Utils_obj; }

void *Utils_obj::_hx_vtable = 0;

Dynamic Utils_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Utils_obj > _hx_result = new Utils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Utils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x374e0b08;
}

bool Utils_obj::insideIncircle( ::org::poly2tri::Point pa, ::org::poly2tri::Point pb, ::org::poly2tri::Point pc, ::org::poly2tri::Point pd){
            	HX_STACKFRAME(&_hx_pos_1361ae801e9bcdcc_30_insideIncircle)
HXLINE(  31)		Float adx = (pa->x - pd->x);
HXLINE(  32)		Float ady = (pa->y - pd->y);
HXLINE(  33)		Float bdx = (pb->x - pd->x);
HXLINE(  34)		Float bdy = (pb->y - pd->y);
HXLINE(  36)		Float adxbdy = (adx * bdy);
HXLINE(  37)		Float bdxady = (bdx * ady);
HXLINE(  38)		Float oabd = (adxbdy - bdxady);
HXLINE(  40)		if ((oabd <= 0)) {
HXLINE(  40)			return false;
            		}
HXLINE(  42)		Float cdx = (pc->x - pd->x);
HXLINE(  43)		Float cdy = (pc->y - pd->y);
HXLINE(  45)		Float cdxady = (cdx * ady);
HXLINE(  46)		Float adxcdy = (adx * cdy);
HXLINE(  47)		Float ocad = (cdxady - adxcdy);
HXLINE(  49)		if ((ocad <= 0)) {
HXLINE(  49)			return false;
            		}
HXLINE(  51)		Float bdxcdy = (bdx * cdy);
HXLINE(  52)		Float cdxbdy = (cdx * bdy);
HXLINE(  54)		Float alift = ((adx * adx) + (ady * ady));
HXLINE(  55)		Float blift = ((bdx * bdx) + (bdy * bdy));
HXLINE(  56)		Float clift = ((cdx * cdx) + (cdy * cdy));
HXLINE(  58)		Float det = (((alift * (bdxcdy - cdxbdy)) + (blift * ocad)) + (clift * oabd));
HXLINE(  59)		return (det > 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Utils_obj,insideIncircle,return )

bool Utils_obj::inScanArea( ::org::poly2tri::Point pa, ::org::poly2tri::Point pb, ::org::poly2tri::Point pc, ::org::poly2tri::Point pd){
            	HX_STACKFRAME(&_hx_pos_1361ae801e9bcdcc_63_inScanArea)
HXLINE(  64)		Float pdx = pd->x;
HXLINE(  65)		Float pdy = pd->y;
HXLINE(  66)		Float adx = (pa->x - pdx);
HXLINE(  67)		Float ady = (pa->y - pdy);
HXLINE(  68)		Float bdx = (pb->x - pdx);
HXLINE(  69)		Float bdy = (pb->y - pdy);
HXLINE(  71)		Float adxbdy = (adx * bdy);
HXLINE(  72)		Float bdxady = (bdx * ady);
HXLINE(  73)		Float oabd = (adxbdy - bdxady);
HXLINE(  75)		if ((oabd <= ::org::poly2tri::Constants_obj::EPSILON)) {
HXLINE(  75)			return false;
            		}
HXLINE(  77)		Float cdx = (pc->x - pdx);
HXLINE(  78)		Float cdy = (pc->y - pdy);
HXLINE(  80)		Float cdxady = (cdx * ady);
HXLINE(  81)		Float adxcdy = (adx * cdy);
HXLINE(  82)		Float ocad = (cdxady - adxcdy);
HXLINE(  84)		if ((ocad <= ::org::poly2tri::Constants_obj::EPSILON)) {
HXLINE(  84)			return false;
            		}
HXLINE(  86)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Utils_obj,inScanArea,return )


Utils_obj::Utils_obj()
{
}

bool Utils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"inScanArea") ) { outValue = inScanArea_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"insideIncircle") ) { outValue = insideIncircle_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Utils_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Utils_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Utils_obj::__mClass;

static ::String Utils_obj_sStaticFields[] = {
	HX_("insideIncircle",d1,9f,03,10),
	HX_("inScanArea",af,bc,6d,6c),
	::String(null())
};

void Utils_obj::__register()
{
	Utils_obj _hx_dummy;
	Utils_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("org.poly2tri.Utils",b2,64,d7,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Utils_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Utils_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Utils_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Utils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Utils_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace poly2tri
