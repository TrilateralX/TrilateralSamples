// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_pallette_utils_CYMK
#include <pallette/utils/CYMK.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4ed034e57bc3c448_6_new,"pallette.utils.CYMK","new",0xdad5fd60,"pallette.utils.CYMK.new","pallette/utils/CYMK.hx",6,0x4f82938e)
namespace pallette{
namespace utils{

void CYMK_obj::__construct(Float c,Float y,Float m,Float k){
            	HX_STACKFRAME(&_hx_pos_4ed034e57bc3c448_6_new)
HXLINE(  10)		this->k = ((Float)0.);
HXLINE(   9)		this->m = ((Float)0.);
HXLINE(   8)		this->y = ((Float)0.);
HXLINE(   7)		this->c = ((Float)0.);
HXLINE(  12)		this->c = c;
HXLINE(  13)		this->y = y;
HXLINE(  14)		this->m = m;
HXLINE(  15)		this->k = k;
            	}

Dynamic CYMK_obj::__CreateEmpty() { return new CYMK_obj; }

void *CYMK_obj::_hx_vtable = 0;

Dynamic CYMK_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CYMK_obj > _hx_result = new CYMK_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool CYMK_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x458c0470;
}


CYMK_obj::CYMK_obj()
{
}

::hx::Val CYMK_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { return ::hx::Val( c ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"m") ) { return ::hx::Val( m ); }
		if (HX_FIELD_EQ(inName,"k") ) { return ::hx::Val( k ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CYMK_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m") ) { m=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"k") ) { k=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CYMK_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("c",63,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("m",6d,00,00,00));
	outFields->push(HX_("k",6b,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CYMK_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(CYMK_obj,c),HX_("c",63,00,00,00)},
	{::hx::fsFloat,(int)offsetof(CYMK_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(CYMK_obj,m),HX_("m",6d,00,00,00)},
	{::hx::fsFloat,(int)offsetof(CYMK_obj,k),HX_("k",6b,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CYMK_obj_sStaticStorageInfo = 0;
#endif

static ::String CYMK_obj_sMemberFields[] = {
	HX_("c",63,00,00,00),
	HX_("y",79,00,00,00),
	HX_("m",6d,00,00,00),
	HX_("k",6b,00,00,00),
	::String(null()) };

::hx::Class CYMK_obj::__mClass;

void CYMK_obj::__register()
{
	CYMK_obj _hx_dummy;
	CYMK_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pallette.utils.CYMK",6e,0d,7c,42);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CYMK_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CYMK_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CYMK_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CYMK_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pallette
} // end namespace utils
