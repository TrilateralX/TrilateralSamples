// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_pallette_utils_RGB
#include <pallette/utils/RGB.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7db7afea569703be_6_new,"pallette.utils.RGB","new",0x289540c5,"pallette.utils.RGB.new","pallette/utils/RGB.hx",6,0xedcbb28d)
namespace pallette{
namespace utils{

void RGB_obj::__construct(Float r,Float g,Float b){
            	HX_STACKFRAME(&_hx_pos_7db7afea569703be_6_new)
HXLINE(   9)		this->b = ((Float)0.);
HXLINE(   8)		this->g = ((Float)0.);
HXLINE(   7)		this->r = ((Float)0.);
HXLINE(  11)		this->r = r;
HXLINE(  12)		this->g = g;
HXLINE(  13)		this->b = b;
            	}

Dynamic RGB_obj::__CreateEmpty() { return new RGB_obj; }

void *RGB_obj::_hx_vtable = 0;

Dynamic RGB_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RGB_obj > _hx_result = new RGB_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool RGB_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5bdf6e2d;
}


RGB_obj::RGB_obj()
{
}

::hx::Val RGB_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return ::hx::Val( r ); }
		if (HX_FIELD_EQ(inName,"g") ) { return ::hx::Val( g ); }
		if (HX_FIELD_EQ(inName,"b") ) { return ::hx::Val( b ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RGB_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RGB_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("r",72,00,00,00));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("b",62,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RGB_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(RGB_obj,r),HX_("r",72,00,00,00)},
	{::hx::fsFloat,(int)offsetof(RGB_obj,g),HX_("g",67,00,00,00)},
	{::hx::fsFloat,(int)offsetof(RGB_obj,b),HX_("b",62,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RGB_obj_sStaticStorageInfo = 0;
#endif

static ::String RGB_obj_sMemberFields[] = {
	HX_("r",72,00,00,00),
	HX_("g",67,00,00,00),
	HX_("b",62,00,00,00),
	::String(null()) };

::hx::Class RGB_obj::__mClass;

void RGB_obj::__register()
{
	RGB_obj _hx_dummy;
	RGB_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pallette.utils.RGB",53,7a,d2,0b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RGB_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RGB_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RGB_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RGB_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pallette
} // end namespace utils
