// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dsHelper_flat_io__Float32Flat_Float32Flat_Impl_
#include <dsHelper/flat/io/_Float32Flat/Float32Flat_Impl_.h>
#endif
#ifndef INCLUDED_dsHelper_flatInterleave__FloatColorTriangles_FloatColorTriangles_Impl_
#include <dsHelper/flatInterleave/_FloatColorTriangles/FloatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_trilateral3_geom__FlatColorTriangles_FlatColorTriangles_Impl_
#include <trilateral3/geom/_FlatColorTriangles/FlatColorTriangles_Impl_.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_MatrixDozen
#include <trilateral3/matrix/MatrixDozen.h>
#endif
#ifndef INCLUDED_trilateral3_matrix_Vertex
#include <trilateral3/matrix/Vertex.h>
#endif
#ifndef INCLUDED_trilateral3_structure_StartEnd
#include <trilateral3/structure/StartEnd.h>
#endif
#ifndef INCLUDED_trilateral3_structure_TriInt
#include <trilateral3/structure/TriInt.h>
#endif
#ifndef INCLUDED_trilateral3_structure_Triangle3D
#include <trilateral3/structure/Triangle3D.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_427f8a9dc71a6f50_17_toArray,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_","toArray",0xd91657ea,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_.toArray","trilateral3/geom/FlatColorTriangles.hx",17,0x212e9e52)
HX_LOCAL_STACK_FRAME(_hx_pos_427f8a9dc71a6f50_20__new,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_","_new",0x9f792015,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_._new","trilateral3/geom/FlatColorTriangles.hx",20,0x212e9e52)
HX_LOCAL_STACK_FRAME(_hx_pos_427f8a9dc71a6f50_24_transform,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_","transform",0xe8d1d638,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_.transform","trilateral3/geom/FlatColorTriangles.hx",24,0x212e9e52)
HX_LOCAL_STACK_FRAME(_hx_pos_427f8a9dc71a6f50_42_transformAll,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_","transformAll",0x48ad8dc9,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_.transformAll","trilateral3/geom/FlatColorTriangles.hx",42,0x212e9e52)
HX_LOCAL_STACK_FRAME(_hx_pos_427f8a9dc71a6f50_50_transformRange,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_","transformRange",0xbc0fb465,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_.transformRange","trilateral3/geom/FlatColorTriangles.hx",50,0x212e9e52)
HX_LOCAL_STACK_FRAME(_hx_pos_427f8a9dc71a6f50_61_getTriangle3D,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_","getTriangle3D",0x17ac887b,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_.getTriangle3D","trilateral3/geom/FlatColorTriangles.hx",61,0x212e9e52)
HX_LOCAL_STACK_FRAME(_hx_pos_427f8a9dc71a6f50_69_getTriInt,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_","getTriInt",0x6a485a86,"trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_.getTriInt","trilateral3/geom/FlatColorTriangles.hx",69,0x212e9e52)
namespace trilateral3{
namespace geom{
namespace _FlatColorTriangles{

void FlatColorTriangles_Impl__obj::__construct() { }

Dynamic FlatColorTriangles_Impl__obj::__CreateEmpty() { return new FlatColorTriangles_Impl__obj; }

void *FlatColorTriangles_Impl__obj::_hx_vtable = 0;

Dynamic FlatColorTriangles_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlatColorTriangles_Impl__obj > _hx_result = new FlatColorTriangles_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlatColorTriangles_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5351a3de;
}

 ::lime::utils::ArrayBufferView FlatColorTriangles_Impl__obj::toArray( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_427f8a9dc71a6f50_17_toArray)
HXDLIN(  17)		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("use getArray()",1d,92,dd,e4)));
HXDLIN(  17)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlatColorTriangles_Impl__obj,toArray,return )

 ::lime::utils::ArrayBufferView FlatColorTriangles_Impl__obj::_new(int len){
            	HX_GC_STACKFRAME(&_hx_pos_427f8a9dc71a6f50_20__new)
HXLINE(  21)		 ::Dynamic elements = (len + 2);
HXDLIN(  21)		 ::haxe::io::Bytes buffer = null();
HXDLIN(  21)		::cpp::VirtualArray array = null();
HXDLIN(  21)		 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(  21)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN(  21)		 ::Dynamic len1 = null();
HXDLIN(  21)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(  21)		if (::hx::IsNotNull( elements )) {
HXLINE(  21)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            		}
            		else {
HXLINE(  21)			if (::hx::IsNotNull( array )) {
HXLINE(  21)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  21)				_this->byteOffset = 0;
HXDLIN(  21)				_this->length = array->get_length();
HXDLIN(  21)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  21)				 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  21)				_this->buffer = this2;
HXDLIN(  21)				_this->copyFromArray(array,null());
HXDLIN(  21)				this1 = _this;
            			}
            			else {
HXLINE(  21)				if (::hx::IsNotNull( vector )) {
HXLINE(  21)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  21)					::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(  21)					_this->byteOffset = 0;
HXDLIN(  21)					_this->length = array->get_length();
HXDLIN(  21)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  21)					 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  21)					_this->buffer = this2;
HXDLIN(  21)					_this->copyFromArray(array,null());
HXDLIN(  21)					this1 = _this;
            				}
            				else {
HXLINE(  21)					if (::hx::IsNotNull( view )) {
HXLINE(  21)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  21)						 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN(  21)						int srcLength = view->length;
HXDLIN(  21)						int srcByteOffset = view->byteOffset;
HXDLIN(  21)						int srcElementSize = view->bytesPerElement;
HXDLIN(  21)						int elementSize = _this->bytesPerElement;
HXDLIN(  21)						if ((view->type == _this->type)) {
HXLINE(  21)							int srcLength = srcData->length;
HXDLIN(  21)							int cloneLength = (srcLength - srcByteOffset);
HXDLIN(  21)							 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  21)							_this->buffer = this1;
HXDLIN(  21)							_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            						}
            						else {
HXLINE(  21)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            						}
HXDLIN(  21)						_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  21)						_this->byteOffset = 0;
HXDLIN(  21)						_this->length = srcLength;
HXDLIN(  21)						this1 = _this;
            					}
            					else {
HXLINE(  21)						if (::hx::IsNotNull( buffer )) {
HXLINE(  21)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(  21)							int in_byteOffset = 0;
HXDLIN(  21)							if ((in_byteOffset < 0)) {
HXLINE(  21)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN(  21)							if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE(  21)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            							}
HXDLIN(  21)							int bufferByteLength = buffer->length;
HXDLIN(  21)							int elementSize = _this->bytesPerElement;
HXDLIN(  21)							int newByteLength = bufferByteLength;
HXDLIN(  21)							if (::hx::IsNull( len1 )) {
HXLINE(  21)								newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  21)								if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE(  21)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN(  21)								if ((newByteLength < 0)) {
HXLINE(  21)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
            							}
            							else {
HXLINE(  21)								newByteLength = (( (int)(len1) ) * _this->bytesPerElement);
HXDLIN(  21)								int newRange = (in_byteOffset + newByteLength);
HXDLIN(  21)								if ((newRange > bufferByteLength)) {
HXLINE(  21)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
            							}
HXDLIN(  21)							_this->buffer = buffer;
HXDLIN(  21)							_this->byteOffset = in_byteOffset;
HXDLIN(  21)							_this->byteLength = newByteLength;
HXDLIN(  21)							_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN(  21)							this1 = _this;
            						}
            						else {
HXLINE(  21)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            						}
            					}
            				}
            			}
            		}
HXDLIN(  21)		 ::lime::utils::ArrayBufferView this2 = this1;
HXDLIN(  21)		 ::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,((Float)0.));
HXDLIN(  21)		 ::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + 4),((Float)0.));
HXDLIN(  21)		 ::lime::utils::ArrayBufferView this3 = this2;
HXDLIN(  21)		 ::lime::utils::ArrayBufferView this4 = this3;
HXLINE(  20)		 ::lime::utils::ArrayBufferView this5 = this4;
HXDLIN(  20)		return this5;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlatColorTriangles_Impl__obj,_new,return )

void FlatColorTriangles_Impl__obj::transform( ::lime::utils::ArrayBufferView this1, ::trilateral3::matrix::MatrixDozen m){
            	HX_GC_STACKFRAME(&_hx_pos_427f8a9dc71a6f50_24_transform)
HXLINE(  25)		Float _g = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN(  25)		Float _g1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1);
HXDLIN(  25)		 ::trilateral3::matrix::Vertex pa =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g,_g1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(this1),((Float)1.));
HXLINE(  26)		Float _g2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1);
HXDLIN(  26)		Float _g3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1);
HXDLIN(  26)		 ::trilateral3::matrix::Vertex pb =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g2,_g3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(this1),((Float)1.));
HXLINE(  27)		Float _g4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1);
HXDLIN(  27)		Float _g5 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1);
HXDLIN(  27)		 ::trilateral3::matrix::Vertex pc =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g4,_g5,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(this1),((Float)1.));
HXLINE(  28)		 ::trilateral3::matrix::Vertex v2 =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,((((m->a * pa->x) + (m->b * pa->y)) + (m->c * pa->z)) + m->d),((((m->e * pa->x) + (m->f * pa->y)) + (m->g * pa->z)) + m->h),((((m->i * pa->x) + (m->j * pa->y)) + (m->k * pa->z)) + m->l),((Float)1.));
HXDLIN(  28)		pa = v2;
HXLINE(  29)		 ::trilateral3::matrix::Vertex v21 =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,((((m->a * pb->x) + (m->b * pb->y)) + (m->c * pb->z)) + m->d),((((m->e * pb->x) + (m->f * pb->y)) + (m->g * pb->z)) + m->h),((((m->i * pb->x) + (m->j * pb->y)) + (m->k * pb->z)) + m->l),((Float)1.));
HXDLIN(  29)		pb = v21;
HXLINE(  30)		 ::trilateral3::matrix::Vertex v22 =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,((((m->a * pc->x) + (m->b * pc->y)) + (m->c * pc->z)) + m->d),((((m->e * pc->x) + (m->f * pc->y)) + (m->g * pc->z)) + m->h),((((m->i * pc->x) + (m->j * pc->y)) + (m->k * pc->z)) + m->l),((Float)1.));
HXDLIN(  30)		pc = v22;
HXLINE(  31)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ax(this1,pa->x);
HXLINE(  32)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_ay(this1,pa->y);
HXLINE(  33)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_az(this1,pa->z);
HXLINE(  34)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bx(this1,pb->x);
HXLINE(  35)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_by(this1,pb->y);
HXLINE(  36)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_bz(this1,pb->z);
HXLINE(  37)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cx(this1,pc->x);
HXLINE(  38)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cy(this1,pc->y);
HXLINE(  39)		::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::set_cz(this1,pc->z);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlatColorTriangles_Impl__obj,transform,(void))

void FlatColorTriangles_Impl__obj::transformAll( ::lime::utils::ArrayBufferView this1, ::trilateral3::matrix::MatrixDozen m){
            	HX_STACKFRAME(&_hx_pos_427f8a9dc71a6f50_42_transformAll)
HXLINE(  43)		{
HXLINE(  43)			 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,0);
HXDLIN(  43)			Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  43)			if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXLINE(  43)				Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  43)				 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            			}
            		}
HXLINE(  44)		{
HXLINE(  44)			int _g = 0;
HXDLIN(  44)			int _g1 = ::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this1);
HXDLIN(  44)			while((_g < _g1)){
HXLINE(  44)				_g = (_g + 1);
HXDLIN(  44)				int i = (_g - 1);
HXLINE(  45)				::trilateral3::geom::_FlatColorTriangles::FlatColorTriangles_Impl__obj::transform(this1,m);
HXLINE(  46)				{
HXLINE(  46)					{
HXLINE(  46)						Float pos_ = ( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset) + ((Float)1.));
HXDLIN(  46)						 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,pos_);
HXDLIN(  46)						Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  46)						if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXLINE(  46)							Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  46)							 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            						}
            					}
HXDLIN(  46)					 ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlatColorTriangles_Impl__obj,transformAll,(void))

void FlatColorTriangles_Impl__obj::transformRange( ::lime::utils::ArrayBufferView this1, ::trilateral3::matrix::MatrixDozen m, ::trilateral3::structure::StartEnd startEnd){
            	HX_STACKFRAME(&_hx_pos_427f8a9dc71a6f50_50_transformRange)
HXLINE(  51)		int start = startEnd->start;
HXLINE(  52)		int end = startEnd->end;
HXLINE(  53)		{
HXLINE(  53)			 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,start);
HXDLIN(  53)			Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  53)			if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXLINE(  53)				Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  53)				 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            			}
            		}
HXLINE(  54)		if ((end > (::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this1) - 1))) {
HXLINE(  54)			::dsHelper::flat::io::_Float32Flat::Float32Flat_Impl__obj::get_size(this1);
            		}
HXLINE(  55)		{
HXLINE(  55)			int _g = start;
HXDLIN(  55)			int _g1 = (end + 1);
HXDLIN(  55)			while((_g < _g1)){
HXLINE(  55)				_g = (_g + 1);
HXDLIN(  55)				int i = (_g - 1);
HXLINE(  56)				::trilateral3::geom::_FlatColorTriangles::FlatColorTriangles_Impl__obj::transform(this1,m);
HXLINE(  57)				{
HXLINE(  57)					{
HXLINE(  57)						Float pos_ = ( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset) + ((Float)1.));
HXDLIN(  57)						 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,pos_);
HXDLIN(  57)						Float _hx_tmp =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  57)						if ((_hx_tmp > ( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + 4)) - ( (Float)(1) )))) {
HXLINE(  57)							Float val =  ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  57)							 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            						}
            					}
HXDLIN(  57)					 ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlatColorTriangles_Impl__obj,transformRange,(void))

 ::trilateral3::structure::Triangle3D FlatColorTriangles_Impl__obj::getTriangle3D( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_427f8a9dc71a6f50_61_getTriangle3D)
HXLINE(  62)		Float _g = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ax(this1);
HXDLIN(  62)		Float _g1 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_ay(this1);
HXDLIN(  62)		 ::trilateral3::matrix::Vertex pa =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g,_g1,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_az(this1),((Float)1.));
HXLINE(  63)		Float _g2 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bx(this1);
HXDLIN(  63)		Float _g3 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_by(this1);
HXDLIN(  63)		 ::trilateral3::matrix::Vertex pb =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g2,_g3,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_bz(this1),((Float)1.));
HXLINE(  64)		Float _g4 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cx(this1);
HXDLIN(  64)		Float _g5 = ::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cy(this1);
HXDLIN(  64)		 ::trilateral3::matrix::Vertex pc =  ::trilateral3::matrix::Vertex_obj::__alloc( HX_CTX ,_g4,_g5,::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_cz(this1),((Float)1.));
HXLINE(  65)		return  ::trilateral3::structure::Triangle3D_obj::__alloc( HX_CTX ,pa,pb,pc);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlatColorTriangles_Impl__obj,getTriangle3D,return )

 ::trilateral3::structure::TriInt FlatColorTriangles_Impl__obj::getTriInt( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_427f8a9dc71a6f50_69_getTriInt)
HXDLIN(  69)		int k = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + 6);
HXDLIN(  69)		int _g = (::Math_obj::round(( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k + 2) * 4))) * ( (Float)(255) ))) << 24);
HXDLIN(  69)		int _g1 = (_g | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(this1) * ( (Float)(255) ))) << 16));
HXDLIN(  69)		int k1 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + 4);
HXDLIN(  69)		int _g2 = (_g1 | (::Math_obj::round(( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k1 + 2) * 4))) * ( (Float)(255) ))) << 8));
HXDLIN(  69)		int k2 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + 5);
HXDLIN(  69)		int _g3 = (_g2 | ::Math_obj::round(( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k2 + 2) * 4))) * ( (Float)(255) ))));
HXDLIN(  69)		int k3 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + 6);
HXDLIN(  69)		int _g4 = (::Math_obj::round(( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k3 + 2) * 4))) * ( (Float)(255) ))) << 24);
HXDLIN(  69)		int _g5 = (_g4 | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(this1) * ( (Float)(255) ))) << 16));
HXDLIN(  69)		int k4 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + 4);
HXDLIN(  69)		int _g6 = (_g5 | (::Math_obj::round(( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k4 + 2) * 4))) * ( (Float)(255) ))) << 8));
HXDLIN(  69)		int k5 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + 5);
HXDLIN(  69)		int _g7 = (_g6 | ::Math_obj::round(( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k5 + 2) * 4))) * ( (Float)(255) ))));
HXDLIN(  69)		int k6 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + 6);
HXDLIN(  69)		int _hx_tmp = (::Math_obj::round(( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k6 + 2) * 4))) * ( (Float)(255) ))) << 24);
HXDLIN(  69)		int _hx_tmp1 = (_hx_tmp | (::Math_obj::round((::dsHelper::flatInterleave::_FloatColorTriangles::FloatColorTriangles_Impl__obj::get_redA(this1) * ( (Float)(255) ))) << 16));
HXDLIN(  69)		int k7 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + 4);
HXDLIN(  69)		int _hx_tmp2 = (_hx_tmp1 | (::Math_obj::round(( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k7 + 2) * 4))) * ( (Float)(255) ))) << 8));
HXDLIN(  69)		int k8 = ((::Std_obj::_hx_int( ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset)) * 21) + 5);
HXDLIN(  69)		return  ::trilateral3::structure::TriInt_obj::__alloc( HX_CTX ,_g3,_g7,(_hx_tmp2 | ::Math_obj::round(( ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + ((k8 + 2) * 4))) * ( (Float)(255) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlatColorTriangles_Impl__obj,getTriInt,return )


FlatColorTriangles_Impl__obj::FlatColorTriangles_Impl__obj()
{
}

bool FlatColorTriangles_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { outValue = transform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTriInt") ) { outValue = getTriInt_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"transformAll") ) { outValue = transformAll_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getTriangle3D") ) { outValue = getTriangle3D_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformRange") ) { outValue = transformRange_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlatColorTriangles_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlatColorTriangles_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlatColorTriangles_Impl__obj::__mClass;

static ::String FlatColorTriangles_Impl__obj_sStaticFields[] = {
	HX_("toArray",1e,ba,13,f2),
	HX_("_new",61,15,1f,3f),
	HX_("transform",6c,2d,93,45),
	HX_("transformAll",15,af,7b,3e),
	HX_("transformRange",b1,c0,a1,5a),
	HX_("getTriangle3D",af,89,3b,36),
	HX_("getTriInt",ba,b1,09,c7),
	::String(null())
};

void FlatColorTriangles_Impl__obj::__register()
{
	FlatColorTriangles_Impl__obj _hx_dummy;
	FlatColorTriangles_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_",3a,52,9e,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlatColorTriangles_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlatColorTriangles_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlatColorTriangles_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlatColorTriangles_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlatColorTriangles_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace geom
} // end namespace _FlatColorTriangles
