// Generated by Haxe 4.2.0-rc.1+7dc565e63
#include <hxcpp.h>

#ifndef INCLUDED_fracs_DifferencePreference
#include <fracs/DifferencePreference.h>
#endif
#ifndef INCLUDED_trilateral3_shape_Shaper
#include <trilateral3/shape/Shaper.h>
#endif
#ifndef INCLUDED_trilateral3_shape__Shaper_Shaper_Fields_
#include <trilateral3/shape/_Shaper/Shaper_Fields_.h>
#endif
#ifndef INCLUDED_trilateral3_structure_Quad2D
#include <trilateral3/structure/Quad2D.h>
#endif
#ifndef INCLUDED_trilateral3_structure_XY
#include <trilateral3/structure/XY.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_013af9fbe7d224c9_735_new,"trilateral3.shape.Shaper","new",0x4d66e637,"trilateral3.shape.Shaper.new","trilateral3/shape/Shaper.hx",735,0x7203ae17)
namespace trilateral3{
namespace shape{

void Shaper_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_013af9fbe7d224c9_735_new)
HXLINE( 845)		this->spiralLines_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::spiralLines_dyn();
HXLINE( 841)		this->roundedRectangleOutline_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::roundedRectangleOutline_dyn();
HXLINE( 837)		this->roundedRectangle_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::roundedRectangle_dyn();
HXLINE( 833)		this->shapeRadial_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::shapeRadial_dyn();
HXLINE( 829)		this->shape_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::shape_dyn();
HXLINE( 826)		this->ellipseOnSide_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::ellipseOnSide_dyn();
HXLINE( 822)		this->circleOnSide_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::circleOnSide_dyn();
HXLINE( 818)		this->arc_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::arc_dyn();
HXLINE( 814)		this->pieDif_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::pieDif_dyn();
HXLINE( 810)		this->ellpisePie_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::ellipsePie_dyn();
HXLINE( 804)		this->pieDifX_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::pieDifX_dyn();
HXLINE( 799)		this->pieX_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::pieX_dyn();
HXLINE( 793)		this->pie_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::pie_dyn();
HXLINE( 788)		this->ellipse_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::ellipse_dyn();
HXLINE( 784)		this->circleRadialOnSide_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::circleRadialOnSide_dyn();
HXLINE( 779)		this->circleRadial_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::circleRadial_dyn();
HXLINE( 774)		this->circle_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::circle_dyn();
HXLINE( 770)		this->overlapStar_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::overlapStar_dyn();
HXLINE( 767)		this->diamondOutline_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::diamondOutline_dyn();
HXLINE( 763)		this->diamond_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::diamond_dyn();
HXLINE( 760)		this->square_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::square_dyn();
HXLINE( 757)		this->squareOutline_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::squareOutline_dyn();
HXLINE( 754)		this->rectangle_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::rectangle_dyn();
HXLINE( 751)		this->lineXY_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::lineXY_dyn();
HXLINE( 748)		this->lineAB_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::lineAB_dyn();
HXLINE( 745)		this->quad_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::quad_dyn();
HXLINE( 744)		this->add2DQuad_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::add2DQuad_dyn();
HXLINE( 739)		this->add2DTriangle_ = ::trilateral3::shape::_Shaper::Shaper_Fields__obj::add2DTriangle_dyn();
            	}

Dynamic Shaper_obj::__CreateEmpty() { return new Shaper_obj; }

void *Shaper_obj::_hx_vtable = 0;

Dynamic Shaper_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Shaper_obj > _hx_result = new Shaper_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Shaper_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6395270b;
}


::hx::ObjectPtr< Shaper_obj > Shaper_obj::__new() {
	::hx::ObjectPtr< Shaper_obj > __this = new Shaper_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Shaper_obj > Shaper_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Shaper_obj *__this = (Shaper_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Shaper_obj), true, "trilateral3.shape.Shaper"));
	*(void **)__this = Shaper_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Shaper_obj::Shaper_obj()
{
}

void Shaper_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Shaper);
	HX_MARK_MEMBER_NAME(add2DTriangle_,"add2DTriangle_");
	HX_MARK_MEMBER_NAME(add2DQuad_,"add2DQuad_");
	HX_MARK_MEMBER_NAME(quad_,"quad_");
	HX_MARK_MEMBER_NAME(lineAB_,"lineAB_");
	HX_MARK_MEMBER_NAME(lineXY_,"lineXY_");
	HX_MARK_MEMBER_NAME(rectangle_,"rectangle_");
	HX_MARK_MEMBER_NAME(squareOutline_,"squareOutline_");
	HX_MARK_MEMBER_NAME(square_,"square_");
	HX_MARK_MEMBER_NAME(diamond_,"diamond_");
	HX_MARK_MEMBER_NAME(diamondOutline_,"diamondOutline_");
	HX_MARK_MEMBER_NAME(overlapStar_,"overlapStar_");
	HX_MARK_MEMBER_NAME(circle_,"circle_");
	HX_MARK_MEMBER_NAME(circleRadial_,"circleRadial_");
	HX_MARK_MEMBER_NAME(circleRadialOnSide_,"circleRadialOnSide_");
	HX_MARK_MEMBER_NAME(ellipse_,"ellipse_");
	HX_MARK_MEMBER_NAME(pie_,"pie_");
	HX_MARK_MEMBER_NAME(pieX_,"pieX_");
	HX_MARK_MEMBER_NAME(pieDifX_,"pieDifX_");
	HX_MARK_MEMBER_NAME(ellpisePie_,"ellpisePie_");
	HX_MARK_MEMBER_NAME(pieDif_,"pieDif_");
	HX_MARK_MEMBER_NAME(arc_,"arc_");
	HX_MARK_MEMBER_NAME(circleOnSide_,"circleOnSide_");
	HX_MARK_MEMBER_NAME(ellipseOnSide_,"ellipseOnSide_");
	HX_MARK_MEMBER_NAME(shape_,"shape_");
	HX_MARK_MEMBER_NAME(shapeRadial_,"shapeRadial_");
	HX_MARK_MEMBER_NAME(roundedRectangle_,"roundedRectangle_");
	HX_MARK_MEMBER_NAME(roundedRectangleOutline_,"roundedRectangleOutline_");
	HX_MARK_MEMBER_NAME(spiralLines_,"spiralLines_");
	HX_MARK_END_CLASS();
}

void Shaper_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(add2DTriangle_,"add2DTriangle_");
	HX_VISIT_MEMBER_NAME(add2DQuad_,"add2DQuad_");
	HX_VISIT_MEMBER_NAME(quad_,"quad_");
	HX_VISIT_MEMBER_NAME(lineAB_,"lineAB_");
	HX_VISIT_MEMBER_NAME(lineXY_,"lineXY_");
	HX_VISIT_MEMBER_NAME(rectangle_,"rectangle_");
	HX_VISIT_MEMBER_NAME(squareOutline_,"squareOutline_");
	HX_VISIT_MEMBER_NAME(square_,"square_");
	HX_VISIT_MEMBER_NAME(diamond_,"diamond_");
	HX_VISIT_MEMBER_NAME(diamondOutline_,"diamondOutline_");
	HX_VISIT_MEMBER_NAME(overlapStar_,"overlapStar_");
	HX_VISIT_MEMBER_NAME(circle_,"circle_");
	HX_VISIT_MEMBER_NAME(circleRadial_,"circleRadial_");
	HX_VISIT_MEMBER_NAME(circleRadialOnSide_,"circleRadialOnSide_");
	HX_VISIT_MEMBER_NAME(ellipse_,"ellipse_");
	HX_VISIT_MEMBER_NAME(pie_,"pie_");
	HX_VISIT_MEMBER_NAME(pieX_,"pieX_");
	HX_VISIT_MEMBER_NAME(pieDifX_,"pieDifX_");
	HX_VISIT_MEMBER_NAME(ellpisePie_,"ellpisePie_");
	HX_VISIT_MEMBER_NAME(pieDif_,"pieDif_");
	HX_VISIT_MEMBER_NAME(arc_,"arc_");
	HX_VISIT_MEMBER_NAME(circleOnSide_,"circleOnSide_");
	HX_VISIT_MEMBER_NAME(ellipseOnSide_,"ellipseOnSide_");
	HX_VISIT_MEMBER_NAME(shape_,"shape_");
	HX_VISIT_MEMBER_NAME(shapeRadial_,"shapeRadial_");
	HX_VISIT_MEMBER_NAME(roundedRectangle_,"roundedRectangle_");
	HX_VISIT_MEMBER_NAME(roundedRectangleOutline_,"roundedRectangleOutline_");
	HX_VISIT_MEMBER_NAME(spiralLines_,"spiralLines_");
}

::hx::Val Shaper_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pie_") ) { return ::hx::Val( pie_ ); }
		if (HX_FIELD_EQ(inName,"arc_") ) { return ::hx::Val( arc_ ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"quad_") ) { return ::hx::Val( quad_ ); }
		if (HX_FIELD_EQ(inName,"pieX_") ) { return ::hx::Val( pieX_ ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shape_") ) { return ::hx::Val( shape_ ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lineAB_") ) { return ::hx::Val( lineAB_ ); }
		if (HX_FIELD_EQ(inName,"lineXY_") ) { return ::hx::Val( lineXY_ ); }
		if (HX_FIELD_EQ(inName,"square_") ) { return ::hx::Val( square_ ); }
		if (HX_FIELD_EQ(inName,"circle_") ) { return ::hx::Val( circle_ ); }
		if (HX_FIELD_EQ(inName,"pieDif_") ) { return ::hx::Val( pieDif_ ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diamond_") ) { return ::hx::Val( diamond_ ); }
		if (HX_FIELD_EQ(inName,"ellipse_") ) { return ::hx::Val( ellipse_ ); }
		if (HX_FIELD_EQ(inName,"pieDifX_") ) { return ::hx::Val( pieDifX_ ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"add2DQuad_") ) { return ::hx::Val( add2DQuad_ ); }
		if (HX_FIELD_EQ(inName,"rectangle_") ) { return ::hx::Val( rectangle_ ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ellpisePie_") ) { return ::hx::Val( ellpisePie_ ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"overlapStar_") ) { return ::hx::Val( overlapStar_ ); }
		if (HX_FIELD_EQ(inName,"shapeRadial_") ) { return ::hx::Val( shapeRadial_ ); }
		if (HX_FIELD_EQ(inName,"spiralLines_") ) { return ::hx::Val( spiralLines_ ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"circleRadial_") ) { return ::hx::Val( circleRadial_ ); }
		if (HX_FIELD_EQ(inName,"circleOnSide_") ) { return ::hx::Val( circleOnSide_ ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"add2DTriangle_") ) { return ::hx::Val( add2DTriangle_ ); }
		if (HX_FIELD_EQ(inName,"squareOutline_") ) { return ::hx::Val( squareOutline_ ); }
		if (HX_FIELD_EQ(inName,"ellipseOnSide_") ) { return ::hx::Val( ellipseOnSide_ ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"diamondOutline_") ) { return ::hx::Val( diamondOutline_ ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"roundedRectangle_") ) { return ::hx::Val( roundedRectangle_ ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"circleRadialOnSide_") ) { return ::hx::Val( circleRadialOnSide_ ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"roundedRectangleOutline_") ) { return ::hx::Val( roundedRectangleOutline_ ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Shaper_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pie_") ) { pie_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arc_") ) { arc_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"quad_") ) { quad_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pieX_") ) { pieX_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shape_") ) { shape_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lineAB_") ) { lineAB_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineXY_") ) { lineXY_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"square_") ) { square_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"circle_") ) { circle_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pieDif_") ) { pieDif_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diamond_") ) { diamond_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ellipse_") ) { ellipse_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pieDifX_") ) { pieDifX_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"add2DQuad_") ) { add2DQuad_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rectangle_") ) { rectangle_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ellpisePie_") ) { ellpisePie_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"overlapStar_") ) { overlapStar_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shapeRadial_") ) { shapeRadial_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spiralLines_") ) { spiralLines_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"circleRadial_") ) { circleRadial_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"circleOnSide_") ) { circleOnSide_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"add2DTriangle_") ) { add2DTriangle_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"squareOutline_") ) { squareOutline_=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ellipseOnSide_") ) { ellipseOnSide_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"diamondOutline_") ) { diamondOutline_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"roundedRectangle_") ) { roundedRectangle_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"circleRadialOnSide_") ) { circleRadialOnSide_=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"roundedRectangleOutline_") ) { roundedRectangleOutline_=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Shaper_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,add2DTriangle_),HX_("add2DTriangle_",e4,49,f1,11)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,add2DQuad_),HX_("add2DQuad_",85,a4,c3,da)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,quad_),HX_("quad_",b8,75,e7,5d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,lineAB_),HX_("lineAB_",ea,e4,8e,1f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,lineXY_),HX_("lineXY_",ca,6c,a0,1f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,rectangle_),HX_("rectangle_",50,d5,bc,33)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,squareOutline_),HX_("squareOutline_",5a,9c,47,77)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,square_),HX_("square_",22,89,ce,7a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,diamond_),HX_("diamond_",8b,02,00,3b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,diamondOutline_),HX_("diamondOutline_",11,12,d8,dc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,overlapStar_),HX_("overlapStar_",46,77,83,77)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,circle_),HX_("circle_",4f,5c,b6,f5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,circleRadial_),HX_("circleRadial_",70,5c,cd,33)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,circleRadialOnSide_),HX_("circleRadialOnSide_",fa,5b,7e,e5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,ellipse_),HX_("ellipse_",c1,81,f2,09)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,pie_),HX_("pie_",93,ea,57,4a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,pieX_),HX_("pieX_",53,50,95,c2)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,pieDifX_),HX_("pieDifX_",9c,a0,5f,e3)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,ellpisePie_),HX_("ellpisePie_",23,fe,16,61)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,pieDif_),HX_("pieDif_",6a,f6,97,81)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,arc_),HX_("arc_",cd,89,74,40)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,circleOnSide_),HX_("circleOnSide_",19,0d,e3,1f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,ellipseOnSide_),HX_("ellipseOnSide_",0b,d4,d7,27)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,shape_),HX_("shape_",1e,da,29,1d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,shapeRadial_),HX_("shapeRadial_",7f,9f,57,8e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,roundedRectangle_),HX_("roundedRectangle_",dd,33,f6,1c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,roundedRectangleOutline_),HX_("roundedRectangleOutline_",ff,8e,a2,bf)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Shaper_obj,spiralLines_),HX_("spiralLines_",91,44,b9,10)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Shaper_obj_sStaticStorageInfo = 0;
#endif

static ::String Shaper_obj_sMemberFields[] = {
	HX_("add2DTriangle_",e4,49,f1,11),
	HX_("add2DQuad_",85,a4,c3,da),
	HX_("quad_",b8,75,e7,5d),
	HX_("lineAB_",ea,e4,8e,1f),
	HX_("lineXY_",ca,6c,a0,1f),
	HX_("rectangle_",50,d5,bc,33),
	HX_("squareOutline_",5a,9c,47,77),
	HX_("square_",22,89,ce,7a),
	HX_("diamond_",8b,02,00,3b),
	HX_("diamondOutline_",11,12,d8,dc),
	HX_("overlapStar_",46,77,83,77),
	HX_("circle_",4f,5c,b6,f5),
	HX_("circleRadial_",70,5c,cd,33),
	HX_("circleRadialOnSide_",fa,5b,7e,e5),
	HX_("ellipse_",c1,81,f2,09),
	HX_("pie_",93,ea,57,4a),
	HX_("pieX_",53,50,95,c2),
	HX_("pieDifX_",9c,a0,5f,e3),
	HX_("ellpisePie_",23,fe,16,61),
	HX_("pieDif_",6a,f6,97,81),
	HX_("arc_",cd,89,74,40),
	HX_("circleOnSide_",19,0d,e3,1f),
	HX_("ellipseOnSide_",0b,d4,d7,27),
	HX_("shape_",1e,da,29,1d),
	HX_("shapeRadial_",7f,9f,57,8e),
	HX_("roundedRectangle_",dd,33,f6,1c),
	HX_("roundedRectangleOutline_",ff,8e,a2,bf),
	HX_("spiralLines_",91,44,b9,10),
	::String(null()) };

::hx::Class Shaper_obj::__mClass;

void Shaper_obj::__register()
{
	Shaper_obj _hx_dummy;
	Shaper_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.shape.Shaper",c5,fe,e3,cb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Shaper_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Shaper_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shaper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shaper_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace trilateral3
} // end namespace shape
