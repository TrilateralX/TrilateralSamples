// Generated by Haxe 4.2.0-rc.1+7dc565e63
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var kitGL_glWeb_Ply = function(width_,height_) {
	this.vertexColor = "vertexColor";
	this.vertexPosition = "vertexPosition";
	this.width = width_;
	this.height = height_;
	var mainSheet = new kitGL_glWeb_Sheet();
	mainSheet.create(this.width,this.height,true);
	this.gl = mainSheet.gl;
	var gl = this.gl;
	var program = gl.createProgram();
	var shader = gl.createShader(35633);
	gl.shaderSource(shader,"attribute vec3 vertexPosition;" + "attribute vec4 vertexColor;" + "varying vec4 vcol;" + "void main(void) {" + " gl_Position = vec4(vertexPosition, 1.0);" + " vcol = vertexColor;" + "}");
	gl.compileShader(shader);
	var tmp;
	if(!gl.getShaderParameter(shader,35713)) {
		throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
	} else {
		tmp = shader;
	}
	gl.attachShader(program,tmp);
	var shader = gl.createShader(35632);
	gl.shaderSource(shader,"precision mediump float;" + "varying vec4 vcol;" + "void main(void) {" + " gl_FragColor = vcol;" + "}");
	gl.compileShader(shader);
	var tmp;
	if(!gl.getShaderParameter(shader,35713)) {
		throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
	} else {
		tmp = shader;
	}
	gl.attachShader(program,tmp);
	gl.linkProgram(program);
	var tmp;
	if(!gl.getProgramParameter(program,35714)) {
		throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
	} else {
		gl.validateProgram(program);
		if(!gl.getProgramParameter(program,35715)) {
			throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
		} else {
			gl.useProgram(program);
			tmp = program;
		}
	}
	this.program = tmp;
	this.draw();
	var gl = this.gl;
	var program = this.program;
	var data = this.dataGL.get_data();
	var xyzName = this.vertexPosition;
	var rgbaName = this.vertexColor;
	var isDynamic = true;
	if(isDynamic == null) {
		isDynamic = false;
	}
	var isDynamic1 = isDynamic;
	if(isDynamic1 == null) {
		isDynamic1 = false;
	}
	var buf = gl.createBuffer();
	var staticDraw = 35044;
	var dynamicDraw = 35048;
	var arrayBuffer = 34962;
	gl.bindBuffer(arrayBuffer,buf);
	if(isDynamic1) {
		var arrayBuffer = 34962;
		gl.bufferData(arrayBuffer,data,dynamicDraw);
	} else {
		var arrayBuffer = 34962;
		gl.bufferData(arrayBuffer,data,staticDraw);
	}
	var vbo = buf;
	var inp = gl.getAttribLocation(program,xyzName);
	var elementBytes = 4;
	var fp = 5126;
	var strideBytes = 7 * elementBytes;
	var offBytes = 0 * elementBytes;
	gl.vertexAttribPointer(inp,3,fp,false,strideBytes,offBytes);
	gl.enableVertexAttribArray(inp);
	var inp = gl.getAttribLocation(program,rgbaName);
	var elementBytes = 4;
	var fp = 5126;
	var strideBytes = 7 * elementBytes;
	var offBytes = 3 * elementBytes;
	gl.vertexAttribPointer(inp,4,fp,false,strideBytes,offBytes);
	gl.enableVertexAttribArray(inp);
	this.buf = vbo;
	var _gthis = this;
	if(kitGL_glWeb_AnimateTimer.s == null) {
		kitGL_glWeb_AnimateTimer.s = window.document.createElement("style");
		kitGL_glWeb_AnimateTimer.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
		window.document.getElementsByTagName("head")[0].appendChild(kitGL_glWeb_AnimateTimer.s);
		kitGL_glWeb_AnimateTimer.s.animation = "spin 1s linear infinite";
		kitGL_glWeb_AnimateTimer.loop(60.0);
	}
	kitGL_glWeb_AnimateTimer.onFrame = function(v) {
		var gl = _gthis.gl;
		var width = _gthis.width;
		var height = _gthis.height;
		gl.clearColor(0.5,0.0,0.5,0.9);
		gl.enable(2929);
		gl.clear(16384);
		gl.viewport(0,0,width,height);
		gl.enable(3042);
		gl.blendFunc(1,771);
		gl.enable(2929);
		_gthis.renderDraw();
		_gthis.gl.bindBuffer(34962,_gthis.buf);
		_gthis.gl.bufferSubData(34962,0,_gthis.dataGL.get_data());
		_gthis.gl.useProgram(_gthis.program);
		_gthis.gl.drawArrays(4,0,_gthis.dataGL.get_size());
	};
};
kitGL_glWeb_Ply.__name__ = true;
kitGL_glWeb_Ply.prototype = {
	draw: function() {
	}
	,renderDraw: function() {
	}
};
var TrilateralGradient = function(width,height) {
	this.theta = 0.;
	this.penNodule = new trilateral3_nodule_PenNodule();
	kitGL_glWeb_Ply.call(this,width,height);
};
TrilateralGradient.__name__ = true;
TrilateralGradient.quadEaseIn = function(t,b,c,d) {
	return c * (t /= d) * t + b;
};
TrilateralGradient.expEaseInOut = function(t,b,c,d) {
	if(t == 0) {
		return b;
	}
	if(t == d) {
		return b + c;
	}
	if((t /= d / 2) < 1) {
		return c / 2 * Math.pow(2,10 * (t - 1)) + b - c * 0.0005;
	}
	return c / 2 * 1.0005 * (-Math.pow(2,-10 * --t) + 2) + b;
};
TrilateralGradient.__super__ = kitGL_glWeb_Ply;
TrilateralGradient.prototype = $extend(kitGL_glWeb_Ply.prototype,{
	draw: function() {
		this.dataGL = { get_data : ($_=this.penNodule,$bind($_,$_.get_data)), get_size : ($_=this.penNodule,$bind($_,$_.get_size))};
		this.pen = this.penNodule.pen;
		var colors = [-7077677,-11861886,-16776961,-16711936,-256,-33024,-65536];
		var horizontal = true;
		var _this = this.pen;
		var func = trilateral3_drawing_Pen.tweenWrap(TrilateralGradient.quadEaseIn);
		if(colors.length != 0) {
			var left = 0.;
			var top = 0.;
			var wid = 500.;
			var hi = 500.;
			if(colors.length == 1) {
				colors.push(colors[0]);
			}
			var sections = colors.length - 1;
			var loops = colors.length - 1;
			if(func == null) {
				func = function(v) {
					return v;
				};
			}
			if(horizontal) {
				var step = 1 / sections;
				var x0;
				var x1;
				var _g = 0;
				var _g1 = loops;
				while(_g < _g1) {
					var i = _g++;
					x0 = func(i * step);
					x1 = func((i + 1) * step);
					var pos = new trilateral3_structure_XY(left + x0 * wid,top);
					var dim = new trilateral3_structure_XY(wid * (x1 - x0),hi);
					var col0 = colors[i];
					var col1 = colors[i + 1];
					var horizontal = true;
					var theta = 0.;
					var pivotX = 0.;
					var pivotY = 0.;
					if(pivotY == null) {
						pivotY = 0.;
					}
					if(pivotX == null) {
						pivotX = 0.;
					}
					if(theta == null) {
						theta = 0.;
					}
					if(horizontal == null) {
						horizontal = false;
					}
					if(col1 == null) {
						col1 = -1;
					}
					if(col0 == null) {
						col0 = -1;
					}
					var px = pos.x;
					var py = pos.y;
					var dx = dim.x;
					var dy = dim.y;
					var A_ = new trilateral3_structure_XY(px,py);
					var B_ = new trilateral3_structure_XY(px + dx,py);
					var C_ = new trilateral3_structure_XY(px + dx,py + dy);
					var D_ = new trilateral3_structure_XY(px,py + dy);
					if(theta != 0.) {
						var sin = Math.sin(theta);
						var cos = Math.cos(theta);
						var px1 = A_.x - pivotX;
						var py1 = A_.y - pivotY;
						var px2 = px1 * cos - py1 * sin;
						py1 = py1 * cos + px1 * sin;
						A_ = new trilateral3_structure_XY(px2 + pivotX,py1 + pivotY);
						var px3 = B_.x - pivotX;
						var py2 = B_.y - pivotY;
						var px21 = px3 * cos - py2 * sin;
						py2 = py2 * cos + px3 * sin;
						B_ = new trilateral3_structure_XY(px21 + pivotX,py2 + pivotY);
						var px4 = C_.x - pivotX;
						var py3 = C_.y - pivotY;
						var px22 = px4 * cos - py3 * sin;
						py3 = py3 * cos + px4 * sin;
						C_ = new trilateral3_structure_XY(px22 + pivotX,py3 + pivotY);
						var px5 = D_.x - pivotX;
						var py4 = D_.y - pivotY;
						var px23 = px5 * cos - py4 * sin;
						py4 = py4 * cos + px5 * sin;
						D_ = new trilateral3_structure_XY(px23 + pivotX,py4 + pivotY);
					}
					var line = new trilateral3_structure_Quad2D(A_,B_,C_,D_);
					if(horizontal) {
						var col01 = col0;
						var col11 = col1;
						var gradCorner = 1;
						if(gradCorner == null) {
							gradCorner = 0;
						}
						if(col11 == null) {
							col11 = -1;
						}
						if(col01 == null) {
							col01 = -1;
						}
						if(col01 == -1) {
							col01 = _this.currentColor;
						}
						if(col11 == -1) {
							col11 = _this.currentColor;
						}
						var ax = line.a.x;
						var ay = line.a.y;
						var bx = line.b.x;
						var by = line.b.y;
						var cx = line.d.x;
						var cy = line.d.y;
						var windAdjust = _this.paintType.triangle(ax,ay,_this.z2D,bx,by,_this.z2D,cx,cy,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax /= 2000;
							ay /= 2000;
							bx /= 2000;
							by /= 2000;
							cx /= 2000;
							cy /= 2000;
							_this.paintType.triangleUV(ax,ay,bx,by,cx,cy,windAdjust);
						}
						var winding = windAdjust;
						switch(gradCorner) {
						case 0:
							_this.paintType.cornerColors(col11,col01,col01);
							break;
						case 1:
							if(winding) {
								_this.paintType.cornerColors(col01,col01,col11);
							} else {
								_this.paintType.cornerColors(col01,col11,col01);
							}
							break;
						case 2:
							if(winding) {
								_this.paintType.cornerColors(col01,col11,col01);
							} else {
								_this.paintType.cornerColors(col01,col01,col11);
							}
							break;
						}
						_this.paintType.next();
						var col02 = col1;
						var col12 = col0;
						var gradCorner1 = 2;
						if(gradCorner1 == null) {
							gradCorner1 = 0;
						}
						if(col12 == null) {
							col12 = -1;
						}
						if(col02 == null) {
							col02 = -1;
						}
						if(col02 == -1) {
							col02 = _this.currentColor;
						}
						if(col12 == -1) {
							col12 = _this.currentColor;
						}
						var ax1 = line.b.x;
						var ay1 = line.b.y;
						var bx1 = line.c.x;
						var by1 = line.c.y;
						var cx1 = line.d.x;
						var cy1 = line.d.y;
						var windAdjust1 = _this.paintType.triangle(ax1,ay1,_this.z2D,bx1,by1,_this.z2D,cx1,cy1,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax1 /= 2000;
							ay1 /= 2000;
							bx1 /= 2000;
							by1 /= 2000;
							cx1 /= 2000;
							cy1 /= 2000;
							_this.paintType.triangleUV(ax1,ay1,bx1,by1,cx1,cy1,windAdjust1);
						}
						var winding1 = windAdjust1;
						switch(gradCorner1) {
						case 0:
							_this.paintType.cornerColors(col12,col02,col02);
							break;
						case 1:
							if(winding1) {
								_this.paintType.cornerColors(col02,col02,col12);
							} else {
								_this.paintType.cornerColors(col02,col12,col02);
							}
							break;
						case 2:
							if(winding1) {
								_this.paintType.cornerColors(col02,col12,col02);
							} else {
								_this.paintType.cornerColors(col02,col02,col12);
							}
							break;
						}
						_this.paintType.next();
					} else {
						var col03 = col0;
						var col13 = col1;
						var gradCorner2 = 2;
						if(gradCorner2 == null) {
							gradCorner2 = 0;
						}
						if(col13 == null) {
							col13 = -1;
						}
						if(col03 == null) {
							col03 = -1;
						}
						if(col03 == -1) {
							col03 = _this.currentColor;
						}
						if(col13 == -1) {
							col13 = _this.currentColor;
						}
						var ax2 = line.a.x;
						var ay2 = line.a.y;
						var bx2 = line.b.x;
						var by2 = line.b.y;
						var cx2 = line.d.x;
						var cy2 = line.d.y;
						var windAdjust2 = _this.paintType.triangle(ax2,ay2,_this.z2D,bx2,by2,_this.z2D,cx2,cy2,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax2 /= 2000;
							ay2 /= 2000;
							bx2 /= 2000;
							by2 /= 2000;
							cx2 /= 2000;
							cy2 /= 2000;
							_this.paintType.triangleUV(ax2,ay2,bx2,by2,cx2,cy2,windAdjust2);
						}
						var winding2 = windAdjust2;
						switch(gradCorner2) {
						case 0:
							_this.paintType.cornerColors(col13,col03,col03);
							break;
						case 1:
							if(winding2) {
								_this.paintType.cornerColors(col03,col03,col13);
							} else {
								_this.paintType.cornerColors(col03,col13,col03);
							}
							break;
						case 2:
							if(winding2) {
								_this.paintType.cornerColors(col03,col13,col03);
							} else {
								_this.paintType.cornerColors(col03,col03,col13);
							}
							break;
						}
						_this.paintType.next();
						var col04 = col1;
						var col14 = col0;
						var gradCorner3 = 0;
						if(gradCorner3 == null) {
							gradCorner3 = 0;
						}
						if(col14 == null) {
							col14 = -1;
						}
						if(col04 == null) {
							col04 = -1;
						}
						if(col04 == -1) {
							col04 = _this.currentColor;
						}
						if(col14 == -1) {
							col14 = _this.currentColor;
						}
						var ax3 = line.b.x;
						var ay3 = line.b.y;
						var bx3 = line.c.x;
						var by3 = line.c.y;
						var cx3 = line.d.x;
						var cy3 = line.d.y;
						var windAdjust3 = _this.paintType.triangle(ax3,ay3,_this.z2D,bx3,by3,_this.z2D,cx3,cy3,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax3 /= 2000;
							ay3 /= 2000;
							bx3 /= 2000;
							by3 /= 2000;
							cx3 /= 2000;
							cy3 /= 2000;
							_this.paintType.triangleUV(ax3,ay3,bx3,by3,cx3,cy3,windAdjust3);
						}
						var winding3 = windAdjust3;
						switch(gradCorner3) {
						case 0:
							_this.paintType.cornerColors(col14,col04,col04);
							break;
						case 1:
							if(winding3) {
								_this.paintType.cornerColors(col04,col04,col14);
							} else {
								_this.paintType.cornerColors(col04,col14,col04);
							}
							break;
						case 2:
							if(winding3) {
								_this.paintType.cornerColors(col04,col14,col04);
							} else {
								_this.paintType.cornerColors(col04,col04,col14);
							}
							break;
						}
						_this.paintType.next();
					}
				}
			} else {
				var step = 1 / sections;
				var dim = new trilateral3_structure_XY(wid,hi * func(step));
				var _g = 0;
				var _g1 = loops;
				while(_g < _g1) {
					var i = _g++;
					var pos = new trilateral3_structure_XY(left,top + func(i * step) * hi);
					var col0 = colors[i];
					var col1 = colors[i + 1];
					var horizontal = false;
					var theta = 0.;
					var pivotX = 0.;
					var pivotY = 0.;
					if(pivotY == null) {
						pivotY = 0.;
					}
					if(pivotX == null) {
						pivotX = 0.;
					}
					if(theta == null) {
						theta = 0.;
					}
					if(horizontal == null) {
						horizontal = false;
					}
					if(col1 == null) {
						col1 = -1;
					}
					if(col0 == null) {
						col0 = -1;
					}
					var px = pos.x;
					var py = pos.y;
					var dx = dim.x;
					var dy = dim.y;
					var A_ = new trilateral3_structure_XY(px,py);
					var B_ = new trilateral3_structure_XY(px + dx,py);
					var C_ = new trilateral3_structure_XY(px + dx,py + dy);
					var D_ = new trilateral3_structure_XY(px,py + dy);
					if(theta != 0.) {
						var sin = Math.sin(theta);
						var cos = Math.cos(theta);
						var px1 = A_.x - pivotX;
						var py1 = A_.y - pivotY;
						var px2 = px1 * cos - py1 * sin;
						py1 = py1 * cos + px1 * sin;
						A_ = new trilateral3_structure_XY(px2 + pivotX,py1 + pivotY);
						var px3 = B_.x - pivotX;
						var py2 = B_.y - pivotY;
						var px21 = px3 * cos - py2 * sin;
						py2 = py2 * cos + px3 * sin;
						B_ = new trilateral3_structure_XY(px21 + pivotX,py2 + pivotY);
						var px4 = C_.x - pivotX;
						var py3 = C_.y - pivotY;
						var px22 = px4 * cos - py3 * sin;
						py3 = py3 * cos + px4 * sin;
						C_ = new trilateral3_structure_XY(px22 + pivotX,py3 + pivotY);
						var px5 = D_.x - pivotX;
						var py4 = D_.y - pivotY;
						var px23 = px5 * cos - py4 * sin;
						py4 = py4 * cos + px5 * sin;
						D_ = new trilateral3_structure_XY(px23 + pivotX,py4 + pivotY);
					}
					var line = new trilateral3_structure_Quad2D(A_,B_,C_,D_);
					if(horizontal) {
						var col01 = col0;
						var col11 = col1;
						var gradCorner = 1;
						if(gradCorner == null) {
							gradCorner = 0;
						}
						if(col11 == null) {
							col11 = -1;
						}
						if(col01 == null) {
							col01 = -1;
						}
						if(col01 == -1) {
							col01 = _this.currentColor;
						}
						if(col11 == -1) {
							col11 = _this.currentColor;
						}
						var ax = line.a.x;
						var ay = line.a.y;
						var bx = line.b.x;
						var by = line.b.y;
						var cx = line.d.x;
						var cy = line.d.y;
						var windAdjust = _this.paintType.triangle(ax,ay,_this.z2D,bx,by,_this.z2D,cx,cy,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax /= 2000;
							ay /= 2000;
							bx /= 2000;
							by /= 2000;
							cx /= 2000;
							cy /= 2000;
							_this.paintType.triangleUV(ax,ay,bx,by,cx,cy,windAdjust);
						}
						var winding = windAdjust;
						switch(gradCorner) {
						case 0:
							_this.paintType.cornerColors(col11,col01,col01);
							break;
						case 1:
							if(winding) {
								_this.paintType.cornerColors(col01,col01,col11);
							} else {
								_this.paintType.cornerColors(col01,col11,col01);
							}
							break;
						case 2:
							if(winding) {
								_this.paintType.cornerColors(col01,col11,col01);
							} else {
								_this.paintType.cornerColors(col01,col01,col11);
							}
							break;
						}
						_this.paintType.next();
						var col02 = col1;
						var col12 = col0;
						var gradCorner1 = 2;
						if(gradCorner1 == null) {
							gradCorner1 = 0;
						}
						if(col12 == null) {
							col12 = -1;
						}
						if(col02 == null) {
							col02 = -1;
						}
						if(col02 == -1) {
							col02 = _this.currentColor;
						}
						if(col12 == -1) {
							col12 = _this.currentColor;
						}
						var ax1 = line.b.x;
						var ay1 = line.b.y;
						var bx1 = line.c.x;
						var by1 = line.c.y;
						var cx1 = line.d.x;
						var cy1 = line.d.y;
						var windAdjust1 = _this.paintType.triangle(ax1,ay1,_this.z2D,bx1,by1,_this.z2D,cx1,cy1,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax1 /= 2000;
							ay1 /= 2000;
							bx1 /= 2000;
							by1 /= 2000;
							cx1 /= 2000;
							cy1 /= 2000;
							_this.paintType.triangleUV(ax1,ay1,bx1,by1,cx1,cy1,windAdjust1);
						}
						var winding1 = windAdjust1;
						switch(gradCorner1) {
						case 0:
							_this.paintType.cornerColors(col12,col02,col02);
							break;
						case 1:
							if(winding1) {
								_this.paintType.cornerColors(col02,col02,col12);
							} else {
								_this.paintType.cornerColors(col02,col12,col02);
							}
							break;
						case 2:
							if(winding1) {
								_this.paintType.cornerColors(col02,col12,col02);
							} else {
								_this.paintType.cornerColors(col02,col02,col12);
							}
							break;
						}
						_this.paintType.next();
					} else {
						var col03 = col0;
						var col13 = col1;
						var gradCorner2 = 2;
						if(gradCorner2 == null) {
							gradCorner2 = 0;
						}
						if(col13 == null) {
							col13 = -1;
						}
						if(col03 == null) {
							col03 = -1;
						}
						if(col03 == -1) {
							col03 = _this.currentColor;
						}
						if(col13 == -1) {
							col13 = _this.currentColor;
						}
						var ax2 = line.a.x;
						var ay2 = line.a.y;
						var bx2 = line.b.x;
						var by2 = line.b.y;
						var cx2 = line.d.x;
						var cy2 = line.d.y;
						var windAdjust2 = _this.paintType.triangle(ax2,ay2,_this.z2D,bx2,by2,_this.z2D,cx2,cy2,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax2 /= 2000;
							ay2 /= 2000;
							bx2 /= 2000;
							by2 /= 2000;
							cx2 /= 2000;
							cy2 /= 2000;
							_this.paintType.triangleUV(ax2,ay2,bx2,by2,cx2,cy2,windAdjust2);
						}
						var winding2 = windAdjust2;
						switch(gradCorner2) {
						case 0:
							_this.paintType.cornerColors(col13,col03,col03);
							break;
						case 1:
							if(winding2) {
								_this.paintType.cornerColors(col03,col03,col13);
							} else {
								_this.paintType.cornerColors(col03,col13,col03);
							}
							break;
						case 2:
							if(winding2) {
								_this.paintType.cornerColors(col03,col13,col03);
							} else {
								_this.paintType.cornerColors(col03,col03,col13);
							}
							break;
						}
						_this.paintType.next();
						var col04 = col1;
						var col14 = col0;
						var gradCorner3 = 0;
						if(gradCorner3 == null) {
							gradCorner3 = 0;
						}
						if(col14 == null) {
							col14 = -1;
						}
						if(col04 == null) {
							col04 = -1;
						}
						if(col04 == -1) {
							col04 = _this.currentColor;
						}
						if(col14 == -1) {
							col14 = _this.currentColor;
						}
						var ax3 = line.b.x;
						var ay3 = line.b.y;
						var bx3 = line.c.x;
						var by3 = line.c.y;
						var cx3 = line.d.x;
						var cy3 = line.d.y;
						var windAdjust3 = _this.paintType.triangle(ax3,ay3,_this.z2D,bx3,by3,_this.z2D,cx3,cy3,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax3 /= 2000;
							ay3 /= 2000;
							bx3 /= 2000;
							by3 /= 2000;
							cx3 /= 2000;
							cy3 /= 2000;
							_this.paintType.triangleUV(ax3,ay3,bx3,by3,cx3,cy3,windAdjust3);
						}
						var winding3 = windAdjust3;
						switch(gradCorner3) {
						case 0:
							_this.paintType.cornerColors(col14,col04,col04);
							break;
						case 1:
							if(winding3) {
								_this.paintType.cornerColors(col04,col04,col14);
							} else {
								_this.paintType.cornerColors(col04,col14,col04);
							}
							break;
						case 2:
							if(winding3) {
								_this.paintType.cornerColors(col04,col14,col04);
							} else {
								_this.paintType.cornerColors(col04,col04,col14);
							}
							break;
						}
						_this.paintType.next();
					}
				}
			}
		}
	}
	,renderDraw: function() {
		this.pen.paintType.set_pos(0);
		var colors = [-11861886,-65536,-33024,-16711936];
		var horizontal = true;
		var _this = this.pen;
		var func = trilateral3_drawing_Pen.tweenWrap(TrilateralGradient.quadEaseIn);
		var theta = this.theta;
		var pivotX = 550;
		var pivotY = 550;
		if(pivotY == null) {
			pivotY = 0.;
		}
		if(pivotX == null) {
			pivotX = 0.;
		}
		if(theta == null) {
			theta = 0.;
		}
		if(colors.length != 0) {
			var left = 300.;
			var top = 300.;
			var wid = 500.;
			var hi = 500.;
			if(colors.length == 1) {
				colors.push(colors[0]);
			}
			var sections = colors.length - 1;
			var loops = colors.length - 1;
			if(func == null) {
				func = function(v) {
					return v;
				};
			}
			if(horizontal) {
				var step = 1 / sections;
				var x0;
				var x1;
				var _g = 0;
				var _g1 = loops;
				while(_g < _g1) {
					var i = _g++;
					x0 = func(i * step);
					x1 = func((i + 1) * step);
					var pos = new trilateral3_structure_XY(left + x0 * wid,top);
					var dim = new trilateral3_structure_XY(wid * (x1 - x0),hi);
					var col0 = colors[i];
					var col1 = colors[i + 1];
					var horizontal = true;
					var theta1 = theta;
					var pivotX1 = pivotX;
					var pivotY1 = pivotY;
					if(pivotY1 == null) {
						pivotY1 = 0.;
					}
					if(pivotX1 == null) {
						pivotX1 = 0.;
					}
					if(theta1 == null) {
						theta1 = 0.;
					}
					if(horizontal == null) {
						horizontal = false;
					}
					if(col1 == null) {
						col1 = -1;
					}
					if(col0 == null) {
						col0 = -1;
					}
					var px = pos.x;
					var py = pos.y;
					var dx = dim.x;
					var dy = dim.y;
					var A_ = new trilateral3_structure_XY(px,py);
					var B_ = new trilateral3_structure_XY(px + dx,py);
					var C_ = new trilateral3_structure_XY(px + dx,py + dy);
					var D_ = new trilateral3_structure_XY(px,py + dy);
					if(theta1 != 0.) {
						var sin = Math.sin(theta1);
						var cos = Math.cos(theta1);
						var px1 = A_.x - pivotX1;
						var py1 = A_.y - pivotY1;
						var px2 = px1 * cos - py1 * sin;
						py1 = py1 * cos + px1 * sin;
						A_ = new trilateral3_structure_XY(px2 + pivotX1,py1 + pivotY1);
						var px3 = B_.x - pivotX1;
						var py2 = B_.y - pivotY1;
						var px21 = px3 * cos - py2 * sin;
						py2 = py2 * cos + px3 * sin;
						B_ = new trilateral3_structure_XY(px21 + pivotX1,py2 + pivotY1);
						var px4 = C_.x - pivotX1;
						var py3 = C_.y - pivotY1;
						var px22 = px4 * cos - py3 * sin;
						py3 = py3 * cos + px4 * sin;
						C_ = new trilateral3_structure_XY(px22 + pivotX1,py3 + pivotY1);
						var px5 = D_.x - pivotX1;
						var py4 = D_.y - pivotY1;
						var px23 = px5 * cos - py4 * sin;
						py4 = py4 * cos + px5 * sin;
						D_ = new trilateral3_structure_XY(px23 + pivotX1,py4 + pivotY1);
					}
					var line = new trilateral3_structure_Quad2D(A_,B_,C_,D_);
					if(horizontal) {
						var col01 = col0;
						var col11 = col1;
						var gradCorner = 1;
						if(gradCorner == null) {
							gradCorner = 0;
						}
						if(col11 == null) {
							col11 = -1;
						}
						if(col01 == null) {
							col01 = -1;
						}
						if(col01 == -1) {
							col01 = _this.currentColor;
						}
						if(col11 == -1) {
							col11 = _this.currentColor;
						}
						var ax = line.a.x;
						var ay = line.a.y;
						var bx = line.b.x;
						var by = line.b.y;
						var cx = line.d.x;
						var cy = line.d.y;
						var windAdjust = _this.paintType.triangle(ax,ay,_this.z2D,bx,by,_this.z2D,cx,cy,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax /= 2000;
							ay /= 2000;
							bx /= 2000;
							by /= 2000;
							cx /= 2000;
							cy /= 2000;
							_this.paintType.triangleUV(ax,ay,bx,by,cx,cy,windAdjust);
						}
						var winding = windAdjust;
						switch(gradCorner) {
						case 0:
							_this.paintType.cornerColors(col11,col01,col01);
							break;
						case 1:
							if(winding) {
								_this.paintType.cornerColors(col01,col01,col11);
							} else {
								_this.paintType.cornerColors(col01,col11,col01);
							}
							break;
						case 2:
							if(winding) {
								_this.paintType.cornerColors(col01,col11,col01);
							} else {
								_this.paintType.cornerColors(col01,col01,col11);
							}
							break;
						}
						_this.paintType.next();
						var col02 = col1;
						var col12 = col0;
						var gradCorner1 = 2;
						if(gradCorner1 == null) {
							gradCorner1 = 0;
						}
						if(col12 == null) {
							col12 = -1;
						}
						if(col02 == null) {
							col02 = -1;
						}
						if(col02 == -1) {
							col02 = _this.currentColor;
						}
						if(col12 == -1) {
							col12 = _this.currentColor;
						}
						var ax1 = line.b.x;
						var ay1 = line.b.y;
						var bx1 = line.c.x;
						var by1 = line.c.y;
						var cx1 = line.d.x;
						var cy1 = line.d.y;
						var windAdjust1 = _this.paintType.triangle(ax1,ay1,_this.z2D,bx1,by1,_this.z2D,cx1,cy1,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax1 /= 2000;
							ay1 /= 2000;
							bx1 /= 2000;
							by1 /= 2000;
							cx1 /= 2000;
							cy1 /= 2000;
							_this.paintType.triangleUV(ax1,ay1,bx1,by1,cx1,cy1,windAdjust1);
						}
						var winding1 = windAdjust1;
						switch(gradCorner1) {
						case 0:
							_this.paintType.cornerColors(col12,col02,col02);
							break;
						case 1:
							if(winding1) {
								_this.paintType.cornerColors(col02,col02,col12);
							} else {
								_this.paintType.cornerColors(col02,col12,col02);
							}
							break;
						case 2:
							if(winding1) {
								_this.paintType.cornerColors(col02,col12,col02);
							} else {
								_this.paintType.cornerColors(col02,col02,col12);
							}
							break;
						}
						_this.paintType.next();
					} else {
						var col03 = col0;
						var col13 = col1;
						var gradCorner2 = 2;
						if(gradCorner2 == null) {
							gradCorner2 = 0;
						}
						if(col13 == null) {
							col13 = -1;
						}
						if(col03 == null) {
							col03 = -1;
						}
						if(col03 == -1) {
							col03 = _this.currentColor;
						}
						if(col13 == -1) {
							col13 = _this.currentColor;
						}
						var ax2 = line.a.x;
						var ay2 = line.a.y;
						var bx2 = line.b.x;
						var by2 = line.b.y;
						var cx2 = line.d.x;
						var cy2 = line.d.y;
						var windAdjust2 = _this.paintType.triangle(ax2,ay2,_this.z2D,bx2,by2,_this.z2D,cx2,cy2,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax2 /= 2000;
							ay2 /= 2000;
							bx2 /= 2000;
							by2 /= 2000;
							cx2 /= 2000;
							cy2 /= 2000;
							_this.paintType.triangleUV(ax2,ay2,bx2,by2,cx2,cy2,windAdjust2);
						}
						var winding2 = windAdjust2;
						switch(gradCorner2) {
						case 0:
							_this.paintType.cornerColors(col13,col03,col03);
							break;
						case 1:
							if(winding2) {
								_this.paintType.cornerColors(col03,col03,col13);
							} else {
								_this.paintType.cornerColors(col03,col13,col03);
							}
							break;
						case 2:
							if(winding2) {
								_this.paintType.cornerColors(col03,col13,col03);
							} else {
								_this.paintType.cornerColors(col03,col03,col13);
							}
							break;
						}
						_this.paintType.next();
						var col04 = col1;
						var col14 = col0;
						var gradCorner3 = 0;
						if(gradCorner3 == null) {
							gradCorner3 = 0;
						}
						if(col14 == null) {
							col14 = -1;
						}
						if(col04 == null) {
							col04 = -1;
						}
						if(col04 == -1) {
							col04 = _this.currentColor;
						}
						if(col14 == -1) {
							col14 = _this.currentColor;
						}
						var ax3 = line.b.x;
						var ay3 = line.b.y;
						var bx3 = line.c.x;
						var by3 = line.c.y;
						var cx3 = line.d.x;
						var cy3 = line.d.y;
						var windAdjust3 = _this.paintType.triangle(ax3,ay3,_this.z2D,bx3,by3,_this.z2D,cx3,cy3,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax3 /= 2000;
							ay3 /= 2000;
							bx3 /= 2000;
							by3 /= 2000;
							cx3 /= 2000;
							cy3 /= 2000;
							_this.paintType.triangleUV(ax3,ay3,bx3,by3,cx3,cy3,windAdjust3);
						}
						var winding3 = windAdjust3;
						switch(gradCorner3) {
						case 0:
							_this.paintType.cornerColors(col14,col04,col04);
							break;
						case 1:
							if(winding3) {
								_this.paintType.cornerColors(col04,col04,col14);
							} else {
								_this.paintType.cornerColors(col04,col14,col04);
							}
							break;
						case 2:
							if(winding3) {
								_this.paintType.cornerColors(col04,col14,col04);
							} else {
								_this.paintType.cornerColors(col04,col04,col14);
							}
							break;
						}
						_this.paintType.next();
					}
				}
			} else {
				var step = 1 / sections;
				var dim = new trilateral3_structure_XY(wid,hi * func(step));
				var _g = 0;
				var _g1 = loops;
				while(_g < _g1) {
					var i = _g++;
					var pos = new trilateral3_structure_XY(left,top + func(i * step) * hi);
					var col0 = colors[i];
					var col1 = colors[i + 1];
					var horizontal = false;
					var theta1 = theta;
					var pivotX1 = pivotX;
					var pivotY1 = pivotY;
					if(pivotY1 == null) {
						pivotY1 = 0.;
					}
					if(pivotX1 == null) {
						pivotX1 = 0.;
					}
					if(theta1 == null) {
						theta1 = 0.;
					}
					if(horizontal == null) {
						horizontal = false;
					}
					if(col1 == null) {
						col1 = -1;
					}
					if(col0 == null) {
						col0 = -1;
					}
					var px = pos.x;
					var py = pos.y;
					var dx = dim.x;
					var dy = dim.y;
					var A_ = new trilateral3_structure_XY(px,py);
					var B_ = new trilateral3_structure_XY(px + dx,py);
					var C_ = new trilateral3_structure_XY(px + dx,py + dy);
					var D_ = new trilateral3_structure_XY(px,py + dy);
					if(theta1 != 0.) {
						var sin = Math.sin(theta1);
						var cos = Math.cos(theta1);
						var px1 = A_.x - pivotX1;
						var py1 = A_.y - pivotY1;
						var px2 = px1 * cos - py1 * sin;
						py1 = py1 * cos + px1 * sin;
						A_ = new trilateral3_structure_XY(px2 + pivotX1,py1 + pivotY1);
						var px3 = B_.x - pivotX1;
						var py2 = B_.y - pivotY1;
						var px21 = px3 * cos - py2 * sin;
						py2 = py2 * cos + px3 * sin;
						B_ = new trilateral3_structure_XY(px21 + pivotX1,py2 + pivotY1);
						var px4 = C_.x - pivotX1;
						var py3 = C_.y - pivotY1;
						var px22 = px4 * cos - py3 * sin;
						py3 = py3 * cos + px4 * sin;
						C_ = new trilateral3_structure_XY(px22 + pivotX1,py3 + pivotY1);
						var px5 = D_.x - pivotX1;
						var py4 = D_.y - pivotY1;
						var px23 = px5 * cos - py4 * sin;
						py4 = py4 * cos + px5 * sin;
						D_ = new trilateral3_structure_XY(px23 + pivotX1,py4 + pivotY1);
					}
					var line = new trilateral3_structure_Quad2D(A_,B_,C_,D_);
					if(horizontal) {
						var col01 = col0;
						var col11 = col1;
						var gradCorner = 1;
						if(gradCorner == null) {
							gradCorner = 0;
						}
						if(col11 == null) {
							col11 = -1;
						}
						if(col01 == null) {
							col01 = -1;
						}
						if(col01 == -1) {
							col01 = _this.currentColor;
						}
						if(col11 == -1) {
							col11 = _this.currentColor;
						}
						var ax = line.a.x;
						var ay = line.a.y;
						var bx = line.b.x;
						var by = line.b.y;
						var cx = line.d.x;
						var cy = line.d.y;
						var windAdjust = _this.paintType.triangle(ax,ay,_this.z2D,bx,by,_this.z2D,cx,cy,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax /= 2000;
							ay /= 2000;
							bx /= 2000;
							by /= 2000;
							cx /= 2000;
							cy /= 2000;
							_this.paintType.triangleUV(ax,ay,bx,by,cx,cy,windAdjust);
						}
						var winding = windAdjust;
						switch(gradCorner) {
						case 0:
							_this.paintType.cornerColors(col11,col01,col01);
							break;
						case 1:
							if(winding) {
								_this.paintType.cornerColors(col01,col01,col11);
							} else {
								_this.paintType.cornerColors(col01,col11,col01);
							}
							break;
						case 2:
							if(winding) {
								_this.paintType.cornerColors(col01,col11,col01);
							} else {
								_this.paintType.cornerColors(col01,col01,col11);
							}
							break;
						}
						_this.paintType.next();
						var col02 = col1;
						var col12 = col0;
						var gradCorner1 = 2;
						if(gradCorner1 == null) {
							gradCorner1 = 0;
						}
						if(col12 == null) {
							col12 = -1;
						}
						if(col02 == null) {
							col02 = -1;
						}
						if(col02 == -1) {
							col02 = _this.currentColor;
						}
						if(col12 == -1) {
							col12 = _this.currentColor;
						}
						var ax1 = line.b.x;
						var ay1 = line.b.y;
						var bx1 = line.c.x;
						var by1 = line.c.y;
						var cx1 = line.d.x;
						var cy1 = line.d.y;
						var windAdjust1 = _this.paintType.triangle(ax1,ay1,_this.z2D,bx1,by1,_this.z2D,cx1,cy1,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax1 /= 2000;
							ay1 /= 2000;
							bx1 /= 2000;
							by1 /= 2000;
							cx1 /= 2000;
							cy1 /= 2000;
							_this.paintType.triangleUV(ax1,ay1,bx1,by1,cx1,cy1,windAdjust1);
						}
						var winding1 = windAdjust1;
						switch(gradCorner1) {
						case 0:
							_this.paintType.cornerColors(col12,col02,col02);
							break;
						case 1:
							if(winding1) {
								_this.paintType.cornerColors(col02,col02,col12);
							} else {
								_this.paintType.cornerColors(col02,col12,col02);
							}
							break;
						case 2:
							if(winding1) {
								_this.paintType.cornerColors(col02,col12,col02);
							} else {
								_this.paintType.cornerColors(col02,col02,col12);
							}
							break;
						}
						_this.paintType.next();
					} else {
						var col03 = col0;
						var col13 = col1;
						var gradCorner2 = 2;
						if(gradCorner2 == null) {
							gradCorner2 = 0;
						}
						if(col13 == null) {
							col13 = -1;
						}
						if(col03 == null) {
							col03 = -1;
						}
						if(col03 == -1) {
							col03 = _this.currentColor;
						}
						if(col13 == -1) {
							col13 = _this.currentColor;
						}
						var ax2 = line.a.x;
						var ay2 = line.a.y;
						var bx2 = line.b.x;
						var by2 = line.b.y;
						var cx2 = line.d.x;
						var cy2 = line.d.y;
						var windAdjust2 = _this.paintType.triangle(ax2,ay2,_this.z2D,bx2,by2,_this.z2D,cx2,cy2,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax2 /= 2000;
							ay2 /= 2000;
							bx2 /= 2000;
							by2 /= 2000;
							cx2 /= 2000;
							cy2 /= 2000;
							_this.paintType.triangleUV(ax2,ay2,bx2,by2,cx2,cy2,windAdjust2);
						}
						var winding2 = windAdjust2;
						switch(gradCorner2) {
						case 0:
							_this.paintType.cornerColors(col13,col03,col03);
							break;
						case 1:
							if(winding2) {
								_this.paintType.cornerColors(col03,col03,col13);
							} else {
								_this.paintType.cornerColors(col03,col13,col03);
							}
							break;
						case 2:
							if(winding2) {
								_this.paintType.cornerColors(col03,col13,col03);
							} else {
								_this.paintType.cornerColors(col03,col03,col13);
							}
							break;
						}
						_this.paintType.next();
						var col04 = col1;
						var col14 = col0;
						var gradCorner3 = 0;
						if(gradCorner3 == null) {
							gradCorner3 = 0;
						}
						if(col14 == null) {
							col14 = -1;
						}
						if(col04 == null) {
							col04 = -1;
						}
						if(col04 == -1) {
							col04 = _this.currentColor;
						}
						if(col14 == -1) {
							col14 = _this.currentColor;
						}
						var ax3 = line.b.x;
						var ay3 = line.b.y;
						var bx3 = line.c.x;
						var by3 = line.c.y;
						var cx3 = line.d.x;
						var cy3 = line.d.y;
						var windAdjust3 = _this.paintType.triangle(ax3,ay3,_this.z2D,bx3,by3,_this.z2D,cx3,cy3,_this.z2D);
						if(trilateral3_Trilateral.transformMatrix != null) {
							_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
						}
						if(_this.useTexture) {
							ax3 /= 2000;
							ay3 /= 2000;
							bx3 /= 2000;
							by3 /= 2000;
							cx3 /= 2000;
							cy3 /= 2000;
							_this.paintType.triangleUV(ax3,ay3,bx3,by3,cx3,cy3,windAdjust3);
						}
						var winding3 = windAdjust3;
						switch(gradCorner3) {
						case 0:
							_this.paintType.cornerColors(col14,col04,col04);
							break;
						case 1:
							if(winding3) {
								_this.paintType.cornerColors(col04,col04,col14);
							} else {
								_this.paintType.cornerColors(col04,col14,col04);
							}
							break;
						case 2:
							if(winding3) {
								_this.paintType.cornerColors(col04,col14,col04);
							} else {
								_this.paintType.cornerColors(col04,col04,col14);
							}
							break;
						}
						_this.paintType.next();
					}
				}
			}
		}
		var colors = [-7077677,-256,-65536];
		var _this = this.pen;
		var func = trilateral3_drawing_Pen.tweenWrap(TrilateralGradient.expEaseInOut);
		var theta = 0;
		var pivotX = 350;
		var pivotY = 350;
		if(pivotY == null) {
			pivotY = 0.;
		}
		if(pivotX == null) {
			pivotX = 0.;
		}
		if(theta == null) {
			theta = 0.;
		}
		if(colors.length != 0) {
			var left = 0.;
			var top = 0.;
			var wid = 500.;
			var hi = 500.;
			if(colors.length == 1) {
				colors.push(colors[0]);
			}
			var sections = colors.length - 1;
			var loops = colors.length - 1;
			if(func == null) {
				func = function(v) {
					return v;
				};
			}
			var step = 1 / sections;
			var dim = new trilateral3_structure_XY(wid,hi * func(step));
			var _g = 0;
			var _g1 = loops;
			while(_g < _g1) {
				var i = _g++;
				var pos = new trilateral3_structure_XY(left,top + func(i * step) * hi);
				var col0 = colors[i];
				var col1 = colors[i + 1];
				var horizontal = false;
				var theta1 = theta;
				var pivotX1 = pivotX;
				var pivotY1 = pivotY;
				if(pivotY1 == null) {
					pivotY1 = 0.;
				}
				if(pivotX1 == null) {
					pivotX1 = 0.;
				}
				if(theta1 == null) {
					theta1 = 0.;
				}
				if(horizontal == null) {
					horizontal = false;
				}
				if(col1 == null) {
					col1 = -1;
				}
				if(col0 == null) {
					col0 = -1;
				}
				var px = pos.x;
				var py = pos.y;
				var dx = dim.x;
				var dy = dim.y;
				var A_ = new trilateral3_structure_XY(px,py);
				var B_ = new trilateral3_structure_XY(px + dx,py);
				var C_ = new trilateral3_structure_XY(px + dx,py + dy);
				var D_ = new trilateral3_structure_XY(px,py + dy);
				if(theta1 != 0.) {
					var sin = Math.sin(theta1);
					var cos = Math.cos(theta1);
					var px1 = A_.x - pivotX1;
					var py1 = A_.y - pivotY1;
					var px2 = px1 * cos - py1 * sin;
					py1 = py1 * cos + px1 * sin;
					A_ = new trilateral3_structure_XY(px2 + pivotX1,py1 + pivotY1);
					var px3 = B_.x - pivotX1;
					var py2 = B_.y - pivotY1;
					var px21 = px3 * cos - py2 * sin;
					py2 = py2 * cos + px3 * sin;
					B_ = new trilateral3_structure_XY(px21 + pivotX1,py2 + pivotY1);
					var px4 = C_.x - pivotX1;
					var py3 = C_.y - pivotY1;
					var px22 = px4 * cos - py3 * sin;
					py3 = py3 * cos + px4 * sin;
					C_ = new trilateral3_structure_XY(px22 + pivotX1,py3 + pivotY1);
					var px5 = D_.x - pivotX1;
					var py4 = D_.y - pivotY1;
					var px23 = px5 * cos - py4 * sin;
					py4 = py4 * cos + px5 * sin;
					D_ = new trilateral3_structure_XY(px23 + pivotX1,py4 + pivotY1);
				}
				var line = new trilateral3_structure_Quad2D(A_,B_,C_,D_);
				if(horizontal) {
					var col01 = col0;
					var col11 = col1;
					var gradCorner = 1;
					if(gradCorner == null) {
						gradCorner = 0;
					}
					if(col11 == null) {
						col11 = -1;
					}
					if(col01 == null) {
						col01 = -1;
					}
					if(col01 == -1) {
						col01 = _this.currentColor;
					}
					if(col11 == -1) {
						col11 = _this.currentColor;
					}
					var ax = line.a.x;
					var ay = line.a.y;
					var bx = line.b.x;
					var by = line.b.y;
					var cx = line.d.x;
					var cy = line.d.y;
					var windAdjust = _this.paintType.triangle(ax,ay,_this.z2D,bx,by,_this.z2D,cx,cy,_this.z2D);
					if(trilateral3_Trilateral.transformMatrix != null) {
						_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
					}
					if(_this.useTexture) {
						ax /= 2000;
						ay /= 2000;
						bx /= 2000;
						by /= 2000;
						cx /= 2000;
						cy /= 2000;
						_this.paintType.triangleUV(ax,ay,bx,by,cx,cy,windAdjust);
					}
					var winding = windAdjust;
					switch(gradCorner) {
					case 0:
						_this.paintType.cornerColors(col11,col01,col01);
						break;
					case 1:
						if(winding) {
							_this.paintType.cornerColors(col01,col01,col11);
						} else {
							_this.paintType.cornerColors(col01,col11,col01);
						}
						break;
					case 2:
						if(winding) {
							_this.paintType.cornerColors(col01,col11,col01);
						} else {
							_this.paintType.cornerColors(col01,col01,col11);
						}
						break;
					}
					_this.paintType.next();
					var col02 = col1;
					var col12 = col0;
					var gradCorner1 = 2;
					if(gradCorner1 == null) {
						gradCorner1 = 0;
					}
					if(col12 == null) {
						col12 = -1;
					}
					if(col02 == null) {
						col02 = -1;
					}
					if(col02 == -1) {
						col02 = _this.currentColor;
					}
					if(col12 == -1) {
						col12 = _this.currentColor;
					}
					var ax1 = line.b.x;
					var ay1 = line.b.y;
					var bx1 = line.c.x;
					var by1 = line.c.y;
					var cx1 = line.d.x;
					var cy1 = line.d.y;
					var windAdjust1 = _this.paintType.triangle(ax1,ay1,_this.z2D,bx1,by1,_this.z2D,cx1,cy1,_this.z2D);
					if(trilateral3_Trilateral.transformMatrix != null) {
						_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
					}
					if(_this.useTexture) {
						ax1 /= 2000;
						ay1 /= 2000;
						bx1 /= 2000;
						by1 /= 2000;
						cx1 /= 2000;
						cy1 /= 2000;
						_this.paintType.triangleUV(ax1,ay1,bx1,by1,cx1,cy1,windAdjust1);
					}
					var winding1 = windAdjust1;
					switch(gradCorner1) {
					case 0:
						_this.paintType.cornerColors(col12,col02,col02);
						break;
					case 1:
						if(winding1) {
							_this.paintType.cornerColors(col02,col02,col12);
						} else {
							_this.paintType.cornerColors(col02,col12,col02);
						}
						break;
					case 2:
						if(winding1) {
							_this.paintType.cornerColors(col02,col12,col02);
						} else {
							_this.paintType.cornerColors(col02,col02,col12);
						}
						break;
					}
					_this.paintType.next();
				} else {
					var col03 = col0;
					var col13 = col1;
					var gradCorner2 = 2;
					if(gradCorner2 == null) {
						gradCorner2 = 0;
					}
					if(col13 == null) {
						col13 = -1;
					}
					if(col03 == null) {
						col03 = -1;
					}
					if(col03 == -1) {
						col03 = _this.currentColor;
					}
					if(col13 == -1) {
						col13 = _this.currentColor;
					}
					var ax2 = line.a.x;
					var ay2 = line.a.y;
					var bx2 = line.b.x;
					var by2 = line.b.y;
					var cx2 = line.d.x;
					var cy2 = line.d.y;
					var windAdjust2 = _this.paintType.triangle(ax2,ay2,_this.z2D,bx2,by2,_this.z2D,cx2,cy2,_this.z2D);
					if(trilateral3_Trilateral.transformMatrix != null) {
						_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
					}
					if(_this.useTexture) {
						ax2 /= 2000;
						ay2 /= 2000;
						bx2 /= 2000;
						by2 /= 2000;
						cx2 /= 2000;
						cy2 /= 2000;
						_this.paintType.triangleUV(ax2,ay2,bx2,by2,cx2,cy2,windAdjust2);
					}
					var winding2 = windAdjust2;
					switch(gradCorner2) {
					case 0:
						_this.paintType.cornerColors(col13,col03,col03);
						break;
					case 1:
						if(winding2) {
							_this.paintType.cornerColors(col03,col03,col13);
						} else {
							_this.paintType.cornerColors(col03,col13,col03);
						}
						break;
					case 2:
						if(winding2) {
							_this.paintType.cornerColors(col03,col13,col03);
						} else {
							_this.paintType.cornerColors(col03,col03,col13);
						}
						break;
					}
					_this.paintType.next();
					var col04 = col1;
					var col14 = col0;
					var gradCorner3 = 0;
					if(gradCorner3 == null) {
						gradCorner3 = 0;
					}
					if(col14 == null) {
						col14 = -1;
					}
					if(col04 == null) {
						col04 = -1;
					}
					if(col04 == -1) {
						col04 = _this.currentColor;
					}
					if(col14 == -1) {
						col14 = _this.currentColor;
					}
					var ax3 = line.b.x;
					var ay3 = line.b.y;
					var bx3 = line.c.x;
					var by3 = line.c.y;
					var cx3 = line.d.x;
					var cy3 = line.d.y;
					var windAdjust3 = _this.paintType.triangle(ax3,ay3,_this.z2D,bx3,by3,_this.z2D,cx3,cy3,_this.z2D);
					if(trilateral3_Trilateral.transformMatrix != null) {
						_this.paintType.transform(trilateral3_Trilateral.transformMatrix);
					}
					if(_this.useTexture) {
						ax3 /= 2000;
						ay3 /= 2000;
						bx3 /= 2000;
						by3 /= 2000;
						cx3 /= 2000;
						cy3 /= 2000;
						_this.paintType.triangleUV(ax3,ay3,bx3,by3,cx3,cy3,windAdjust3);
					}
					var winding3 = windAdjust3;
					switch(gradCorner3) {
					case 0:
						_this.paintType.cornerColors(col14,col04,col04);
						break;
					case 1:
						if(winding3) {
							_this.paintType.cornerColors(col04,col04,col14);
						} else {
							_this.paintType.cornerColors(col04,col14,col04);
						}
						break;
					case 2:
						if(winding3) {
							_this.paintType.cornerColors(col04,col14,col04);
						} else {
							_this.paintType.cornerColors(col04,col04,col14);
						}
						break;
					}
					_this.paintType.next();
				}
			}
		}
		this.theta += 0.1;
	}
});
function TrilateralGradient_main() {
	new TrilateralGradient(1000,1000);
	var divertTrace = new kitGL_glWeb_DivertTrace();
	haxe_Log.trace("TrilateralGradient example",{ fileName : "TrilateralGradient.hx", lineNumber : 15, className : "_TrilateralGradient.TrilateralGradient_Fields_", methodName : "main"});
}
var dsHelper_flat_io_Float32Flat = {};
dsHelper_flat_io_Float32Flat.get_size = function(this1) {
	return this1[1] | 0;
};
dsHelper_flat_io_Float32Flat.set_size = function(this1,id) {
	var pos_ = id;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
var dsHelper_flatInterleave_FloatColorTriangles = {};
dsHelper_flatInterleave_FloatColorTriangles.get_ax = function(this1) {
	return this1[(this1[0] | 0) * 21 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_ax = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_ay = function(this1) {
	return this1[(this1[0] | 0) * 21 + 1 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_ay = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 1 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_az = function(this1) {
	return this1[(this1[0] | 0) * 21 + 2 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_az = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 2 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_redA = function(this1) {
	return this1[(this1[0] | 0) * 21 + 3 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_redA = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 3 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_bx = function(this1) {
	return this1[(this1[0] | 0) * 21 + 7 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_bx = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 7 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_by = function(this1) {
	return this1[(this1[0] | 0) * 21 + 8 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_by = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 8 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_bz = function(this1) {
	return this1[(this1[0] | 0) * 21 + 9 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_bz = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 9 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_redB = function(this1) {
	return this1[(this1[0] | 0) * 21 + 10 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_redB = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 10 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_cx = function(this1) {
	return this1[(this1[0] | 0) * 21 + 14 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_cx = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 14 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_cy = function(this1) {
	return this1[(this1[0] | 0) * 21 + 15 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_cy = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 15 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_cz = function(this1) {
	return this1[(this1[0] | 0) * 21 + 16 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_cz = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 16 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.get_redC = function(this1) {
	return this1[(this1[0] | 0) * 21 + 17 + 2];
};
dsHelper_flatInterleave_FloatColorTriangles.set_redC = function(this1,v) {
	this1[(this1[0] | 0) * 21 + 17 + 2] = v;
	return v;
};
dsHelper_flatInterleave_FloatColorTriangles.triangle = function(this1,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
	dsHelper_flatInterleave_FloatColorTriangles.set_ax(this1,ax_);
	dsHelper_flatInterleave_FloatColorTriangles.set_ay(this1,ay_);
	dsHelper_flatInterleave_FloatColorTriangles.set_az(this1,az_);
	dsHelper_flatInterleave_FloatColorTriangles.set_bx(this1,bx_);
	dsHelper_flatInterleave_FloatColorTriangles.set_by(this1,by_);
	dsHelper_flatInterleave_FloatColorTriangles.set_bz(this1,bz_);
	dsHelper_flatInterleave_FloatColorTriangles.set_cx(this1,cx_);
	dsHelper_flatInterleave_FloatColorTriangles.set_cy(this1,cy_);
	dsHelper_flatInterleave_FloatColorTriangles.set_cz(this1,cz_);
	var windingAdjusted = dsHelper_flatInterleave_FloatColorTriangles.adjustWinding(this1);
	if(windingAdjusted) {
		dsHelper_flatInterleave_FloatColorTriangles.set_ax(this1,ax_);
		dsHelper_flatInterleave_FloatColorTriangles.set_ay(this1,ay_);
		dsHelper_flatInterleave_FloatColorTriangles.set_bx(this1,cx_);
		dsHelper_flatInterleave_FloatColorTriangles.set_by(this1,cy_);
		dsHelper_flatInterleave_FloatColorTriangles.set_cx(this1,bx_);
		dsHelper_flatInterleave_FloatColorTriangles.set_cy(this1,by_);
	}
	return windingAdjusted;
};
dsHelper_flatInterleave_FloatColorTriangles.adjustWinding = function(this1) {
	return dsHelper_flatInterleave_FloatColorTriangles.get_ax(this1) * dsHelper_flatInterleave_FloatColorTriangles.get_by(this1) - dsHelper_flatInterleave_FloatColorTriangles.get_bx(this1) * dsHelper_flatInterleave_FloatColorTriangles.get_ay(this1) + (dsHelper_flatInterleave_FloatColorTriangles.get_bx(this1) * dsHelper_flatInterleave_FloatColorTriangles.get_cy(this1) - dsHelper_flatInterleave_FloatColorTriangles.get_cx(this1) * dsHelper_flatInterleave_FloatColorTriangles.get_by(this1)) + (dsHelper_flatInterleave_FloatColorTriangles.get_cx(this1) * dsHelper_flatInterleave_FloatColorTriangles.get_ay(this1) - dsHelper_flatInterleave_FloatColorTriangles.get_ax(this1) * dsHelper_flatInterleave_FloatColorTriangles.get_cy(this1)) > 0;
};
dsHelper_flatInterleave_FloatColorTriangles.moveDelta = function(this1,dx,dy) {
	var _g = this1;
	dsHelper_flatInterleave_FloatColorTriangles.set_ax(_g,dsHelper_flatInterleave_FloatColorTriangles.get_ax(_g) + dx);
	var _g = this1;
	dsHelper_flatInterleave_FloatColorTriangles.set_ay(_g,dsHelper_flatInterleave_FloatColorTriangles.get_ay(_g) + dy);
	var _g = this1;
	dsHelper_flatInterleave_FloatColorTriangles.set_bx(_g,dsHelper_flatInterleave_FloatColorTriangles.get_bx(_g) + dx);
	var _g = this1;
	dsHelper_flatInterleave_FloatColorTriangles.set_by(_g,dsHelper_flatInterleave_FloatColorTriangles.get_by(_g) + dy);
	var _g = this1;
	dsHelper_flatInterleave_FloatColorTriangles.set_cx(_g,dsHelper_flatInterleave_FloatColorTriangles.get_cx(_g) + dx);
	var _g = this1;
	dsHelper_flatInterleave_FloatColorTriangles.set_cy(_g,dsHelper_flatInterleave_FloatColorTriangles.get_cy(_g) + dy);
};
dsHelper_flatInterleave_FloatColorTriangles.fullHit = function(this1,px,py) {
	if(px > Math.min(Math.min(dsHelper_flatInterleave_FloatColorTriangles.get_ax(this1),dsHelper_flatInterleave_FloatColorTriangles.get_bx(this1)),dsHelper_flatInterleave_FloatColorTriangles.get_cx(this1)) && px < Math.max(Math.max(dsHelper_flatInterleave_FloatColorTriangles.get_ax(this1),dsHelper_flatInterleave_FloatColorTriangles.get_bx(this1)),dsHelper_flatInterleave_FloatColorTriangles.get_cx(this1)) && py > Math.min(Math.min(dsHelper_flatInterleave_FloatColorTriangles.get_ay(this1),dsHelper_flatInterleave_FloatColorTriangles.get_by(this1)),dsHelper_flatInterleave_FloatColorTriangles.get_cy(this1)) && py < Math.max(Math.max(dsHelper_flatInterleave_FloatColorTriangles.get_ay(this1),dsHelper_flatInterleave_FloatColorTriangles.get_by(this1)),dsHelper_flatInterleave_FloatColorTriangles.get_cy(this1))) {
		return true;
	}
	var planeAB = (dsHelper_flatInterleave_FloatColorTriangles.get_ax(this1) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_by(this1) - py) - (dsHelper_flatInterleave_FloatColorTriangles.get_bx(this1) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_ay(this1) - py);
	var planeBC = (dsHelper_flatInterleave_FloatColorTriangles.get_bx(this1) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_cy(this1) - py) - (dsHelper_flatInterleave_FloatColorTriangles.get_cx(this1) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_by(this1) - py);
	var planeCA = (dsHelper_flatInterleave_FloatColorTriangles.get_cx(this1) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_ay(this1) - py) - (dsHelper_flatInterleave_FloatColorTriangles.get_ax(this1) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_cy(this1) - py);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var kitGL_glWeb_AnimateTimer = function() { };
kitGL_glWeb_AnimateTimer.__name__ = true;
kitGL_glWeb_AnimateTimer.loop = function(tim) {
	window.requestAnimationFrame(kitGL_glWeb_AnimateTimer.loop);
	if(kitGL_glWeb_AnimateTimer.onFrame != null) {
		kitGL_glWeb_AnimateTimer.onFrame(kitGL_glWeb_AnimateTimer.counter);
	}
	kitGL_glWeb_AnimateTimer.counter++;
	return true;
};
var kitGL_glWeb_DivertTrace = function(left_) {
	if(left_ == null) {
		left_ = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	var doc = window.document;
	this.traceDiv = doc.createElement("div");
	doc.body.appendChild(this.traceDiv);
	var dom = this.traceDiv;
	var style = dom.style;
	style.position = "absolute";
	style.top = Std.string(0 + "px");
	style.left = Std.string(left_ + "px");
	style.height = Std.string(500 + "px");
	style.width = Std.string(500 + "px");
	style.zIndex = "99";
	style.overflow = "auto";
	haxe_Log.trace = $bind(this,this.myTrace);
};
kitGL_glWeb_DivertTrace.__name__ = true;
kitGL_glWeb_DivertTrace.prototype = {
	myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
};
var kitGL_glWeb_Sheet = function() {
};
kitGL_glWeb_Sheet.__name__ = true;
kitGL_glWeb_Sheet.prototype = {
	create: function(width_,height_,autoChild) {
		if(autoChild == null) {
			autoChild = false;
		}
		if(height_ == null) {
			height_ = 600;
		}
		if(width_ == null) {
			width_ = 600;
		}
		this.width = width_;
		this.height = height_;
		this.canvasGL = window.document.createElement("canvas");
		this.canvasGL.width = this.width;
		this.canvasGL.height = this.height;
		this.domGL = this.canvasGL;
		var style = this.domGL.style;
		style.paddingLeft = Std.string(0 + "px");
		style.paddingTop = Std.string(0 + "px");
		style.left = Std.string(0 + "px");
		style.top = Std.string(0 + "px");
		style.position = "absolute";
		if(autoChild) {
			window.document.body.appendChild(this.canvasGL);
		}
		this.canvas2D = window.document.createElement("canvas");
		this.canvas2D.width = this.width;
		this.canvas2D.height = this.height;
		this.domGL2D = this.canvasGL;
		var style = this.domGL.style;
		style.paddingLeft = Std.string(0 + "px");
		style.paddingTop = Std.string(0 + "px");
		style.left = Std.string(0 + "px");
		style.top = Std.string(0 + "px");
		style.position = "absolute";
		if(autoChild) {
			window.document.body.appendChild(this.canvas2D);
		}
		this.gl = this.canvasGL.getContext("webgl",{ premultipliedAlpha : false});
		this.cx = this.canvas2D.getContext("2d");
	}
};
var trilateral3_Trilateral = function() { };
trilateral3_Trilateral.__name__ = true;
var trilateral3_drawing_Pen = function(paintType_) {
	this.currentColor = 16435934;
	this.useTexture = false;
	this.z2D = 0.;
	this.paintType = paintType_;
};
trilateral3_drawing_Pen.__name__ = true;
trilateral3_drawing_Pen.tweenWrap = function(tweenEquation) {
	return function(t) {
		return tweenEquation(t,0,1,1);
	};
};
var trilateral3_geom_FlatColorTriangles = {};
trilateral3_geom_FlatColorTriangles.transform = function(this1,m) {
	var pa = new trilateral3_matrix_Vertex(dsHelper_flatInterleave_FloatColorTriangles.get_ax(this1),dsHelper_flatInterleave_FloatColorTriangles.get_ay(this1),dsHelper_flatInterleave_FloatColorTriangles.get_az(this1),1.);
	var pb = new trilateral3_matrix_Vertex(dsHelper_flatInterleave_FloatColorTriangles.get_bx(this1),dsHelper_flatInterleave_FloatColorTriangles.get_by(this1),dsHelper_flatInterleave_FloatColorTriangles.get_bz(this1),1.);
	var pc = new trilateral3_matrix_Vertex(dsHelper_flatInterleave_FloatColorTriangles.get_cx(this1),dsHelper_flatInterleave_FloatColorTriangles.get_cy(this1),dsHelper_flatInterleave_FloatColorTriangles.get_cz(this1),1.);
	var v2 = new trilateral3_matrix_Vertex(m.a * pa.x + m.b * pa.y + m.c * pa.z + m.d,m.e * pa.x + m.f * pa.y + m.g * pa.z + m.h,m.i * pa.x + m.j * pa.y + m.k * pa.z + m.l,1.);
	pa = v2;
	var v2 = new trilateral3_matrix_Vertex(m.a * pb.x + m.b * pb.y + m.c * pb.z + m.d,m.e * pb.x + m.f * pb.y + m.g * pb.z + m.h,m.i * pb.x + m.j * pb.y + m.k * pb.z + m.l,1.);
	pb = v2;
	var v2 = new trilateral3_matrix_Vertex(m.a * pc.x + m.b * pc.y + m.c * pc.z + m.d,m.e * pc.x + m.f * pc.y + m.g * pc.z + m.h,m.i * pc.x + m.j * pc.y + m.k * pc.z + m.l,1.);
	pc = v2;
	dsHelper_flatInterleave_FloatColorTriangles.set_ax(this1,pa.x);
	dsHelper_flatInterleave_FloatColorTriangles.set_ay(this1,pa.y);
	dsHelper_flatInterleave_FloatColorTriangles.set_az(this1,pa.z);
	dsHelper_flatInterleave_FloatColorTriangles.set_bx(this1,pb.x);
	dsHelper_flatInterleave_FloatColorTriangles.set_by(this1,pb.y);
	dsHelper_flatInterleave_FloatColorTriangles.set_bz(this1,pb.z);
	dsHelper_flatInterleave_FloatColorTriangles.set_cx(this1,pc.x);
	dsHelper_flatInterleave_FloatColorTriangles.set_cy(this1,pc.y);
	dsHelper_flatInterleave_FloatColorTriangles.set_cz(this1,pc.z);
};
trilateral3_geom_FlatColorTriangles.transformRange = function(this1,m,startEnd) {
	var start = startEnd.start;
	var end = startEnd.end;
	this1[0] = start;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	if(end > dsHelper_flat_io_Float32Flat.get_size(this1) - 1) {
		dsHelper_flat_io_Float32Flat.get_size(this1);
	}
	var _g = start;
	var _g1 = end + 1;
	while(_g < _g1) {
		var i = _g++;
		trilateral3_geom_FlatColorTriangles.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
var trilateral3_matrix_MatrixDozen = function(a,b,c,d,e,f,g,h,i,j,k,l) {
	this.l = 0.;
	this.k = 0.;
	this.j = 0.;
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
	this.j = j;
	this.k = k;
	this.l = l;
};
trilateral3_matrix_MatrixDozen.__name__ = true;
var trilateral3_matrix_Vertex = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	this.w = 1.;
	this.z = 0.;
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
trilateral3_matrix_Vertex.__name__ = true;
var trilateral3_nodule_PenNodule = function(useGLScale) {
	if(useGLScale == null) {
		useGLScale = true;
	}
	var this1 = new Float32Array(trilateral3_nodule_PenNodule.largeEnough + 2);
	this1[0] = 0.;
	this1[1] = 0.;
	this.colorTriangles = this1;
	if(useGLScale) {
		var transform1000 = new trilateral3_matrix_MatrixDozen(0.001,0,0,-1,0,-0.001,0,1,0,0,0.001,0);
		trilateral3_Trilateral.transformMatrix = transform1000;
	}
	this.createPen();
};
trilateral3_nodule_PenNodule.__name__ = true;
trilateral3_nodule_PenNodule.prototype = {
	createPen: function() {
		var t = this.colorTriangles;
		var _e = t;
		var _e1 = t;
		var _e2 = t;
		var _e3 = t;
		var _e4 = t;
		var _e5 = t;
		var _e6 = t;
		var _e7 = t;
		var _e8 = t;
		var _e9 = t;
		var _e10 = t;
		var _e11 = t;
		var _e12 = t;
		var _e13 = t;
		var _e14 = t;
		var _e15 = t;
		var _e16 = t;
		var triangleAbstract = { rotate : function(x,y,theta) {
			var cos = Math.cos(theta);
			var sin = Math.sin(theta);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_ax(_g,dsHelper_flatInterleave_FloatColorTriangles.get_ax(_g) - x);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_ay(_g,dsHelper_flatInterleave_FloatColorTriangles.get_ay(_g) - y);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_bx(_g,dsHelper_flatInterleave_FloatColorTriangles.get_bx(_g) - x);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_by(_g,dsHelper_flatInterleave_FloatColorTriangles.get_by(_g) - y);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_cx(_g,dsHelper_flatInterleave_FloatColorTriangles.get_cx(_g) - x);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_cy(_g,dsHelper_flatInterleave_FloatColorTriangles.get_cy(_g) - y);
			var dx = dsHelper_flatInterleave_FloatColorTriangles.get_ax(_e);
			var dy = dsHelper_flatInterleave_FloatColorTriangles.get_ay(_e);
			dsHelper_flatInterleave_FloatColorTriangles.set_ax(_e,dx * cos - dy * sin);
			dsHelper_flatInterleave_FloatColorTriangles.set_ay(_e,dx * sin + dy * cos);
			dx = dsHelper_flatInterleave_FloatColorTriangles.get_bx(_e);
			dy = dsHelper_flatInterleave_FloatColorTriangles.get_by(_e);
			dsHelper_flatInterleave_FloatColorTriangles.set_bx(_e,dx * cos - dy * sin);
			dsHelper_flatInterleave_FloatColorTriangles.set_by(_e,dx * sin + dy * cos);
			dx = dsHelper_flatInterleave_FloatColorTriangles.get_cx(_e);
			dy = dsHelper_flatInterleave_FloatColorTriangles.get_cy(_e);
			dsHelper_flatInterleave_FloatColorTriangles.set_cx(_e,dx * cos - dy * sin);
			dsHelper_flatInterleave_FloatColorTriangles.set_cy(_e,dx * sin + dy * cos);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_ax(_g,dsHelper_flatInterleave_FloatColorTriangles.get_ax(_g) + x);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_ay(_g,dsHelper_flatInterleave_FloatColorTriangles.get_ay(_g) + y);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_bx(_g,dsHelper_flatInterleave_FloatColorTriangles.get_bx(_g) + x);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_by(_g,dsHelper_flatInterleave_FloatColorTriangles.get_by(_g) + y);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_cx(_g,dsHelper_flatInterleave_FloatColorTriangles.get_cx(_g) + x);
			var _g = _e;
			dsHelper_flatInterleave_FloatColorTriangles.set_cy(_g,dsHelper_flatInterleave_FloatColorTriangles.get_cy(_g) + y);
		}, moveDelta : function(dx,dy) {
			dsHelper_flatInterleave_FloatColorTriangles.moveDelta(_e1,dx,dy);
		}, rotateTrig : function(x,y,cos,sin) {
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_ax(_g,dsHelper_flatInterleave_FloatColorTriangles.get_ax(_g) - x);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_ay(_g,dsHelper_flatInterleave_FloatColorTriangles.get_ay(_g) - y);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_bx(_g,dsHelper_flatInterleave_FloatColorTriangles.get_bx(_g) - x);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_by(_g,dsHelper_flatInterleave_FloatColorTriangles.get_by(_g) - y);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_cx(_g,dsHelper_flatInterleave_FloatColorTriangles.get_cx(_g) - x);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_cy(_g,dsHelper_flatInterleave_FloatColorTriangles.get_cy(_g) - y);
			var dx = dsHelper_flatInterleave_FloatColorTriangles.get_ax(_e2);
			var dy = dsHelper_flatInterleave_FloatColorTriangles.get_ay(_e2);
			dsHelper_flatInterleave_FloatColorTriangles.set_ax(_e2,dx * cos - dy * sin);
			dsHelper_flatInterleave_FloatColorTriangles.set_ay(_e2,dx * sin + dy * cos);
			dx = dsHelper_flatInterleave_FloatColorTriangles.get_bx(_e2);
			dy = dsHelper_flatInterleave_FloatColorTriangles.get_by(_e2);
			dsHelper_flatInterleave_FloatColorTriangles.set_bx(_e2,dx * cos - dy * sin);
			dsHelper_flatInterleave_FloatColorTriangles.set_by(_e2,dx * sin + dy * cos);
			dx = dsHelper_flatInterleave_FloatColorTriangles.get_cx(_e2);
			dy = dsHelper_flatInterleave_FloatColorTriangles.get_cy(_e2);
			dsHelper_flatInterleave_FloatColorTriangles.set_cx(_e2,dx * cos - dy * sin);
			dsHelper_flatInterleave_FloatColorTriangles.set_cy(_e2,dx * sin + dy * cos);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_ax(_g,dsHelper_flatInterleave_FloatColorTriangles.get_ax(_g) + x);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_ay(_g,dsHelper_flatInterleave_FloatColorTriangles.get_ay(_g) + y);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_bx(_g,dsHelper_flatInterleave_FloatColorTriangles.get_bx(_g) + x);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_by(_g,dsHelper_flatInterleave_FloatColorTriangles.get_by(_g) + y);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_cx(_g,dsHelper_flatInterleave_FloatColorTriangles.get_cx(_g) + x);
			var _g = _e2;
			dsHelper_flatInterleave_FloatColorTriangles.set_cy(_g,dsHelper_flatInterleave_FloatColorTriangles.get_cy(_g) + y);
		}, fullHit : function(px,py) {
			return dsHelper_flatInterleave_FloatColorTriangles.fullHit(_e3,px,py);
		}, liteHit : function(px,py) {
			var planeAB = (dsHelper_flatInterleave_FloatColorTriangles.get_ax(_e4) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_by(_e4) - py) - (dsHelper_flatInterleave_FloatColorTriangles.get_bx(_e4) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_ay(_e4) - py);
			var planeBC = (dsHelper_flatInterleave_FloatColorTriangles.get_bx(_e4) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_cy(_e4) - py) - (dsHelper_flatInterleave_FloatColorTriangles.get_cx(_e4) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_by(_e4) - py);
			var planeCA = (dsHelper_flatInterleave_FloatColorTriangles.get_cx(_e4) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_ay(_e4) - py) - (dsHelper_flatInterleave_FloatColorTriangles.get_ax(_e4) - px) * (dsHelper_flatInterleave_FloatColorTriangles.get_cy(_e4) - py);
			if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
				return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
			} else {
				return false;
			}
		}, get_bottom : function() {
			return Math.max(Math.max(dsHelper_flatInterleave_FloatColorTriangles.get_ay(_e5),dsHelper_flatInterleave_FloatColorTriangles.get_by(_e5)),dsHelper_flatInterleave_FloatColorTriangles.get_cy(_e5));
		}, get_back : function() {
			return Math.max(Math.max(dsHelper_flatInterleave_FloatColorTriangles.get_az(_e6),dsHelper_flatInterleave_FloatColorTriangles.get_bz(_e6)),dsHelper_flatInterleave_FloatColorTriangles.get_cz(_e6));
		}, get_right : function() {
			return Math.max(Math.max(dsHelper_flatInterleave_FloatColorTriangles.get_ax(_e7),dsHelper_flatInterleave_FloatColorTriangles.get_bx(_e7)),dsHelper_flatInterleave_FloatColorTriangles.get_cx(_e7));
		}, get_x : function() {
			return Math.min(Math.min(dsHelper_flatInterleave_FloatColorTriangles.get_ax(_e8),dsHelper_flatInterleave_FloatColorTriangles.get_bx(_e8)),dsHelper_flatInterleave_FloatColorTriangles.get_cx(_e8));
		}, set_x : function(x) {
			var dx = x - Math.min(Math.min(dsHelper_flatInterleave_FloatColorTriangles.get_ax(_e9),dsHelper_flatInterleave_FloatColorTriangles.get_bx(_e9)),dsHelper_flatInterleave_FloatColorTriangles.get_cx(_e9));
			dsHelper_flatInterleave_FloatColorTriangles.set_ax(_e9,dsHelper_flatInterleave_FloatColorTriangles.get_ax(_e9) + dx);
			dsHelper_flatInterleave_FloatColorTriangles.set_bx(_e9,dsHelper_flatInterleave_FloatColorTriangles.get_bx(_e9) + dx);
			dsHelper_flatInterleave_FloatColorTriangles.set_cx(_e9,dsHelper_flatInterleave_FloatColorTriangles.get_cx(_e9) + dx);
			return x;
		}, get_y : function() {
			return Math.min(Math.min(dsHelper_flatInterleave_FloatColorTriangles.get_ay(_e10),dsHelper_flatInterleave_FloatColorTriangles.get_by(_e10)),dsHelper_flatInterleave_FloatColorTriangles.get_cy(_e10));
		}, set_y : function(y) {
			var dy = y - Math.min(Math.min(dsHelper_flatInterleave_FloatColorTriangles.get_ay(_e11),dsHelper_flatInterleave_FloatColorTriangles.get_by(_e11)),dsHelper_flatInterleave_FloatColorTriangles.get_cy(_e11));
			dsHelper_flatInterleave_FloatColorTriangles.set_ay(_e11,dsHelper_flatInterleave_FloatColorTriangles.get_ay(_e11) + dy);
			dsHelper_flatInterleave_FloatColorTriangles.set_by(_e11,dsHelper_flatInterleave_FloatColorTriangles.get_by(_e11) + dy);
			dsHelper_flatInterleave_FloatColorTriangles.set_cy(_e11,dsHelper_flatInterleave_FloatColorTriangles.get_cy(_e11) + dy);
			return y;
		}, get_z : function() {
			return Math.min(Math.min(dsHelper_flatInterleave_FloatColorTriangles.get_az(_e12),dsHelper_flatInterleave_FloatColorTriangles.get_bz(_e12)),dsHelper_flatInterleave_FloatColorTriangles.get_cz(_e12));
		}, set_z : function(z) {
			var dz = z - Math.min(Math.min(dsHelper_flatInterleave_FloatColorTriangles.get_az(_e13),dsHelper_flatInterleave_FloatColorTriangles.get_bz(_e13)),dsHelper_flatInterleave_FloatColorTriangles.get_cz(_e13));
			dsHelper_flatInterleave_FloatColorTriangles.set_az(_e13,dsHelper_flatInterleave_FloatColorTriangles.get_az(_e13) + dz);
			dsHelper_flatInterleave_FloatColorTriangles.set_bz(_e13,dsHelper_flatInterleave_FloatColorTriangles.get_bz(_e13) + dz);
			dsHelper_flatInterleave_FloatColorTriangles.set_cz(_e13,dsHelper_flatInterleave_FloatColorTriangles.get_cz(_e13) + dz);
			return z;
		}, triangle : function(ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
			return dsHelper_flatInterleave_FloatColorTriangles.triangle(_e14,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
		}, getTriangle3D : function() {
			var pa = new trilateral3_matrix_Vertex(dsHelper_flatInterleave_FloatColorTriangles.get_ax(_e15),dsHelper_flatInterleave_FloatColorTriangles.get_ay(_e15),dsHelper_flatInterleave_FloatColorTriangles.get_az(_e15),1.);
			var pb = new trilateral3_matrix_Vertex(dsHelper_flatInterleave_FloatColorTriangles.get_bx(_e15),dsHelper_flatInterleave_FloatColorTriangles.get_by(_e15),dsHelper_flatInterleave_FloatColorTriangles.get_bz(_e15),1.);
			var pc = new trilateral3_matrix_Vertex(dsHelper_flatInterleave_FloatColorTriangles.get_cx(_e15),dsHelper_flatInterleave_FloatColorTriangles.get_cy(_e15),dsHelper_flatInterleave_FloatColorTriangles.get_cz(_e15),1.);
			return new trilateral3_structure_Triangle3D(pa,pb,pc);
		}, transform : function(m) {
			trilateral3_geom_FlatColorTriangles.transform(_e16,m);
		}};
		var _e17 = t;
		var _e18 = t;
		var _e19 = t;
		var _e20 = t;
		var _e21 = t;
		var _e22 = t;
		var _e23 = t;
		var color3Abstract = { set_argb : function(col) {
			dsHelper_flatInterleave_FloatColorTriangles.set_redA(_e17,(col >> 16 & 255) / 255);
			var v = (col & 255) / 255;
			_e17[(_e17[0] | 0) * 21 + 5 + 2] = v;
			var v = (col >> 8 & 255) / 255;
			_e17[(_e17[0] | 0) * 21 + 4 + 2] = v;
			var v = (col >> 24 & 255) / 255;
			_e17[(_e17[0] | 0) * 21 + 6 + 2] = v;
			dsHelper_flatInterleave_FloatColorTriangles.set_redB(_e17,(col >> 16 & 255) / 255);
			var v = (col & 255) / 255;
			_e17[(_e17[0] | 0) * 21 + 12 + 2] = v;
			var v = (col >> 8 & 255) / 255;
			_e17[(_e17[0] | 0) * 21 + 11 + 2] = v;
			var v = (col >> 24 & 255) / 255;
			_e17[(_e17[0] | 0) * 21 + 13 + 2] = v;
			dsHelper_flatInterleave_FloatColorTriangles.set_redC(_e17,(col >> 16 & 255) / 255);
			var v = (col & 255) / 255;
			_e17[(_e17[0] | 0) * 21 + 19 + 2] = v;
			var v = (col >> 8 & 255) / 255;
			_e17[(_e17[0] | 0) * 21 + 18 + 2] = v;
			var v = (col >> 24 & 255) / 255;
			_e17[(_e17[0] | 0) * 21 + 20 + 2] = v;
			return col;
		}, set_argbA : function(col) {
			dsHelper_flatInterleave_FloatColorTriangles.set_redA(_e18,(col >> 16 & 255) / 255);
			var v = (col & 255) / 255;
			_e18[(_e18[0] | 0) * 21 + 5 + 2] = v;
			var v = (col >> 8 & 255) / 255;
			_e18[(_e18[0] | 0) * 21 + 4 + 2] = v;
			var v = (col >> 24 & 255) / 255;
			_e18[(_e18[0] | 0) * 21 + 6 + 2] = v;
			return col;
		}, get_argbA : function() {
			return Math.round(_e19[(_e19[0] | 0) * 21 + 6 + 2] * 255) << 24 | Math.round(dsHelper_flatInterleave_FloatColorTriangles.get_redA(_e19) * 255) << 16 | Math.round(_e19[(_e19[0] | 0) * 21 + 4 + 2] * 255) << 8 | Math.round(_e19[(_e19[0] | 0) * 21 + 5 + 2] * 255);
		}, set_argbB : function(col) {
			dsHelper_flatInterleave_FloatColorTriangles.set_redB(_e20,(col >> 16 & 255) / 255);
			var v = (col & 255) / 255;
			_e20[(_e20[0] | 0) * 21 + 12 + 2] = v;
			var v = (col >> 8 & 255) / 255;
			_e20[(_e20[0] | 0) * 21 + 11 + 2] = v;
			var v = (col >> 24 & 255) / 255;
			_e20[(_e20[0] | 0) * 21 + 13 + 2] = v;
			return col;
		}, get_argbB : function() {
			return Math.round(_e21[(_e21[0] | 0) * 21 + 13 + 2] * 255) << 24 | Math.round(dsHelper_flatInterleave_FloatColorTriangles.get_redB(_e21) * 255) << 16 | Math.round(_e21[(_e21[0] | 0) * 21 + 11 + 2] * 255) << 8 | Math.round(_e21[(_e21[0] | 0) * 21 + 12 + 2] * 255);
		}, set_argbC : function(col) {
			dsHelper_flatInterleave_FloatColorTriangles.set_redC(_e22,(col >> 16 & 255) / 255);
			var v = (col & 255) / 255;
			_e22[(_e22[0] | 0) * 21 + 19 + 2] = v;
			var v = (col >> 8 & 255) / 255;
			_e22[(_e22[0] | 0) * 21 + 18 + 2] = v;
			var v = (col >> 24 & 255) / 255;
			_e22[(_e22[0] | 0) * 21 + 20 + 2] = v;
			return col;
		}, get_argbC : function() {
			return Math.round(_e23[(_e23[0] | 0) * 21 + 20 + 2] * 255) << 24 | Math.round(dsHelper_flatInterleave_FloatColorTriangles.get_redC(_e23) * 255) << 16 | Math.round(_e23[(_e23[0] | 0) * 21 + 18 + 2] * 255) << 8 | Math.round(_e23[(_e23[0] | 0) * 21 + 19 + 2] * 255);
		}};
		var _e24 = t;
		var _e25 = t;
		var _e26 = t;
		var _e27 = t;
		var _e28 = t;
		var _e29 = t;
		var _e30 = t;
		var _e31 = t;
		var _e32 = t;
		var _e33 = t;
		var _e34 = t;
		var _e35 = t;
		var _e36 = t;
		var paintAbstract = { triangle : function(ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
			return dsHelper_flatInterleave_FloatColorTriangles.triangle(_e24,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
		}, cornerColors : function(colorA,colorB,colorC) {
			dsHelper_flatInterleave_FloatColorTriangles.set_redA(_e25,(colorA >> 16 & 255) / 255);
			var v = (colorA & 255) / 255;
			_e25[(_e25[0] | 0) * 21 + 5 + 2] = v;
			var v = (colorA >> 8 & 255) / 255;
			_e25[(_e25[0] | 0) * 21 + 4 + 2] = v;
			var v = (colorA >> 24 & 255) / 255;
			_e25[(_e25[0] | 0) * 21 + 6 + 2] = v;
			dsHelper_flatInterleave_FloatColorTriangles.set_redB(_e25,(colorB >> 16 & 255) / 255);
			var v = (colorB & 255) / 255;
			_e25[(_e25[0] | 0) * 21 + 12 + 2] = v;
			var v = (colorB >> 8 & 255) / 255;
			_e25[(_e25[0] | 0) * 21 + 11 + 2] = v;
			var v = (colorB >> 24 & 255) / 255;
			_e25[(_e25[0] | 0) * 21 + 13 + 2] = v;
			dsHelper_flatInterleave_FloatColorTriangles.set_redC(_e25,(colorC >> 16 & 255) / 255);
			var v = (colorC & 255) / 255;
			_e25[(_e25[0] | 0) * 21 + 19 + 2] = v;
			var v = (colorC >> 8 & 255) / 255;
			_e25[(_e25[0] | 0) * 21 + 18 + 2] = v;
			var v = (colorC >> 24 & 255) / 255;
			_e25[(_e25[0] | 0) * 21 + 20 + 2] = v;
		}, colorTriangles : function(color,times) {
			var _g = 0;
			var _g1 = times;
			while(_g < _g1) {
				var i = _g++;
				dsHelper_flatInterleave_FloatColorTriangles.set_redA(_e26,(color >> 16 & 255) / 255);
				var v = (color & 255) / 255;
				_e26[(_e26[0] | 0) * 21 + 5 + 2] = v;
				var v1 = (color >> 8 & 255) / 255;
				_e26[(_e26[0] | 0) * 21 + 4 + 2] = v1;
				var v2 = (color >> 24 & 255) / 255;
				_e26[(_e26[0] | 0) * 21 + 6 + 2] = v2;
				dsHelper_flatInterleave_FloatColorTriangles.set_redB(_e26,(color >> 16 & 255) / 255);
				var v3 = (color & 255) / 255;
				_e26[(_e26[0] | 0) * 21 + 12 + 2] = v3;
				var v4 = (color >> 8 & 255) / 255;
				_e26[(_e26[0] | 0) * 21 + 11 + 2] = v4;
				var v5 = (color >> 24 & 255) / 255;
				_e26[(_e26[0] | 0) * 21 + 13 + 2] = v5;
				dsHelper_flatInterleave_FloatColorTriangles.set_redC(_e26,(color >> 16 & 255) / 255);
				var v6 = (color & 255) / 255;
				_e26[(_e26[0] | 0) * 21 + 19 + 2] = v6;
				var v7 = (color >> 8 & 255) / 255;
				_e26[(_e26[0] | 0) * 21 + 18 + 2] = v7;
				var v8 = (color >> 24 & 255) / 255;
				_e26[(_e26[0] | 0) * 21 + 20 + 2] = v8;
				var pos_ = _e26[0] + 1;
				_e26[0] = pos_;
				if(_e26[0] > _e26[1] - 1) {
					_e26[1] = _e26[0];
				}
			}
		}, getTriInt : function() {
			return new trilateral3_structure_TriInt(Math.round(_e27[(_e27[0] | 0) * 21 + 6 + 2] * 255) << 24 | Math.round(dsHelper_flatInterleave_FloatColorTriangles.get_redA(_e27) * 255) << 16 | Math.round(_e27[(_e27[0] | 0) * 21 + 4 + 2] * 255) << 8 | Math.round(_e27[(_e27[0] | 0) * 21 + 5 + 2] * 255),Math.round(_e27[(_e27[0] | 0) * 21 + 13 + 2] * 255) << 24 | Math.round(dsHelper_flatInterleave_FloatColorTriangles.get_redB(_e27) * 255) << 16 | Math.round(_e27[(_e27[0] | 0) * 21 + 11 + 2] * 255) << 8 | Math.round(_e27[(_e27[0] | 0) * 21 + 12 + 2] * 255),Math.round(_e27[(_e27[0] | 0) * 21 + 20 + 2] * 255) << 24 | Math.round(dsHelper_flatInterleave_FloatColorTriangles.get_redC(_e27) * 255) << 16 | Math.round(_e27[(_e27[0] | 0) * 21 + 18 + 2] * 255) << 8 | Math.round(_e27[(_e27[0] | 0) * 21 + 19 + 2] * 255));
		}, transform : function(m) {
			trilateral3_geom_FlatColorTriangles.transform(_e28,m);
		}, transformRange : function(m,startEnd) {
			trilateral3_geom_FlatColorTriangles.transformRange(_e29,m,startEnd);
		}, getTriangle3D : function() {
			var pa = new trilateral3_matrix_Vertex(dsHelper_flatInterleave_FloatColorTriangles.get_ax(_e30),dsHelper_flatInterleave_FloatColorTriangles.get_ay(_e30),dsHelper_flatInterleave_FloatColorTriangles.get_az(_e30),1.);
			var pb = new trilateral3_matrix_Vertex(dsHelper_flatInterleave_FloatColorTriangles.get_bx(_e30),dsHelper_flatInterleave_FloatColorTriangles.get_by(_e30),dsHelper_flatInterleave_FloatColorTriangles.get_bz(_e30),1.);
			var pc = new trilateral3_matrix_Vertex(dsHelper_flatInterleave_FloatColorTriangles.get_cx(_e30),dsHelper_flatInterleave_FloatColorTriangles.get_cy(_e30),dsHelper_flatInterleave_FloatColorTriangles.get_cz(_e30),1.);
			return new trilateral3_structure_Triangle3D(pa,pb,pc);
		}, next : function() {
			var pos_ = _e31[0] + 1.;
			_e31[0] = pos_;
			if(_e31[0] > _e31[1] - 1) {
				_e31[1] = _e31[0];
			}
			return _e31[0];
		}, hasNext : function() {
			return _e32[0] < dsHelper_flat_io_Float32Flat.get_size(_e32);
		}, get_pos : function() {
			return _e33[0];
		}, set_pos : function(pos_) {
			_e34[0] = pos_;
			if(_e34[0] > _e34[1] - 1) {
				_e34[1] = _e34[0];
			}
			return pos_;
		}, get_size : function() {
			return dsHelper_flat_io_Float32Flat.get_size(_e35);
		}, set_size : function(id) {
			return dsHelper_flat_io_Float32Flat.set_size(_e36,id);
		}, triangleCurrent : triangleAbstract, color3current : color3Abstract};
		this.pen = new trilateral3_drawing_Pen(paintAbstract);
		return this.pen;
	}
	,get_data: function() {
		var this1 = this.colorTriangles;
		return this1.subarray(2,dsHelper_flat_io_Float32Flat.get_size(this1) * 21 + 2);
	}
	,get_size: function() {
		return dsHelper_flat_io_Float32Flat.get_size(this.colorTriangles) * 3 | 0;
	}
};
var trilateral3_structure_Quad2D = function(a,b,c,d) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
};
trilateral3_structure_Quad2D.__name__ = true;
var trilateral3_structure_StartEnd = function(start,end) {
	this.start = start;
	this.end = end;
};
trilateral3_structure_StartEnd.__name__ = true;
var trilateral3_structure_TriInt = function(a,b,c) {
	this.a = a;
	this.b = b;
	this.c = c;
};
trilateral3_structure_TriInt.__name__ = true;
var trilateral3_structure_Triangle3D = function(a,b,c) {
	this.a = a;
	this.b = b;
	this.c = c;
};
trilateral3_structure_Triangle3D.__name__ = true;
var trilateral3_structure_XY = function(x,y) {
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
};
trilateral3_structure_XY.__name__ = true;
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
kitGL_glWeb_AnimateTimer.counter = 0;
trilateral3_nodule_PenNodule.largeEnough = 20000000;
TrilateralGradient_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
